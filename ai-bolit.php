<?php
///////////////////////////////////////////////////////////////////////////
// Version: 31.16.0
// Copyright 2018-2023 CloudLinux Software Inc.
///////////////////////////////////////////////////////////////////////////

ini_set('memory_limit', '1G');
ini_set('xdebug.max_nesting_level', 500);

define('SHORT_PHP_TAG', strtolower(ini_get('short_open_tag')) == 'on' || strtolower(ini_get('short_open_tag')) == 1);
define('FUNC_HRTIME',               function_exists('hrtime'));
define('FUNC_ICONV',                function_exists('iconv') && is_callable('iconv'));
define('FUNC_JSON_ENCODE',          function_exists('json_encode'));
define('FUNC_MEMORY_USAGE',         function_exists('memory_get_usage'));
define('FUNC_MEMORY_PEAK_USAGE',    function_exists('memory_get_peak_usage'));

define('CLS_DECISION_MAKING_STATS', true);
define('CLS_PERFORMANCE_STATS',     true);
define('CLS_PROC_STATS',            true);
define('CLS_PROGRESS',              true);
define('CLS_SCAN_CHECKERS',         true);

//////////////////////////////////////////////////////////////////////////
$vars = new Variables();
$vars->users = new UserList();
HyperScan::init();
Progress::init();
Progress::setPrintFunc('stdOut');
//IniConfig::parse(__DIR__ . '/config.ini');
PerformanceStats::initPerformanceItems();

$lang = 'EN';
$snum = '';
$BOOL_RESULT = false;

if (isCli()) {
    if (strpos($argv[$argc - 1], '--eng') !== false) {
        $lang = 'EN';
    }
} else {
    define('NEED_REPORT', true);
}

Translate::setLang($lang);

// put 1 for expert mode, 0 for basic check and 2 for paranoid mode
// установите 1 для режима "Обычное сканирование", 0 для быстрой проверки и 2 для параноидальной проверки (диагностика при лечении сайтов)
define('AI_EXPERT_MODE', 2);

define('CLOUD_ASSIST_LIMIT', 5000);

$defaults = [
    'path'                  => __DIR__,
    'scan_all_files'        => (AI_EXPERT_MODE == 2), // full scan (rather than just a .js, .php, .html, .htaccess)
    'scan_delay'            => 0, // delay in file scanning to reduce system load
    'max_size_to_scan'      => '650K',
    'max_size_to_cloudscan' => '650K',
    'no_rw_dir'             => 0,
    'skip_ext'              => '',
    'report_mask'           => JSONReport::REPORT_MASK_FULL,
    'use_template_in_path'  => false,
];

define('DEBUG_MODE', 0);
define('DEBUG_PERFORMANCE', 0);
define('DEBUG_SLOW_FILES_COUNT', 10);
define('DEBUG_SLOW_FILES_MIN_TIME', 0.5);

define('AIBOLIT_START_TIME', time());
define('START_TIME', AibolitHelpers::currentTime());

define('DIR_SEPARATOR', '/');

define('AIBOLIT_MAX_NUMBER', 200);

define('MIN_FILE_SIZE_FOR_CHECK', 12); //12b - The minimum possible file size for the initial checking
define('MAX_FILE_SIZE_FOR_CHECK', 268435456); //256Mb - The maximum possible file size for the initial checking


define('DOUBLECHECK_FILE', 'AI-BOLIT-DOUBLECHECK.php');

if ((isset($_SERVER['OS']) && stripos('Win', $_SERVER['OS']) !== false)) {
    define('DIR_SEPARATOR', '\\');
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

if (!(function_exists("file_put_contents") && is_callable("file_put_contents"))) {
    echo "#####################################################\n";
    echo "file_put_contents() is disabled. Cannot proceed.\n";
    echo "#####################################################\n";
    exit;
}

define('AI_VERSION', '31.16.0');

////////////////////////////////////////////////////////////////////////////
$g_SpecificExt = false;

$g_UpdatedJsonLog      = 0;

error_reporting(E_ALL ^ E_NOTICE ^ E_WARNING);
srand(time());

set_time_limit(0);
ini_set('max_execution_time', '900000');
ini_set('realpath_cache_size', '16M');
ini_set('realpath_cache_ttl', '1200');
ini_set('pcre.backtrack_limit', '1000000');
ini_set('pcre.recursion_limit', '200000');
ini_set('pcre.jit', '1');

$filter = new FileFilter();

$finder = new Finder($filter);

$finder->setCollectSymlinks(true);

if (!function_exists('stripos')) {
    function stripos($par_Str, $par_Entry, $Offset = 0) {
        return strpos(strtolower($par_Str), strtolower($par_Entry), $Offset);
    }
}

/**
 * Determine php script is called from the command line interface
 * @return bool
 */
function isCli() {
    return PHP_SAPI == 'cli';
}

/**
 * Print to console
 * @param mixed $text
 * @param bool $add_lb Add line break
 * @return void
 */
function stdOut($text, $add_lb = true) {
    if (!isCli()) {
        return;
    }

    if (is_bool($text)) {
        $text = $text ? 'true' : 'false';
    } else if (is_null($text)) {
        $text = 'null';
    }
    if (!is_scalar($text)) {
        $text = print_r($text, true);
    }

    if (defined('BOOL_RESULT') && (!BOOL_RESULT) && (!JSON_STDOUT)) {
        @fwrite(STDOUT, $text . ($add_lb ? "\n" : ''));
    }
}

if (isCli()) {

    $cli_options = [
        'y'     => 'deobfuscate',
        'c:'    => 'avdb:',
        'm:'    => 'memory:',
        's:'    => 'size:',
        'a'     => 'all',
        'd:'    => 'delay:',
        'l:'    => 'list:',
        'r:'    => 'report:',
        'f'     => 'fast',
        'j:'    => 'file:',
        'p:'    => 'path:',
        'q'     => 'quite',
        'x:'    => 'mode:',
        'k:'    => 'skip:',
        'o:'    => 'json_report:',
        't:'    => 'php_report:',
        'z:'    => 'progress:',
        'g:'    => 'handler:',
        'b'     => 'smart',
        'u:'    => 'username:',
        'h'     => 'help',
        'v'     => 'version',
        'e'     => 'emu_offsets'
    ];

    $cli_longopts = [
        'cmd:',
        'noprefix:',
        'addprefix:',
        'scan:',
        'one-pass',
        'with-2check',
        'no-html',
        'json-stdout',
        'listing:',
        'encode-b64-fn',
        'cloud-assist:',
        'cloudscan-size:',
        'with-suspicious',
        'rapid-account-scan:',
        'rapid-account-scan-type:',
        'extended-report',
        'factory-config:',
        'shared-mem-progress:',
        'create-shared-mem',
        'max-size-scan-bytes:',
        'input-fn-b64-encoded',
        'use-heuristics',
        'use-heuristics-suspicious',
        'use-heuristics-ignore',
        'resident',
        'scan-archive',
        'archive-max-size:',
        'max-num-files-in-archive:',
        'detached:',
        'log:',
        'log-level:',
        'use-template-in-path',
        'ignore-list:',
        'ignore-filenames:',
        'only-filepaths:',
        'skip-files-older:',
        'skip-root-owner',
        'skip-system-owner',
        'follow-symlink',
        'ignore-quarantine',
        'quiet',
        'use-filters',
        'csv_report:',
        'no-users',
        'stat',
        'skip-imunify360-storage',
        'rapid-scan-rescan-frequency:',
        'do-not-skip-die',
        'hs:',
        'do-not-use-umask',
        'debug-ca:',
    ];


    $cli_longopts = array_merge($cli_longopts, array_values($cli_options));

    $reports = [];

    $options = getopt(implode('', array_keys($cli_options)), $cli_longopts);

    if (isset($options['v']) || isset($options['version'])) {
        echo "\n";
        echo "Version: " . AI_VERSION . "\n";
        echo "Copyright 2018-2023 CloudLinux Software Inc.\n";
        echo "\n";
        exit;
    }
    elseif (isset($options['h']) || isset($options['help'])) {
        $memory_limit = ini_get('memory_limit');
        echo <<<HELP
Revisium AI-Bolit - an Intelligent Malware File Scanner for Websites.

Usage: php {$_SERVER['PHP_SELF']} [OPTIONS] [PATH]
Current default path is: {$defaults['path']}

  Scan target:
    -j, --file=FILE                       Full path to single file to check.
    -p, --path=PATH                       Directory path to scan, by default the file directory is used.
                                          Current path: {$defaults['path']}.
        --use-template-in-path            Use template in path(-p, --path). For example: /home*/*/public_html.
        --listing=FILE                    Scan files from the listing. E.g. --listing=/tmp/myfilelist.txt.
                                          Use --listing=stdin to get listing from stdin stream.
        --input-fn-b64-encoded            Base64 encoded input filenames in --file(-j) or --listing.

  Report formats:
    -r, --report=PATH                     Full path to create html-file with a list of found malware.
                                          By default, if --no-html is not specified, this report is created in the scan folder or in the folder next to the aibolit.
    -o, --json_report=FILE                Full path to create json-file with a list of found malware.
        --csv_report=FILE                 Full path to create csv-file with a list of found malware.
    -t  --php_report=FILE                 Full path to create file with a list of found malware in PHP serialized array format.
    -l, --list=FILE                       Full path to create plain text file with a list of found malware.

        --json-stdout                     Print a report to a console instead of a file(you must use --json_report=. together).
        --no-html                         Disable HTML report.
        --extended-report                 To expand the report.
        --encode-b64-fn                   Encode file names in a report with base64(Only for JSON, PHP and CSV report).
        --stat                            Add stat() data to files in report.
        --no-users                        Disable users list in report(not use in resident mode).
        --noprefix=PREFIX                 Remove the given file path prefix in the report for each file.
        --addprefix=PREFIX                Add the given file path prefix in the report for each file.

  Tracking the work of aibolit:
    -z, --progress=FILE                   Runtime progress of scanning, saved to the file, full path required.
        --shared-mem-progress=<ID>        Runtime progress of scanning, saved to the shared memory <ID>.
        --create-shared-mem               Need to create shared memory segment <ID> for --shared-mem-progress.
        --log=FILE                        Write logs to "FILE".
        --log-level=LEVEL                 Log level(ERROR, DEBUG, INFO, ALL). Default: INFO.

  Filters:
        --ignore-list=FILE                This file will be contain the list of ignored files when scanning.
                                          The files are base64-encoded and occupy one line for one file.
        --ignore-filenames=<templates>    Skip files with the same name by template. Example: *.php,*abc.abc,config.*.
        --only-filepaths=<templates>      Take only the paths matching this pattern. Example: /check/*.php,*.abc.
        --skip-files-older=UNIXTIME       If set then we ignore the files created or modified earlier than the specified date.
        --skip-root-owner                 If set, we skip root's owner files.
        --skip-system-owner               If set, we skip system's owner files.
        --skip-imunify360-storage         If set, we skip /var/imunify360/cleanup_storage.
        --do-not-skip-die                 If set, we don't skip files with die() as first command.
        --follow-symlink                  If set then we follow symlink(for file, if this is a directory, then we go into it anyway).
        --ignore-quarantine               If set, we ignore the files in the folder ".imunify.quarantined" if root is owner of it.
    -s, --size=SIZE                       Scan files are smaller than SIZE with signatures. 0 - All files. Current value: {$defaults['max_size_to_scan']}.
        --max-size-scan-bytes=SIZE        Scan first <bytes> for large(can set by --size) files with signatures.
    -x, --mode=INT                        Set scan mode. 0 - for basic, 1 - for expert and 2 for paranoic.
    -f, --fast                            Scan only specific extensions(they are predefined in the code).
    -a, --all                             Scan all files (by default scan. js,. php,. html,. htaccess).
    -k, --skip=jpg,...                    Skip specific extensions. E.g. --skip=jpg,gif,png,xls,pdf.
        --scan=php,...                    Scan only specific extensions. E.g. --scan=php,htaccess,js.
        --use-filters                     Use Imunify360 filters.
        --smart                           Enable smart mode (skip cache files and optimize scanning).

  Process limitation:
    -m, --memory=SIZE                     Maximum amount of memory a script may consume. Current value: $memory_limit.
                                          Can take shorthand byte values (1M, 1G...).
    -d, --delay=INT                       Delay in milliseconds when scanning files to reduce load on the file system (Default: 1).
    -u, --username=<username>             Run scanner with specific user id and group id, e.g. --username=www-data.
    -q, --quite                           Do not output information about the current scan job to a console.

  Scan options:
    -y, --deobfuscate                     Try to deobfuscate files when scanning.
        --with-suspicious                 Detect suspicious files. Disabled by default.
        --scan-archive                    Scan zip files (Works with Resident mode)
        --archive-max-size=<size>         Scan zip files are smaller than SIZE in megabyte(s) (Works with Resident mode and with --scan-archive option) default 20MB
        --max-num-files-in-archive=<num>  Scan zip total files are smaller than QUANTITY (Works with Resident mode and with --scan-archive option) default 100

  Functional Cloud Assisted:
        --cloud-assist=TOKEN              Enable cloud assisted scanning. Disabled by default.
                                          You can use environment variable CLOUD_ASSIST(exception resident mode), but --cloud-assist has higher priority if both are used.
        --cloudscan-size                  Scan files are smaller than SIZE with cloud assisted scan. 0 - All files. Current value: {$defaults['max_size_to_cloudscan']}.

  Functional Rapid Account Scan(used only with Cloud Assisted):
        --rapid-account-scan=<dir>        Enable rapid account scan. Use <dir> for base db dir. Need to set only root permissions(700).
        --rapid-account-scan-type=<type>  Type rapid account scan. <type> = NONE|ALL|SUSPICIOUS, def:SUSPICIOUS.
        --rapid-scan-rescan-frequency=<n> Rescan RX_GOOD files strategy <n> = 1 = ALL|2 = 1/2|3 = 1/3...

  Scan Modes:
        --resident                        Aibolit work in resident fashion. This requires SystemD to be configured. Uses Imunify360 only.
        --detached=<scan_id>              A mode in which the aiblit can be launched in detached mode and wait for a signal to complete the work. Uses Imunify360 only.

  External Malware DB:
    -c, --avdb                            Connecting an external base with signatures.

  Work with ELF files:
        --use-heuristics                  Enable heuristic algorithms and mark found files as malicious.
        --use-heuristics-suspicious       Enable heuristic algorithms and mark found files as suspicious.
        --use-heuristics-ignore           Enable heuristic algorithms and skip found files.

  Other:
        --hs=<FILEPATH>                   Enable prescan with Hyperscan, full path to hyperscan db required. (Required alt-php-hyperscan package)
        --one-pass                        Do not calculate remaining time(use only with simple mode and detached mode).
        --with-2check                     Create or use AI-BOLIT-DOUBLECHECK.php file.
    -g, --handler=FILE                    External php handler for different events, full path to php file required.
        --cmd="command [args...]"         Run command after scanning.
        --factory-config=<FILEPATH>       For internal use.
        --do-not-use-umask                Aibolit uses umask 0027, but if you use this parameter, then umask will not be set.

    -v, --version                         Display version.
    -h, --help                            Display this help and exit.


HELP;
    exit;
    }

    $l_FastCli = false;

    define('DEBUG_CA', isset($options['debug-ca']));
    define('CA_API_URL_DEBUG', $options['debug-ca'] ?? false);
    define('EMU_LOG_OFFSETS', (isset($options['e']) ?? (isset($options['emu_offsets']) ?? false)));

    if (!isset($options['do-not-use-umask'])) {
        umask(0027);
    }

    if ((isset($options['memory']) && !empty($options['memory']) && ($memory = $options['memory'])) || (isset($options['m']) && !empty($options['m']) && ($memory = $options['m']))) {
        $memory = AibolitHelpers::getBytes($memory);
        if ($memory > 0) {
            $defaults['memory_limit'] = $memory;
            ini_set('memory_limit', $memory);
        }
    }

    if ((isset($options['username']) && !empty($options['username']) && ($username = $options['username']) !== false) || (isset($options['u']) && !empty($options['u']) && ($username = $options['u']) !== false)) {

        if (!empty($username) && ($info = posix_getpwnam($username)) !== false) {
            posix_setgid($info['gid']);
            posix_setuid($info['uid']);
            $defaults['userid']  = $info['uid'];
            $defaults['groupid'] = $info['gid'];
        } else {
            echo ('Invalid username');
            exit(-1);
        }
    }

    AibolitHelpers::setCurrentIds();

    if (isset($options['no-users'])) {
        $vars->users = null;
    }


    $avdb = '';
    if ((isset($options['avdb']) && !empty($options['avdb']) && ($avdb = $options['avdb'])) || (isset($options['c']) && !empty($options['c']) && ($avdb = $options['c']))) {
        if (file_exists($avdb)) {
            $defaults['avdb'] = $avdb;
        }
    }

    if ((isset($options['file']) && !empty($options['file']) && ($file = $options['file']) !== false) || (isset($options['j']) && !empty($options['j']) && ($file = $options['j']) !== false)) {
        define('SCAN_FILE', $file);
    }


    if (isset($options['deobfuscate']) || isset($options['y'])) {
        define('AI_DEOBFUSCATE', true);
    }

    if (isset($options['do-not-skip-die'])) {
        define('SKIP_DIE', false);
    } else {
        define('SKIP_DIE', true);
    }

    if ((isset($options['list']) && !empty($options['list']) && ($file = $options['list']) !== false) || (isset($options['l']) && !empty($options['l']) && ($file = $options['l']) !== false)) {
        $reports[PlainReport::class] = $file;
    }

    if(isset($options['with-2check'])) {
        $reports[DoublecheckReport::class] = DOUBLECHECK_FILE;
    }

    if ((isset($options['listing']) && !empty($options['listing']) && ($listing = $options['listing']) !== false)) {

        if (file_exists($listing) && is_file($listing) && is_readable($listing)) {
            define('LISTING_FILE', $listing);
        }

        if ($listing === 'stdin') {
            define('LISTING_FILE', $listing);
        }
    }

    if ((isset($options['ignore-list']) && !empty($options['ignore-list']) && ($ignore_list_file = $options['ignore-list']) !== false)) {
        if (file_exists($ignore_list_file) && is_file($ignore_list_file) && is_readable($ignore_list_file)) {
            $filter->setIgnoreListFile($ignore_list_file);
        }
    }

    if ((isset($options['ignore-filenames']) && !empty($options['ignore-filenames']) && ($ignore_filenames = $options['ignore-filenames']) !== false)) {
        $filter->setIgnoreFilenames($ignore_filenames);
    }


    if ((isset($options['only-filepaths']) && !empty($options['only-filepaths']) && ($only_filepathes = $options['only-filepaths']) !== false)) {
        $filter->setOnlyFilepaths($only_filepathes);
    }


    if ((isset($options['skip-files-older']) && !empty($options['skip-files-older']) && ($skip_files_older = $options['skip-files-older']) !== false)) {
        $filter->setSkipFilesOlder($skip_files_older);
    }

    if (isset($options['skip-imunify360-storage'])) {
        $filter->setSkipImunifyStorage();
    }

    if (isset($options['skip-root-owner'])) {
        $filter->setSkipRootOwner();
    }

    if (isset($options['skip-system-owner'])) {
        $max_min_uid = getMaxMinUid();
        $filter->setUidRange($max_min_uid);
        $filter->setSkipSystemOwner(true);
        unset($max_min_uid);
    }

    if (isset($options['follow-symlink'])) {
        $filter->setFollowSymlink();
    }

    if (isset($options['ignore-quarantine'])) {
        $filter->setIgnoreQuarantine();
    }

    if (isset($options['use-filters'])) {
        $filter->setImunifyFilters();
    }

    if ((isset($options['json_report']) && !empty($options['json_report']) && ($file = $options['json_report']) !== false) || (isset($options['o']) && !empty($options['o']) && ($file = $options['o']) !== false)) {
        $reports[JSONReport::class] = $file;

        if (!function_exists('json_encode')) {
            die('json_encode function is not available. Enable json extension in php.ini');
        }
    }

    if (isset($options['csv_report']) && !empty($options['csv_report']) && ($file = $options['csv_report']) !== false)  {
        $reports[CSVReport::class] = $file;
    }

    if ((isset($options['php_report']) && !empty($options['php_report']) && ($file = $options['php_report']) !== false) || (isset($options['t']) && !empty($options['t']) && ($file = $options['t']) !== false)) {
        $reports[PHPReport::class] = $file;
    }

    $env_log = getenv('AIBOLIT_RESIDENT_LOG');
    $env_log_level = getenv('AIBOLIT_RESIDENT_LOG_LEVEL');

    if ((isset($options['log']) && !empty($options['log']) && ($log_file = $options['log']) !== false) || ($env_log !== false && ($log_file = $env_log) !== false)) {
        define('LOG_FILE', $log_file);
    } else {
        define('LOG_FILE', null);
    }

    if ((isset($options['log-level']) && !empty($options['log-level']) && ($log_level = $options['log-level']) !== false) || ($env_log_level !== false && ($log_level = $env_log_level) !== false)) {
        define('LOG_LEVEL', $log_level);
    }

    if (defined('LOG_FILE') && !defined('LOG_LEVEL')) {
        define('LOG_LEVEL', 'INFO');
    }

    if ((isset($options['handler']) && !empty($options['handler']) && ($file = $options['handler']) !== false) || (isset($options['g']) && !empty($options['g']) && ($file = $options['g']) !== false)) {
        if (file_exists($file)) {
            define('AIBOLIT_EXTERNAL_HANDLER', $file);
        }
    }

    if ((isset($options['progress']) && !empty($options['progress']) && ($file = $options['progress']) !== false) || (isset($options['z']) && !empty($options['z']) && ($file = $options['z']) !== false)) {
        Progress::setProgressLog($file);
    }

    if (isset($options['create-shared-mem'])) {
        Progress::setCreateSharedMem(true);
    }

    if (isset($options['shared-mem-progress']) && !empty($options['shared-mem-progress']) && ($sh_mem = $options['shared-mem-progress']) !== false) {
        if (!Progress::setSharedMem($sh_mem)) {
            die('Error with shared-memory.');
        }
    }

    if ((isset($options['size']) && ($size = $options['size']) !== false) || (isset($options['s']) && ($size = $options['s']) !== false)) {
        $size                         = AibolitHelpers::getBytes($size);
        $defaults['max_size_to_scan'] = $size > 0 ? $size : 0;
    }

    if (isset($options['cloudscan-size']) && !empty($options['cloudscan-size']) && ($cloudscan_size = $options['cloudscan-size']) !== false) {
        $cloudscan_size                         = AibolitHelpers::getBytes($cloudscan_size);
        $defaults['max_size_to_cloudscan'] = $cloudscan_size > 0 ? $cloudscan_size : 0;
    }

    if (isset($options['max-size-scan-bytes']) && !empty($options['max-size-scan-bytes'])) {
        define('MAX_SIZE_SCAN_BYTES', AibolitHelpers::getBytes($options['max-size-scan-bytes']));
    } else {
        define('MAX_SIZE_SCAN_BYTES', 0);
    }

    if (isset($options['json-stdout'])) {
        define('JSON_STDOUT', true);
    } else {
        define('JSON_STDOUT', false);
    }

    if (isset($options['b']) || isset($options['smart'])) {
        define('SMART_SCAN', 1);
    }

    if (isset($options['f']) || isset($options['fast'])) {
        $l_FastCli = true;
    }

    if (isset($options['q']) || isset($options['quite']) || isset($options['quiet'])) {
        $BOOL_RESULT = true;
    }

    if (isset($options['x'])) {
        define('AI_EXPERT', $options['x']);
    } else if (isset($options['mode'])) {
        define('AI_EXPERT', $options['mode']);
    } else {
        define('AI_EXPERT', AI_EXPERT_MODE);
    }

    if (AI_EXPERT < 2) {
        $g_SpecificExt              = true;
        $defaults['scan_all_files'] = false;
    } else {
        $defaults['scan_all_files'] = true;
    }

    define('BOOL_RESULT', $BOOL_RESULT);

    if ((isset($options['delay']) && !empty($options['delay']) && ($delay = $options['delay']) !== false) || (isset($options['d']) && !empty($options['d']) && ($delay = $options['d']) !== false)) {
        $delay = (int) $delay;
        if (!($delay < 0)) {
            $defaults['scan_delay'] = $delay;
        }
    }

    if ((isset($options['skip']) && !empty($options['skip']) && ($ext_list = $options['skip']) !== false) || (isset($options['k']) && !empty($options['k']) && ($ext_list = $options['k']) !== false)) {
        $defaults['skip_ext'] = $ext_list;
    }

    if (isset($options['scan'])) {
        $ext_list = strtolower(trim($options['scan'], " ,\t\n\r\0\x0B"));
        if ($ext_list != '') {
            $l_FastCli        = true;
            $filter->setSensitiveExt($ext_list);
            $g_SensitiveFiles = $filter->getSensitiveExt();
            $g_SpecificExt = true;
        }
    }

    if (isset($options['rapid-account-scan'])) {
        define('RAPID_ACCOUNT_SCAN', $options['rapid-account-scan']);
    }

    if (defined('RAPID_ACCOUNT_SCAN')) {
        if (isset($options['rapid-account-scan-type'])) {
            define('RAPID_ACCOUNT_SCAN_TYPE', $options['rapid-account-scan-type']);
        }
        else {
            define('RAPID_ACCOUNT_SCAN_TYPE', 'SUSPICIOUS');
        }
    }

    if (!(defined('RAPID_ACCOUNT_SCAN') && RAPID_ACCOUNT_SCAN_TYPE === 'SUSPICIOUS')) {
        $options['rapid-scan-rescan-frequency'] = false;
    }

    if (isset($options['with-suspicious'])) {
        define('AI_EXTRA_WARN', true);
    }

    if (isset($options['extended-report'])) {
        define('EXTENDED_REPORT', true);
    }

    if (isset($options['all'])||isset($options['a'])) {
        $defaults['scan_all_files'] = true;
        $g_SpecificExt              = false;
    }

    if (isset($options['hs'])) {
        define('HS', $options['hs']);
    }

    if (!defined('SMART_SCAN')) {
        define('SMART_SCAN', 0);
    }

    if (!defined('AI_DEOBFUSCATE')) {
        define('AI_DEOBFUSCATE', false);
    }

    if (!defined('AI_EXTRA_WARN')) {
        define('AI_EXTRA_WARN', false);
    }


    $l_SpecifiedPath = false;
    if ((isset($options['path']) && !empty($options['path']) && ($path = $options['path']) !== false)
        || (isset($options['p']) && !empty($options['p']) && ($path = $options['p']) !== false)
    ) {
        $defaults['path'] = realpath($path) ?: $path;
        $l_SpecifiedPath  = true;
    }

    $defaults['use_template_in_path'] = isset($options['use-template-in-path']);

    if (isset($options['noprefix']) && !empty($options['noprefix']) && ($g_NoPrefix = $options['noprefix']) !== false) {
    } else {
        $g_NoPrefix = '';
    }

    if (isset($options['addprefix']) && !empty($options['addprefix']) && ($g_AddPrefix = $options['addprefix']) !== false) {
    } else {
        $g_AddPrefix = '';
    }

    Progress::setPrefixes([Progress::PREFIX_ADD => $g_AddPrefix, Progress::PREFIX_NO => $g_NoPrefix]);

    if (isset($options['use-heuristics-ignore'])) {
        define('USE_HEURISTICS_IGNORE', true);
    }

    if (isset($options['use-heuristics'])) {
        define('USE_HEURISTICS', true);
    }

    if (isset($options['use-heuristics-suspicious'])) {
        define('USE_HEURISTICS_SUSPICIOUS', true);
    }

    if (defined('USE_HEURISTICS') && defined('USE_HEURISTICS_SUSPICIOUS')) {
        die('You can not use --use-heuristic and --use-heuristic-suspicious the same time.');
    }

    $l_SuffixReport = str_replace('/var/www', '', $defaults['path']);
    $l_SuffixReport = str_replace('/home', '', $l_SuffixReport);
    $l_SuffixReport = preg_replace('~[/\\\.\s]~', '_', $l_SuffixReport);
    $l_SuffixReport .= "-" . rand(1, 999999);

    if ((isset($options['report']) && ($report = $options['report']) !== false) || (isset($options['r']) && ($report = $options['r']) !== false)) {
        $report = str_replace('@PATH@', $l_SuffixReport, $report);
        $report = str_replace('@RND@', rand(1, 999999), $report);
        $report = str_replace('@DATE@', date('d-m-Y-h-i'), $report);
        define('REPORT', $report);
        define('NEED_REPORT', true);
    }

    if (isset($options['no-html'])) {
        if (defined('REPORT')) {
            die('You can not use --report(-r) and --no-html the same time.');
        }
        define('REPORT', 'no@email.com');
    }

    defined('ENCODE_FILENAMES_WITH_BASE64') || define('ENCODE_FILENAMES_WITH_BASE64', isset($options['encode-b64-fn']));

    defined('INPUT_FILENAMES_BASE64_ENCODED') || define('INPUT_FILENAMES_BASE64_ENCODED', isset($options['input-fn-b64-encoded']));

    defined('REPORT') || define('REPORT', 'AI-BOLIT-REPORT-' . $l_SuffixReport . '-' . date('d-m-Y_H-i') . '.html');

    $last_arg = max(1, sizeof($_SERVER['argv']) - 1);
    if (isset($_SERVER['argv'][$last_arg])) {
        $path = $_SERVER['argv'][$last_arg];
        if (substr($path, 0, 1) != '-'
            && (substr($_SERVER['argv'][$last_arg - 1], 0, 1) != '-'
                || array_key_exists(substr($_SERVER['argv'][$last_arg - 1], -1), $cli_options)
            )
        ) {
            $defaults['path'] = $path;
        }
    }

    define('ONE_PASS', isset($options['one-pass']));

    // BEGIN of configuring the factory
    $factoryConfig = [
        RapidAccountScan::class             => RapidAccountScan::class,
        RapidScanStorage::class             => RapidScanStorage::class,
        CloudAssistedStorage::class         => CloudAssistedStorage::class,
        DbFolderSpecification::class        => DbFolderSpecification::class,
        CriticalFileSpecification::class    => CriticalFileSpecification::class,
        CloudAssistedRequest::class         => CloudAssistedRequest::class,
        CSVReport::class                    => CSVReport::class,
        JSONReport::class                   => JSONReport::class,
        PHPReport::class                    => PHPReport::class,
        PlainReport::class                  => PlainReport::class,
        DoublecheckReport::class            => DoublecheckReport::class,
        HTMLReport::class                   => HTMLReport::class,
        DetachedMode::class                 => DetachedMode::class,
        ResidentMode::class                 => ResidentMode::class,
        Logger::class                       => Logger::class,
        SendMessageRequest::class           => SendMessageRequest::class,
        ImLicense::class                    => ImLicense::class
    ];

    if (isset($options['factory-config'])) {
        $optionalFactoryConfig = require($options['factory-config']);
        $factoryConfig = array_merge($factoryConfig, $optionalFactoryConfig);
    }

    Factory::configure($factoryConfig);
    // END of configuring the factory

    $imunify_license_filepath = '/var/imunify360/license.json';
    if (!file_exists($imunify_license_filepath)) {
        $imunify_license_filepath = '/var/imunify360/license-free.json';
    }
    $lic = Factory::instance()->create(ImLicense::class, [$imunify_license_filepath, '/usr/share/imunify360/cln-pub.key']);
    $ca_env = getenv('CLOUD_ASSIST');
    if (!isset($options['cloud-assist']) && $ca_env !== false) {
        $options['cloud-assist'] = $ca_env;
    }
    if (isset($options['cloud-assist']) && $options['cloud-assist'] === 'AUTO') {
        $data = $lic->getLicData();
        $options['cloud-assist'] = $data['id'];
    }
    if (isset($options['cloud-assist']) && $options['cloud-assist'] !== false) {
        define('CLOUD_ASSIST_TOKEN', $options['cloud-assist']);
    }

} else {
    define('AI_EXPERT', AI_EXPERT_MODE);
    define('ONE_PASS', true);
}

if (ONE_PASS && defined('CLOUD_ASSIST_TOKEN')) {
    die('Both parameters(one-pass and cloud-assist) not supported');
}

if (defined('RAPID_ACCOUNT_SCAN') && !defined('CLOUD_ASSIST_TOKEN')) {
    die('CloudScan should be enabled');
}

if (Progress::isCreateSharedMem() && Progress::getSharedMem() === null) {
    die('shared-mem-progress should be enabled and ID specified.');
}

if (defined('RAPID_ACCOUNT_SCAN')) {
    if (!file_exists(RAPID_ACCOUNT_SCAN) && !mkdir(RAPID_ACCOUNT_SCAN, 0700, true) && !is_dir(RAPID_ACCOUNT_SCAN)) {
        throw new Exception(sprintf('Directory "%s" was not created', RAPID_ACCOUNT_SCAN));
    }
    $specification = Factory::instance()->create(DbFolderSpecification::class);
    if (!$specification->satisfiedBy(RAPID_ACCOUNT_SCAN)) {
        @unlink(RAPID_ACCOUNT_SCAN);
        die('Rapid DB folder error! Please check the folder.');
    }
}

if (defined('RAPID_ACCOUNT_SCAN_TYPE') && !in_array(RAPID_ACCOUNT_SCAN_TYPE, array('NONE', 'ALL', 'SUSPICIOUS'))) {
    die('Wrong Rapid account scan type');
}

if (defined('RAPID_ACCOUNT_SCAN') && !extension_loaded('leveldb')) {
    die('LevelDB extension needed for Rapid DB');
}

$vars->blackFiles = [];

if (DEBUG_MODE || DEBUG_PERFORMANCE) {
    $debug = new DebugMode(DEBUG_MODE, DEBUG_PERFORMANCE);
} else {
    $debug = null;
}

$vars->signs = new LoadSignaturesForScan(isset($defaults['avdb']) ? $defaults['avdb'] : null, AI_EXPERT, DEBUG_PERFORMANCE);

if (defined('HS')) {
    HyperScan::initExtDb(HS, $vars->signs->getDBMetaInfoVersion());
}

if ($vars->signs->getResult() == $vars->signs::SIGN_EXTERNAL) {
    stdOut('Loaded external signatures from ' . $defaults['avdb']);
} else if ($vars->signs->getResult() == $vars->signs::SIGN_IMPORT) {
    stdOut('Loaded ' . __DIR__ . '/ai-bolit.sig signatures from ai-bolit.sig');
} else if (is_object($debug) && $vars->signs->getResult() == $vars->signs::SIGN_ERROR) {
    $debug->QCR_Debug('Import ai-bolit.sig ' . $vars->signs->getLastError());
}

if (is_object($debug)) {
    $debug->QCR_Debug();
}

if (isset($defaults['userid'])) {
    stdOut('Running from ' . $defaults['userid'] . ':' . $defaults['groupid']);
}

if (AI_EXTRA_WARN) {
    $sign_count = $vars->signs->getDBCountWithSuspicious();
} else {
    $sign_count = $vars->signs->getDBCount();
}

stdOut('Malware signatures: ' . $sign_count);

if ($g_SpecificExt) {
    stdOut("Scan specific extensions: " . implode(',', $g_SensitiveFiles));
}

if (DEBUG_PERFORMANCE) {
    stdOut("Debug Performance Scan");
}

// Init
define('MAX_PREVIEW_LEN', 120);

if (defined('AIBOLIT_EXTERNAL_HANDLER')) {
    include_once(AIBOLIT_EXTERNAL_HANDLER);
    stdOut("\nLoaded external handler: " . AIBOLIT_EXTERNAL_HANDLER . "\n");
}

define('FUNC_AIBOLIT_ON_START',             function_exists('aibolit_onStart'));
define('FUNC_AIBOLIT_ON_PROGRESS_UPDATE',   function_exists('aibolit_onProgressUpdate'));
define('FUNC_AIBOLIT_ON_FATAL_ERROR',       function_exists('aibolit_onFatalError'));
define('FUNC_AIBOLIT_ON_BIGFILE',           function_exists('aibolit_onBigFile'));
define('FUNC_AIBOLIT_ON_READ_ERROR',        function_exists('aibolit_onReadError'));
define('FUNC_AIBOLIT_ON_COMPLETE',          function_exists('aibolit_onComplete'));

if (FUNC_AIBOLIT_ON_START) {
    aibolit_onStart();
}

// Perform full scan when running from command line

if ($l_FastCli) {
    $defaults['scan_all_files'] = false;
}

define('SCAN_ALL_FILES', (bool) $defaults['scan_all_files']);
define('SCAN_DELAY', (int) $defaults['scan_delay']);
define('MAX_SIZE_TO_SCAN', AibolitHelpers::getBytes($defaults['max_size_to_scan']));
define('MAX_SIZE_TO_CLOUDSCAN', AibolitHelpers::getBytes($defaults['max_size_to_cloudscan']));

if (SCAN_ALL_FILES) {
    $filter->setScanAll();
}

if (isset($defaults['memory_limit']) && $defaults['memory_limit'] && ($defaults['memory_limit'] = AibolitHelpers::getBytes($defaults['memory_limit'])) > 0) {
    ini_set('memory_limit', $defaults['memory_limit']);
    stdOut("Changed memory limit to " . $defaults['memory_limit']);
}

if (realpath($defaults['path']) === false) {
    define('ROOT_PATH', $defaults['path']);
} else {
    define('ROOT_PATH', realpath($defaults['path']));
}

if (!ROOT_PATH) {
    if (isCli()) {
        die(stdOut("Directory '{$defaults['path']}' not found!"));
    }
} elseif (!$defaults['use_template_in_path'] && !is_readable(ROOT_PATH) && isCli()) {
    die2(stdOut("Cannot read directory '" . ROOT_PATH . "'!"));
}

define('CURRENT_DIR', getcwd());
if(!$defaults['use_template_in_path']) {
    chdir(ROOT_PATH);
}

if (isCli() && REPORT !== '' && REPORT !== 'no@email.com') {
    $report      = str_replace('\\', '/', REPORT);
    $abs         = strpos($report, '/') === 0 ? DIR_SEPARATOR : '';
    $report      = array_values(array_filter(explode('/', $report)));
    $report_file = array_pop($report);
    $report_path = realpath($abs . implode(DIR_SEPARATOR, $report));

    define('REPORT_FILE', $report_file);
    define('REPORT_PATH', $report_path);

    if (REPORT_FILE && REPORT_PATH && is_file(REPORT_PATH . DIR_SEPARATOR . REPORT_FILE)) {
        @unlink(REPORT_PATH . DIR_SEPARATOR . REPORT_FILE);
    }

    if (!isset($options['no-html']) && defined('REPORT_FILE')) {
        $reports[HTMLReport::class] = REPORT_PATH . DIR_SEPARATOR . REPORT_FILE;
    }
}

if (defined('REPORT_PATH')) {
    $l_ReportDirName = REPORT_PATH;
}

$vars->options = $options;

$path                       = $defaults['path'];
$report_mask                = $defaults['report_mask'];
$extended_report            = defined('EXTENDED_REPORT') && EXTENDED_REPORT;
$rapid_account_scan_report  = defined('RAPID_ACCOUNT_SCAN');

$max_size_to_scan = AibolitHelpers::getBytes(MAX_SIZE_TO_SCAN);
$max_size_to_scan = $max_size_to_scan > 0 ? $max_size_to_scan : AibolitHelpers::getBytes('1m');
$max_size_to_scan = AibolitHelpers::bytes2Human($max_size_to_scan);

$max_size = (MAX_SIZE_SCAN_BYTES > 0) ? MAX_FILE_SIZE_FOR_CHECK : (defined('CLOUD_ASSIST_TOKEN') ? max(MAX_SIZE_TO_SCAN, MAX_SIZE_TO_CLOUDSCAN) : MAX_SIZE_TO_SCAN);

if ($max_size == 0) {
    $max_size = AibolitHelpers::getBytes('1m');
}

$filter->setSizeRange(MIN_FILE_SIZE_FOR_CHECK, $max_size);
$finder->setCollectBigElfs(defined('USE_HEURISTICS') || defined('USE_HEURISTICS_SUSPICIOUS'));

$use_doublecheck = isset($options['with-2check']) && file_exists(DOUBLECHECK_FILE);

$reportFactory = function ($reports) use ($vars, $path, $report_mask, $extended_report,
    $rapid_account_scan_report, $g_AddPrefix, $g_NoPrefix, $snum, $max_size_to_scan, $g_SpecificExt, $use_doublecheck, $debug) {
    foreach($reports as $report_class => $file) {
        yield Factory::instance()->create($report_class, [$vars->signs->_Mnemo, $path,
            $vars->signs->getDBLocation(), $vars->signs->getDBMetaInfoVersion(),
            $report_mask, $extended_report, $rapid_account_scan_report, AI_VERSION,
            AI_EXTRA_WARN, AI_EXPERT, SMART_SCAN, ROOT_PATH, SCAN_ALL_FILES, $g_SpecificExt,
            DOUBLECHECK_FILE, $use_doublecheck, START_TIME, $snum, $max_size_to_scan, $g_AddPrefix, $g_NoPrefix,
            isset($reports[CSVReport::class]), $file, JSON_STDOUT, isset($vars->options['stat']), $debug]);
    }
};

define('QUEUE_FILENAME', (isset($l_ReportDirName) && $l_ReportDirName != '' ? $l_ReportDirName . '/' : '') . 'AI-BOLIT-QUEUE-' . md5($defaults['path']) . '-' . rand(1000, 9999) . '.txt');

////////////////////////////////////////////////////////////////////////////

if (!isCli()) {
    header('Content-type: text/html; charset=utf-8');
}

if (!$defaults['use_template_in_path'] && !is_readable(ROOT_PATH)) {
    echo Translate::getStr('warning.folder_read_permission');
    exit;
}

if (isCli()) {
    if (defined('REPORT_PATH') && REPORT_PATH) {
        if (!is_writable(REPORT_PATH)) {
            die2("\nCannot write report. Report dir " . REPORT_PATH . " is not writable.");
        }

        else if (!REPORT_FILE) {
            die2("\nCannot write report. Report filename is empty.");
        }

        else if (($file = REPORT_PATH . DIR_SEPARATOR . REPORT_FILE) && is_file($file) && !is_writable($file)) {
            die2("\nCannot write report. Report file '$file' exists but is not writable.");
        }
    }
}


// detect version CMS
$g_CmsListDetector = null;
if (!$defaults['use_template_in_path']) {
    $g_KnownCMS        = [];
    $g_CmsListDetector = new CmsVersionDetector(ROOT_PATH);
}

$g_AiBolitAbsolutePath = __DIR__;

$l_IgnoreFilename    = $g_AiBolitAbsolutePath . '/.aignore';
$l_DirIgnoreFilename = $g_AiBolitAbsolutePath . '/.adirignore';
$l_UrlIgnoreFilename = $g_AiBolitAbsolutePath . '/.aurlignore';

$filter->setIgnoreListPatterns($l_DirIgnoreFilename);

if (SMART_SCAN) {
    $filter->setSmartScan();
}

if (is_object($debug)) {
    $debug->QCR_Debug();
}


$defaults['skip_ext'] = strtolower(trim($defaults['skip_ext']));
if ($defaults['skip_ext'] != '') {
    $filter->setIgnoreExt($defaults['skip_ext']);

    if (is_object($debug)) {
        $debug->QCR_Debug('Skip files with extensions: ' . implode(',', $filter->getIgnoreExt()));
    }

    stdOut('Skip extensions: ' . implode(',', $filter->getIgnoreExt()));
}

$use_listingfile = defined('LISTING_FILE');

$listing = false;

if ($use_doublecheck) {
    $listing = DOUBLECHECK_FILE;
} elseif ($use_listingfile) {
    $listing = LISTING_FILE;
}
$base64_encoded = INPUT_FILENAMES_BASE64_ENCODED;

if (isset($options['resident'])) {
    $filter->setIgnorePathPattern(false);
    $filter->setDefaultExcludes(false);
    $filter->setScanAll();
}

if (is_callable([$filter, 'generateCheckers'])) {
    $filter->generateCheckers();
}

if (isset($options['detached'])) {
    $detached = Factory::instance()->create(DetachedMode::class, [$finder, $debug, $options['detached'], $vars, START_TIME, $reportFactory]);
    if (defined('LISTING_FILE')) {
        $detached->scanListing(LISTING_FILE, INPUT_FILENAMES_BASE64_ENCODED);
    }
    else {
        $detached->scanDirectories(ROOT_PATH);
    }
    exit(0);
}

if (isset($options['resident'])) {
    $default_archive_max_size           = 20 * 1024 * 1024;
    $default_max_num_files_in_archive   = 100;

    $options['archive-max-folders-count'] = 1000;

    if ((isset($options['archive-max-size']) && ($size = $options['archive-max-size']) !== false)) {
        $size                        = AibolitHelpers::getBytes($size);
        $options['archive-max-size'] = $size > 0 ? $size : $default_archive_max_size;
    } else {
        $options['archive-max-size'] = $default_archive_max_size;
    }

    if ((isset($options['max-num-files-in-archive']) && ($files = $options['max-num-files-in-archive']) !== false)) {
        $options['max-num-files-in-archive'] = $files > 0 ? $files : $default_max_num_files_in_archive;
    } else {
        $options['max-num-files-in-archive'] = $default_max_num_files_in_archive;
    }

    $logger = null;
    $levels = explode(',', LOG_LEVEL);
    $logger = new Logger(LOG_FILE, $levels);
    Factory::instance()->create(ResidentMode::class, [$finder, $debug, $reportFactory, $vars->signs, $logger, $options, $lic]);
    exit(0);
}

try {
    $scan = new Scanner($finder, $vars, $debug);
    if (defined('SCAN_FILE')) {
        // scan single file
        $filepath = INPUT_FILENAMES_BASE64_ENCODED ? FilepathEscaper::decodeFilepathByBase64(SCAN_FILE) : SCAN_FILE;
        stdOut("Start scanning file '" . $filepath . "'.");
        if (file_exists($filepath) && is_file($filepath) && is_readable($filepath)) {
            $vars->foundTotalFiles = 1;
            $s_file[] = $filepath;
        } else {
            stdOut("Error:" . $filepath . " either is not a file or readable");
        }
    } elseif ($listing) {
        //scan listing
        if ($listing === 'stdin') {
            $lines = explode("\n", getStdin());
        } else {
            $lines = new ScanList($listing, INPUT_FILENAMES_BASE64_ENCODED, $use_doublecheck);
        }
        $vars->foundTotalFiles = is_array($lines) ? count($lines) : $lines->count();
        $s_file = $lines;
        stdOut("Start scanning the list from '" . $listing . "'.\n");
    } else {
        //scan by path
        $base64_encoded = true;
        file_exists(QUEUE_FILENAME) && unlink(QUEUE_FILENAME);
        $scan->QCR_ScanDirectories(ROOT_PATH);
        stdOut("\nFound $vars->foundTotalFiles files in $vars->foundTotalDirs directories.");
        stdOut("Start scanning '" . ROOT_PATH . "'.\n");

        if (is_object($debug)) {
            $debug->QCR_Debug();
        }
        stdOut(str_repeat(' ', 160), false);
        $s_file = new ScanList(QUEUE_FILENAME, $base64_encoded, $use_doublecheck);
    }
    if (isset($s_file)) {
        $ca = null;
        if (defined('CLOUD_ASSIST_TOKEN')) {
            $ca = Factory::instance()->create(CloudAssistedRequest::class, [CLOUD_ASSIST_TOKEN]);
            HashVerdicts::init();
        }
        $scan->QCR_GoScan($s_file, $ca, null, $listing ? $filter : null);
        unset($s_file);
        if (!is_null($ca)) {
            HashVerdicts::close();
            $ca->close();
            unset($ca);
        }
        @unlink(QUEUE_FILENAME);
    }

    $vars->foundTotalDirs  = $vars->totalFolder;

} catch (Exception $e) {
    if (is_object($debug)) {
        $debug->QCR_Debug($e->getMessage());
    }
}
if (is_object($debug)) {
    $debug->QCR_Debug();
}

$vars->doorway  = $finder->getDoorways();
$vars->symLinks = $finder->getSymlinks();
$vars->bigFiles = $finder->getBigFiles();

if (count($vars->bigFiles) > 0) {
    $scan->prepareBigFilesToCriticalList($vars->bigFiles, $vars);
}
$bigElfs = $finder->getBigElfFiles();

if (count($bigElfs) > 0) {
    $scan->prepareBigElfFilesToCriticalSusList($bigElfs, $vars);
}


list($snum, $i) = $scan->whitelisting();


////////////////////////////////////////////////////////////////////////////
if (BOOL_RESULT && (!defined('NEED_REPORT'))) {
    if ((count($vars->criticalPHP) > 0) || (count($vars->criticalJS) > 0) || (count($vars->phishing) > 0)) {
        exit(2);
    }
    exit(0);
}
////////////////////////////////////////////////////////////////////////////

$time_taken = AibolitHelpers::seconds2Human(AibolitHelpers::currentTime() - START_TIME);


stdOut("\nBuilding report [ mode = " . AI_EXPERT . " ]\n");

//stdOut("\nLoaded signatures: " . count($g_FlexDBShe) . " / " . count($g_JSVirSig) . "\n");

////////////////////////////////////////////////////////////////////////////

$scan_time = round(AibolitHelpers::currentTime() - START_TIME, 1);

foreach($reportFactory($reports) as $report) {
    $report->generateReport($vars, $scan_time);
    $res = $report->write();
    if ($res !== '') {
        stdOut($res);
    }
}
stdOut("\n");

stdOut("Building list of vulnerable scripts " . count($vars->vulnerable));

stdOut("Building list of shells " . count($vars->criticalPHP));

stdOut("Building list of js " . count($vars->criticalJS));

stdOut("Building list of unread files " . count($vars->notRead));

if (AI_EXTRA_WARN) {
    stdOut("Building list of suspicious files " . count($vars->warningPHP));
}
////////////////////////////////////

if (!defined('REPORT') || REPORT === '') {
    die2('Report not written.');
}


stdOut("Scanning complete! Time taken: " . AibolitHelpers::seconds2Human($scan_time));

if (DEBUG_PERFORMANCE) {
    $debug->printPerformanceStats();
    die();
}

stdOut("\n\n!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
stdOut("Attention! DO NOT LEAVE either ai-bolit.php or AI-BOLIT-REPORT-<xxxx>-<yy>.html \nfile on server. COPY it locally then REMOVE from server. ");
stdOut("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");

if (isset($options['cmd'])) {
    stdOut("Run \"{$options['cmd']}\" ");
    system($options['cmd']);
}

if (is_object($debug)) {
    $debug->QCR_Debug();
}

# exit with code

$l_EC1 = count($vars->criticalPHP);
$l_EC2 = count($vars->criticalJS) + count($vars->phishing) + count($vars->warningPHP);
$code  = 0;

if ($l_EC1 > 0) {
    $code = 2;
} else {
    if ($l_EC2 > 0) {
        $code = 1;
    }
}

$stat = array(
    'php_malware'   => count($vars->criticalPHP),
    'cloudhash'     => count($vars->blackFiles),
    'js_malware'    => count($vars->criticalJS),
    'phishing'      => count($vars->phishing)
);

if (FUNC_AIBOLIT_ON_COMPLETE) {
    aibolit_onComplete($code, $stat);
}

stdOut('Exit code ' . $code);
exit($code);

############################################# END ###############################################

function getStdin()
{
    $stdin  = '';
    $f      = @fopen('php://stdin', 'r');
    while($line = fgets($f))
    {
        $stdin .= $line;
    }
    fclose($f);
    return $stdin;
}

function die2($str) {
    if (FUNC_AIBOLIT_ON_FATAL_ERROR) {
        aibolit_onFatalError($str);
    }
    die($str);
}


function getMaxMinUid($path = '/etc/login.defs')
{
    $uid_min = 1000;
    $uid_max = 60000;
    if (!file_exists($path)) {
        $release = new OsReleaseInfo();
        $ver = $release->getOsVersion();
        if ($release->isIdLikeCentos() && $ver && (strpos($ver, '6') === 0)) {
            $uid_min = 500;
            $uid_max = 60000;
        }
        unset($ver);
        return [$uid_min, $uid_max];
    }

    $file = file($path, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES);
    foreach ($file as $line) {
        $line = trim($line);
        if (strpos($line, 'UID_MIN') === 0) {
            list($key, $value) = preg_split('~\s+~', trim($line), 2, PREG_SPLIT_NO_EMPTY);
            $uid_min = (int)trim($value);
        }
        if (strpos($line, 'UID_MAX') === 0) {
            list($key, $value) = preg_split('~\s+~', trim($line), 2, PREG_SPLIT_NO_EMPTY);
            $uid_max = (int)trim($value);
        }
    }
    return [$uid_min, $uid_max];
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// The following instructions should be written the same pattern,
/// because they are replaced by file content while building a release.
/// See the release_aibolit_ru.sh file for details.

if (!defined('FUNC_HRTIME')) {
    define('FUNC_HRTIME', function_exists('hrtime'));
}
class AibolitHelpers
{
    private static $euid = 0;
    private static $egids = [0];

    /**
     * Format bytes to human readable
     *
     * @param int $bytes
     *
     * @return string
     */
    public static function bytes2Human($bytes)
    {
        if ($bytes < 1024) {
            return $bytes . ' b';
        } elseif (($kb = $bytes / 1024) < 1024) {
            return number_format($kb, 2) . ' Kb';
        } elseif (($mb = $kb / 1024) < 1024) {
            return number_format($mb, 2) . ' Mb';
        } elseif (($gb = $mb / 1024) < 1024) {
            return number_format($gb, 2) . ' Gb';
        } else {
            return number_format($gb / 1024, 2) . 'Tb';
        }
    }

    /**
     * Seconds to human readable
     * @param int $seconds
     * @return string
     */
    public static function seconds2Human($seconds)
    {
        $r        = '';
        $_seconds = floor($seconds);
        $ms       = $seconds - $_seconds;
        $seconds  = $_seconds;
        if ($hours = floor($seconds / 3600)) {
            $r .= $hours . ' h ';
            $seconds %= 3600;
        }

        if ($minutes = floor($seconds / 60)) {
            $r .= $minutes . ' m ';
            $seconds %= 60;
        }

        if ($minutes < 3) {
            $r .= ' ' . (string)($seconds + ($ms > 0 ? round($ms) : 0)) . ' s';
        }

        return $r;
    }

    /**
     * Get bytes from shorthand byte values (1M, 1G...)
     * @param int|string $val
     * @return int
     */
    public static function getBytes($val)
    {
        $val  = trim($val);
        $last = strtolower($val[strlen($val) - 1]);
        $val  = preg_replace('~\D~', '', $val);
        switch ($last) {
            case 't':
                $val *= 1024;
            case 'g':
                $val *= 1024;
            case 'm':
                $val *= 1024;
            case 'k':
                $val *= 1024;
        }
        return (int)$val;
    }

    /**
     * Convert dangerous chars to html entities
     *
     * @param        $par_Str
     * @param string $addPrefix
     * @param string $noPrefix
     * @param bool   $replace_path
     *
     * @return string
     */
    public static function makeSafeFn($par_Str, $addPrefix = '', $noPrefix = '', $replace_path = false)
    {
        if ($replace_path) {
            $lines = explode("\n", $par_Str);
            array_walk($lines, static function(&$n) use ($addPrefix, $noPrefix) {
                $n = $addPrefix . str_replace($noPrefix, '', $n);
            });

            $par_Str = implode("\n", $lines);
        }

        return htmlspecialchars($par_Str, ENT_SUBSTITUTE | ENT_QUOTES);
    }

    public static function myCheckSum($str)
    {
        return hash('crc32b', $str);
    }

    /**
     * Wrapper for the hrtime() or microtime() functions
     * (depending on the PHP version, one of the two is used)
     *
     * @return float|mixed UNIX timestamp
     */
    public static function currentTime()
    {
        return FUNC_HRTIME ? hrtime(true) / 1e9 : microtime(true);
    }

    public static function setCurrentIds()
    {
        self::$euid  = posix_geteuid();
        self::$egids = posix_getgroups();
    }

    public static function geteuid()
    {
        return self::$euid;
    }

    public static function getegids()
    {
        return self::$egids;
    }

    public static function getFileExtension($path)
    {
        $res = '';
        $pathLen = strlen($path);
        $breakpoint = ['.', '/'];

        if ($pathLen === 0 || in_array($path[$pathLen - 1], $breakpoint)) {
            return $res;
        }

        $hasExt = false;
        for ($i = $pathLen - 1; $i >= 0; $i--) {
            if ($path[$i] === '.') {
                $hasExt = true;
            }
            if (in_array($path[$i], $breakpoint)) {
                break;
            }
            $res .= $path[$i];
        }

        return $hasExt ? strrev($res) : '';
    }

    public static function getBaseName($path, $prefix = '')
    {
        $res = '';
        $pathLen = strlen($path);
        $breakpoint = '/';

        if ($pathLen === 0) {
            return $res;
        }

        $hasPrefix = false;
        if ($prefix !== '') {
            $prefix = strrev($prefix);
            $hasPrefix = true;
        }

        for ($i = $pathLen - 1; $i >= 0; $i--) {
            if ($path[$i] === $breakpoint) {
                if ($i === $pathLen - 1) {
                    continue;
                }
                break;
            }
            $res .= $path[$i];

            if ($hasPrefix && $res === $prefix) {
                $res = '';
                $hasPrefix = false;
            }
        }

        return strrev($res);
    }

    public static function getRealpath($path, $checkExists = false)
    {
        $fileExists = $checkExists ? @lstat($path) : true;
        if ($fileExists === false) {
            return false;
        }

        if (strlen($path) == 0) {
            return getcwd();
        }

        if ($path[0] != DIRECTORY_SEPARATOR) {
            $path = getcwd() . DIRECTORY_SEPARATOR . $path;
        }

        $stack = explode(DIRECTORY_SEPARATOR, $path);
        $abs = [];

        foreach ($stack as $i) {
            if ($i === '.' || $i === '') {
                continue;
            }
            if ($i === '..') {
                array_pop($abs);
            } else {
                $abs[] = $i;
            }
        }

        return DIRECTORY_SEPARATOR . implode(DIRECTORY_SEPARATOR, $abs);
    }

    public static function getPcreErrorConstant($error_code)
    {
        switch ($error_code) {
            case PREG_NO_ERROR:
                return true;
            case PREG_INTERNAL_ERROR:
                return 'PREG_INTERNAL_ERROR';
            case PREG_BACKTRACK_LIMIT_ERROR:
                return 'PREG_BACKTRACK_LIMIT_ERROR';
            case PREG_RECURSION_LIMIT_ERROR:
                return 'PREG_RECURSION_LIMIT_ERROR';
            case PREG_BAD_UTF8_ERROR:
                return 'PREG_BAD_UTF8_ERROR';
            case PREG_BAD_UTF8_OFFSET_ERROR:
                return 'PREG_BAD_UTF8_OFFSET_ERROR';
            case PREG_JIT_STACKLIMIT_ERROR:
                return 'PREG_JIT_STACKLIMIT_ERROR';
        }
    }


}


class Errors
{
    private static $data;
    private static $count;

    public static function add($type, $file, $component, $error)
    {
        if (self::$count > 500 || $error === 0 || isset(self::$data[$file->getFilename()])) {
            return;
        }
        if ($type === 'pcre') {
            $error = AibolitHelpers::getPcreErrorConstant($error);
        }
        self::$data[$file->getFilename()] = ['type' => $type, 'file' => $file->getFilename(), 'hash' => $file->getSha256(), 'component' => $component, 'error' => $error];
        self::$count++;
    }

    public static function get()
    {
        return array_values(self::$data ?? []);
    }
}



class Variables
{
    public $structure           = [];
    public $totalFolder         = 0;
    public $totalFiles          = 0;
    public $adwareList          = [];
    public $criticalPHP         = [];
    public $phishing            = [];
    public $CMS                 = [];
    public $criticalJS          = [];
    public $criticalJSFragment  = [];
    public $blackFiles          = [];
    public $notRead             = [];
    public $bigFiles            = [];
    public $criticalPHPSig      = [];
    public $criticalPHPFragment = [];
    public $phishingSigFragment = [];
    public $phishingFragment    = [];
    public $criticalJSSig       = [];
    public $adwareListFragment  = [];
    public $warningPHPSig       = [];
    public $warningPHPFragment  = [];
    public $warningPHP          = [];
    public $suspiciousExt       = [];
    public $suspiciousExtSig    = [];
    public $suspiciousExtFrag   = [];
    public $vulnerable          = [];

    public $counter             = 0;
    public $foundTotalDirs      = 0;
    public $foundTotalFiles     = 0;
    public $files_and_ignored   = 0;
    public $doorway             = [];
    public $symLinks            = [];
    public $skippedFolders      = [];

    public $hashtable           = null;
    public $rescanCount         = 0;
    public $rescanRxGood        = 0;

    public $options             = [];

    public $signs               = [];
    public $users               = null;
}



class Logger
{
    /**
     * $log_file - path and log file name
     * @var string
     */
    protected $log_file;
    /**
     * $file - file
     * @var string
     */
    protected $file;
    /**
     * dateFormat
     * @var string
     */
    protected $dateFormat = 'd-M-Y H:i:s';

    /**
     * @var array
     */
    const LEVELS  = ['ERROR' => 1, 'DEBUG' => 2,  'INFO' => 4, 'ALL' => 7];

    /**
     * @var int
     */
    private $level;

    /**
     * Class constructor
     *
     * @param string       $log_file - path and filename of log
     * @param string|array $level    - Level of logging
     *
     * @throws Exception
     */
    public function __construct($log_file = null, $level = 'INFO')
    {
        if (!$log_file) {
            return;
        }
        if (is_array($level)) {
            foreach ($level as $v) {
                if (!isset(self::LEVELS[$v])) {
                    $v = 'INFO';
                }
                $this->level |= self::LEVELS[$v];
            }
        } else {
            if (isset(self::LEVELS[$level])) {
                $this->level = self::LEVELS[$level];
            } else {
                $this->level = self::LEVELS['INFO'];
            }
        }

        $this->log_file = $log_file;
        //Create log file if it doesn't exist.
        if (!file_exists($log_file)) {
            fopen($log_file, 'w') or exit("Can't create $log_file!");
        }
        //Check permissions of file.
        if (!is_writable($log_file)) {
            //throw exception if not writable
            throw new Exception('ERROR: Unable to write to file!', 1);
        }
    }

    /**
     * Info method (write info message)
     * @param string $message
     * @return void
     */
    public function info($message)
    {
        if ($this->level & self::LEVELS['INFO']) {
            $this->writeLog($message, 'INFO');
        }

    }
    /**
     * Debug method (write debug message)
     * @param string $message
     * @return void
     */
    public function debug($message)
    {
        if ($this->level & self::LEVELS['DEBUG']) {
            $this->writeLog($message, 'DEBUG');
        }
    }
    /**
     * Error method (write error message)
     * @param string $message
     * @return void
     */
    public function error($message)
    {
        if ($this->level & self::LEVELS['ERROR']) {
            $this->writeLog($message, 'ERROR');
        }
    }

    /**
     * Write to log file
     * @param string $message
     * @param string $level
     * @return void
     */
    public function writeLog($message, $level)
    {
        if (!$this->log_file) {
            return;
        }
        // open log file
        if (!is_resource($this->file)) {
            $this->openLog();
        }
        //Grab time - based on timezone in php.ini
        $time = date($this->dateFormat);
        // Write time & message to end of file
        fwrite($this->file, "[$time] : [$level] - $message" . PHP_EOL);
    }
    /**
     * Open log file
     * @return void
     */
    private function openLog()
    {
        $openFile = $this->log_file;
        // 'a' option = place pointer at end of file
        $this->file = fopen($openFile, 'a') or exit("Can't open $openFile!");
    }
    /**
     * Class destructor
     */
    public function __destruct()
    {
        if ($this->file) {
            fclose($this->file);
        }
    }
}



class LoadSignaturesForScan
{
    private $sig_db             = [];
    private $sig_db_meta_info   = [];
    private $sig_db_location    = 'internal';

    private $mode;
    private $debug;

    public $_DBShe;
    public $X_DBShe;
    public $_FlexDBShe;
    public $X_FlexDBShe;
    public $XX_FlexDBShe;
    public $_ExceptFlex;
    public $_AdwareSig;
    public $_PhishingSig;
    public $_JSVirSig;
    public $X_JSVirSig;
    public $_SusDB;
    public $_SusDBPrio;
    public $_DeMapper;
    public $_Mnemo;

    public $whiteUrls;
    public $blackUrls;
    public $ownUrl = null;

    private $count;
    private $count_susp;
    private $result = 0;
    private $last_error = '';

    const SIGN_INTERNAL = 1;
    const SIGN_EXTERNAL = 2;
    const SIGN_IMPORT = 3;
    const SIGN_ERROR = 9;

    public function __construct($avdb_file, $mode, $debug)
    {
        if (!defined('DEBUG_MODE')) {
            define('DEBUG_MODE', 0);
        }

        $this->mode = $mode;
        $this->debug = $debug;
        $this->sig_db_meta_info = [
            'build-date'    => 'n/a',
            'version'       => 'n/a',
            'release-type'  => 'n/a',
        ];

        if ($avdb_file && file_exists($avdb_file)) {
            $avdb = explode("\n", gzinflate(base64_decode(str_rot13(strrev(trim(file_get_contents($avdb_file)))))));
            $this->sig_db_location  = 'external';

            $this->_DBShe       = explode("\n", base64_decode($avdb[0]));
            $this->X_DBShe      = explode("\n", base64_decode($avdb[1]));
            $this->_FlexDBShe   = explode("\n", base64_decode($avdb[2]));
            $this->X_FlexDBShe  = explode("\n", base64_decode($avdb[3]));
            $this->XX_FlexDBShe = explode("\n", base64_decode($avdb[4]));
            $this->_ExceptFlex  = explode("\n", base64_decode($avdb[5]));
            $this->_AdwareSig   = explode("\n", base64_decode($avdb[6]));
            $this->_PhishingSig = explode("\n", base64_decode($avdb[7]));
            $this->_JSVirSig    = explode("\n", base64_decode($avdb[8]));
            $this->X_JSVirSig   = explode("\n", base64_decode($avdb[9]));
            $this->_SusDB       = explode("\n", base64_decode($avdb[10]));
            $this->_CronDB      = explode("\n", base64_decode($avdb[11]));
            $this->_DeMapper    = array_combine(explode("\n", base64_decode($avdb[12])), explode("\n", base64_decode($avdb[13])));
            $this->_Mnemo       = @array_flip(@array_combine(explode("\n", base64_decode($avdb[14])), explode("\n", base64_decode($avdb[15])))); //TODO: you need to remove array_flip and swap the keys and values in array_combine. Write a test: put the signature base in the tests folder and run a scan with this base on the VIRII folder - the result should not change, since the base is the same

            // get meta information
            $avdb_meta_info = json_decode(base64_decode($avdb[16]), true);

            $this->sig_db_meta_info['build-date'] = $avdb_meta_info ? $avdb_meta_info['build-date'] : 'n/a';
            $this->sig_db_meta_info['version'] = $avdb_meta_info ? $avdb_meta_info['version'] : 'n/a';
            $this->sig_db_meta_info['release-type'] = $avdb_meta_info ? $avdb_meta_info['release-type'] : 'n/a';

            if (count($this->_DBShe) <= 1) {
                $this->_DBShe = [];
            }

            if (count($this->X_DBShe) <= 1) {
                $this->X_DBShe = [];
            }

            if (count($this->_FlexDBShe) <= 1) {
                $this->_FlexDBShe = [];
            }

            if (count($this->X_FlexDBShe) <= 1) {
                $this->X_FlexDBShe = [];
            }

            if (count($this->XX_FlexDBShe) <= 1) {
                $this->XX_FlexDBShe = [];
            }

            if (count($this->_ExceptFlex) <= 1) {
                $this->_ExceptFlex = [];
            }

            if (count($this->_AdwareSig) <= 1) {
                $this->_AdwareSig = [];
            }

            if (count($this->_PhishingSig) <= 1) {
                $this->_PhishingSig = [];
            }

            if (count($this->X_JSVirSig) <= 1) {
                $this->X_JSVirSig = [];
            }

            if (count($this->_JSVirSig) <= 1) {
                $this->_JSVirSig = [];
            }

            if (count($this->_SusDB) <= 1) {
                $this->_SusDB = [];
            }

            if (count($this->_CronDB) <= 1) {
                $this->_CronDB = [];
            }

            $this->result = self::SIGN_EXTERNAL;
        } else {
            InternalSignatures::init();
            $this->_DBShe       = InternalSignatures::$_DBShe;
            $this->X_DBShe      = InternalSignatures::$X_DBShe;
            $this->_FlexDBShe   = InternalSignatures::$_FlexDBShe;
            $this->X_FlexDBShe  = InternalSignatures::$X_FlexDBShe;
            $this->XX_FlexDBShe = InternalSignatures::$XX_FlexDBShe;
            $this->_ExceptFlex  = InternalSignatures::$_ExceptFlex;
            $this->_AdwareSig   = InternalSignatures::$_AdwareSig;
            $this->_PhishingSig = InternalSignatures::$_PhishingSig;
            $this->_JSVirSig    = InternalSignatures::$_JSVirSig;
            $this->X_JSVirSig   = InternalSignatures::$X_JSVirSig;
            $this->_SusDB       = InternalSignatures::$_SusDB;
            $this->_CronDB      = InternalSignatures::$_CronDB;
            $this->_DeMapper    = InternalSignatures::$_DeMapper;
            $this->_Mnemo       = InternalSignatures::$_Mnemo;

            // get meta information
            $avdb_meta_info = InternalSignatures::$db_meta_info;

            $this->sig_db_meta_info['build-date'] = $avdb_meta_info ? $avdb_meta_info['build-date'] : 'n/a';
            $this->sig_db_meta_info['version'] = $avdb_meta_info ? $avdb_meta_info['version'] : 'n/a';
            $this->sig_db_meta_info['release-type'] = $avdb_meta_info ? $avdb_meta_info['release-type'] : 'n/a';

            $this->result = self::SIGN_INTERNAL;
        }

        // use only basic signature subset
        if ($mode < 2) {
            $this->X_FlexDBShe  = [];
            $this->XX_FlexDBShe = [];
            $this->X_JSVirSig   = [];
        }

        // Load custom signatures
        if (file_exists(__DIR__ . '/ai-bolit.sig')) {
            try {
                $s_file = new SplFileObject(__DIR__ . '/ai-bolit.sig');
                $s_file->setFlags(SplFileObject::READ_AHEAD | SplFileObject::SKIP_EMPTY | SplFileObject::DROP_NEW_LINE);
                foreach ($s_file as $line) {
                    $this->_FlexDBShe[] = preg_replace('#\G(?:[^~\\\\]+|\\\\.)*+\K~#', '\\~', $line); // escaping ~
                }

                $this->result = self::SIGN_IMPORT;
                $s_file = null; // file handler is closed
            }
            catch (Exception $e) {
                $this->result = self::SIGN_ERROR;
                $this->last_error = $e->getMessage();
            }
        }

        $this->count = count($this->_JSVirSig) + count($this->X_JSVirSig) + count($this->_DBShe) + count($this->X_DBShe) + count($this->_FlexDBShe) + count($this->X_FlexDBShe) + count($this->XX_FlexDBShe) + count($this->_CronDB);
        $this->count_susp = $this->count + count($this->_SusDB);

        if (!$debug) {
            $this->OptimizeSignatures($debug);
        }

        $this->_DBShe       = array_map('strtolower', $this->_DBShe);
        $this->X_DBShe      = array_map('strtolower', $this->X_DBShe);

        $this->_FlexDBShe   = array_map([$this, 'completeRegexp'], $this->_FlexDBShe);
        $this->_JSVirSig    = array_map([$this, 'completeRegexp'], $this->_JSVirSig);
        $this->_AdwareSig   = array_map([$this, 'completeRegexp'], $this->_AdwareSig);
        $this->_PhishingSig = array_map([$this, 'completeRegexp'], $this->_PhishingSig);
        $this->_SusDB       = array_map([$this, 'completeRegexp'], $this->_SusDB);
        $this->_CronDB      = array_map([$this, 'completeRegexp'], $this->_CronDB);
        $this->_ExceptFlex  = array_map([$this, 'completeRegexp'], $this->_ExceptFlex);

        $this->X_JSVirSig   = array_map([$this, 'completeRegexp'], $this->X_JSVirSig);
        $this->X_FlexDBShe  = array_map([$this, 'completeRegexp'], $this->X_FlexDBShe);
        $this->XX_FlexDBShe = array_map([$this, 'completeRegexp'], $this->XX_FlexDBShe);
    }

    private function OptimizeSignatures($debug)
    {
        ($this->mode == 2) && ($this->_FlexDBShe = array_merge($this->_FlexDBShe, $this->X_FlexDBShe, $this->XX_FlexDBShe));
        ($this->mode == 1) && ($this->_FlexDBShe = array_merge($this->_FlexDBShe, $this->X_FlexDBShe));
        $this->X_FlexDBShe = $this->XX_FlexDBShe = [];

        ($this->mode == 2) && ($this->_JSVirSig = array_merge($this->_JSVirSig, $this->X_JSVirSig));
        $this->X_JSVirSig = [];

        $count = count($this->_FlexDBShe);

        for ($i = 0; $i < $count; $i++) {
            if ($this->_FlexDBShe[$i] == '[a-zA-Z0-9_]+?\(\s*[a-zA-Z0-9_]+?=\s*\)')
                $this->_FlexDBShe[$i] = '\((?<=[a-zA-Z0-9_].)\s*[a-zA-Z0-9_]++=\s*\)';
            if ($this->_FlexDBShe[$i] == '([^\?\s])\({0,1}\.[\+\*]\){0,1}\2[a-z]*e')
                $this->_FlexDBShe[$i] = '(?J)\.[+*](?<=(?<d>[^\?\s])\(..|(?<d>[^\?\s])..)\)?\g{d}[a-z]*e';
            if ($this->_FlexDBShe[$i] == '$[a-zA-Z0-9_]\{\d+\}\s*\.$[a-zA-Z0-9_]\{\d+\}\s*\.$[a-zA-Z0-9_]\{\d+\}\s*\.')
                $this->_FlexDBShe[$i] = '\$[a-zA-Z0-9_]\{\d+\}\s*\.\$[a-zA-Z0-9_]\{\d+\}\s*\.\$[a-zA-Z0-9_]\{\d+\}\s*\.';

            $this->_FlexDBShe[$i] = str_replace('http://.+?/.+?\.php\?a', 'http://[^?\s]++(?<=\.php)\?a', $this->_FlexDBShe[$i]);
            $this->_FlexDBShe[$i] = preg_replace('~\[a-zA-Z0-9_\]\+\K\?~', '+', $this->_FlexDBShe[$i]);
            $this->_FlexDBShe[$i] = preg_replace('~^\\\\[d]\+&@~', '&@(?<=\d..)', $this->_FlexDBShe[$i]);
            $this->_FlexDBShe[$i] = str_replace('\s*[\'"]{0,1}.+?[\'"]{0,1}\s*', '.+?', $this->_FlexDBShe[$i]);
            $this->_FlexDBShe[$i] = str_replace('[\'"]{0,1}.+?[\'"]{0,1}', '.+?', $this->_FlexDBShe[$i]);

            $this->_FlexDBShe[$i] = preg_replace('~^\[\'"\]\{0,1\}\.?|^@\*|^\\\\s\*~', '', $this->_FlexDBShe[$i]);
        }

        self::optSig($this->_FlexDBShe,     $debug, 'AibolitHelpers::myCheckSum');
        self::optSig($this->_JSVirSig,      $debug, 'AibolitHelpers::myCheckSum');
        self::optSig($this->_AdwareSig,     $debug, 'AibolitHelpers::myCheckSum');
        self::optSig($this->_PhishingSig,   $debug, 'AibolitHelpers::myCheckSum');
        self::optSig($this->_SusDB,         $debug, 'AibolitHelpers::myCheckSum');
        self::optSig($this->_CronDB,        $debug, 'AibolitHelpers::myCheckSum');

        //optSig($g_SusDBPrio);
        //optSig($g_ExceptFlex);

        // convert exception rules
        $cnt = count($this->_ExceptFlex);
        for ($i = 0; $i < $cnt; $i++) {
            $this->_ExceptFlex[$i] = trim(Normalization::normalize($this->_ExceptFlex[$i]));
            if ($this->_ExceptFlex[$i] == '')
                unset($this->_ExceptFlex[$i]);
        }

        $this->_ExceptFlex = array_values($this->_ExceptFlex);
    }

    public function completeRegexp($item)
    {
        return ($item !== '') ? ('~' . $item . '~msi') : $item;
    }

    public static function optSig(&$sigs, $debug = false, $func_id = null)
    {
        $sigs = array_unique($sigs);

        // Add SigId
        foreach ($sigs as $k => &$s) {
            if ($func_id && is_callable($func_id)) {
                $id = $func_id($s);
            } else {
                $id = $k;
            }
            $s .= '(?<X' . $id . '>)';
        }
        unset($s);

        $fix = [
            '([^\?\s])\({0,1}\.[\+\*]\){0,1}\2[a-z]*e' => '(?J)\.[+*](?<=(?<d>[^\?\s])\(..|(?<d>[^\?\s])..)\)?\g{d}[a-z]*e',
            'http://.+?/.+?\.php\?a' => 'http://[^?\s]++(?<=\.php)\?a',
            '\s*[\'"]{0,1}.+?[\'"]{0,1}\s*' => '.+?',
            '[\'"]{0,1}.+?[\'"]{0,1}' => '.+?'
        ];

        $sigs = str_replace(array_keys($fix), array_values($fix), $sigs);

        $fix = [
            '~^\\\\[d]\+&@~' => '&@(?<=\d..)',
            '~^((\[\'"\]|\\\\s|@)(\{0,1\}\.?|[?*]))+~' => ''
        ];

        $sigs = preg_replace(array_keys($fix), array_values($fix), $sigs);

        self::optSigCheck($sigs, $debug);

        foreach ($sigs as $i => $s) {
            if (!preg_match('~^(?>(?!\.[*+]|\\\\\d)(?:\\\\.|\[.+?\]|.))+$~', $s)) {
                $sigs[$i] = self::changeIndexedGroupToNamed($s, $i);
            }
        }

        usort($sigs, 'strcasecmp');
        $txt = implode("\n", $sigs);

        for ($i = 24; $i >= 1; ($i > 4) ? $i -= 4 : --$i) {
            $txt = preg_replace_callback('#'
                . '^'                                       //match from start of the line
                . '('                                       //capture $i count of tokens to captured group:
                    . '(?>'                                 //  capture one token + quantifier to one atomic group:
                        . '(?:'                             //    capture one token of regex to one non-captured group:
                            . '\\\\.'                       //      capture escaped symbol or regex token (\d, \s, \n ...) as one token
                            . '|\\\\[.+?\\\\]'              //      OR capture escaped special regex symbols as one token (\., \+, \?, \\)
                            . '|[^\[(\n]'                   //      OR don't capture chars [ - start of charset, ( - start of group, \n - end of line
                            . '|\((?:\\\\.|[^)(\n])++\)'    //      OR capture group as one token (....)
                            . '|\[(?:\\\\.|[^\]\[\n])++\]'  //      OR capture charset as one token [...]
                        . ')'
                        . '(?:'                             //    capture quantifier to one non-captured group:
                            . '[*?+]\+?'                    //      capture chars '*', '?', '+' with additional '+' at the end optionally
                            . '|\{\d+(?:,\d*)?\}[+?]?'      //      OR capture repeats like '{5, 10}' with additional '+' or '?' at the end optionally
                            . '|'                           //      OR capture nothing (no quantifier for token)
                        . ')'
                    . ')'
                    . '{' . $i . ',}'                       //  repeat capture of atomic group (regex token + quantifier) $i times
                . ')'
                . '[^\n]*+'                                 //  capture all to the end of line
                . '(?:'
                    . '\n\1(?![{?*+]).+'                    //    capture end of line + atomic group with $i count of tokens (same prefix) + all to the end of line
                . ')+'                                      //  repeat previous capture 1+ times
                . '#im', 'LoadSignaturesForScan::optMergePrefixes', $txt);
        }

        $sigs = explode("\n", $txt);

        self::optSigCheck($sigs, $debug);
    }

    /**
     * Change indexed groups in regex to named in format:
     *  (asd)\1 -> (?<br123_1>asd)(?P=br123_1) where 123 - index of regex, 1 - index of group
     * @param $str
     * @param $index
     * @return string
     */
    private static function changeIndexedGroupToNamed($str, $index)
    {
        $res = '';
        $counter = 1;
        $in_brackets = false;
        for ($i = 0; $i < strlen($str); $i++) {
            if ($str[$i] === '[' && (($str[$i - 1] === '\\' && $str[$i - 2] === '\\') || $str[$i - 1] !== '\\')) {
                $in_brackets = true;
                $res .= $str[$i];
            } else if ($in_brackets && $str[$i] === ']' && (($str[$i - 1] === '\\' && $str[$i - 2] === '\\') || $str[$i - 1] !== '\\')) {
                $in_brackets = false;
                $res .= $str[$i];
            } else if (!$in_brackets && $str[$i] === '(' && (($str[$i - 1] === '\\' && $str[$i - 2] === '\\') || $str[$i - 1] !== '\\') && $str[$i + 1] !== '?') {
                $res .= $str[$i] . '?<br' . $index . '_' . $counter . '>';
                $counter += 1;
            } else if (!$in_brackets && $str[$i] === '\\' && $str[$i - 1] !== '\\' && (ord($str[$i + 1]) > 0x30 && ord($str[$i + 1]) < 0x38) && (ord($str[$i + 2]) < 0x30 || ord($str[$i + 2]) > 0x39)) {
                $res .= '(?P=br' . $index . '_' . $str[$i + 1] . ')';
                $i += 1;
            } else {
                $res .= $str[$i];
            }
        }
        return $res;
    }

    private static function optMergePrefixes($m)
    {
        $limit = 8000;

        $prefix     = $m[1];
        $prefix_len = strlen($prefix);

        $len = $prefix_len;
        $r   = [];

        $suffixes = [];
        foreach (explode("\n", $m[0]) as $line) {

            if (strlen($line) > $limit) {
                $r[] = $line;
                continue;
            }

            $s = substr($line, $prefix_len);
            $len += strlen($s);
            if ($len > $limit) {
                if (count($suffixes) == 1) {
                    $r[] = $prefix . $suffixes[0];
                } else {
                    $r[] = $prefix . '(?:' . implode('|', $suffixes) . ')';
                }
                $suffixes = [];
                $len      = $prefix_len + strlen($s);
            }
            $suffixes[] = $s;
        }

        if (!empty($suffixes)) {
            if (count($suffixes) == 1) {
                $r[] = $prefix . $suffixes[0];
            } else {
                $r[] = $prefix . '(?:' . implode('|', $suffixes) . ')';
            }
        }

        return implode("\n", $r);
    }

    private function optMergePrefixes_Old($m)
    {
        $prefix     = $m[1];
        $prefix_len = strlen($prefix);

        $suffixes = [];
        foreach (explode("\n", $m[0]) as $line) {
            $suffixes[] = substr($line, $prefix_len);
        }

        return $prefix . '(?:' . implode('|', $suffixes) . ')';
    }

    /*
     * Checking errors in pattern
     */
    private static function optSigCheck(&$sigs, $debug)
    {
        $result = true;

        foreach ($sigs as $k => $sig) {
            if (trim($sig) == "") {
                if (DEBUG_MODE) {
                    echo ("************>>>>> EMPTY\n     pattern: " . $sig . "\n");
                }
                unset($sigs[$k]);
                $result = false;
            }

            if (@preg_match('~' . $sig . '~smiS', '') === false) {
                $error = error_get_last();
                if (DEBUG_MODE) {
                    echo ("************>>>>> " . $error['message'] . "\n     pattern: " . $sig . "\n");
                }
                unset($sigs[$k]);
                $result = false;
            }
        }

        return $result;
    }

    public static function getSigId($l_Found)
    {
        foreach ($l_Found as $key => &$v) {
            if (is_string($key) && $v[1] != -1 && strlen($key) == 9) {
                return substr($key, 1);
            }
        }

        return null;
    }

    public function setOwnUrl($url)
    {
        if (isset($this->blackUrls)) {
            foreach ($this->blackUrls->getDb() as $black) {
                if (preg_match($black, $url)) {
                    $this->ownUrl = null;
                    return;
                }
            }
        }
        $this->ownUrl = $url;
        if ($this->ownUrl === null || $this->ownUrl === '') {
            return false;
        }
        $this->ownUrl = '~^(http(s)?:)?//(www\.)?' . preg_quote($this->ownUrl, '~') . '~msi';
    }

    public function getOwnUrl()
    {
        return $this->ownUrl;
    }

    public function getDBLocation()
    {
        return $this->sig_db_location;
    }

    public function getDB()
    {
        return $this->sig_db;
    }

    public function getDBMetaInfo()
    {
        return $this->sig_db_meta_info;
    }

    public function getDBMetaInfoVersion()
    {
        return $this->sig_db_meta_info['version'];
    }

    public function getDBCount()
    {
        return $this->count;
    }

    public function getDBCountWithSuspicious()
    {
        return $this->count_susp;
    }

    public function getResult()
    {
        return $this->result;
    }

    public function getLastError()
    {
        return $this->last_error;
    }
}



class InternalSignatures
{
    public static $_DBShe;
    public static $X_DBShe;
    public static $_FlexDBShe;
    public static $X_FlexDBShe;
    public static $XX_FlexDBShe;
    public static $_ExceptFlex;
    public static $_AdwareSig;
    public static $_PhishingSig;
    public static $_JSVirSig;
    public static $X_JSVirSig;
    public static $_SusDB;
    public static $_CronDB;
    public static $_DeMapper;
    public static $_Mnemo;
    public static $db_meta_info;

    public static function init()
    {
        //BEGIN_SIG 25/03/2023 10:00:46
self::$_DBShe = unserialize(gzinflate(/*1679727646*/base64_decode("")));
self::$X_DBShe = unserialize(gzinflate(/*1679727646*/base64_decode("bVVrb9s2FP0rrJbODhDHkinFttIUS+202dI8ELtdiyAQaImWCVGPkpQTu9h++y4fdoJin2IdHh7ee+4jJD7x458s9k9lPIy9jC5JSoV3yuIAkEEYe9/rFqWkQk2rEEFlFiGpBKtyzRkAZxR7zaqRK8q5hjBAJ4PYe5exNUo5kfLMW/A6LdBCbRoaeO9fn2Sqbn5BFqr03mul0Iqn4/FePLKQiIZ76MQGfjOfkizbaGTo7rHVnjSypI/PRkwjY0ACCPNvukAzTUMLcznQRgSBdmLN+Ha2UwiMHVHsXZK0oBmw0TlfkgVV9VcmVEssyxlyg9X+7QA7xZmqRTl8UQwd/rlOW/kKj1xouyyPwV5zoFMdxx6pFHtRHzqVcmMw+kxTg49sJDa328JgJmkoqSZ1PVGinkC9pSmkSVtHTlGbEV5LtCW5aLdMmWOdfQSvHJRUSpJTdIaooHkiaMOhYbre22jydjDwjpBn/+yIh6fmvvYlgNgb6ByFvFlDSpp13r9bCFPqgfYo9GNPUpXWdcFoF+mMfvDkiS4SkpWsSlpJRQX3POREtYEYykq5pGzZXbZVqlhdJfSZSSW7njEkMY4cHpob2toIwmBL1GUySQnnZMEhfEtCpMrQG3iKCEE2Dj06yJjULK3vdHQlcGh1ugcNFaVEvyP/eeL7/iE6O9v//GnopkaQXcYE6t9+Qv1vBtYlwiegUqW8zWj3IJld3H+9uH/oXM7nd8kX+ErOP13czDuP9tmxbeOF8J8kNkOKdd1CyKizUqrJjtO6WnaOOutVDQ7svtJlrntI/wKA2Q9zO3B59BtRp325kf0CPKa8vyEl6TdKQG0TmdYNNXRdxQEGw9eEd5eM0ySnKgFRRSttuOZg10hg75NgytrbXxPRN8e6ZlFkjvfud7TPnV/dtyh00iv7pdHQVQTbCh/yNc2OdT0GAOUlYbwnS9X0WHXMj/O6zjkFH0pDG1r/oKWE75vGxiM3PlM97ma2ra/O6unLPgx3m+EB3a3Ar+cNejR4YCftIa0zKrYW005hvQXf9Hq/6URQWmZn3oEp7PlkcnE391CvZ/ccdgP/+CDqtsq6/uGj8TLcbYgZK8+V2gcXmg0BJk6JKCaCPn0UjFaZMSd0+7AYcI5xZiCX9lVxFWA8NNDIKVyeT64upujDdzSb395fm7PdlriGOYLFb00x4pHvrl2L49kK2nZFqm/B+MScBXY7TSnLiCD/mhaPBq7z/2JVA3urLrcGxpYbVEOcqsCvDBi6d6/gn8usEG0D01vbd6P/l3ELcUKrnG0viZUZWlDgNa7ysLICIwt++Az5frn50wY3dvtUKJYWnP7hnf7zHw==")));
self::$_FlexDBShe = unserialize(gzinflate(/*1679727646*/base64_decode("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")));
self::$X_FlexDBShe = unserialize(gzinflate(/*1679727646*/base64_decode("S7QysKquBQA=")));
self::$XX_FlexDBShe = unserialize(gzinflate(/*1679727646*/base64_decode("S7QysKquBQA=")));
self::$_ExceptFlex = unserialize(gzinflate(/*1679727646*/base64_decode("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")));
self::$_AdwareSig = unserialize(gzinflate(/*1679727646*/base64_decode("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")));
self::$_PhishingSig = unserialize(gzinflate(/*1679727646*/base64_decode("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")));
self::$_JSVirSig = unserialize(gzinflate(/*1679727646*/base64_decode("")));
self::$X_JSVirSig = unserialize(gzinflate(/*1679727646*/base64_decode("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")));
self::$_SusDB = unserialize(gzinflate(/*1679727646*/base64_decode("")));
self::$_CronDB = unserialize(gzinflate(/*1679727646*/base64_decode("S7QysKquBQA=")));
self::$_Mnemo = unserialize(gzinflate(/*1679727646*/base64_decode("")));
self::$_DeMapper = unserialize(base64_decode("YTo1OntzOjEwOiJ3aXphcmQucGhwIjtzOjM3OiJjbGFzcyBXZWxjb21lU3RlcCBleHRlbmRzIENXaXphcmRTdGVwIjtzOjE3OiJ1cGRhdGVfY2xpZW50LnBocCI7czozNzoieyBDVXBkYXRlQ2xpZW50OjpBZGRNZXNzYWdlMkxvZygiZXhlYyI7czoxMToiaW5jbHVkZS5waHAiO3M6NDg6IkdMT0JBTFNbIlVTRVIiXS0+SXNBdXRob3JpemVkKCkgJiYgJGFyQXV0aFJlc3VsdCI7czo5OiJzdGFydC5waHAiO3M6NjA6IkJYX1JPT1QuJy9tb2R1bGVzL21haW4vY2xhc3Nlcy9nZW5lcmFsL3VwZGF0ZV9kYl91cGRhdGVyLnBocCI7czoxMDoiaGVscGVyLnBocCI7czo1ODoiSlBsdWdpbkhlbHBlcjo6Z2V0UGx1Z2luKCJzeXN0ZW0iLCJvbmVjbGlja2NoZWNrb3V0X3ZtMyIpOyI7fQ=="));
self::$db_meta_info = unserialize(base64_decode("YTozOntzOjEwOiJidWlsZC1kYXRlIjtzOjEwOiIxNjc5NTc4MTA4IjtzOjc6InZlcnNpb24iO3M6MTQ6IjIwMjMwMzIzLTEwMDQyIjtzOjEyOiJyZWxlYXNlLXR5cGUiO3M6MTA6InByb2R1Y3Rpb24iO30="));

//END_SIG
    }
}


class CmsVersionDetector
{
    const CMS_BITRIX = 'Bitrix';
    const CMS_WORDPRESS = 'WordPress';
    const CMS_JOOMLA = 'Joomla';
    const CMS_DLE = 'Data Life Engine';
    const CMS_IPB = 'Invision Power Board';
    const CMS_WEBASYST = 'WebAsyst';
    const CMS_OSCOMMERCE = 'OsCommerce';
    const CMS_DRUPAL = 'Drupal';
    const CMS_MODX = 'MODX';
    const CMS_INSTANTCMS = 'Instant CMS';
    const CMS_PHPBB = 'PhpBB';
    const CMS_VBULLETIN = 'vBulletin';
    const CMS_SHOPSCRIPT = 'PHP ShopScript Premium';
    
    const CMS_VERSION_UNDEFINED = '0.0';

    private $root_path;
    private $versions;
    private $types;

    public function __construct($root_path = '.') {
        $this->root_path = $root_path;
        $this->versions  = [];
        $this->types     = [];

        $version = '';

        $dir_list   = $this->getDirList($root_path);
        $dir_list[] = $root_path;

        foreach ($dir_list as $dir) {
            if ($this->checkBitrix($dir, $version)) {
                $this->addCms(self::CMS_BITRIX, $version);
            }

            if ($this->checkWordpress($dir, $version)) {
                $this->addCms(self::CMS_WORDPRESS, $version);
            }

            if ($this->checkJoomla($dir, $version)) {
                $this->addCms(self::CMS_JOOMLA, $version);
            }

            if ($this->checkDle($dir, $version)) {
                $this->addCms(self::CMS_DLE, $version);
            }

            if ($this->checkIpb($dir, $version)) {
                $this->addCms(self::CMS_IPB, $version);
            }

            if ($this->checkWebAsyst($dir, $version)) {
                $this->addCms(self::CMS_WEBASYST, $version);
            }

            if ($this->checkOsCommerce($dir, $version)) {
                $this->addCms(self::CMS_OSCOMMERCE, $version);
            }

            if ($this->checkDrupal($dir, $version)) {
                $this->addCms(self::CMS_DRUPAL, $version);
            }

            if ($this->checkMODX($dir, $version)) {
                $this->addCms(self::CMS_MODX, $version);
            }

            if ($this->checkInstantCms($dir, $version)) {
                $this->addCms(self::CMS_INSTANTCMS, $version);
            }

            if ($this->checkPhpBb($dir, $version)) {
                $this->addCms(self::CMS_PHPBB, $version);
            }

            if ($this->checkVBulletin($dir, $version)) {
                $this->addCms(self::CMS_VBULLETIN, $version);
            }

            if ($this->checkPhpShopScript($dir, $version)) {
                $this->addCms(self::CMS_SHOPSCRIPT, $version);
            }

        }
    }

    function getDirList($target) {
        $remove      = [
            '.',
            '..'
        ];
        $directories = array_diff(scandir($target), $remove);

        $res = [];

        foreach ($directories as $value) {
            if (is_dir($target . '/' . $value)) {
                $res[] = $target . '/' . $value;
            }
        }

        return $res;
    }

    function isCms($name, $version) {
        for ($i = 0, $iMax = count($this->types); $i < $iMax; $i++) {
            if ((strpos($this->types[$i], $name) !== false) && (strpos($this->versions[$i], $version) !== false)) {
                return true;
            }
        }

        return false;
    }

    function getCmsList() {
        return $this->types;
    }

    function getCmsVersions() {
        return $this->versions;
    }

    function getCmsNumber() {
        return count($this->types);
    }

    function getCmsName($index = 0) {
        return $this->types[$index];
    }

    function getCmsVersion($index = 0) {
        return $this->versions[$index];
    }

    private function addCms($type, $version) {
        $this->types[]    = $type;
        $this->versions[] = $version;
    }

    private function checkBitrix($dir, &$version) {
        $version = self::CMS_VERSION_UNDEFINED;
        $res     = false;

        if (file_exists($dir . '/bitrix')) {
            $res = true;

            $tmp_content = @file_get_contents($this->root_path . '/bitrix/modules/main/classes/general/version.php');
            if (preg_match('|define\("SM_VERSION","(.+?)"\)|smi', $tmp_content, $tmp_ver)) {
                $version = $tmp_ver[1];
            }

        }

        return $res;
    }

    private function checkWordpress($dir, &$version) {
        $version = self::CMS_VERSION_UNDEFINED;
        $res     = false;

        if (file_exists($dir . '/wp-admin')) {
            $res = true;

            $tmp_content = @file_get_contents($dir . '/wp-includes/version.php');
            if (preg_match('|\$wp_version\s*=\s*\'(.+?)\'|smi', $tmp_content, $tmp_ver)) {
                $version = $tmp_ver[1];
            }
        }

        return $res;
    }

    private function checkJoomla($dir, &$version) {
        $version = self::CMS_VERSION_UNDEFINED;
        $res     = false;

        if (file_exists($dir . '/libraries/joomla')) {
            $res = true;

            // for 1.5.x
            $tmp_content = @file_get_contents($dir . '/libraries/joomla/version.php');
            if (preg_match('|var\s+\$RELEASE\s*=\s*\'(.+?)\'|smi', $tmp_content, $tmp_ver)) {
                $version = $tmp_ver[1];

                if (preg_match('|var\s+\$DEV_LEVEL\s*=\s*\'(.+?)\'|smi', $tmp_content, $tmp_ver)) {
                    $version .= '.' . $tmp_ver[1];
                }
            }

            // for 1.7.x
            $tmp_content = @file_get_contents($dir . '/includes/version.php');
            if (preg_match('|public\s+\$RELEASE\s*=\s*\'(.+?)\'|smi', $tmp_content, $tmp_ver)) {
                $version = $tmp_ver[1];

                if (preg_match('|public\s+\$DEV_LEVEL\s*=\s*\'(.+?)\'|smi', $tmp_content, $tmp_ver)) {
                    $version .= '.' . $tmp_ver[1];
                }
            }


            // for 2.5.x and 3.x
            $tmp_content = @file_get_contents($dir . '/libraries/cms/version/version.php');

            if (preg_match('|const\s+RELEASE\s*=\s*\'(.+?)\'|smi', $tmp_content, $tmp_ver)) {
                $version = $tmp_ver[1];

                if (preg_match('|const\s+DEV_LEVEL\s*=\s*\'(.+?)\'|smi', $tmp_content, $tmp_ver)) {
                    $version .= '.' . $tmp_ver[1];
                }
            }

        }

        return $res;
    }

    private function checkDle($dir, &$version) {
        $version = self::CMS_VERSION_UNDEFINED;
        $res     = false;

        if (file_exists($dir . '/engine/engine.php')) {
            $res = true;

            $tmp_content = @file_get_contents($dir . '/engine/data/config.php');
            if (preg_match('|\'version_id\'\s*=>\s*"(.+?)"|smi', $tmp_content, $tmp_ver)) {
                $version = $tmp_ver[1];
            }

            $tmp_content = @file_get_contents($dir . '/install.php');
            if (preg_match('|\'version_id\'\s*=>\s*"(.+?)"|smi', $tmp_content, $tmp_ver)) {
                $version = $tmp_ver[1];
            }

        }

        return $res;
    }

    private function checkIpb($dir, &$version) {
        $version = self::CMS_VERSION_UNDEFINED;
        $res     = false;

        if (file_exists($dir . '/ips_kernel')) {
            $res = true;

            $tmp_content = @file_get_contents($dir . '/ips_kernel/class_xml.php');
            if (preg_match('|IP.Board\s+v([0-9\.]+)|si', $tmp_content, $tmp_ver)) {
                $version = $tmp_ver[1];
            }

        }

        return $res;
    }

    private function checkWebAsyst($dir, &$version) {
        $version = self::CMS_VERSION_UNDEFINED;
        $res     = false;

        if (file_exists($dir . '/wbs/installer')) {
            $res = true;

            $tmp_content = @file_get_contents($dir . '/license.txt');
            if (preg_match('|v([0-9\.]+)|si', $tmp_content, $tmp_ver)) {
                $version = $tmp_ver[1];
            }

        }

        return $res;
    }

    private function checkOsCommerce($dir, &$version) {
        $version = self::CMS_VERSION_UNDEFINED;
        $res     = false;

        if (file_exists($dir . '/includes/version.php')) {
            $res = true;

            $tmp_content = @file_get_contents($dir . '/includes/version.php');
            if (preg_match('|([0-9\.]+)|smi', $tmp_content, $tmp_ver)) {
                $version = $tmp_ver[1];
            }

        }

        return $res;
    }

    private function checkDrupal($dir, &$version) {
        $version = self::CMS_VERSION_UNDEFINED;
        $res     = false;

        if (file_exists($dir . '/sites/all')) {
            $res = true;

            $tmp_content = @file_get_contents($dir . '/CHANGELOG.txt');
            if (preg_match('|Drupal\s+([0-9\.]+)|smi', $tmp_content, $tmp_ver)) {
                $version = $tmp_ver[1];
            }

        }

        if (file_exists($dir . '/core/lib/Drupal.php')) {
            $res = true;

            $tmp_content = @file_get_contents($dir . '/core/lib/Drupal.php');
            if (preg_match('|VERSION\s*=\s*\'(\d+\.\d+\.\d+)\'|smi', $tmp_content, $tmp_ver)) {
                $version = $tmp_ver[1];
            }

        }

        if (file_exists($dir . 'modules/system/system.info')) {
            $res = true;

            $tmp_content = @file_get_contents($dir . 'modules/system/system.info');
            if (preg_match('|version\s*=\s*"\d+\.\d+"|smi', $tmp_content, $tmp_ver)) {
                $version = $tmp_ver[1];
            }

        }

        return $res;
    }

    private function checkMODX($dir, &$version) {
        $version = self::CMS_VERSION_UNDEFINED;
        $res     = false;

        if (file_exists($dir . '/manager/assets')) {
            $res = true;

            // no way to pick up version
        }

        return $res;
    }

    private function checkInstantCms($dir, &$version) {
        $version = self::CMS_VERSION_UNDEFINED;
        $res     = false;

        if (file_exists($dir . '/plugins/p_usertab')) {
            $res = true;

            $tmp_content = @file_get_contents($dir . '/index.php');
            if (preg_match('|InstantCMS\s+v([0-9\.]+)|smi', $tmp_content, $tmp_ver)) {
                $version = $tmp_ver[1];
            }

        }

        return $res;
    }

    private function checkPhpBb($dir, &$version) {
        $version = self::CMS_VERSION_UNDEFINED;
        $res     = false;

        if (file_exists($dir . '/includes/acp')) {
            $res = true;

            $tmp_content = @file_get_contents($dir . '/config.php');
            if (preg_match('|phpBB\s+([0-9\.x]+)|smi', $tmp_content, $tmp_ver)) {
                $version = $tmp_ver[1];
            }

        }

        return $res;
    }

    private function checkVBulletin($dir, &$version) {
        $version = self::CMS_VERSION_UNDEFINED;
        $res     = false;

        // removed dangerous code from here, see DEF-10390 for details

        return $res;
    }

    private function checkPhpShopScript($dir, &$version) {
        $version = self::CMS_VERSION_UNDEFINED;
        $res     = false;

        if (file_exists($dir . '/install/consts.php')) {
            $res = true;

            $tmp_content = @file_get_contents($dir . '/install/consts.php');
            if (preg_match('|STRING_VERSION\',\s*\'(.+?)\'|smi', $tmp_content, $tmp_ver)) {
                $version = $tmp_ver[1];
            }

        }

        return $res;
    }
}


class CloudAssistedRequest
{
    const API_URL = 'https://api.imunify360.com/api/hashes/check';
    const DELAY_SECONDS     = 60;

    private $timeout        = 60;
    private $server_id      = '';
    private $curl_handle    = null;
    private $delay          = self::DELAY_SECONDS;
    private $last_attempt   = 0;
    private $last_error     = false;

    public function __construct($server_id, $timeout = 60)
    {
        if (!defined('DEBUG_CA')) {
            define ('DEBUG_CA', false);
        }

        $this->server_id    = $server_id;
        $this->timeout      = $timeout;
        $url = (!DEBUG_CA ? self::API_URL : (CA_API_URL_DEBUG . '/api/hashes/check')) . '?server_id=' . urlencode($this->server_id) . '&indexed=1';
        try {
            $ch = curl_init();
            curl_setopt($ch, CURLOPT_URL            , $url);
            curl_setopt($ch, CURLOPT_CUSTOMREQUEST  , 'POST');
            curl_setopt($ch, CURLOPT_SSL_VERIFYPEER , false);
            curl_setopt($ch, CURLOPT_SSL_VERIFYHOST , false);
            curl_setopt($ch, CURLOPT_TIMEOUT        , $this->timeout);
            curl_setopt($ch, CURLOPT_CONNECTTIMEOUT , $this->timeout);
            curl_setopt($ch, CURLOPT_RETURNTRANSFER , true);
            curl_setopt($ch, CURLOPT_HTTPHEADER     , array('Content-Type: application/json'));
            $this->curl_handle = $ch;
        } catch (Exception $e) {
            curl_close($this->curl_handle);
            $this->curl_handle = null;
            throw new Exception($e->getMessage());
        }
    }

    public function close()
    {
        if ($this->curl_handle === null) {
            return;
        }
        curl_close($this->curl_handle);
        $this->curl_handle = null;
    }

    public function __destruct()
    {
        $this->close();
    }

    public function checkFilesByHash($list_of_hashes = [])
    {
        if (empty($list_of_hashes)) {
            return [
                [],
                [],
                [],
                [],
                [],
                [],
                'white'                 => [],
                'white_extended'        => [],
                'black'                 => [],
                'verdicts_black'        => [],
                'injection'             => [],
                'verdicts_injection'    => [],
            ];
        }

        if ($this->curl_handle === null) {
            return $list_of_hashes;
        }

        $result = $this->request($list_of_hashes);

        $white              = $result['white'] ?? [];
        $white_extended     = $result['white_extended'] ?? [];
        $black              = $result['black'] ?? [];
        $verdicts_black     = $result['verdicts_black'] ?? [];
        $injection          = $result['injection'] ?? [];
        $verdicts_injection = $result['verdicts_injection'] ?? [];

        return [
            $white,
            $white_extended,
            $black,
            $verdicts_black,
            $injection,
            $verdicts_injection,
            'white'                 => $white,
            'white_extended'        => $white_extended,
            'black'                 => $black,
            'verdicts_black'        => $verdicts_black,
            'injection'             => $injection,
            'verdicts_injection'    => $verdicts_injection,
        ];
    }

    // /////////////////////////////////////////////////////////////////////////

    private function request($list_of_hashes)
    {
        if ($this->curl_handle === null) {
            return $list_of_hashes;
        }

        if ($this->skipRequest()) {
            return $list_of_hashes;
        }
        $data = [
            'hashes' => $list_of_hashes,
        ];

        $json_hashes = json_encode($data);

        $info = [];
        $started = AibolitHelpers::currentTime();
        try {
            curl_setopt($this->curl_handle, CURLOPT_POSTFIELDS, $json_hashes);
            $response_data  = curl_exec($this->curl_handle);
            $info           = curl_getinfo($this->curl_handle);
            $errno          = curl_errno($this->curl_handle);
            if (defined('CLS_PERFORMANCE_STATS')) {
                PerformanceStats::addPerformanceItem(PerformanceStats::CAS_STAT, AibolitHelpers::currentTime() - $started);
            }
        }
        catch (Exception $e) {
            if (defined('CLS_PERFORMANCE_STATS')) {
                PerformanceStats::addPerformanceItem(PerformanceStats::CAS_STAT, AibolitHelpers::currentTime() - $started);
            }
            curl_close($this->curl_handle);
            $this->curl_handle = null;
            throw new Exception($e->getMessage());
        }

        $http_code      = $info['http_code'] ?? 0;
        if ($http_code !== 200) {
            $this->setError();
            if ($errno == 28) {
                throw new Exception('Request timeout! Return code: ' . $http_code . ' Curl error num: ' . $errno);
            }
            throw new Exception('Invalid response from the Cloud Assisted server! Return code: ' . $http_code . ' Curl error num: ' . $errno);
        }
        $this->clearError();
        $result = json_decode($response_data, true);
        if (is_null($result)) {
            throw new Exception('Invalid json format in the response!');
        }
        if (isset($result['error'])) {
            throw new Exception('API server returned error!');
        }
        if (!isset($result['result'])) {
            throw new Exception('API server returned error! Cannot find field "result".');
        }

        return $result['result'];
    }

    /**
     * @return void
     */
    private function setError()
    {
        if ($this->last_error) {
            $this->delay *= 2;
        }
        $this->last_error = true;
    }

    /**
     * @return void
     */
    private function clearError()
    {
        $this->delay = self::DELAY_SECONDS;
        $this->last_error = false;
    }

    /**
     * @return bool
     */
    private function skipRequest(): bool
    {
        $retry = ((int)(AibolitHelpers::currentTime() - $this->last_attempt) > $this->delay);
        if ($this->last_error && !$retry) {
            return true;
        }
        $this->last_attempt = AibolitHelpers::currentTime();
        return false;
    }
}


/**
 * Class Report
 */
abstract class Report
{
    const MAX_ROWS = 15000;
    const AIBOLIT_MAX_NUMBER = 200;

    /**
     * Report constructor.
     * @param $mnemo
     * @param $path
     * @param $db_location
     * @param $db_meta_info_version
     * @param $report_mask
     * @param $extended_report
     * @param $rapid_account_scan
     * @param $ai_version
     * @param $ai_extra_warn
     * @param $ai_expert
     * @param $ai_smart
     * @param $root_path
     * @param $scan_all
     * @param $specific_ext
     * @param $doublecheck
     * @param $use_doublecheck
     * @param $start
     * @param $snum
     * @param $max_size
     * @param $add_prefix
     * @param $no_prefix
     * @param $small
     * @param $file
     * @param $echo
     * @param $stat
     * @param $debug
     */
    public function __construct($mnemo, $path, $db_location, $db_meta_info_version, $report_mask, $extended_report,
        $rapid_account_scan, $ai_version, $ai_extra_warn, $ai_expert, $ai_smart, $root_path, $scan_all,
        $specific_ext, $doublecheck, $use_doublecheck, $start, $snum, $max_size, $add_prefix, $no_prefix, $small, $file, $echo, $stat, $debug)
    {

    }

    /**
     * Generate report
     * @param $vars
     * @param $scan_time
     * @return mixed
     */
    public function generateReport($vars, $scan_time)
    {

    }

    /**
     * Write report to file and return string to stdout after write attempt
     * @return string
     */
    public function write()
    {

    }

    /**
     * Add decision-making stats to report
     * @return void
     */
    public function addDecisionStats()
    {

    }

    protected static function convertToUTF8($text)
    {
        if (function_exists('mb_convert_encoding')) {
            $text = @mb_convert_encoding($text, 'utf-8', 'auto');
            $text = @mb_convert_encoding($text, 'UTF-8', 'UTF-8');
        }

        return $text;
    }

}


/**
 * Class JSONReport report all data to JSON
 */
class JSONReport extends Report
{
    const REPORT_MASK_DOORWAYS  = 1<<2;
    const REPORT_MASK_SUSP      = 1<<3;
    const REPORT_MASK_FULL      = self::REPORT_MASK_DOORWAYS | self::REPORT_MASK_SUSP;

    protected $raw_report;
    private $extended_report;
    private $rapid_account_scan;
    private $ai_extra_warn;
    private $report_mask;
    private $noPrefix;
    private $addPrefix;
    private $mnemo;
    private $small;
    protected $file;
    private $echo;
    private $stat;
    private $debug;

    public function __construct($mnemo, $path, $db_location, $db_meta_info_version, $report_mask, $extended_report,
        $rapid_account_scan, $ai_version, $ai_extra_warn, $ai_expert, $ai_smart, $root_path, $scan_all,
        $specific_ext, $doublecheck, $use_doublecheck, $start, $snum, $max_size, $add_prefix, $no_prefix,
        $small = false, $file = false, $echo = false, $stat = false, $debug = null)
    {
        $this->mnemo                = $mnemo;
        $this->ai_extra_warn        = $ai_extra_warn;
        $this->extended_report      = $extended_report;
        $this->rapid_account_scan   = $rapid_account_scan;
        $this->report_mask          = $report_mask;
        $this->addPrefix            = $add_prefix;
        $this->noPrefix             = $no_prefix;
        $this->small                = $small;
        $this->echo                 = $echo;
        $this->stat                 = $stat;
        $this->debug                = $debug;

        $this->raw_report = [];
        $this->raw_report['summary'] = [
            'scan_path'     => $path,
            'report_time'   => time(),
            'ai_version'    => $ai_version,
            'db_location'   => $db_location,
            'db_version'    => $db_meta_info_version,
        ];

        $this->file = $file;

        if($this->file) {
            @unlink($this->file);
            @unlink($this->file . '.tmp');
        }
    }

    public function generateReport($vars, $scan_time)
    {
        $tmp = clone $vars;
        if (!$this->small) {
            $tmp->criticalPHP   = array_slice($tmp->criticalPHP, 0, self::MAX_ROWS);
            $tmp->criticalJS    = array_slice($tmp->criticalJS, 0, self::MAX_ROWS);
            $tmp->notRead       = array_slice($tmp->notRead, 0, self::AIBOLIT_MAX_NUMBER);
            $tmp->symLinks      = array_slice($tmp->symLinks, 0, self::AIBOLIT_MAX_NUMBER);
            $tmp->warningPHP    = array_slice($tmp->warningPHP, 0, self::AIBOLIT_MAX_NUMBER);
            $tmp->suspiciousExt = array_slice($tmp->suspiciousExt, 0, self::AIBOLIT_MAX_NUMBER);
            $tmp->bigFiles      = array_slice($tmp->bigFiles, 0, self::AIBOLIT_MAX_NUMBER);
            $tmp->doorway       = array_slice($tmp->doorway, 0, self::AIBOLIT_MAX_NUMBER);
            $this->generateJSONTables($tmp);
        }

        $this->generateSummary($tmp, $scan_time);

    }

    public function addDecisionStats()
    {
        if (!defined('CLS_DECISION_MAKING_STATS')) {
            return;
        }
        $this->raw_report['summary']['decision_stats'] = (object)DecisionMakingStats::getReportData();
    }

    public function addErrors()
    {
        $this->raw_report['summary']['errors'] = Errors::get();
    }

    private function generateSummary($vars, $scan_time)
    {
        $summary_counters                       = [];
        $summary_counters['redirect']           = 0; //count($vars->redirect);
        $summary_counters['critical_php']       = count($vars->criticalPHP);
        $summary_counters['critical_js']        = count($vars->criticalJS);
        $summary_counters['cloudhash']          = count($vars->blackFiles);
        $summary_counters['phishing']           = count($vars->phishing);
        $summary_counters['unix_exec']          = 0; // count($g_UnixExec);
        $summary_counters['iframes']            = 0; // count($g_Iframer);
        $summary_counters['not_read']           = count($vars->notRead);
        $summary_counters['base64']             = 0; // count($g_Base64);
        $summary_counters['heuristics']         = 0; // count($g_HeuristicDetected);
        $summary_counters['symlinks']           = count($vars->symLinks);
        $summary_counters['big_files_skipped']  = count($vars->bigFiles);
        $summary_counters['suspicious']         = count($vars->warningPHP);
        $summary_counters['suspicious_ext']     = count($vars->suspiciousExt);

        $this->raw_report['summary']['counters']    = $summary_counters;
        $this->raw_report['summary']['total_files'] = $vars->foundTotalFiles;
        $this->raw_report['summary']['scan_time']   = $scan_time;
        $this->raw_report['summary']['mem_peak']    = memory_get_peak_usage(true);
        $this->raw_report['summary']['php_ver']     = PHP_VERSION;
        $this->raw_report['summary']['php_handler'] = PHP_BINARY;

        if (defined('CLS_PERFORMANCE_STATS')) {
            foreach (PerformanceStats::getPerformanceTypes() as $type) {
                $this->raw_report['summary'][$type] = round(PerformanceStats::getPerformanceItem($type), 4);
            }
        }

        if (is_object($this->debug) && $this->debug->getDebugPerformance() == true) {
            $this->raw_report['summary']['debug_performance']['slow_files'] = $this->debug->getSlowFiles(true);
            $this->raw_report['summary']['debug_performance']['deobfuscator'] = $this->debug->getDeobfuscatorData();
        }

        if (isset($vars->users)) {
            $this->raw_report['summary']['users'] = $vars->users->getList();
        }

        if ($this->extended_report && $this->rapid_account_scan) {
            $this->raw_report['summary']['counters']['rescan_count']    = $vars->rescanCount;
            $this->raw_report['summary']['counters']['rescan_rxgood']   = $vars->rescanRxGood;
        }

        if (isset($vars->options['detached']) && defined('CLS_PROC_STATS')) {
            $this->addProcStatsSummary();
        }

        $this->addErrors();
    }

    private function generateJSONTables($vars)
    {
        $this->raw_report['vulners'] = $this->getRawJsonVuln($vars->vulnerable, $vars);

        if (count($vars->criticalPHP) > 0) {
            $this->raw_report['php_malware'] = $this->getRawJson($vars->criticalPHP, $vars, $vars->criticalPHPFragment, $vars->criticalPHPSig);
        }

        if (count($vars->blackFiles) > 0) {
            $this->raw_report['cloudhash'] = $this->getRawBlackData($vars->blackFiles);
        }

        if (count($vars->criticalJS) > 0) {
            $this->raw_report['js_malware'] = $this->getRawJson($vars->criticalJS, $vars, $vars->criticalJSFragment, $vars->criticalJSSig);
        }

        if (count($vars->notRead) > 0) {
            $this->raw_report['not_read'] = $this->getSimpleList($vars->notRead);
        }

        if (count($vars->phishing) > 0) {
            $this->raw_report['phishing'] = $this->getRawJson($vars->phishing, $vars, $vars->phishingFragment, $vars->phishingSigFragment);
        }
        if (count($vars->symLinks) > 0) {
            $this->raw_report['sym_links'] = $this->getSimpleList($vars->symLinks);
        }
        if (count($vars->adwareList) > 0) {
            $this->raw_report['adware'] = $this->getRawJson($vars->adwareList, $vars, $vars->adwareListFragment);
        }
        if (count($vars->bigFiles) > 0) {
            $this->raw_report['big_files'] = $this->getSimpleList($vars->bigFiles);
        }
        if ((count($vars->doorway) > 0) && JSONReport::checkMask($this->report_mask, JSONReport::REPORT_MASK_DOORWAYS)) {
            $this->raw_report['doorway'] = $this->getSimpleList($vars->doorway);
        }
        if (count($vars->CMS) > 0) {
            $this->raw_report['cms'] = $this->getSimpleList($vars->CMS);
        }

        if (count($vars->suspiciousExt) > 0) {
            $this->raw_report['extended-suspicious'] = $this->getRawJson($vars->suspiciousExt, $vars, $vars->suspiciousExtFrag, $vars->suspiciousExtSig);
        }

        if ($this->ai_extra_warn) {
            if ((count($vars->warningPHP) > 0) && JSONReport::checkMask($this->report_mask, JSONReport::REPORT_MASK_FULL)) {
                $this->raw_report['suspicious'] = $this->getRawJson($vars->warningPHP, $vars, $vars->warningPHPFragment, $vars->warningPHPSig);
            }
        }
    }

    public static function checkMask($mask, $need)
    {
        return (($mask & $need) == $need);
    }

    public function write()
    {
        $ret = '';
        $res = @json_encode($this->raw_report);
        if ($res === false) {
            fwrite(STDERR, 'Warning: [JSONReport] ' . json_last_error_msg() . PHP_EOL);
            $res = @json_encode($this->raw_report, JSON_INVALID_UTF8_SUBSTITUTE);
        }
        if ($this->file !== '.' && $l_FH = fopen($this->file . '.tmp', 'w')) {
            fputs($l_FH, $res);
            fclose($l_FH);
            if (rename($this->file . '.tmp', $this->file)) {
                $ret = "Report written to '$this->file'.";
            } else {
                $ret = "Cannot create '$this->file'.";
            }
        }
        if ($this->echo) {
            echo $res;
        }
        return $ret;
    }

    ////////////////////////////////////////////////////////////////////////////

    private function getRawJsonVuln($par_List, $vars)
    {
        $results = [];
        $l_Src   = [
            '&quot;',
            '&lt;',
            '&gt;',
            '&amp;',
            '&#039;',
            '<' . '?php.'
        ];
        $l_Dst   = [
            '"',
            '<',
            '>',
            '&',
            '\'',
            '<' . '?php '
        ];

        for ($i = 0, $iMax = count($par_List); $i < $iMax; $i++) {
            $l_Pos = $par_List[$i]['ndx'];

            $fn = $this->addPrefix . str_replace($this->noPrefix, '', $vars->structure['n'][$l_Pos]);

            $res['fn']      = ENCODE_FILENAMES_WITH_BASE64 ? base64_encode($fn) : self::convertToUTF8($fn);
            $res['sig']     = $par_List[$i]['id'];
            $res['ct']      = $vars->structure['c'][$l_Pos];
            $res['mt']      = $vars->structure['m'][$l_Pos];
            $res['et']      = $vars->structure['e'][$l_Pos];
            $res['sz']      = $vars->structure['s'][$l_Pos];
            $res['sigid']   = 'vuln_' . md5($vars->structure['n'][$l_Pos] . $par_List[$i]['id']);

            $results[] = $res;
        }

        return $results;
    }

    private function getRawJson($par_List, $vars, $par_Details = null, $par_SigId = null)
    {
        $results = [];
        $l_Src   = [
            '&quot;',
            '&lt;',
            '&gt;',
            '&amp;',
            '&#039;',
            '<' . '?php.'
        ];
        $l_Dst   = [
            '"',
            '<',
            '>',
            '&',
            '\'',
            '<' . '?php '
        ];

        for ($i = 0, $iMax = count($par_List); $i < $iMax; $i++) {
            if ($par_SigId != null) {
                $l_SigId = 'id_' . $par_SigId[$i];
            } else {
                $l_SigId = 'id_n' . rand(1000000, 9000000);
            }

            $l_Pos = $par_List[$i];

            $fn = $this->addPrefix . str_replace($this->noPrefix, '', $vars->structure['n'][$l_Pos]);

            $res['fn'] = ENCODE_FILENAMES_WITH_BASE64 ? base64_encode($fn) : self::convertToUTF8($fn);

            if ($par_Details != null) {
                $res['sig'] = preg_replace('|(L\d+).+__AI_MARKER__|smi', '[$1]: ...', $par_Details[$i]);
                $res['sig'] = preg_replace('/[^\x20-\x7F]/', '.', $res['sig']);
                $res['sig'] = preg_replace('/__AI_MARKER__/', ' @!!!>', $res['sig']);
                $res['sig'] = str_replace($l_Src, $l_Dst, $res['sig']);
                $res['sig'] = self::convertToUTF8($res['sig']);
            }

            $res['ct']    = $vars->structure['c'][$l_Pos];
            $res['mt']    = $vars->structure['m'][$l_Pos];
            $res['sz']    = $vars->structure['s'][$l_Pos];
            $res['et']    = $vars->structure['e'][$l_Pos];
            $res['hash']  = $vars->structure['crc'][$l_Pos];
            $res['sigid'] = $l_SigId;
            if (isset($vars->structure['sha256'][$l_Pos])) {
                $res['sha256'] = $vars->structure['sha256'][$l_Pos];
            } else {
                $res['sha256'] = '';
            }


            if (isset($par_SigId) && isset($this->mnemo[$par_SigId[$i]])) {
                $res['sn'] = $this->mnemo[$par_SigId[$i]];
            } else {
                $res['sn'] = '';
            }
            if ($this->stat) {
                $res['uid']    = $vars->structure['u'][$l_Pos];
                $res['gid']    = $vars->structure['g'][$l_Pos];
                $res['mode']   = $vars->structure['p'][$l_Pos];
            }
            if (EMU_LOG_OFFSETS) {
                $res['emu_log'] = $vars->structure['offset'][$l_Pos];
            }

            $results[] = $res;
        }

        return $results;
    }

    private function getRawBlackData($black_list)
    {
        $result = [];
        foreach ($black_list as $filename => $entry)
        {
            try {
                if (!$entry['fi']->file_exists()) {
                    continue;
                }
                $sz   = $entry['fi']->getSize();
                $ct   = $entry['fi']->getCreated();
                $mt   = $entry['fi']->getModified();
                $u    = $entry['fi']->getUid();
                $g    = $entry['fi']->getGid();
                $p    = $entry['fi']->getMode();
            }
            catch (Exception $e) {
                continue;
            }

            $item = [
                'fn'    => ENCODE_FILENAMES_WITH_BASE64 ? base64_encode($filename) : $filename,
                'sig'   => '',
                'ct'    => $ct,
                'mt'    => $mt,
                'et'    => $entry['ts'],
                'sz'    => $sz,
                'hash'  => $entry['fi']->getSha256(),
                'sigid' => crc32($filename),
                'sn'    => isset($entry['sn']) ? $entry['sn'] : 'cld'
            ];

            if ($this->stat) {
                $item['uid']   = $u;
                $item['gid']   = $g;
                $item['mode']  = $p;
            }

            $result[] = $item;
        }
        return $result;
    }

    private function getSimpleList($list)
    {
        if (!ENCODE_FILENAMES_WITH_BASE64) {
            return $list;
        }
        foreach ($list as &$item) {
            $item = base64_encode($item);
        }
        unset($item);
        return $list;
    }

    private function addProcStatsSummary()
    {
        $procStats = ProcStats::collectAll();
        $tick = IniConfig::get('AT_CLKTCK');

        $this->raw_report['summary']['cpu_user'] = $procStats[ProcStats::STAT][13] / $tick;
        $this->raw_report['summary']['cpu_system'] = $procStats[ProcStats::STAT][14] / $tick;
        $this->raw_report['summary']['rchar'] = $procStats[ProcStats::IO]['rchar'];
        $this->raw_report['summary']['wchar'] = $procStats[ProcStats::IO]['wchar'];
        $this->raw_report['summary']['syscr'] = $procStats[ProcStats::IO]['syscr'];
        $this->raw_report['summary']['syscw'] = $procStats[ProcStats::IO]['syscw'];
        $this->raw_report['summary']['read_bytes'] = $procStats[ProcStats::IO]['read_bytes'];
        $this->raw_report['summary']['write_bytes'] = $procStats[ProcStats::IO]['write_bytes'];
        $this->raw_report['summary']['cancelled_write_bytes'] = $procStats[ProcStats::IO]['cancelled_write_bytes'];
        if ($this->extended_report) {
            $this->raw_report['summary']['AT_CLKTCK'] = $tick;
        }
    }
}


/**
 * Class JSONReport report all data to JSON
 */
class PHPReport extends JSONReport
{
    public function write()
    {
        $ret = '';
        $res = @serialize($this->raw_report);
        if ($l_FH = fopen($this->file . '.tmp', 'w')) {
            fputs($l_FH, $res);
            fclose($l_FH);
            if (rename($this->file . '.tmp', $this->file)) {
                $ret = "Report written to '$this->file'.";
            } else {
                $ret = "Cannot create '$this->file'.";
            }
        }
        return $ret;
    }

    ////////////////////////////////////////////////////////////////////////////
}


/**
 * Class PlainReport report to text file
 */
class PlainReport extends Report
{
    private $extended_report;
    private $rapid_account_scan;
    private $ai_extra_warn;
    private $noPrefix;
    private $addPrefix;
    private $mnemo;
    private $file;
    private $raw_report;

    public function __construct($mnemo, $path, $db_location, $db_meta_info_version, $report_mask, $extended_report,
        $rapid_account_scan, $ai_version, $ai_extra_warn, $ai_expert, $ai_smart, $root_path, $scan_all,
        $specific_ext, $doublecheck, $use_doublecheck, $start, $snum, $max_size, $add_prefix, $no_prefix,
        $small = false, $file = false, $echo = false, $stat = false)
    {
        $this->mnemo = $mnemo;
        $this->ai_extra_warn = $ai_extra_warn;
        $this->extended_report = $extended_report;
        $this->rapid_account_scan = $rapid_account_scan;
        $this->addPrefix = $add_prefix;
        $this->noPrefix = $no_prefix;
        $this->file = $file;

        if($this->file) {
            @unlink($this->file);
            @unlink($this->file . '.tmp');
        }

        $this->raw_report = '';
        if (function_exists("gethostname") && is_callable("gethostname")) {
            $l_HostName = gethostname();
        } else {
            $l_HostName = '???';
        }

        $this->raw_report = "# Malware list detected by AI-Bolit (https://revisium.com/ai/) on " . date("d/m/Y H:i:s", time()) . " " . $l_HostName . "\n\n";
    }

    public function generateReport($vars, $scan_time = false)
    {
        if (count($vars->criticalPHP) > 0) {
            $this->raw_report .= '[SERVER MALWARE]' . "\n" . $this->printPlainList(array_slice($vars->criticalPHP, 0, self::MAX_ROWS), $vars,  $vars->criticalPHPFragment) . "\n";
        }

        if (count($vars->criticalJS) > 0) {
            $this->raw_report .= '[CLIENT MALWARE / JS]' . "\n" . $this->printPlainList(array_slice($vars->criticalJS, 0, self::MAX_ROWS), $vars,  $vars->criticalJSFragment) . "\n";
        }

        if (count($vars->notRead) > 0) {
            $this->raw_report .= '[SCAN ERROR / SKIPPED]' . "\n" . $this->printPlainList(array_slice($vars->notRead, 0, self::AIBOLIT_MAX_NUMBER), $vars) . "\n\n";
        }

        if (count($vars->phishing) > 0) {
            $this->raw_report .= '[PHISHING]' . "\n" . $this->printPlainList($vars->phishing, $vars,  $vars->phishingFragment) . "\n";
        }
        if (count($vars->symLinks) > 0) {
            $this->raw_report .= '[SYMLINKS]' . "\n" . $this->printPlainList(array_slice($vars->symLinks, 0, self::AIBOLIT_MAX_NUMBER), $vars) . "\n\n";
        }

        if ($this->ai_extra_warn) {
            if (count($vars->warningPHP) > 0) {
                $this->raw_report .= '[SUSPICIOUS]' . "\n" . $this->printPlainList(array_slice($vars->warningPHP, 0, self::AIBOLIT_MAX_NUMBER), $vars,  $vars->warningPHPFragment) . "\n";
            }
        }

        if (count($vars->adwareList) > 0) {
            $this->raw_report .= '[ADWARE]' . "\n" . $this->printPlainList($vars->adwareList, $vars,  $vars->adwareListFragment) . "\n";
        }
        if (count($vars->bigFiles) > 0) {
            $this->raw_report .= '[BIG FILES / SKIPPED]' . "\n" . $this->printPlainList(array_slice($vars->bigFiles, 0, self::AIBOLIT_MAX_NUMBER), $vars) . "\n\n";
        }

        $this->raw_report = preg_replace('|__AI_MARKER__|smi', ' %> ', $this->raw_report);
    }

    public function write()
    {
        $ret = '';
        if ($l_FH = fopen($this->file . '.tmp', "w")) {
            fputs($l_FH, $this->raw_report);
            fclose($l_FH);
        }
        if (rename($this->file . '.tmp', $this->file)) {
            $ret = "Report written to '$this->file'.";
        } else {
            $ret = "Cannot create '$this->file'.";
        }
        return $ret;
    }

    ////////////////////////////////////////////////////////////////////////////
    private function printPlainList($par_List, $vars, $par_Details = null) {

        $l_Result = "";

        $l_Src = [
            '&quot;',
            '&lt;',
            '&gt;',
            '&amp;',
            '&#039;'
        ];
        $l_Dst = [
            '"',
            '<',
            '>',
            '&',
            '\''
        ];

        for ($i = 0, $iMax = count($par_List); $i < $iMax; $i++) {
            $l_Pos = $par_List[$i];

            if ($par_Details != null) {

                $l_Body = preg_replace('|(L\d+).+__AI_MARKER__|smi', '$1: ...', $par_Details[$i]);
                $l_Body = preg_replace('/[^\x20-\x7F]/', '.', $l_Body);
                $l_Body = str_replace($l_Src, $l_Dst, $l_Body);

            } else {
                $l_Body = '';
            }

            if (is_file($vars->structure['n'][$l_Pos])) {
                $l_Result .= $this->addPrefix . str_replace($this->noPrefix, '', $vars->structure['n'][$l_Pos]) . "\t\t\t" . $l_Body . "\n";
            } else {
                $l_Result .= $this->addPrefix . str_replace($this->noPrefix, '', $vars->structure['n'][$par_List[$i]]) . "\n";
            }

        }
        return $l_Result;
    }

    private function replacePathArray($par_Arr) {
        array_walk($par_Arr, function(&$n) {
            $n = $this->addPrefix . str_replace($this->noPrefix, '', $n);
        });
        return $par_Arr;
    }
}


/**
 * Class CSVReport report table data to CSV
 */
class CSVReport extends Report
{
    const CRITICAL_PHP   = 'p';
    const CRITICAL_JS    = 'j';
    const SUSPICIOUS     = 's';
    const SUSPICIOUS_EXT = 'es';
    const PHISHING       = 'h';
    const VULNERABLE     = 'v';
    const CLOUDHASH      = 'c';

    const BIG_FILES      = 'b';
    const NOT_READ       = 'n';
    const DOORWAY        = 'd';
    const SYMLINKS       = 'm';
    const ADWARE         = 'a';
    const CMS            = 'e';

    private $extended_report;
    private $rapid_account_scan;
    private $ai_extra_warn;
    private $noPrefix;
    private $addPrefix;
    private $mnemo;
    private $file;
    private $stat;

    public function __construct($mnemo, $path, $db_location, $db_meta_info_version, $report_mask, $extended_report,
        $rapid_account_scan, $ai_version, $ai_extra_warn, $ai_expert, $ai_smart, $root_path, $scan_all,
        $specific_ext, $doublecheck, $use_doublecheck, $start, $snum, $max_size, $add_prefix, $no_prefix,
        $small = false, $file = false, $echo = false, $stat = false)
    {
        $this->mnemo = $mnemo;
        $this->ai_extra_warn = $ai_extra_warn;
        $this->extended_report = $extended_report;
        $this->rapid_account_scan = $rapid_account_scan;
        $this->addPrefix = $add_prefix;
        $this->noPrefix = $no_prefix;
        $this->file = $file;
        $this->stat = $stat;

        if($this->file) {
            @unlink($this->file);
            @unlink($this->file . '.tmp');
        }
    }

    public function generateReport($vars, $scan_time = false)
    {
        $this->writeRawCSVVuln($vars->vulnerable, $vars);

        if (count($vars->criticalPHP) > 0) {
            $this->writeRawCSV($vars->criticalPHP, $vars, self::CRITICAL_PHP, $vars->criticalPHPFragment, $vars->criticalPHPSig);
        }

        if (count($vars->blackFiles) > 0) {
            $this->writeRawBlackData($vars->blackFiles);
        }

        if (count($vars->criticalJS) > 0) {
            $this->writeRawCSV($vars->criticalJS, $vars, self::CRITICAL_JS, $vars->criticalJSFragment, $vars->criticalJSSig);
        }

        if (count($vars->notRead) > 0) {
            $this->writeListCSV(self::NOT_READ, $vars->notRead);
        }

        if (count($vars->phishing) > 0) {
            $this->writeRawCSV($vars->phishing, $vars, self::PHISHING, $vars->phishingFragment, $vars->phishingSigFragment);
        }
        if (count($vars->symLinks) > 0) {
            $this->writeListCSV(self::SYMLINKS, $vars->symLinks);
        }
        if (count($vars->adwareList) > 0) {
            $this->writeRawCSV($vars->adwareList, $vars, self::ADWARE, $vars->adwareListFragment);
        }
        if (count($vars->bigFiles) > 0) {
            $this->writeListCSV(self::BIG_FILES, $vars->bigFiles);
        }
        if (count($vars->doorway) > 0) {
            $this->writeListCSV(self::DOORWAY, $vars->doorway);
        }
        if (count($vars->CMS) > 0) {
            $this->writeListCSV(self::CMS, $vars->CMS);
        }

        if (count($vars->suspiciousExt) > 0) {
            $this->writeRawCSV($vars->suspiciousExt, $vars, self::SUSPICIOUS_EXT, $vars->suspiciousExtFrag, $vars->suspiciousExtSig);
        }

        if ($this->ai_extra_warn) {
            if (count($vars->warningPHP) > 0) {
                $this->writeRawCSV($vars->warningPHP, $vars, self::SUSPICIOUS, $vars->warningPHPFragment, $vars->warningPHPSig);
            }
        }
    }

    public function write()
    {
        $ret = '';
        if ($this->file) {
            if (rename($this->file . '.tmp', $this->file)) {
                $ret = "Report written to '$this->file'.";
            } else {
                $ret = "Cannot create '$this->file'.";
            }
        }
        return $ret;
    }

    ////////////////////////////////////////////////////////////////////////////
    private function writeRawCSVVuln($par_List, $vars)
    {
        if (count($par_List) === 0) {
            return;
        }
        $fh = fopen($this->file . '.tmp', 'a+');
        for ($i = 0, $iMax = count($par_List); $i < $iMax; $i++) {
            $res    = [];
            $l_Pos  = $par_List[$i]['ndx'];
            $fn     = $this->addPrefix . str_replace($this->noPrefix, '', $vars->structure['n'][$l_Pos]);
            $res[]  = self::VULNERABLE;
            $res[]  = ENCODE_FILENAMES_WITH_BASE64 ? base64_encode($fn) : self::convertToUTF8($fn);
            $res[]  = $par_List[$i]['id'];
            $res[]  = $vars->structure['c'][$l_Pos];
            $res[]  = $vars->structure['m'][$l_Pos];
            $res[]  = $vars->structure['s'][$l_Pos];
            $res[]  = $vars->structure['e'][$l_Pos];
            $res[]  = 'vuln_' . md5($vars->structure['n'][$l_Pos] . $par_List[$i]['id']);
            $res[]  = '';
            $res[]  = '';
            $res[]  = '';

            if ($this->stat) {
                $res[] = '';
                $res[] = '';
                $res[] = '';
            }
            fputcsv($fh, $res);
        }
        fflush($fh);
        fclose($fh);
    }

    private function writeListCSV($section, $list)
    {
        if (count($list) === 0) {
            return;
        }
        $fh = fopen($this->file . '.tmp', "a+");
        for ($i = 0, $iMax = count($list); $i < $iMax; $i++) {
            $res = [];
            $res[] = $section;
            $res[] = ENCODE_FILENAMES_WITH_BASE64 ? base64_encode($list[$i]) : $list[$i];
            $res[] = '';
            $res[] = '';
            $res[] = '';
            $res[] = '';
            $res[] = '';
            $res[] = '';
            $res[] = '';
            $res[] = '';
            $res[] = '';

            if ($this->stat) {
                $res[] = '';
                $res[] = '';
                $res[] = '';
            }

            fputcsv($fh, $res);
        }
        fflush($fh);
        fclose($fh);
    }

    private function writeRawCSV($par_List, $vars, $section = '', $par_Details = null, $par_SigId = null)
    {
        if (count($par_List) === 0) {
            return;
        }
        $fh = fopen($this->file . '.tmp', "a+");
        $l_Src   = [
            '&quot;',
            '&lt;',
            '&gt;',
            '&amp;',
            '&#039;',
            '<' . '?php.',
            '\\'
        ];
        $l_Dst   = [
            '"',
            '<',
            '>',
            '&',
            '\'',
            '<' . '?php ',
            ''
        ];

        for ($i = 0, $iMax = count($par_List); $i < $iMax; $i++) {
            $res = [];
            $res[] = $section;
            if ($par_SigId != null) {
                $l_SigId = 'id_' . $par_SigId[$i];
            } else {
                $l_SigId = 'id_n' . rand(1000000, 9000000);
            }

            $l_Pos = $par_List[$i];

            $fn = $this->addPrefix . str_replace($this->noPrefix, '', $vars->structure['n'][$l_Pos]);

            $res[] = ENCODE_FILENAMES_WITH_BASE64 ? base64_encode($fn) : self::convertToUTF8($fn);

            if ($par_Details != null) {
                $sig = preg_replace('|(L\d+).+__AI_MARKER__|smi', '[$1]: ...', $par_Details[$i]);
                $sig = preg_replace('/[^\x20-\x7F]/', '.', $sig);
                $sig = preg_replace('/__AI_MARKER__/', ' @!!!>', $sig);
                $sig = str_replace($l_Src, $l_Dst, $sig);
                $sig = self::convertToUTF8($sig);
            }

            $res[]    = $sig;
            $res[]    = $vars->structure['c'][$l_Pos];
            $res[]    = $vars->structure['m'][$l_Pos];
            $res[]    = $vars->structure['s'][$l_Pos];
            $res[]    = $vars->structure['e'][$l_Pos];
            $res[]    = $l_SigId;
            $res[]    = $vars->structure['crc'][$l_Pos];

            if (isset($par_SigId) && isset($this->mnemo[$par_SigId[$i]])) {
                $res[] = $this->mnemo[$par_SigId[$i]];
            } else {
                $res[] = '';
            }

            if (isset($vars->structure['sha256'][$l_Pos])) {
                $res[] = $vars->structure['sha256'][$l_Pos];
            } else {
                $res[] = '';
            }
            if ($this->stat) {
                $res[] = $vars->structure['u'][$l_Pos];
                $res[] = $vars->structure['g'][$l_Pos];
                $res[] = $vars->structure['p'][$l_Pos];
            }
            fputcsv($fh, $res);
        }
        fflush($fh);
        fclose($fh);
    }

    private function writeRawBlackData($black_list)
    {
        if (count($black_list) === 0) {
            return;
        }
        $fh = fopen($this->file . '.tmp', 'a+');
        foreach ($black_list as $filename => $entry)
        {
            $res = [];
            try {
                if (!$entry['fi']->file_exists()) {
                    continue;
                }
                $sz   = $entry['fi']->getSize();
                $ct   = $entry['fi']->getCreated();
                $mt   = $entry['fi']->getModified();
                $u    = $entry['fi']->getUid();
                $g    = $entry['fi']->getGid();
                $p    = $entry['fi']->getMode();
            }
            catch (Exception $e) {
                continue;
            }

            $res[] = self::CLOUDHASH;
            $res[] = ENCODE_FILENAMES_WITH_BASE64 ? base64_encode($filename) : $filename;
            $res[] = '';
            $res[] = $ct;
            $res[] = $mt;
            $res[] = $sz;
            $res[] = $entry['ts'];
            $res[] = crc32($filename);
            $res[] = $entry['fi']->getSha256();
            $res[] = isset($entry['sn']) ? $entry['sn'] : 'cld';
            $res[] = '';
            if ($this->stat) {
                $res[] = $u;
                $res[] = $g;
                $res[] = $p;
            }
            fputcsv($fh, $res);
        }
        fflush($fh);
        fclose($fh);
    }
}


/**
 * Class DoublecheckReport generate doublecheck file
 */
class DoublecheckReport extends Report
{
    private $raw_report;
    private $skip = false;
    private $file = false;
    private $res = '';

    public function __construct($mnemo, $path, $db_location, $db_meta_info_version, $report_mask, $extended_report,
        $rapid_account_scan, $ai_version, $ai_extra_warn, $ai_expert, $ai_smart, $root_path, $scan_all,
        $specific_ext, $doublecheck, $use_doublecheck, $start, $snum, $max_size, $add_prefix, $no_prefix,
        $small = false, $file = false, $echo = false, $stat = false)
    {
        $this->raw_report = [];

        $this->file = $file;

        if(file_exists($this->file)) {
            $this->skip = true;
            $this->res .= $this->file . ' already exists.' . PHP_EOL;
        } else if ($l_FH = fopen($this->file . '.tmp', 'w')) {
            fputs($l_FH, '<?php die("Forbidden"); ?>' . "\n");
            fclose($l_FH);
        } else {
            $this->skip = true;
            $this->res .= 'Error! Cannot create ' . $this->file . PHP_EOL;
        }
    }

    public function generateReport($vars, $scan_time)
    {
        if ($this->skip) {
            return;
        }

        $l_CurrPath = __DIR__;

        if (!isset($vars->criticalPHP)) {
            $vars->criticalPHP = [];
        }
        if (!isset($vars->criticalJS)) {
            $vars->criticalJS = [];
        }
        if (!isset($vars->phishing)) {
            $vars->phishing = [];
        }
        if (!isset($vars->adwareList)) {
            $vars->adwareList = [];
        }
        if (!isset($vars->redirect)) {
            $vars->redirect = [];
        }

        $this->raw_report = array_merge($vars->criticalPHP, $vars->criticalJS, $vars->phishing, $vars->adwareList, $vars->redirect);
        $this->raw_report = array_values(array_unique($this->raw_report));

        for ($i = 0, $iMax = count($this->raw_report); $i < $iMax; $i++) {
            $this->raw_report[$i] = str_replace($l_CurrPath, '.', $vars->structure['n'][$this->raw_report[$i]]);
        }

        $this->raw_report = array_values(array_unique($this->raw_report));
        if (count($this->raw_report) === 0) {
            $this->skip = true;
            unlink($this->file . '.tmp');
        }
    }

    public function write()
    {
        $ret = '';
        if ($this->skip) {
            return $this->res;
        }
        $fh = fopen($this->file . '.tmp', "a+");
        for ($i = 0, $iMax = count($this->raw_report); $i < $iMax; $i++) {
            fputs($fh, $this->raw_report[$i] . "\n");
        }
        fclose($fh);
        if (rename($this->file . '.tmp', $this->file)) {
            $ret = "Report written to '$this->file'.";
        } else {
            $ret = "Cannot create '$this->file'.";
        }
        return $ret;
    }
}


/**
 * Class HTMLReport report all data to HTML
 */
class HTMLReport extends Report
{
    const REPORT_MASK_DOORWAYS  = 1<<2;
    const REPORT_MASK_SUSP      = 1<<3;
    const REPORT_MASK_FULL      = self::REPORT_MASK_DOORWAYS | self::REPORT_MASK_SUSP;

    private $raw_report;
    private $extended_report;
    private $rapid_account_scan;
    private $ai_extra_warn;
    private $report_mask;
    private $noPrefix;
    private $addPrefix;
    private $mnemo;
    private $small;
    private $file;
    private $echo;
    private $template;
    private $max_size;
    private $start;
    private $doublecheck;

    public function __construct($mnemo, $path, $db_location, $db_meta_info_version, $report_mask, $extended_report,
        $rapid_account_scan, $ai_version, $ai_extra_warn, $ai_expert, $ai_smart, $root_path, $scan_all,
        $specific_ext, $doublecheck, $use_doublecheck, $start, $snum, $max_size, $add_prefix, $no_prefix,
        $small = false, $file = false, $echo = false, $stat = false)
    {
        $this->mnemo = $mnemo;
        $this->ai_extra_warn = $ai_extra_warn;
        $this->extended_report = $extended_report;
        $this->rapid_account_scan = $rapid_account_scan;
        $this->report_mask = $report_mask;
        $this->addPrefix = $add_prefix;
        $this->noPrefix = $no_prefix;
        $this->small = $small;
        $this->echo = $echo;
        $this->max_size = $max_size;
        $this->start = $start;
        $this->doublecheck = $doublecheck;

        $this->raw_report = '';
        $this->file = $file;

        if($this->file) {
            @unlink($this->file);
            @unlink($this->file . '.tmp');
        }

        if (file_exists(dirname(__FILE__) . '/ai-design.html')) {
            $this->template = Template::create(file_get_contents(dirname(__FILE__) . '/ai-design.html'));
        } else {
            $this->template = Template::create(TemplateList::MAIN_PAGE);
            $this->template->set('msg1', Translate::getStr('data_table.length_menu'));
            $this->template->set('msg2', Translate::getStr('data_table.zero_records'));
            $this->template->set('msg3', Translate::getStr('data_table.info'));
            $this->template->set('msg4', Translate::getStr('data_table.info_empty'));
            $this->template->set('msg5', Translate::getStr('data_table.info_filtered'));
            $this->template->set('msg6', Translate::getStr('data_table.search'));
            $this->template->set('msg7', Translate::getStr('data_table.paginate.first'));
            $this->template->set('msg8', Translate::getStr('data_table.paginate.previous'));
            $this->template->set('msg9', Translate::getStr('data_table.paginate.next'));
            $this->template->set('msg10', Translate::getStr('data_table.paginate.last'));
            $this->template->set('msg11', Translate::getStr('data_table.aria.sort_ascending'));
            $this->template->set('msg12', Translate::getStr('data_table.aria.sort_descending'));
        }

        $this->template->set('MAIN_TITLE', Translate::getStr('header.scan_report_title'));

        $this->template->set('MODE', $ai_expert . '/' . $ai_smart);

        if (AI_EXPERT == 0) {
            $this->raw_report .= '<div class="rep">' . Translate::getStr('scan.offer_modes_after_express') . '</div>';
        }

        $this->template->set('HEAD_TITLE', Translate::getStr('report_for') . $this->addPrefix . str_replace($this->noPrefix, '', $root_path));

        $this->template->set('SERVICE_INFO', htmlspecialchars("[" . @ini_get('mbstring.internal_encoding') . "][" . $snum . "]"));

        $this->template->set('PATH_URL', (isset($_SERVER['HTTP_HOST']) ? $_SERVER['HTTP_HOST'] : $this->addPrefix . str_replace($this->noPrefix, '', $this->addSlash($root_path))));

        $this->template->set('VERSION', $ai_version);

        $this->template->set('WARN_QUICK', (($scan_all || $specific_ext) ? '' : Translate::getStr('notice.scan_express', [$doublecheck])));

        if ($use_doublecheck) {
            if (Translate::getStr('file.scanned_manual', [$this->doublecheck, $this->doublecheck]) != '') {
                $this->raw_report .= '<div class="rep">' . Translate::getStr('file.scanned_manual', [$this->doublecheck, $this->doublecheck]) . '</div>';
            }
        }
    }

    public function generateReport($vars, $scan_time)
    {
        $l_ShowOffer = false;

        $this->template->set('SCANNED', Translate::getStr('info.files_checked', [$vars->totalFolder, $vars->totalFiles]));

        $l_Summary = '<div class="title">' . Translate::getStr('report.summary') . '</div>';
        $l_Summary .= '<table cellspacing=0 border=0>';

        if (count($vars->criticalPHP) > 0) {
            $l_Summary .= $this->makeSummary(Translate::getStr('malware'), count($vars->criticalPHP), "crit");
        }

        if (count($vars->criticalJS) > 0) {
            $l_Summary .= $this->makeSummary(Translate::getStr('js_virused'), count($vars->criticalJS), "crit");
        }

        if (count($vars->phishing) > 0) {
            $l_Summary .= $this->makeSummary(Translate::getStr('phishing_pages'), count($vars->phishing), "crit");
        }

        if (count($vars->notRead) > 0) {
            $l_Summary .= $this->makeSummary(Translate::getStr('error.read_file'), count($vars->notRead), "crit");
        }

        if (count($vars->warningPHP) > 0) {
            $l_Summary .= $this->makeSummary(Translate::getStr('suspicious'), count($vars->warningPHP), "warn");
        }

        if (count($vars->bigFiles) > 0) {
            $l_Summary .= $this->makeSummary(Translate::getStr('skipped_large_file'), count($vars->bigFiles), "warn");
        }

        if (count($vars->symLinks) > 0) {
            $l_Summary .= $this->makeSummary(Translate::getStr('link.symbolic'), count($vars->symLinks), "warn");
        }

        $l_Summary .= "</table>";

        $l_ArraySummary                      = [];
        $l_ArraySummary["redirect"]          = 0;
        $l_ArraySummary["critical_php"]      = count($vars->criticalPHP);
        $l_ArraySummary["critical_js"]       = count($vars->criticalJS);
        $l_ArraySummary["phishing"]          = count($vars->phishing);
        $l_ArraySummary["unix_exec"]         = 0; // count($g_UnixExec);
        $l_ArraySummary["iframes"]           = 0; // count($g_Iframer);
        $l_ArraySummary["not_read"]          = count($vars->notRead);
        $l_ArraySummary["base64"]            = 0; // count($g_Base64);
        $l_ArraySummary["heuristics"]        = 0; // count($g_HeuristicDetected);
        $l_ArraySummary["symlinks"]          = count($vars->symLinks);
        $l_ArraySummary["big_files_skipped"] = count($vars->bigFiles);
        $l_ArraySummary["suspicious"]        = count($vars->warningPHP);

        if (function_exists('json_encode')) {
            $l_Summary .= "<!--[json]" . json_encode($l_ArraySummary) . "[/json]-->";
        }

        $l_Summary .= "<div class=details style=\"margin: 20px 20px 20px 0\">" . Translate::getStr('notice.files_may_not_malicious') . "</div>\n";

        $this->template->set('SUMMARY', $l_Summary);

        $this->raw_report .= Translate::getStr('critical.title');

        if (count($vars->criticalPHP) > 0) {
            $criticalPHP              = array_slice($vars->criticalPHP, 0, self::MAX_ROWS);
            $this->raw_report .= '<div class="note_vir">' . Translate::getStr('detected.shell_scripts') . ' (' . count($criticalPHP) . ')</div><div class="crit">';
            $this->raw_report .= $this->printList($criticalPHP, $vars, $vars->criticalPHPFragment, $vars->criticalPHPSig, 'table_crit');
            $this->raw_report .= '</div>' . PHP_EOL;
            $l_ShowOffer = true;
        } else {
            $this->raw_report .= '<div class="ok"><b>' . Translate::getStr('not_detected.shell_scripts') . '</b></div>';
        }

        if (count($vars->criticalJS) > 0) {
            $criticalJS              = array_slice($vars->criticalJS, 0, self::MAX_ROWS);
            $this->raw_report .= '<div class="note_vir">' . Translate::getStr('detected.javascript') . ' (' . count($criticalJS) . ')</div><div class="crit">';
            $this->raw_report .= $this->printList($criticalJS, $vars, $vars->criticalJSFragment, $vars->criticalJSSig, 'table_vir');
            $this->raw_report .= "</div>" . PHP_EOL;

            $l_ShowOffer = true;
        }

        if (count($vars->notRead) > 0) {
            $notRead               = array_slice($vars->notRead, 0, self::AIBOLIT_MAX_NUMBER);
            $this->raw_report .= '<div class="note_vir">' . Translate::getStr('warning.reading_error') . ' (' . count($notRead) . ')</div><div class="crit">';
            $this->raw_report .= $this->printList($notRead, $vars);
            $this->raw_report .= "</div><div class=\"spacer\"></div>" . PHP_EOL;
        }

        if (count($vars->phishing) > 0) {
            $this->raw_report .= '<div class="note_vir">' . Translate::getStr('detected.phishing_pages') . ' (' . count($vars->phishing) . ')</div><div class="crit">';
            $this->raw_report .= $this->printList($vars->phishing, $vars, $vars->phishingFragment, $vars->phishingSigFragment, 'table_vir');
            $this->raw_report .= "</div>" . PHP_EOL;

            $l_ShowOffer = true;
        }

        if (isset($vars->redirect) && count($vars->redirect) > 0) {
            $l_ShowOffer             = true;
            $this->raw_report .= '<div class="note_vir">' . Translate::getStr('suspicion.htaccess') . ' (' . count($vars->redirect) . ')</div><div class="crit">';
            $this->raw_report .= "</div>" . PHP_EOL;
        }

        if (count($vars->symLinks) > 0) {
            $symLinks               = array_slice($vars->symLinks, 0, self::AIBOLIT_MAX_NUMBER);
            $this->raw_report .= '<div class="note_vir">' . Translate::getStr('symlinks') . ' (' . count($symLinks) . ')</div><div class="crit">';
            $this->raw_report .= nl2br(AibolitHelpers::makeSafeFn(implode("\n", $symLinks), $this->addPrefix, $this->noPrefix, true));
            $this->raw_report .= "</div><div class=\"spacer\"></div>";
        }

        if ($this->ai_extra_warn) {
            $l_WarningsNum = count($vars->warningPHP);
            if ($l_WarningsNum > 0) {
                $this->raw_report .= "<div style=\"margin-top: 20px\" class=\"title\">" . Translate::getStr('warnings') . "</div>";
            }
            if ($l_WarningsNum > 0) {
                $warningPHP              = array_slice($vars->warningPHP, 0, self::AIBOLIT_MAX_NUMBER);
                $this->raw_report .= '<div class="note_warn">' . Translate::getStr('suspicion.code') . ' (' . count($warningPHP) . ')</div><div class="warn">';
                $this->raw_report .= $this->printList($warningPHP, $vars, $vars->warningPHPFragment, $vars->warningPHPSig, 'table_warn');
                $this->raw_report .= '</div>' . PHP_EOL;
            }
        }

        $l_WarningsNum = count($vars->bigFiles) + count($vars->adwareList) + count($vars->doorway) + count($vars->warningPHP) + count($vars->skippedFolders);

        if ($l_WarningsNum > 0) {
            $this->raw_report .= "<div style=\"margin-top: 20px\" class=\"title\">" . Translate::getStr('warnings') . "</div>";
        }

        if (count($vars->adwareList) > 0) {
            $this->raw_report .= '<div class="note_warn">' . Translate::getStr('detected.bad_links') . '</div><div class="warn">';
            $this->raw_report .= $this->printList($vars->adwareList, $vars, $vars->adwareListFragment);
            $this->raw_report .= "</div>" . PHP_EOL;
        }

        if (count($vars->bigFiles) > 0) {
            $bigFiles               = array_slice($vars->bigFiles, 0, self::AIBOLIT_MAX_NUMBER);
            $this->raw_report .= "<div class=\"note_warn\">" . Translate::getStr('skipped.large_file', [$this->max_size]) . '</div><div class="warn">';
            $this->raw_report .= nl2br(AibolitHelpers::makeSafeFn(implode("\n", $bigFiles), $this->addPrefix, $this->noPrefix, true));
            $this->raw_report .= "</div>";
        }

        if (count($vars->doorway) > 0) {
            $doorway              = array_slice($vars->doorway, 0, self::AIBOLIT_MAX_NUMBER);
            $this->raw_report .= '<div class="note_warn">' . Translate::getStr('suspicion.doorway') . '</div><div class="warn">';
            $this->raw_report .= nl2br(AibolitHelpers::makeSafeFn(implode("\n", $doorway), $this->addPrefix, $this->noPrefix, true));
            $this->raw_report .= "</div>" . PHP_EOL;

        }

        if (count($vars->CMS) > 0) {
            $this->raw_report .= "<div class=\"note_warn\">" . Translate::getStr('founded_CMS') . "<br/>";
            $this->raw_report .= nl2br(AibolitHelpers::makeSafeFn(implode("\n", $vars->CMS), $this->addPrefix, $this->noPrefix));
            $this->raw_report .= "</div>";
        }

        if (function_exists('memory_get_peak_usage')) {
            $this->template->set('MEMORY', Translate::getStr('memory_used') . AibolitHelpers::bytes2Human(memory_get_peak_usage()));
        }

        if ($l_ShowOffer) {
            $this->template->set('OFFER', Translate::getStr('offer.when_has_critical'));
        } else {
            $this->template->set('OFFER', Translate::getStr('offer.when_no_critical'));
        }

        $this->template->set('OFFER_OUR_PRODUCTS', Translate::getStr('offer_our_products'));

        $this->template->set('CAUTION', Translate::getStr('сaution.aibolit_file'));

        $this->template->set('CREDITS', Translate::getStr('info.non_commercial_use'));

        $this->template->set('FOOTER', Translate::getStr('footer'));

        $this->template->set('STAT', Translate::getStr('info.time_elapsed', [$scan_time, date('d-m-Y в H:i:s', floor($this->start)), date('d-m-Y в H:i:s')]));

////////////////////////////////////////////////////////////////////////////
        $this->template->set('MAIN_CONTENT', $this->raw_report);
    }

    public function write()
    {
        $ret = '';
        $res = $this->template->render();
        if ($l_FH = fopen($this->file . '.tmp', "w")) {
            fputs($l_FH, $res);
            fclose($l_FH);
        }
        if (rename($this->file . '.tmp', $this->file)) {
            $ret = "Report written to '$this->file'.";
        } else {
            $ret = "Cannot create '$this->file'.";
        }
        return $ret;
    }

    ////////////////////////////////////////////////////////////////////////////

    /////////////////////////////////////////////////////////////////////////////////////

    private function makeSummary($par_Str, $par_Number, $par_Style)
    {
        return '<tr><td class="' . $par_Style . '" width=400>' . $par_Str . '</td><td class="' . $par_Style . '">' . $par_Number . '</td></tr>';
    }

    private function printList($par_List, $vars, $par_Details = null, $par_SigId = null, $par_TableName = null)
    {

        $i = 0;

        if ($par_TableName == null) {
            $par_TableName = 'table_' . rand(1000000, 9000000);
        }

        $l_Result = '';
        $l_Result .= "<div class=\"flist\"><table cellspacing=1 cellpadding=4 border=0 id=\"" . $par_TableName . "\">";

        $l_Result .= "<thead><tr class=\"tbgh" . ($i % 2) . "\">";
        $l_Result .= "<th width=70%>" . Translate::getStr('path') . "</th>";
        $l_Result .= "<th>" . Translate::getStr('property_change') . "</th>";
        $l_Result .= "<th>" . Translate::getStr('content_change') . "</th>";
        $l_Result .= "<th width=90>" . Translate::getStr('size') . "</th>";
        $l_Result .= "<th width=0 class=\"hidd\">CRC32</th>";
        $l_Result .= "<th width=0 class=\"hidd\"></th>";
        $l_Result .= "<th width=0 class=\"hidd\"></th>";
        $l_Result .= "<th width=0 class=\"hidd\"></th>";

        $l_Result .= "</tr></thead><tbody>";

        for ($i = 0, $iMax = count($par_List); $i < $iMax; $i++) {
            if ($par_SigId != null) {
                $l_SigId = 'id_' . $par_SigId[$i];
            } else {
                $l_SigId = 'id_z' . rand(1000000, 9000000);
            }

            $l_Pos = $par_List[$i];

            $l_Creat = $vars->structure['c'][$l_Pos] > 0 ? date("d/m/Y H:i:s", $vars->structure['c'][$l_Pos]) : '-';
            $l_Modif = $vars->structure['m'][$l_Pos] > 0 ? date("d/m/Y H:i:s", $vars->structure['m'][$l_Pos]) : '-';
            $l_Size  = $vars->structure['s'][$l_Pos] > 0 ? AibolitHelpers::bytes2Human($vars->structure['s'][$l_Pos]) : '-';

            if ($par_Details != null) {
                $l_WithMarker = preg_replace('|__AI_MARKER__|smi', '<span class="marker">&nbsp;</span>', $par_Details[$i]);

                $l_Body = '<div class="details">';

                if ($par_SigId != null) {
                    $l_Body .= '<a href="#" onclick="return hsig(\'' . $l_SigId . '\')">[x]</a> ';
                }

                $l_Body .= $l_WithMarker . '</div>';
            } else {
                $l_Body = '';
            }

            $l_Result .= '<tr class="tbg' . ($i % 2) . '" o="' . $l_SigId . '">';

            if (is_file($vars->structure['n'][$l_Pos])) {
                $l_Result .= '<td><div class="it"><a class="it">' . AibolitHelpers::makeSafeFn($this->addPrefix . str_replace($this->noPrefix, '', $vars->structure['n'][$l_Pos]), $this->addPrefix, $this->noPrefix) . '</a></div>' . $l_Body . '</td>';
            } else {
                $l_Result .= '<td><div class="it"><a class="it">' . AibolitHelpers::makeSafeFn($this->addPrefix . str_replace($this->noPrefix, '', $vars->structure['n'][$par_List[$i]]), $this->addPrefix, $this->noPrefix) . '</a></div></td>';
            }

            $l_Result .= '<td align=center><div class="ctd">' . $l_Creat . '</div></td>';
            $l_Result .= '<td align=center><div class="ctd">' . $l_Modif . '</div></td>';
            $l_Result .= '<td align=center><div class="ctd">' . $l_Size . '</div></td>';
            $l_Result .= '<td class="hidd"><div class="hidd">' . $vars->structure['crc'][$l_Pos] . '</div></td>';
            $l_Result .= '<td class="hidd"><div class="hidd">' . 'x' . '</div></td>';
            $l_Result .= '<td class="hidd"><div class="hidd">' . $vars->structure['m'][$l_Pos] . '</div></td>';
            $l_Result .= '<td class="hidd"><div class="hidd">' . $l_SigId . '</div></td>';
            $l_Result .= '</tr>';

        }

        $l_Result .= "</tbody></table></div><div class=clear style=\"margin: 20px 0 0 0\"></div>";

        return $l_Result;
    }

    private function addSlash($dir)
    {
        return rtrim($dir, DIRECTORY_SEPARATOR) . DIRECTORY_SEPARATOR;
    }
}


class CloudAssistedFiles
{
    private $white = [];
    private $white_extended = [];
    private $black = [];
    private $injection = [];

    public function __construct(CloudAssistedRequest $car, $file_list, $vars)
    {
        $list_of_hash       = [];
        $list_of_filepath   = [];
        foreach ($file_list as $file) {
            if (!$file->is_readable() || $file->is_dir()) {
                continue;
            }

            try {
                $list_of_hash[]     = $file->getSha256();
                $list_of_filepath[] = $file->getFilename();
            }
            catch (Exception $e) {

            }
        }

        if ($vars->hashtable !== null) {
            $vars->hashtable->add($list_of_filepath, $list_of_hash);
        }
        try {
            list(
                $white_raw,
                $white_extended_raw,
                $black_raw,
                $verdicts_black_raw,
                $injection_raw,
                $verdicts_injection_raw
            ) = $car->checkFilesByHash($list_of_hash);
        }
        catch (Exception $e) {
            throw $e;
        }

        $this->white = $this->getListOfFile($white_raw, $list_of_hash, $file_list, $list_of_filepath);
        $this->white_extended = $this->getListOfFile($white_extended_raw, $list_of_hash, $file_list, $list_of_filepath);
        $this->black = $this->getListOfFile($black_raw, $list_of_hash, $file_list, $list_of_filepath, $verdicts_black_raw);
        $this->injection = $this->getListOfFile($injection_raw, $list_of_hash, $file_list, $list_of_filepath, $verdicts_injection_raw);

        unset(
            $white_raw,
            $white_extended_raw,
            $black_raw,
            $verdicts_black_raw,
            $injection_raw,
            $verdicts_injection_raw,
            $list_of_hash,
            $list_of_filepath,
            $file_list
        );

    }

    public function getWhiteList()
    {
        return $this->white;
    }

    public function getWhiteExtendedList()
    {
        return $this->white_extended;
    }

    public function getBlackList()
    {
        return $this->black;
    }
    public function getInjectionList()
    {
        return $this->injection;
    }

    // =========================================================================

    private function getListOfFile($data_raw, $list_of_hash, $file_list, $list_of_filepath, $verdicts = [])
    {
        $result = [];
        foreach ($data_raw as $index => $hash_index)
        {
            if (!isset($list_of_hash[$hash_index])) {
                continue;
            }
            $hash_result = [
                'ts'    => time(),
                'fi'    => $file_list[$list_of_filepath[$hash_index]],
            ];
            if ($verdicts) {
                if (!isset($verdicts[$index])) {
                    throw new Exception('Wrong CloudAssisted format. List of verdicts has structure different from main list.');
                }
                $hash_result['sn'] = $verdicts[$index];
            }
            $result[$list_of_filepath[$hash_index]] = $hash_result;
        }
        return $result;
    }
}



class DetachedMode
{
    protected $workdir;
    protected $scan_id;
    protected $pid_file;
    protected $report_file;
    protected $csvreport_file;
    protected $done_file;
    protected $vars;
    protected $start_time;
    protected $json_report;
    protected $sock_file;
    protected $reports;
    protected $finder;
    protected $debug;

    public function __construct($finder, $debug, $scan_id, $vars, $start_time, $json_report, $basedir = '/var/imunify360/aibolit/run', $sock_file = '/var/run/defence360agent/generic_sensor.sock.2')
    {
        $this->scan_id  = $scan_id;
        $this->vars     = $vars;
        $this->setWorkDir($basedir, $scan_id);
        $this->pid_file     = $this->workdir . '/pid';
        $this->report_file  = $this->workdir . '/report.json';
        $this->csvreport_file  = $this->workdir . '/report.csv';
        $this->done_file    = $this->workdir . '/done';
        $this->start_time   = $start_time;
        $this->json_report  = $json_report;
        $this->setSocketFile($sock_file);
        $this->savePid();
        $this->checkWorkDir($this->workdir);
        if (isset($vars->options['json_report']) && !empty($vars->options['json_report']) && $vars->options['json_report'] !== '.') {
            $this->report_file  = $vars->options['json_report'];
        }
        if (isset($vars->options['csv_report']) && !empty($vars->options['csv_report']) && $vars->options['csv_report'] !== '.') {
            $this->csvreport_file  = $vars->options['csv_report'];
            $this->reports[CSVReport::class] = $this->csvreport_file;
        }
        $this->reports[JSONReport::class] = $this->report_file;
        $this->finder = $finder;
        $this->debug = $debug;
    }

    public function scanListing($listing, $use_base64)
    {
        $this->checkList($listing);
        $this->scanFilesFromListingFile($listing, $use_base64);
        $this->writeReport();
        $this->complete();
    }

    public function scanDirectories($dir)
    {
        file_exists(QUEUE_FILENAME) && unlink(QUEUE_FILENAME);
        $scan = new Scanner($this->finder, $this->vars);
        $scan->QCR_ScanDirectories($dir);
        $this->scanFilesFromListingFile(QUEUE_FILENAME, true);
        file_exists(QUEUE_FILENAME) && unlink(QUEUE_FILENAME);
        $this->writeReport();
        $this->complete();
        unset($scan);
    }

    // /////////////////////////////////////////////////////////////////////////

    protected function scanFilesFromListingFile($list_filepath, $use_base64 = false)
    {
        if (!is_file($list_filepath) || !is_readable($list_filepath)) {
            $this->vars->foundTotalFiles = 0;
            return;
        }
        $s_file = new ScanList($list_filepath, $use_base64);
        $this->vars->foundTotalFiles =  is_array($s_file) ? count($s_file) : $s_file->count();

        $scan = new Scanner($this->finder, $this->vars);
        $ca = null;
        if (defined('CLOUD_ASSIST_TOKEN')) {
            $ca = Factory::instance()->create(CloudAssistedRequest::class, [CLOUD_ASSIST_TOKEN]);
            HashVerdicts::init();
        }
        $scan->QCR_GoScan($s_file, $ca, null, ($list_filepath === QUEUE_FILENAME ? null : $this->finder->getFilter()));
        if (!is_null($ca)) {
            HashVerdicts::close();
            $ca->close();
            unset($ca);
        }
        $this->vars->bigFiles = $this->finder->getBigFiles();

        if (count($this->vars->bigFiles) > 0) {
            $scan->prepareBigFilesToCriticalList($this->vars->bigFiles, $this->vars);
        }
        $bigElfs = $this->finder->getBigElfFiles();

        if (count($bigElfs) > 0) {
            $scan->prepareBigElfFilesToCriticalSusList($bigElfs, $this->vars);
        }
        $scan->whitelisting();

        unset($scan);
        unset($s_file);
        unset($bigElfs);
    }

    protected function checkWorkDir($workdir)
    {
        if (!file_exists($workdir) && !mkdir($workdir, 0750) && !is_dir($workdir)) {
            die('Error! Cannot create workdir ' . $workdir . ' for detached scan.');
        } elseif (file_exists($workdir) && !is_writable($workdir)) {
            die('Error! Workdir ' . $workdir . ' is not writable.');
        }
    }

    protected function checkList($listing)
    {
        if (!file_exists($listing) || !is_readable($listing)) {
            die('Error! Listing file ' . $listing . ' not exists or not readable');
        }
    }

    protected function savePid()
    {
        file_put_contents($this->pid_file, (string)getmypid());
    }

    protected function writeReport()
    {
        $scan_time = round(AibolitHelpers::currentTime() - $this->start_time, 1);

        foreach($this->json_report->call($this, $this->reports) as $json_report) {
            $json_report->generateReport($this->vars, $scan_time);
            $json_report->addDecisionStats();
            $json_report->write();
        }
    }

    protected function complete()
    {
        @touch($this->done_file);
        $complete = [
            'method'    => 'MALWARE_SCAN_COMPLETE',
            'scan_id'   => $this->scan_id,
        ];
        $json_complete = json_encode($complete) . "\n";
        $socket = fsockopen('unix://' . $this->sock_file);
        stream_set_blocking($socket, false);
        fwrite($socket, $json_complete);
        fclose($socket);
    }

    protected function setWorkDir($dir, $scan_id)
    {
        $this->workdir = $dir . '/' . $scan_id;
    }

    protected function setSocketFile($sock)
    {
        $this->sock_file = $sock;
    }
}


/**
 * Class ResidentMode used to stay aibolit alive in memory and wait for a job.
 */
class ResidentMode
{
    /**
     * send statistics every N seconds
     */
    const SEND_STAT_TIME = 3 * 3600; //3 hours
    /**
     * check upload folder every N seconds
     */
    const CHECK_UPLOAD_TIME = 3;
    /**
     * time of last check upload jobs folder
     * @var
     */
    protected $last_dir_check;
    /**
     * parent dir for all resident aibolit related
     * @var string
     */
    protected $resident_dir;
    /**
     * directory for all jobs to be processed by aibolit
     * @var string
     */
    protected $resident_in_dir;
    /**
     * directory with all the malicious files reports to be processed by imunify
     * @var string
     */
    protected $resident_out_dir;
    /**
     * file lock used to make sure we start only one aibolit
     * @var string
     */
    protected $aibolit_start_lock;
    /**
     * status file used to make sure aibolit didn't get stuck
     * @var string
     */
    protected $aibolit_status_file;
    /**
     * number of seconds while aibolit will stay alive, while not receiving any work
     * @var int
     */
    protected $stay_alive;
    /**
     * maximum number of seconds without updating ABOLIT_STATUS_FILE,
     * used to track if AIBOLIT is stuck, should be killed
     * @var int
     */
    protected $stuck_timeout;
    /**
     * number of seconds scripts would wait for aibolit to finish / send signal
     * @var int
     */
    protected $upload_timeout;
    /**
     * max number of files to pick
     * @var int
     */
    protected $max_files_per_notify_scan;
    /**
     * timestamp of last scan
     * @var int
     */
    protected $last_scan_time;
    /**
     * timestamp of last stat send
     * @var int
     */
    protected $last_send_stat = 0;
    /**
     * time to sleep between lifecycle iterations in microseconds
     */
    protected $sleep_time;

    protected $scannedNotify = 0;

    protected $report;

    protected $logger;

    protected $lic;

    protected $ca = null;

    protected $resident_in_dir_notify;
    protected $resident_in_dir_upload;
    protected $watchdog_socket;
    protected $activation_socket;
    protected $systemd = false;
    protected $interval = 0;
    protected $lastKeepAlive = 0;

    protected $signs;
    protected $finder;
    protected $options;

    const JOB_UPLOAD = 'upload';
    const JOB_NOTIFY = 'notify';

    const MAX_SIZE_SCAN_BYTES_FOR_UPLOAD = 1048576;// 1Mb

    protected $upload_jobs = [];
    protected $notify_jobs = [];

    /**
     * ResidentMode constructor.
     *
     * @param             $finder
     * @param             $debug
     * @param Closure     $report
     * @param             $signs
     * @param Logger|null $logger
     * @param array       $options
     * @param ImLicense   $lic
     * @param string      $resident_dir
     * @param int         $stay_alive
     * @param int         $stuck_timeout
     * @param int         $upload_timeout
     * @param int         $max_files_per_notify_scan
     * @param int         $sleep_time
     */
    public function __construct(
        $finder,
        $debug,
        Closure $report,
        $signs,
        Logger $logger = null,
        $options = null,
        $lic = null,
        $resident_dir = '/var/imunify360/aibolit/resident',
        $stay_alive = 30,
        $stuck_timeout = 5,
        $upload_timeout = 10,
        $max_files_per_notify_scan = 500,
        $sleep_time = 100000
    ) {
        $this->signs = $signs;
        $this->setResidentDir($resident_dir);
        $this->resident_in_dir = $this->resident_dir . '/in';
        $this->resident_in_dir_upload = $this->resident_in_dir . '/upload-jobs';
        $this->resident_in_dir_notify = $this->resident_in_dir . '/notify-jobs';
        $this->resident_out_dir = $this->resident_dir . '/out';
        $this->aibolit_start_lock = $this->resident_dir . '/start.lock';
        $this->aibolit_status_file = $this->resident_dir . '/aibolit.status';
        $this->stay_alive = $stay_alive;
        $this->stuck_timeout = $stuck_timeout;
        $this->upload_timeout = $upload_timeout;
        if (!empty($max_files_per_notify_scan)) {
            $this->max_files_per_notify_scan = $max_files_per_notify_scan;
        }
        $this->sleep_time = $sleep_time;
        $this->report = $report;
        $this->logger = $logger;
        $this->options = $options;

        umask(0000);
        if (!file_exists($this->resident_dir)) {
            if (!mkdir($this->resident_dir, 0777, true) && !is_dir($this->resident_dir)) {
                throw new Exception(sprintf('Directory "%s" was not created', $this->resident_dir));
            }
        }
        if (!file_exists($this->resident_in_dir)) {
            if (!mkdir($this->resident_in_dir, 0755) && !is_dir($this->resident_in_dir)) {
                throw new Exception(sprintf('Directory "%s" was not created', $this->resident_in_dir));
            }
        }
        if (!file_exists($this->resident_out_dir)) {
            if (!mkdir($this->resident_out_dir, 0755) && !is_dir($this->resident_out_dir)) {
                throw new Exception(sprintf('Directory "%s" was not created', $this->resident_out_dir));
            }
        }
        if (!file_exists($this->resident_in_dir_notify)) {
            if (!mkdir($this->resident_in_dir_notify, 0700) && !is_dir($this->resident_in_dir_notify)) {
                throw new Exception(sprintf('Directory "%s" was not created', $this->resident_in_dir_notify));
            }
        }
        if (!file_exists($this->resident_in_dir_upload)) {
            if (!mkdir($this->resident_in_dir_upload, 01777) && !is_dir($this->resident_in_dir_upload)) {
                throw new Exception(sprintf('Directory "%s" was not created', $this->resident_in_dir_upload));
            }
        }

        $this->checkSpecs();

        $addr = getenv('NOTIFY_SOCKET');
        if (isset($addr[0]) && $addr[0] === '@') {
            $addr = "\0";
        }

        if ($addr) {
            $this->systemd = true;
        }

        if ($this->systemd) {
            $this->watchdog_socket = fsockopen('udg://' . $addr);
            stream_set_blocking($this->watchdog_socket, false);

            $this->activation_socket = fopen('php://fd/3', 'r');
            if ($this->activation_socket === false) {
                die("Something went wrong with activation socket.");
            }
            stream_set_blocking($this->activation_socket, false);

            if (getenv('WATCHDOG_USEC') !== false) {
                $this->interval = (int)getenv('WATCHDOG_USEC');
            } else {
                $this->interval = 1000000;
            }
        }
        $this->finder = $finder;
        $this->debug = isset($debug) ? $debug : null;
        $this->lic = $lic;

        if (defined('CLOUD_ASSIST_TOKEN')) {
            $this->ca = Factory::instance()->create(CloudAssistedRequest::class, [CLOUD_ASSIST_TOKEN, 3]);
            HashVerdicts::init();
        }

        $this->lifeCycle();

        if (!is_null($this->ca)) {
            HashVerdicts::close();
            $this->ca->close();
            unset($this->ca);
        }
    }

    protected function isRootWriteable($folder)
    {
        $stat = @stat($folder);
        //file_exists() && is_dir()
        if (!$stat || ($stat['mode'] & 0xF000) !== 0040000) {
            return false;
        }

        $owner_id = (int)$stat['uid'];
        if ($owner_id !== 0) {
            return false;
        }

        $perms = (int)$stat['mode'];
        if (($perms & 0x0100)                           // owner r
            && ($perms & 0x0080)                        // owner w
            && ($perms & 0x0040) && !($perms & 0x0800)  // owner x
            && !($perms & 0x0010)                       // group without w
            && !($perms & 0x0002)                       // other without w
        ) {
            return true;
        }
        return false;
    }

    protected function isWorldWriteable($folder)
    {
        $stat = @stat($folder);
        //file_exists() && is_dir()
        if (!$stat || ($stat['mode'] & 0xF000) !== 0040000) {
            return false;
        }

        $perms = (int)$stat['mode'];
        if (($perms & 0x0004)                           // other r
            && ($perms & 0x0002)                        // other w
            && ($perms & 0x0200)                        // sticky bit
        ) {
            return true;
        }
        return false;
    }

    protected function checkSpecs()
    {
        if (!extension_loaded('posix')) {
            die('Error! For resident scan need posix extension.');
        } elseif (!$this->isRootWriteable($this->resident_in_dir_notify)) {
            die('Error! Notify in dir ' . $this->resident_in_dir_notify . ' must be root writeable.');
        } elseif (!$this->isWorldWriteable($this->resident_in_dir_upload)) {
            die('Error! Upload in dir ' . $this->resident_in_dir_upload . ' must be world writeable.');
        }
    }

    protected function setResidentDir($dir)
    {
        $this->resident_dir = $dir;
    }

    protected function writeReport($vars, $scan_time, $type, $file)
    {
        $file = AibolitHelpers::getBaseName($file);
        $critPHP = count($vars->criticalPHP);
        $critJS = count($vars->criticalJS);
        $black = count($vars->blackFiles);
        $warning = count($vars->warningPHP);
        $malware = ($critPHP > 0)
            || ($critJS > 0)
            || ($black > 0)
            || ($warning > 0);
        if ($malware) {
            $this->debugLog("Job {$file}: Found malware. PHP: {$critPHP}; JS: {$critJS}; Black: {$black}; SUS: {$warning}");
        } else {
            $this->debugLog("Job {$file}: No malware found.");
        }
        if ($type == 'upload') {
            $pid = (int)AibolitHelpers::getBaseName($file, '.upload_job');
            if ($malware) {
                $this->debugLog("Job {$file}: Sending SIGUSR1 to {$pid}");
                posix_kill($pid, SIGUSR1);
            } else {
                $this->debugLog("Job {$file}: Sending SIGUSR2 to {$pid}");
                posix_kill($pid, SIGUSR2);
            }
        } elseif ($type == 'notify' && $malware) {
            $filename = AibolitHelpers::getBaseName($file, '.notify_job');
            $reports[JSONReport::class] = $this->resident_out_dir . '/' . $filename . '.report';
            foreach($this->report->call($this, $reports) as $report) {
                $report->generateReport($vars, $scan_time);
                $this->debugLog("Job {$file}: Creating report for job in {$filename}.report");
                $report->write();
            }
            unset($reports);
        }
    }

    /**
     * @param string $pattern
     * @param string $type
     *
     * @return bool
     */
    protected function isJobFileExists($pattern, $type)
    {
        if ($type === self::JOB_UPLOAD) {
            if (empty($this->upload_jobs)) {
                $this->upload_jobs = glob($this->resident_in_dir . $pattern);
                if (!empty($this->upload_jobs)) {
                    return true;
                }
            } else {
                return true;
            }
        }

        if ($type === self::JOB_NOTIFY) {
            if (empty($this->notify_jobs)) {
                $this->notify_jobs = glob($this->resident_in_dir . $pattern);
                if (!empty($this->notify_jobs)) {
                    return true;
                }
            } else {
                return true;
            }
        }
        return false;
    }

    protected function isUploadJob()
    {
        $this->last_dir_check = AibolitHelpers::currentTime();
        if ($this->isJobFileExists('/upload-jobs/*.upload_job', self::JOB_UPLOAD)) {
            return true;
        }
        return false;
    }

    protected function scanJob($job_file, $type)
    {
        $start_time = AibolitHelpers::currentTime();

        $vars = new Variables();
        $vars->blacklist = $this->blacklist;
        if ($type === self::JOB_NOTIFY) {
            $this->finder->getFilter()->setSkipSystemOwner(isset($this->options['skip-system-owner']));
        } else {
            $this->finder->getFilter()->setSkipSystemOwner(false);
        }
        $vars->signs = $this->signs;
        $vars->users = new UserList();
        $vars->options = $this->options;

        $files_to_scan = [];
        $count = 0;

        $job = json_decode(file_get_contents($job_file));
        $file = AibolitHelpers::getBaseName($job_file);

        $this->debugLog("Job {$file} received from queue.");

        array_walk($job->files, static function(&$item) {
            $item = base64_decode($item);
        });

        $files_to_scan = $job->files;

        $count = count($files_to_scan);

        if ($type === self::JOB_NOTIFY) {
            $this->debugLog("Job {$file}: notify. {$count} files to be scanned");

            if ($count > $this->max_files_per_notify_scan) {
                $this->debugLog("Job {$file}: Too many files to scan. Job skipped.");
                // TODO: show a warning: too many files to scan, the job was skipped
                return true;
            }

            if ($this->scannedNotify + $count > $this->max_files_per_notify_scan) {
                $this->scannedNotify = 0;
                unset($vars, $files_to_scan);

                return false;
            }

            $this->scannedNotify += $count;
        } elseif ($type === self::JOB_UPLOAD) {
            $this->debugLog("Job {$file}: upload. {$count} files to be scanned");

            if ($count > 1) {
                $this->debugLog("Job {$file}: Too many files to scan. Job skipped.");
                // TODO: show a warning: too many files to scan, the job was skipped
                return true;
            }
        }

        $vars->foundTotalFiles = $count;

        $zipResult = false;
        if (isset($this->options['scan-archive']) && $type === self::JOB_UPLOAD && ZipScanner::isZip($files_to_scan[0])) {
            try {
                $max_size_scan_bytes = $type === self::JOB_UPLOAD ? self::MAX_SIZE_SCAN_BYTES_FOR_UPLOAD : null;
                $zipScanner = new ZipScanner($files_to_scan[0], $vars, $this->finder->getFilter(), [$this, 'keepAlive'], $max_size_scan_bytes);
                $zipResult = $zipScanner->scan($this->options['archive-max-size'], $this->options['max-num-files-in-archive'], $this->options['archive-max-folders-count']);
            }
            catch (Exception $e) {
            }
        }

        if (!$zipResult) {
            $max_size_scan_bytes = ($type === self::JOB_UPLOAD) ? self::MAX_SIZE_SCAN_BYTES_FOR_UPLOAD : null;
            $scan = new Scanner($this->finder, $vars, $this->debug, $max_size_scan_bytes);
            $filters        = $this->finder->getFilter();
            $skip_filters   = $type === self::JOB_UPLOAD ? ['check_size_range'] : [];
            $callback       = ($this->systemd && $type !== self::JOB_UPLOAD) ? [$this, 'keepAlive'] : null;
            $ca             = $type === self::JOB_NOTIFY ? $this->ca : null;

            $scan->QCR_GoScan($files_to_scan, $ca, $callback, $filters, $skip_filters);
            $scan->whitelisting();
        }

        $scan_time = round(AibolitHelpers::currentTime() - $start_time, 1);

        $this->last_scan_time = time();
        $this->writeReport($vars, $scan_time, $type, $job_file);
        $type === self::JOB_UPLOAD ? ResidentStats::addScannedUpload($count) : ResidentStats::addScannedNotify($count);

        unset($vars, $files_to_scan, $scan);

        return true;
    }

    protected function isNotifyJob()
    {
        if ($this->isJobFileExists('/notify-jobs/*.notify_job', self::JOB_NOTIFY)) {
            return true;
        }
        return false;
    }

    protected function scanUploadJob()
    {
        if (empty($this->upload_jobs)) {
            return;
        }
        foreach ($this->upload_jobs as $index => $upload_job)
        {
            $this->scanJob($upload_job, self::JOB_UPLOAD);
            $file = AibolitHelpers::getBaseName($upload_job);
            $this->debugLog("Job {$file}: Removing job.");
            $end_time = time();
            $upload_job_mtime = @filemtime($upload_job);
            ResidentStats::collectUploadJobLatency($end_time - $upload_job_mtime);
            unlink($upload_job);
            unset($this->upload_jobs[$index]);
        }
    }

    protected function scanNotifyJob()
    {
        if (empty($this->notify_jobs)) {
            return;
        }
        foreach ($this->notify_jobs as $index => $job)
        {
            $res = $this->scanJob($job, self::JOB_NOTIFY);
            if (!$res) {
                break;
            }
            $file = AibolitHelpers::getBaseName($job);
            $this->debugLog("Job {$file}: Removing job.");
            unlink($job);
            unset($this->notify_jobs[$index]);
        }
    }

    public function keepAlive($check_upload_job = true)
    {
        $last = ($this->last_send_stat === 0) ? START_TIME : $this->last_send_stat;
        if (AibolitHelpers::currentTime() - $last > static::SEND_STAT_TIME) {
            $this->debugLog(AibolitHelpers::currentTime() - $last . ' > ' . static::SEND_STAT_TIME . ' Time to send stats.');
            $this->sendStatData();
        }
        if ((int)((AibolitHelpers::currentTime() - $this->lastKeepAlive) * 1000000) > $this->interval / 2) {
            stream_get_contents($this->activation_socket);
            fwrite($this->watchdog_socket, 'WATCHDOG=1');
            $this->lastKeepAlive = AibolitHelpers::currentTime();
        }
        if ($check_upload_job && ((AibolitHelpers::currentTime() - $this->last_dir_check) > self::CHECK_UPLOAD_TIME)
            && !$this->isDirEmpty($this->resident_in_dir_upload)
            && $this->isUploadJob()
        ) {
            $this->scanUploadJob();
        }
    }

    protected function isDirEmpty($dir)
    {
        $it = new \FilesystemIterator($dir);
        return !$it->valid();
    }

    protected function lifeCycle()
    {
        $this->debugLog("Starting resident-mode loop.");
        $this->last_scan_time = time();
        while (true) {
            if ($this->systemd) {
                $this->keepAlive();
            }
            while ($this->isUploadJob()) {
                $this->scanUploadJob();
                $this->keepAlive(false);
            }

            while ($this->isNotifyJob() && !$this->isUploadJob()) {
                $this->scanNotifyJob();
                $this->keepAlive(false);
            }
            if ($this->last_scan_time + $this->stay_alive < time()) {
                $this->sendStatData();
                $this->debugLog("No more jobs. Sending statistics and shutting down.");
                break;
            }
            touch($this->aibolit_status_file);
            usleep($this->sleep_time); // 1/10 of second by default
        }
        if ($this->systemd) {
            fclose($this->watchdog_socket);
            fclose($this->activation_socket);
        }
        unlink($this->aibolit_status_file);
    }

    protected function debugLog($message)
    {
        if ($this->logger === null) {
            return;
        }
        $this->logger->debug($message);
    }

    protected function sendStatData()
    {
        $request = Factory::instance()->create(SendMessageRequest::class, ['AI-Resident']);
        ResidentStats::setLic($this->lic);
        ResidentStats::setRequest($request);
        ResidentStats::setAiVersion(AI_VERSION);
        ResidentStats::setSigVersion($this->signs->getDBMetaInfoVersion());
        ResidentStats::setStartTime(START_TIME);
        ResidentStats::sendStatData();
        $this->last_send_stat = AibolitHelpers::currentTime();
    }
}

if (!defined('FUNC_MEMORY_USAGE')) {
    define('FUNC_MEMORY_USAGE', function_exists('memory_get_usage'));
}
if (!defined('FUNC_MEMORY_PEAK_USAGE')) {
    define('FUNC_MEMORY_PEAK_USAGE', function_exists('memory_get_peak_usage'));
}
class DebugMode
{
    const SLOW_FILES_COUNT = 10;
    const SLOW_FILES_MIN_TIME = 0.5; // 1/2 of second

    const DEOBFUSCATOR_DEBUG_COUNT = 'count';
    const DEOBFUSCATOR_DEBUG_MEDIAN_TIME = 'median_time';
    const DEOBFUSCATOR_DEBUG_MAX_TIME = 'max_time';
    const DEOBFUSCATOR_DEBUG_MIN_TIME = 'min_time';
    const DEOBFUSCATOR_DEBUG_TIME_LIST = 'time_list';

    private $debugMode = false;
    private $debugPerformance = false;
    private $performance_stats = [];
    private $deobfuscatorData = [];

    private $slow_files = [];
    private $min_file = false;
    private $slow_files_count = self::SLOW_FILES_COUNT;
    private $slow_files_min_time = self::SLOW_FILES_MIN_TIME;


    public function __construct($debugMode, $debugPerformance)
    {
        $this->debugMode = $debugMode;
        $this->debugPerformance = $debugPerformance;
        if (defined('DEBUG_SLOW_FILES_COUNT')) {
            $this->slow_files_count = DEBUG_SLOW_FILES_COUNT;
        }
        if (defined('DEBUG_SLOW_FILES_MIN_TIME')) {
            $this->slow_files_min_time = DEBUG_SLOW_FILES_MIN_TIME;
        }
    }

    public function QCR_Debug($par_Str = "")
    {
        if ($this->debugMode) {
            return;
        }

        $l_MemInfo = ' ';
        if (FUNC_MEMORY_USAGE) {
            $l_MemInfo .= ' curmem=' . AibolitHelpers::bytes2Human(memory_get_usage());
        }

        if (FUNC_MEMORY_PEAK_USAGE) {
            $l_MemInfo .= ' maxmem=' . AibolitHelpers::bytes2Human(memory_get_peak_usage());
        }

        stdOut("\n" . date('H:i:s') . ': ' . $par_Str . $l_MemInfo . "\n");
    }

    public function getDebugMode()
    {
        return $this->debugMode;
    }

    public function getDebugPerformance()
    {
        return $this->debugPerformance;
    }

    /**
     * @param string $type
     * @param string $id
     * @param float $time_elapsed
     * @return void
     */
    public function addDeobfuscatorData(string $type, string $id, float $time_elapsed)
    {
        if (!isset($this->deobfuscatorData[$type][$id])) {
            $this->deobfuscatorData[$type][$id][self::DEOBFUSCATOR_DEBUG_COUNT] = 1;
            $this->deobfuscatorData[$type][$id][self::DEOBFUSCATOR_DEBUG_MEDIAN_TIME] = $time_elapsed;
            $this->deobfuscatorData[$type][$id][self::DEOBFUSCATOR_DEBUG_MAX_TIME] = $time_elapsed;
            $this->deobfuscatorData[$type][$id][self::DEOBFUSCATOR_DEBUG_MIN_TIME] = $time_elapsed;
            $this->deobfuscatorData[self::DEOBFUSCATOR_DEBUG_TIME_LIST][$type][$id] = [$time_elapsed];
        } else {
            $this->deobfuscatorData[$type][$id][self::DEOBFUSCATOR_DEBUG_COUNT]++;
            $this->deobfuscatorData[self::DEOBFUSCATOR_DEBUG_TIME_LIST][$type][$id][] = $time_elapsed;

            if ($this->deobfuscatorData[$type][$id][self::DEOBFUSCATOR_DEBUG_MAX_TIME] < $time_elapsed) {
                $this->deobfuscatorData[$type][$id][self::DEOBFUSCATOR_DEBUG_MAX_TIME] = $time_elapsed;
            }

            if ($this->deobfuscatorData[$type][$id][self::DEOBFUSCATOR_DEBUG_MIN_TIME] > $time_elapsed) {
                $this->deobfuscatorData[$type][$id][self::DEOBFUSCATOR_DEBUG_MIN_TIME] = $time_elapsed;
            }
        }
    }

    public function getDeobfuscatorData(): array
    {
        if (isset($this->deobfuscatorData[self::DEOBFUSCATOR_DEBUG_TIME_LIST])) {
            $this->calculateMedianTime();
            foreach ($this->deobfuscatorData as $type => $data) {
                uasort($this->deobfuscatorData[$type], function ($a, $b) {
                    if ($a['max_time'] === $b['max_time']) {
                        return 0;
                    }
                    return ($a['max_time'] < $b['max_time']) ? 1 : -1;
                });
            }
        }
        return $this->deobfuscatorData;
    }

    public function addPerformanceItem($item, $time)
    {
        $this->performance_stats[$item] = isset($this->performance_stats[$item]) ? $this->performance_stats[$item] + $time : 0;
    }

    public function addFile($file, $time)
    {
        if ($time < $this->slow_files_min_time) {
            return;
        }

        if (count($this->slow_files) < $this->slow_files_count) {
            $this->slow_files[(string) $time] = $file;
            $this->min_file = (float) min(array_keys($this->slow_files));
            return;
        }

        if ($this->min_file !== false && $time < $this->min_file) {
            return;
        }

        unset($this->slow_files[(string) $this->min_file]);
        $this->slow_files[(string) $time] = $file;
        $this->min_file = (float) min(array_keys($this->slow_files));
    }

    public function printPerformanceStats()
    {
        $keys = array_keys($this->performance_stats);
        for ($i = 0, $iMax = count($keys); $i < $iMax; $i++) {
            $this->performance_stats[$keys[$i]] = round($this->performance_stats[$keys[$i]] * 1000000);
        }

        arsort($this->performance_stats);

        foreach ($this->performance_stats as $r => $v) {
            echo $v . "\t\t" . $r . "\n";
        }
    }

    public function getSlowFiles($with_hash = false)
    {
        $res = [];
        krsort($this->slow_files);
        foreach ($this->slow_files as $time => $file) {
            $res[] = ['fn' => $file, 'sha256' => $with_hash ? hash_file('sha256', $file) : 0, 'time' => (float) $time];
        }
        return $res;
    }

    public function printSlowFiles()
    {
        krsort($this->slow_files);
        foreach ($this->slow_files as $time => $file) {
            echo $file . "\t\t" . $time . "\n";
        }
    }

    private function calculateMedianTime()
    {
        $list = $this->deobfuscatorData[self::DEOBFUSCATOR_DEBUG_TIME_LIST];
        unset($this->deobfuscatorData[self::DEOBFUSCATOR_DEBUG_TIME_LIST]);

        foreach ($this->deobfuscatorData as $type => $deobfuscatorDatum) {
            foreach ($deobfuscatorDatum as $id => $datum) {
                $this->deobfuscatorData[$type][$id][self::DEOBFUSCATOR_DEBUG_MEDIAN_TIME] =
                    $this->getMedianValue($list[$type][$id]);
            }
        }
    }

    /**
     * @param array<float> $nums
     * @return float
     */
    private function getMedianValue(array $nums)
    {
        $count = count($nums);
        asort($nums);
        $midIndex = (int)floor($count/2);

        if ($count < 1) {
            return 0;
        }

        if ($count === 1) {
            return $nums[0];
        }

        if ($count % 2 !== 0) {
            return $nums[$midIndex];
        }

        return ($nums[$midIndex - 1] + $nums[$midIndex]) / 2;
    }
}



class FileInfo
{
    protected $index = 0;
    protected $inode = 0;
    protected $cron = false;
    protected $filename = '';
    protected $filetype = '';
    protected $extension = '';
    protected $basename = '';
    protected $realpath = '';
    protected $size = null;
    protected $created = 0;
    protected $modified = 0;
    protected $hash = 0;
    protected $sha256 = 0;
    protected $sha1file = 0;
    protected $content = '';
    protected $norm_content = '';
    protected $is_binary = 0;
    protected $is_interesting = 0;
    protected $is_log = 0;
    protected $link = 0;
    protected $is_dir = 0;
    protected $is_file = 0;
    protected $is_readable = 0;
    protected $is_writable = 0;
    protected $is_exists = 0;
    protected $hashtable = null;
    protected $raw_stat = null;
    protected $uid = false;
    protected $gid = false;
    protected $groups = false;
    protected $mode = false;
    protected $raw_mode = false;
    protected $error = 0;

    /**
     * @return int|string
     */
    public function getSha1file()
    {
        if ($this->sha1file === 0) {
            $this->sha1file = sha1_file($this->filename);
        }
        return $this->sha1file;
    }

    /**
     * @return int|string
     */
    public function getSha256file()
    {
        if ($this instanceof ZipFileInfo) {
            return hash('sha256', $this->getContent());
        }
        return hash_file('sha256', $this->filename);
    }

    public function __construct($filename, $index, $hashtable = null)
    {
        $this->index = $index;
        $this->filename = $filename;
        $this->hashtable = $hashtable;
        $this->cron = (stripos($filename, '/var/spool/cron') === 0);
    }

    /**
     * @return bool
     */
    public function isBinary()
    {
        if ($this->is_binary !== 0) {
            return $this->is_binary;
        }
        $this->_setFlags();
        return $this->is_binary;
    }

    public function isCron()
    {
        return $this->cron;
    }

    public function isInteresting()
    {
        if ($this->is_interesting !== 0) {
            return $this->is_interesting;
        }
        $this->_setFlags();
        return $this->is_interesting;
    }

    public function isLog()
    {
        if ($this->is_log !== 0) {
            return $this->is_log;
        }
        if ($this->content === '') {
            $header = @file_get_contents($this->filename, false, null, 0, 200);
        } else {
            $header = substr($this->content, 0, 200);
        }
        if (HyperScan::canMatchLog()) {
            $this->is_log = HyperScan::matchLog($header);
        } else {
            $time = AibolitHelpers::currentTime();
            $this->is_log = (bool)preg_match('~\A\s*<\?(?:php)?\s*(?:exit|die)(?:\s*\(\s*(?:(?:\d+|[\'"][^\'"$]{1,199}[\'"])\s*)?\))?\s*;~msi', $header);
            if ($this->error === 0) {
                $this->error = preg_last_error();
            }
            if (defined('CLS_PERFORMANCE_STATS')) {
                PerformanceStats::addPerformanceItem(PerformanceStats::PCRE_SMART_STAT, AibolitHelpers::currentTime() - $time);
            }
        }

        return $this->is_log;
    }

    public function getError()
    {
        return $this->error;
    }

    /**
     * @return false|mixed|string
     */
    public function getContent()
    {
        if ($this->content === '') {
            $this->content = @file_get_contents($this->filename);
        }
        return $this->content;
    }

    /**
     * @return void
     */
    public function cleanContentCache()
    {
        $this->content = '';
        $this->norm_content = '';
    }

    /**
     * @return string
     */
    public function getContentWithoutSpaces($max_size = false)
    {
        if($this->norm_content !== '') {
            return $this->norm_content;
        }
        if (!$max_size) {
            $this->norm_content = Normalization::strip_whitespace($this->getContent());
        } else if(is_numeric($max_size)) {
            $this->norm_content = Normalization::strip_whitespace($this->getContentBytes($max_size));
        }
        return $this->norm_content;
    }

    public function getContentBytes($max_bytes)
    {
        if ($this->content === '') {
            $this->content = @file_get_contents($this->filename, false, null, 0, $max_bytes);
        }
        return $this->content;
    }

    /**
     * @param $text
     * @return string
     */
    private function _hash_($text)
    {
        static $r;

        if (empty($r)) {
            for ($i = 0; $i < 256; $i++) {
                if ($i < 33 || $i > 127) {
                    $r[chr($i)] = '';
                }
            }
        }

        return sha1(strtr($text, $r));
    }

    public function getIndex()
    {
        return $this->index;
    }

    public function getFilename()
    {
        return $this->filename;
    }

    protected function _setStat()
    {
        $info = @lstat($this->filename);
        if ($info === false) {
            $this->is_exists = false;
            return false;
        }
        $this->link = ($info['mode'] & 0xF000) === 0120000;
        if ($this->link) {
            $info = @stat($this->filename);
        }
        if ($info === false) {
            $this->is_exists = false;
            return false;
        }
        $this->is_exists = true;
        $this->is_dir = ($info['mode'] & 0xF000) === 0040000;
        $this->is_file = ($info['mode'] & 0xF000) === 0100000;
        $this->size = $info['size'];
        $this->created = $info['ctime'];
        $this->modified = $info['mtime'];
        $this->inode = $info['ino'];
        $this->uid = $info['uid'];
        $this->gid = $info['gid'];
        $this->mode = sprintf("0%o", 0777 & $info['mode']);
        $this->raw_mode = $info['mode'];
        $this->raw_stat = $info;
    }

    public function getStat()
    {
        if ($this->raw_stat === null) {
            $this->_setStat();
        }
        return $this->raw_stat;
    }

    public function file_exists()
    {
        if ($this->is_exists === 0) {
            $this->_setStat();
        }
        return $this->is_exists;
    }

    public function is_dir()
    {
        if ($this->is_dir === 0) {
            $this->_setStat();
        }
        return $this->is_dir;
    }

    public function is_file()
    {
        if ($this->is_file === 0) {
            $this->_setStat();
        }
        return $this->is_file;
    }

    public function is_link()
    {
        if ($this->link === 0) {
            $this->_setStat();
        }
        return $this->link;
    }

    public function _is_readable()
    {
        $uid = AibolitHelpers::geteuid();
        $groupIds = AibolitHelpers::getegids();
        if ($uid === 0) {
            return true;
        }

        if ($this->getUid() === $uid) {
            return (bool)($this->raw_mode & 0400);    // User has read permission
        }

        if (in_array($this->getGid(), $groupIds, true)) {
            return (bool)($this->raw_mode & 0040);    // Group has read permission
        }

        return (bool)($this->raw_mode & 0004);    // Other has read permission
    }

    public function is_readable()
    {
        if (!$this->file_exists()) {
            return false;
        }
        if ($this->is_readable === 0) {
            $this->is_readable = $this->_is_readable();
        }
        return $this->is_readable;
    }

    public function is_writeable()
    {
        if (!$this->file_exists()) {
            return false;
        }
        if ($this->is_writable === 0) {
            $this->is_writable = $this->_is_writable();
        }
        return $this->is_writable;
    }

    public function _is_writable()
    {
        $uid = AibolitHelpers::geteuid();
        $groupIds = AibolitHelpers::getegids();
        if ($uid === 0) {
            return true;
        }

        if ($this->getUid() === $uid) {
            return (bool)($this->raw_mode & 0200);    // User has write permission
        }

        if (in_array($this->getGid(), $groupIds, true)) {
            return (bool)($this->raw_mode & 0020);    // Group has write permission
        }

        return (bool)($this->raw_mode & 0002);    // Other has write permission
    }

    public function filetype()
    {
        if ($this->filetype === '') {
            $this->filetype = $this->detectFileType();
        }
        return $this->filetype;
    }

    public function getExtension()
    {
        if ($this->extension === '') {
            $this->extension = AibolitHelpers::getFileExtension($this->getFilename());
        }
        return $this->extension;
    }

    public function getBasename($prefix = '')
    {
        if ($this->basename === '') {
            $this->basename = AibolitHelpers::getBaseName($this->getFilename(), $prefix);
        }
        return $this->basename;
    }

    public function getRealpath()
    {
        if ($this->realpath === '') {
            $this->realpath = $this->file_exists() ? AibolitHelpers::getRealpath($this->getFilename()) : false;
        }
        return $this->realpath;
    }

    private function isValidSqliteFile($filename)
    {
        $header = @file_get_contents($filename, false, null, 0, 100);
        if (strpos($header, 'SQLite format 3' . chr(0)) !== 0) { //check valid header
            return false;
        }
        if (substr($header, 72, 20) !== str_repeat(chr(0), 20)) { //check valid reserved bytes
            return false;
        }
        $page_size = unpack('n', substr($header, 16, 2))[1];
        $page_count = unpack('N', substr($header, 28, 4))[1];
        if ($page_size * $page_count !== filesize($filename)) { //check valid size
            return false;
        }
        return true;
    }

    private function detectFileType()
    {
        if ($this->raw_mode === false) {
            $this->_setStat();
        }
        if ($this->is_link() === true) {
            return 'link';
        }

        $mode = $this->raw_mode & 0xF000;
        if ($mode === 0100000) {
            return 'file';
        }
        if ($mode === 0040000) {
            return 'dir';
        }
        if ($mode === 0140000) {
            return 'socket';
        }
        if ($mode === 0060000) {
            return 'block';
        }
        if ($mode === 0020000) {
            return 'char';
        }
        if ($mode === 0010000) {
            return 'fifo';
        }

        return 'unknown';
    }

    /**
     * @return void
     */
    private function _setFlags()
    {
        if ($this->content === '') {
            $header = @file_get_contents($this->filename, false, null, 0, 10);
        } else {
            $header = substr($this->content, 0, 10);
        }
        $this->is_binary = (strpos($header, chr(127) . 'ELF') === 0);
        if (HyperScan::canMatchInteresting()) {
            $this->is_interesting = HyperScan::matchInteresting($header);
        } else {
            $time = AibolitHelpers::currentTime();
            $this->is_interesting = (bool)preg_match('~<(?:\?|html)|#!/|[\x09\x0A\x0D\x20-\x7E]{10}~msi', $header);
            if ($this->error === 0) {
                $this->error = preg_last_error();
            }
            if (defined('CLS_PERFORMANCE_STATS')) {
                PerformanceStats::addPerformanceItem(PerformanceStats::PCRE_SMART_STAT, AibolitHelpers::currentTime() - $time);
            }
        }
        if (!$this->is_interesting && strpos($header, "\xFF\xD8") === 0) {
            $this->is_interesting = @file_get_contents($this->filename, false, null, filesize($this->filename) - 2, 2) !== "\xFF\xD9";
        }
        if ($header === 'SQLite for' && $this->isInteresting()) {
            $this->is_interesting = !$this->isValidSqliteFile($this->filename);
        }
        unset($header);
    }

    /**
     * @return int|mixed
     */
    public function getSize()
    {
        if ($this->size === null) {
            $this->_setStat();
        }
        return $this->size;
    }

    /**
     * @return int|mixed
     */
    public function getInode()
    {
        if ($this->inode === 0) {
            $this->_setStat();
        }
        return $this->inode;
    }

    /**
     * @return int|mixed
     */
    public function getCreated()
    {
        if ($this->created === 0) {
            $this->_setStat();
        }
        return $this->created;
    }

    /**
     * @return int|mixed
     */
    public function getModified()
    {
        if ($this->modified === 0) {
            $this->_setStat();
        }
        return $this->modified;
    }

    public function getHash()
    {
        if ($this->hash === 0) {
            $this->hash = $this->_hash_($this->getContentWithoutSpaces());
        }
        return $this->hash;
    }

    /**
     * @return int|string
     */
    public function getSha256()
    {
        if ($this->hashtable !== null && $this->hashtable->get($this->filename) !== false) {
            $this->sha256 = $this->hashtable->get($this->filename);
        }
        if ($this->hashtable === null && $this->sha256 === 0 && $this->content === '' ) {
            $this->sha256 = $this->getSha256file();
        }
        if ($this->sha256 === 0 && ($this instanceof RapidScanStorageRecord && $this->sha2 !== 0)) {
            $this->sha256 = bin2hex($this->sha2);
        }
        if ($this->hashtable === null && $this->sha256 === 0 && $this->content !== '' ) {
            $this->sha256 = $this->sha256 = hash('sha256', $this->getContent());
        }
        if ($this->sha256 === 0) {
            $this->sha256 = $this->getSha256file();
        }
        if ($this->sha256 !== 0 && ($this instanceof RapidScanStorageRecord && $this->sha2 === 0)) {
            $this->sha2 = hex2bin($this->sha256);
        }
        return $this->sha256;
    }

    /**
     * @return int|mixed
     */
    public function getUid()
    {
        if ($this->uid === false) {
            $this->_setStat();
        }
        return $this->uid;
    }

    /**
     * @return int|mixed
     */
    public function getGid()
    {
        if ($this->gid === false) {
            $this->_setStat();
        }
        return $this->gid;
    }

    /**
     * @return int|mixed
     */
    public function getMode()
    {
        if ($this->mode === false) {
            $this->_setStat();
        }
        return $this->mode;
    }
}



class HashTable
{
    private $hashes = [];

    public function add($paths, $hashes)
    {
        $this->hashes[0] = $paths;
        $this->hashes[1] = $hashes;
    }

    public function get($filename)
    {
        $index = $this->hashes[0][$filename] ?? false;
        if ($index === false) {
            return false;
        }
        return $this->hashes[1][$index];
    }
}



class Finder
{
    const MAX_ALLOWED_PHP_HTML_IN_DIR = 600;

    private $sym_links              = [];
    private $skipped_folders        = [];
    private $doorways               = [];
    private $big_files              = [];
    private $big_elf_files          = [];

    private $collect_skipped        = false;
    private $collect_symLinks       = false;
    private $collect_doorways       = false;
    private $collect_bigfiles       = false;
    private $collect_bigelffiles    = false;

    private $total_dir_counter      = 0;
    private $total_files_counter    = 0;
    private $checked_hashes         = [];

    private $initial_dir            = '';
    private $initial_level          = null;
    private $level_limit            = null;

    private $filter;
    private $total                  = 0;

    public function __construct($filter = null, $level_limit = null)
    {
        $this->filter = $filter;
        $this->level_limit = $level_limit;
    }

    private function linkResolve($path)
    {
        return realpath($path);
    }

    private function resolve(FileInfo $file, $follow_symlinks)
    {
        if (!$follow_symlinks || !$file->is_link()) {
            return $file;
        }
        $realpath = $this->linkResolve($file->getFilename());
        if ($file->getFilename() !== $realpath) {
            return new FileInfo($realpath, $file->getIndex());
        }
        return $file;
    }

    private function isPathCheckedAlready($path)
    {
        $root_hash = crc32($path);
        if (isset($this->checked_hashes[$root_hash])) {
            return true;
        }
        $this->checked_hashes[$root_hash] = '';
        return false;
    }

    private function walk(FileInfo $file, $follow_symlinks)
    {
        $path = $file->getFilename();
        $level = substr_count($path, '/');
        if (isset($this->level_limit) && (($level - $this->initial_level + 1) > $this->level_limit)) {
            return;
        }
        $l_DirCounter          = 0;
        $l_DoorwayFilesCounter = 0;

        if ($follow_symlinks && $this->isPathCheckedAlready($path)) {
            return;
        }

        # will not iterate dir, if it should be ignored
        if (!$this->filter->needToScan($file, true)) {
            if ($this->collect_skipped) {
                $this->skipped_folders[] = $path;
            }
            return;
        }
        $dirh = @opendir($path);
        if ($dirh === false) {
            return;
        }

        while (($entry = readdir($dirh)) !== false) {
            if ($entry === '.' || $entry === '..') {
                continue;
            }
            $entry = $path . DIRECTORY_SEPARATOR . $entry;
            $file = new FileInfo($entry, 0);
            if ($file->is_link()) {
                if ($this->collect_symLinks) {
                    $this->sym_links[] = $entry;
                }

                if (!$follow_symlinks) {
                    continue;
                }
                $file = $this->resolve($file, true);
            } else {
                $realpath = $file->getRealpath();
                if ($file->getFilename() !== $realpath) {
                    $file = new FileInfo($file->getRealpath(), $file->getIndex());
                }
            }
            if ($file->is_dir()) {
                $l_DirCounter++;
                if ($this->collect_doorways && $l_DirCounter > self::MAX_ALLOWED_PHP_HTML_IN_DIR) {
                    $this->doorways[]  = $path;
                    $l_DirCounter = -655360;
                }
                $this->total_dir_counter++;
                yield from $this->walk($file, $follow_symlinks);
            } else if ($file->is_file()) {
                if ($this->collect_doorways && is_callable([$this->filter, 'checkShortExt']) && $this->filter->checkShortExt($file)) {
                    $l_DoorwayFilesCounter++;
                    if ($l_DoorwayFilesCounter > self::MAX_ALLOWED_PHP_HTML_IN_DIR) {
                        $this->doorways[]           = $path;
                        $l_DoorwayFilesCounter = -655360;
                    }
                }
                if ($follow_symlinks && $this->isPathCheckedAlready($file->getFilename())) {
                    continue;
                }
                $is_big = is_callable([$this->filter, 'checkIsBig']) && $this->filter->checkIsBig($file);
                if ($this->collect_bigfiles && is_callable([$this->filter, 'checkIsBig']) && $is_big) {
                    $this->big_files[] = $file->getFilename();
                }
                if ($this->collect_bigelffiles
                    && $is_big
                    && is_callable([$this->filter, 'checkIsElf']) && $this->filter->checkIsElf($file)
                    && $this->filter->needToScan($file, false, ['check_size_range'])
                ) {
                    $this->big_elf_files[] = $file->getFilename();
                }
                $need_to_scan = $is_big ? false : $this->filter->needToScan($file);
                $this->total_files_counter = $need_to_scan ? $this->total_files_counter + 1 : $this->total_files_counter;
                $this->total++;
                 if (defined('CLS_PROGRESS')) {
                     Progress::setCurrentFile($file->getFilename());
                     Progress::setFilesTotal($this->total_files_counter);
                     Progress::updateList($this->total);
                }
                if ($need_to_scan) {
                    yield $file->getFilename();
                }
            }
        }
        closedir($dirh);
    }

    private function expandPath(FileInfo $file, $follow_symlinks)
    {
        if ($file->file_exists()) {
            if ($file->is_dir()) {
                yield from $this->walk($file, $follow_symlinks);
            } else {
                $is_big = is_callable([$this->filter, 'checkIsBig']) && $this->filter->checkIsBig($file);
                if ($this->collect_bigfiles && is_callable([$this->filter, 'checkIsBig']) && $is_big) {
                    $this->big_files[] = $file->getFilename();
                }
                if ($this->collect_bigelffiles
                    && $is_big
                    && is_callable([$this->filter, 'checkIsElf']) && $this->filter->checkIsElf($file)
                    && $this->filter->needToScan($file, false, ['check_size_range'])
                ) {
                    $this->big_elf_files[] = $file->getFilename();
                }
                $need_to_scan = $is_big ? false : $this->filter->needToScan($file);
                if ($need_to_scan) {
                    yield $file->getFilename();
                }
            }
        }
    }

    public function find($target)
    {
        $started = AibolitHelpers::currentTime();

        if ($target === '/') {
            $target = '/*';
        }
        if (is_string($target) && substr($target, -1) === DIRECTORY_SEPARATOR) {
            $target = substr($target, 0, -1);
        }

        if (is_callable([$this->filter, 'getGenerated']) && !$this->filter->getGenerated()
            && is_callable([$this->filter, 'generateCheckers'])
        ) {
            $this->filter->generateCheckers();
        }

        if (defined('CLS_PROGRESS')) {
            Progress::setStage(Progress::STAGE_LIST);
        }

        $paths = is_array($target) ? $target : new GlobIterator($target, FilesystemIterator::CURRENT_AS_PATHNAME);
        foreach ($paths as $path) {
            $this->initial_dir = realpath($path);
            $this->initial_level = substr_count($this->initial_dir, '/');
            $file = new FileInfo($path, 0);
            if (!$file->file_exists()) {
                continue;
            }
            $file = $this->resolve($file, $this->filter->isFollowSymlink());
            yield from $this->expandPath($file, $this->filter->isFollowSymlink());
        }

        if (defined('CLS_PERFORMANCE_STATS')) {
            PerformanceStats::addPerformanceItem(PerformanceStats::FINDER_STAT, AibolitHelpers::currentTime() - $started);
        }
    }

    private function convertTemplatesToRegexp($templates)
    {
        return '~(' . str_replace([',', '.', '*'], ['|', '\\.', '.*'], $templates) . ')~i';
    }

    public function setLevelLimit($level)
    {
        $this->level_limit = $level;
    }

    public function getSymlinks()
    {
        return $this->sym_links;
    }

    public function getBigFiles()
    {
        return $this->big_files;
    }

    public function getBigElfFiles()
    {
        return $this->big_elf_files;
    }

    public function setCollectDoorways($flag)
    {
        $this->collect_doorways = $flag;
    }

    public function setCollectBigElfs($flag)
    {
        $this->collect_bigelffiles = $flag;
    }

    public function setCollectSymlinks($flag)
    {
        $this->collect_symLinks = $flag;
    }

    public function setCollectSkipped($flag)
    {
        $this->collect_skipped = $flag;
    }

    public function setCollectBigFiles($flag)
    {
        $this->collect_bigfiles = $flag;
    }

    public function getDoorways()
    {
        return $this->doorways;
    }

    public function skippedDirs()
    {
        return $this->skipped_folders;
    }

    public function getTotalDirs()
    {
        return $this->total_dir_counter;
    }

    public function getTotalFiles()
    {
        return $this->total_files_counter;
    }

    public function getFilter()
    {
        return $this->filter;
    }
}


class FileFilter
{
    const IMUNIFY_CLEANUP_STORAGE = '/var/imunify360/cleanup_storage';
    const LOG_AND_MAIL_PATTERN = [
        '/sess\_\w*$',
        '/stat/usage\_\w+\.html',
        '/stat/site\_\w+\.html',
        '/webstat/awstats.*\.txt',
        '/awstats/awstats.*\.txt',
        '/awstats/.{1,80}\.pl',
        '/awstats/.{1,80}\.html',
        '/logs/error\_log\..*',
        '/logs/xferlog\..*',
        '/logs/access\_log\..*',
        '/domlogs/.+',
        '/logs/cron\..*',
        '/logs/exceptions/.+\.log(?:\.\d)?(?:\.gz)?$',
        '/mail(?:/[^/]+)*/[^,]+,S=[^,]+,W=.+',
        '/mail(?:/[^/]+)*/[^,]+,S=.+',
        '/mail(?:/[^/]+)*/storage/u\.[0-9]+',
        '/mail(?:/[^/]+)*/storage/m\.[0-9]+',
        '/Maildir(?:/[^/]+)*/[^,]+,S=[^,]+,W=.+',
        '/Maildir(?:/[^/]+)*/[^,]+,S=.+',
        '^/var/ossec/.*',
    ];

    const IMUNIFY_LOG_PATTERN = [
        '/var/log/imunify360/acronis-installer\.log$',
        '/var/log/imunify360/console\.log(?:\.\d)?(?:\.gz)?$',
        '/var/log/imunify360/debug\.log$',
        '/var/log/imunify360/error\.log$',
        '/var/log/install-mod\_remoteip\.log(?:\.\d{1.4})?(?:\.pid)?r$',
        '/var/log/imunify360/malware\_scan\_\d{10}\.log$',
        '/var/log/imunify360/network\.log$',
        '/var/log/imunify360/process\_message\.log$',
        '/var/log/imunify360-webshield/access.log(?:-\d{8})?(?:.gz)?$',
        '/var/log/imunify360-webshield/error.log(?:-\d{8})?(?:.gz)?$',
        '/.revisium_antivirus_cache/.revisium\d+/',
        '/admin/plib/modules/revisium-antivirus/library/externals/',
    ];

    const IMUNIFY_DIRS = [
        '/etc/cagefs/conf.d/ai-bolit.cfg',
        '/etc/cagefs/conf.d/clamav.cfg',
        '/etc/cagefs/exclude/imunify360',
        '/etc/chkserv.d/imunify-antivirus',
        '/etc/chkserv.d/imunify360-agent',
        '/etc/cron.daily/imunify-antivirus.cron',
        '/etc/cron.daily/imunify360.cron',
        '/etc/imunify360-webshield',
        '/etc/imunify360',
        '/etc/logrotate.d/imunify360',
        '/etc/nginx/conf.d/i360.remoteip.conf',
        '/etc/sysconfig/imunify360',
        '/opt/ai-bolit',
        '/opt/alt/python35/bin/imunify360-agent',
        '/opt/alt/python35/bin/imunify360-command-wrapper',
        '/opt/alt/python35/lib/python3.5/site-packages/defence360agent',
        '/opt/alt/python35/share/imunify360',
        '/run/chkservd/imunify360-webshield',
        '/run/chkservd/restart_track/imunify360-webshield',
        '/run/imunify360-webshield.pid',
        '/usr/bin/imunify-antivirus',
        '/usr/bin/imunify360-agent',
        '/usr/bin/imunify360-command-wrapper',
        '/usr/lib/systemd/system/imunify-antivirus.service',
        '/usr/lib/systemd/system/imunify360-pure.service',
        '/usr/lib/systemd/system/imunify360-webshield',
        '/usr/lib/systemd/system/imunify360.service',
        '/usr/local/cpanel/base/frontend/paper_lantern/imunify',
        '/usr/local/directadmin/plugins/Imunify',
        '/usr/sbin/imunify360-webshield',
        '/var/cache/imunify360-webshield',
        '/var/cpanel/apps',
        '/var/imunify360',
        '/var/log/cloudlinux-backup-util'
    ];

    const SHORT_LIST_EXT = [
        'php',
        'php3',
        'php4',
        'php5',
        'php7',
        'pht',
        'html',
        'htm',
        'phtml',
        'shtml',
        'khtml',
        '',
        'ico',
        'txt'
    ];

    const SUSPICIOUS_EXT = [
        'cgi',
        'pl',
        'o',
        'so',
        'py',
        'sh',
        'phtml',
        'php3',
        'php4',
        'php5',
        'php6',
        'php7',
        'pht',
        'shtml'
    ];

    private $sensitiveExt = [
        'php',
        'js',
        'json',
        'htaccess',
        'html',
        'htm',
        'tpl',
        'inc',
        'css',
        'txt',
        'sql',
        'ico',
        '',
        'susp',
        'suspected',
        'zip',
        'tar'
    ];

    const SKIP_SMART_MASK = [
        '/template_\w{32}.css',
        '/cache/templates/.{1,150}\.tpl\.php',
        '/system/cache/templates_c/\w{1,40}\.php',
        '/assets/cache/rss/\w{1,60}',
        '/cache/minify/minify_\w{32}',
        '/cache/page/\w{32}\.php',
        '/cache/object/\w{1,10}/\w{1,10}/\w{1,10}/\w{32}\.php',
        '/cache/wp-cache-\d{32}\.php',
        '/cache/page/\w{32}\.php_expire',
        '/cache/page/\w{32}-cache-page-\w{32}\.php',
        '\w{32}-cache-com_content-\w{32}\.php',
        '\w{32}-cache-mod_custom-\w{32}\.php',
        '\w{32}-cache-mod_templates-\w{32}\.php',
        '\w{32}-cache-_system-\w{32}\.php',
        '/cache/twig/\w{1,32}/\d+/\w{1,100}\.php',
        '/autoptimize/js/autoptimize_\w{32}\.js',
        '/bitrix/cache/\w{32}\.php',
        '/bitrix/cache/.{1,200}/\w{32}\.php',
        '/bitrix/cache/iblock_find/',
        '/bitrix/managed_cache/MYSQL/user_option/[^/]+/',
        '/bitrix/cache/s1/bitrix/catalog\.section/',
        '/bitrix/cache/s1/bitrix/catalog\.element/',
        '/bitrix/cache/s1/bitrix/menu/',
        '/catalog.element/[^/]+/[^/]+/\w{32}\.php',
        '/bitrix/managed\_cache/.{1,150}/\.\w{32}\.php',
        '/core/cache/mgr/smarty/default/.{1,100}\.tpl\.php',
        '/core/cache/resource/web/resources/[0-9]{1,50}\.cache\.php',
        '/smarty/compiled/SC/.{1,100}/%%.{1,200}\.php',
        '/smarty/.{1,150}\.tpl\.php',
        '/smarty/compile/.{1,150}\.tpl\.cache\.php',
        '/files/templates_c/.{1,150}\.html\.php',
        '/uploads/javascript_global/.{1,150}\.js',
        '/assets/cache/rss/\w{32}',
        'сore/cache/resource/web/resources/\d+\.cache\.php',
        '/assets/cache/docid_\d+_\w{32}\.pageCache\.php',
        '/t3-assets/dev/t3/.{1,150}-cache-\w{1,20}-.{1,150}\.php',
        '/t3-assets/js/js-\w{1,30}\.js',
        '/temp/cache/SC/.{1,100}/\.cache\..{1,100}\.php',
        '/tmp/sess\_\w{32}$',
        '/assets/cache/docid\_.{1,100}\.pageCache\.php',
        '/stat/usage\_\w{1,100}\.html',
        '/stat/site\_\w{1,100}\.html',
        '/gallery/item/list/\w{1,100}\.cache\.php',
        '/core/cache/registry/.{1,100}/ext-.{1,100}\.php',
        '/core/cache/resource/shk\_/\w{1,50}\.cache\.php',
        '/cache/\w{1,40}/\w+-cache-\w+-\w{32,40}\.php',
        '/webstat/awstats.{1,150}\.txt',
        '/awstats/awstats.{1,150}\.txt',
        '/awstats/.{1,80}\.pl',
        '/awstats/.{1,80}\.html',
        '/inc/min/styles_\w+\.min\.css',
        '/inc/min/styles_\w+\.min\.js',
        '/logs/error\_log\.', '/logs/xferlog\.',
        '/logs/access_log\.',
        '/logs/cron\.',
        '/logs/exceptions/.{1,200}\.log$',
        '/hyper-cache/[^/]{1,50}/[^/]{1,50}/[^/]{1,50}/index\.html',
        '/mail/new/[^,]+,S=[^,]+,W=',
        '/mail/new/[^,]=,S=',
        '/application/logs/\d+/\d+/\d+\.php',
        '/sites/default/files/js/js_\w{32}\.js',
        '/yt-assets/\w{32}\.css',
        '/wp-content/cache/object/\w{1,5}/\w{1,5}/\w{32}\.php',
        '/catalog\.section/\w{1,5}/\w{1,5}/\w{32}\.php',
        '/simpla/design/compiled/[\w\.]{40,60}\.php',
        '/compile/\w{2}/\w{2}/\w{2}/[\w.]{40,80}\.php',
        '/sys-temp/static-cache/[^/]{1,60}/userCache/[\w\./]{40,100}\.php',
        '/session/sess_\w{32}',
        '/webstat/awstats\.[\w\./]{3,100}\.html',
        '/stat/webalizer\.current',
        '/stat/usage_\d+\.html'
    ];

    protected $zipFile = false;

    private $ignoreExt              = [];
    private $ignoreListPatterns     = [];

    private $ignoreList             = null;
    private $ignoreFilenameByRegexp = null;
    private $onlyFilepathRegexp     = null;
    private $skipFilesOlder         = null;
    private $initialDir             = null;

    private $file_checkers          = [];
    private $dir_checkers           = [];
    private $excludes               = [];

    private $check_is_not_root;
    private $check_is_not_system;
    private $check_is_file;
    private $ignore_quar;
    private $check_file_older;
    private $check_ignore_file;
    private $check_ignore_filename_template;
    private $check_only_filepath_template;
    private $check_scope;
    private $check_ext;
    private $ignore_ext;
    private $check_short_ext;
    private $ignore_path_pattern;
    private $check_size_range;

    private $skipRootOwner          = false;
    private $skipSystemOwner        = false;
    private $skipImunifyStorage     = false;
    private $followSymlink          = false;
    private $ignoreQuarantine       = false;
    private $scanAllExt             = false;
    private $smartScan              = false;
    private $imunify_filters        = false;
    private $ignorePathPattern      = true;
    private $defaultExcludes        = true;

    private $ignored_av_admin_paths = false;
    private $generated              = false;
    private $size_range             = [];
    private $uid_range              = [];

    private $ignored_av_admin                   = null;
    private $ignored_av_admin_file_exists       = null;
    private $ignored_av_internal                = null;
    private $ignored_av_internal_file_exists    = null;
    private $admin_watched                      = null;

    private $ignore_symlink     = true;
    private $match_patterns     = [];
    private $no_match_patterns  = [];

    private $ignored_av_admin_file      = '/etc/sysconfig/imunify360/malware-filters-admin-conf/processed/ignored/av-admin.txt';
    private $ignored_avadmin_paths_file = '/etc/sysconfig/imunify360/malware-filters-admin-conf/processed/ignored/av-admin-paths.txt';
    private $ignored_av_internal_file   = '/etc/sysconfig/imunify360/malware-filters-admin-conf/processed/ignored/av-internal.txt';
    private $admin_watched_file         = '/etc/sysconfig/imunify360/malware-filters-admin-conf/admin/watched.txt';
    private $basedirs_file              = '/etc/sysconfig/imunify360/malware-filters-admin-conf/processed/basedirs-list.txt';

    private function getIgnoredAVAdminFileExists()
    {
        if (is_null($this->ignored_av_admin_file_exists)) {
            $this->ignored_av_admin_file_exists = is_readable($this->ignored_av_admin_file);
        }
        return $this->ignored_av_admin_file_exists;
    }

    private function getIgnoredAVInternalFileExists()
    {
        if (is_null($this->ignored_av_internal_file_exists)) {
            $this->ignored_av_internal_file_exists = is_readable($this->ignored_av_internal_file);
        }
        return $this->ignored_av_internal_file_exists;
    }

    private function getIgnoredAVAdmin()
    {
        if (!$this->getIgnoredAVAdminFileExists()) {
            return null;
        }
        if (is_null($this->ignored_av_admin)) {
            $this->ignored_av_admin = '~' . trim(file_get_contents($this->ignored_av_admin_file)) . '~msi';
        }
        return $this->ignored_av_admin;
    }

    private function addToIgnoreTree($path)
    {
        $tree = $this->getTree($path, true);
        $_path = &$this->ignored_av_admin_paths;
        for ($i = count($tree) - 1; $i >= 0; $i--) {
            if ($tree[$i] === '') {
                continue;
            }
            if (!isset($_path[$tree[$i]])) {
                $_path[$tree[$i]] = null;
            }
            if ($_path[$tree[$i]] === true) {
                return;
            }
            if ($i === 0) {
                $_path[$tree[$i]] = true;
            }
            $_path = &$_path[$tree[$i]];
        }
    }

    private function checkAVAdminPathsIgnored($path)
    {
        if ($this->ignored_av_admin_paths === false) {
            return false;
        }
        $tree = $this->getTree($path, true);
        $_path = &$this->ignored_av_admin_paths;
        for ($i = count($tree) - 1; $i >= 0; $i--) {
            if ($tree[$i] === '') {
                continue;
            }
            if (!isset($_path[$tree[$i]])) {
                return false;
            }
            if ($_path[$tree[$i]] === true) {
                return true;
            }
            $_path = &$_path[$tree[$i]];
        }
        return false;
    }

    private function loadIgnoredAVAdminPaths()
    {
        $file = new SplFileObject($this->ignored_avadmin_paths_file, 'r');
        $file->setFlags(SplFileObject::DROP_NEW_LINE | SplFileObject::SKIP_EMPTY | SplFileObject::READ_AHEAD);
        foreach ($file as $path) {
            if ($path) {
                $this->addToIgnoreTree(base64_decode($path));
            }
        }
    }

    private function getIgnoredAVInternal()
    {
        if (!$this->getIgnoredAVInternalFileExists()) {
            return null;
        }
        if (is_null($this->ignored_av_internal)) {
            $this->ignored_av_internal = '~' . trim(file_get_contents($this->ignored_av_internal_file)) . '~msi';
        }
        return $this->ignored_av_internal;
    }

    private function getBaseDirs()
    {
        return file($this->basedirs_file, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES);
    }

    private function fixTrailingSlash($path)
    {
        if ($path[0] !== '/') {
            $path = '/' . $path;
        }
        return $path;
    }

    private function resolveBaseDirs($basedirs, $path)
    {
        $result = [];
        $tmp = substr($path, 1);
        $tmp = $this->fixTrailingSlash($tmp);
        foreach ($basedirs as $dir) {
            $result[] = $dir . $tmp;
        }
        return $result;
    }

    private function processWatchedItems($basedirs, $paths)
    {
        $result = [];
        foreach ($paths as $item) {
            $item = trim($item);
            if ($item[0] === '#') {
                continue;
            } else if ($item[0] === '+') {
                $result = array_merge($result, $this->resolveBaseDirs($basedirs, $item));
            } else {
                $result[] = $item;
            }
        }
        return $result;
    }

    private function getAdminWatched()
    {
        if (is_null($this->admin_watched)) {
            $this->admin_watched = [];
            $basedirs = $this->getBaseDirs();
            $paths = file($this->admin_watched_file, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES);
            $this->admin_watched = $this->processWatchedItems($basedirs, $paths);
        }
        return $this->admin_watched;
    }

    public function setSmartScan()
    {
        $this->smartScan = true;
    }

    public function isSmartScan()
    {
        return $this->smartScan;
    }

    public function setImunifyFilters()
    {
        if ($this->getIgnoredAVAdminFileExists() || $this->getIgnoredAVInternalFileExists()) {
            $this->imunify_filters = true;
        }
    }

    public function setSkipImunifyStorage()
    {
        $this->skipImunifyStorage = true;
        $this->addToExcludes(self::IMUNIFY_CLEANUP_STORAGE);
    }

    public function setScanAll()
    {
        $this->scanAllExt = true;
    }

    public function setSizeRange($min, $max)
    {
        $this->size_range[0] = $min;
        $this->size_range[1] = $max;
    }

    public function setIgnoreExt($ext_list)
    {
        if (!$ext_list) {
            return;
        }

        $this->ignoreExt = explode(',', $ext_list);
        for ($i = 0, $iMax = count($this->ignoreExt); $i < $iMax; $i++) {
            $this->ignoreExt[$i] = trim($this->ignoreExt[$i]);
        }
        $this->ignoreExt = array_flip($this->ignoreExt);
    }

    public function getIgnoreExt()
    {
        return array_flip($this->ignoreExt);
    }

    public function setSensitiveExt($ext_list)
    {
        if (!$ext_list) {
            return;
        }

        $this->sensitiveExt = explode(",", $ext_list);
        for ($i = 0, $iMax = count($this->sensitiveExt); $i < $iMax; $i++) {
            if ($this->sensitiveExt[$i] == '.') {
                $this->sensitiveExt[$i] = '';
            }
        }
        $this->sensitiveExt = array_flip($this->sensitiveExt);
    }

    public function getSensitiveExt()
    {
        return array_flip($this->sensitiveExt);
    }

    public function setIgnoreListPatterns($filepath)
    {
        if (!is_readable($filepath)) {
            return;
        }
        $this->ignoreListPatterns = [];
        $content = file_get_contents($filepath);
        $list = explode("\n", $content);
        foreach ($list as $pattern) {
            if (trim($pattern) === '') {
                continue;
            }
            $this->ignoreListPatterns[] = $pattern;
        }
    }

    public function __construct()
    {
        $this->sensitiveExt = array_merge($this->sensitiveExt, self::SUSPICIOUS_EXT);
        $this->sensitiveExt = array_flip($this->sensitiveExt);

        $this->ignore_quar = function (FileInfo $file) {
            if (strpos($file->getFilename(), '/.imunify.quarantined') !== false) {
                if (!$file->file_exists()) {
                    return false;
                }
                return $file->getUid() !== 0;
            }
            return true;
        };

        $this->ignore_excludes = function (FileInfo $file) {
            $tree = $this->getTree($file->getFilename());
            if ($this->pathRelatesTo($tree, $this->excludes)) {
                $this->addStatsItem('checker_ignore_excludes', false, $file);
                return false;
            }
            $this->addStatsItem('checker_ignore_excludes', true, $file);
            return true;
        };

        $this->check_file_older = function (FileInfo $file) {
            $res = ($file->getModified() > $this->skipFilesOlder) || ($file->getCreated() > $this->skipFilesOlder);
            $this->addStatsItem('checker_file_older', $res, $file);
            return $res;
        };

        $this->check_ignore_file = function (FileInfo $file) {
            $tree = $this->getTree($file->getFilename());
            if ($this->pathRelatesTo($tree, $this->ignoreList, true)) {
                $this->addStatsItem('checker_ignore_file', false, $file);
                return false;
            }
            $this->addStatsItem('checker_ignore_file', true, $file);
            return true;
        };

        $this->check_ignore_filename_template = function (FileInfo $file) {
            $res = !preg_match($this->ignoreFilenameByRegexp, $file->getBasename());
            $this->addStatsItem('checker_ignore_filename_template', $res, $file);
            return $res;
        };

        $this->check_only_filepath_template = function (FileInfo $file) {
            $res = preg_match($this->onlyFilepathRegexp, $file->getFilename());
            $this->addStatsItem('checker_only_filepath_template', $res, $file);
            return $res;
        };

        $this->check_is_not_root = function (FileInfo $file) {
            $res = $file->getGid() !== 0 && $file->getUid() !== 0;
            $this->addStatsItem('checker_is_not_root', $res, $file);
            return $res;
        };

        $this->check_is_not_system = function (FileInfo $file) {
            if (!$this->skipSystemOwner) {
                $this->addStatsItem('checker_is_not_system', DecisionMakingStats::CHECKER_SCAN_DISABLED, $file);
                return true;
            }
            if(strpos($file->getFilename(), '/var/spool/cron') === 0) {
                $this->addStatsItem('checker_is_not_system', DecisionMakingStats::CHECKER_SCAN_CRON, $file);
                return true;
            }
            $res = ($file->getUid() >= $this->uid_range[0] && $file->getUid() <= $this->uid_range[1]);
            $this->addStatsItem('checker_is_not_system', $res, $file);
            return $res;
        };

        $this->check_is_file = function (FileInfo $file) {
            $res = $file->file_exists() && $file->is_file() && $file->is_readable();
            $this->addStatsItem('checker_is_file', $res, $file);
            return $res;
        };

        $this->check_size_range = function (FileInfo $file) {
            if (empty($this->size_range)) {
                return true;
            }
            $filesize = $file->getSize();
            $small = $filesize < $this->size_range[0];
            $big = $filesize > $this->size_range[1];
            if ($small) {
                $this->addStatsItem('checker_size_range', 'TOO_SMALL', $file);
            } else if ($big) {
                $this->addStatsItem('checker_size_range', 'TOO_BIG', $file);
            } else {
                $this->addStatsItem('checker_size_range', true, $file);
            }
            return (!$small && !$big);
        };

        $this->check_file_patterns = function (FileInfo $file) {
            foreach($this->match_patterns as $pattern) {
                $match = fnmatch($pattern, $file->getFilename());
                if ($match) {
                    $this->addStatsItem('checker_file_patterns', $match, $file);
                    return $match;
                }
            }
            $this->addStatsItem('checker_file_patterns', false, $file);
            return false;
        };

        $this->check_file_not_patterns = function (FileInfo $file) {
            foreach($this->no_match_patterns as $pattern) {
                $match = fnmatch($pattern, $file->getFilename());
                if ($match) {
                    $this->addStatsItem('checker_file_not_patterns', !$match, $file);
                    return !$match;
                }
            }
            $this->addStatsItem('checker_file_not_patterns', true, $file);
            return true;
        };

        $this->ignore_symlink = function (FileInfo $file) {
            return !$file->is_link();
        };

        $this->check_scope = function (FileInfo $file) {
            return strpos($file->getFilename(), $this->initialDir) === 0;
        };

        $this->ignore_dots = function (FileInfo $file) {
            return !($file->getFilename() === '.' || $file->getFilename() === '..');
        };

        $this->check_ext = function (FileInfo $file) {
            if ($this->scanAllExt) {
                $this->addStatsItem('checker_ext', true, $file);
                return true;
            }
            $ext = strtolower($file->getExtension());
            $res = isset($this->sensitiveExt[$ext]);
            $this->addStatsItem('checker_ext', $res, $file);
            return $res;
        };

        $this->ignore_ext = function (FileInfo $file) {
            $ext = strtolower($file->getExtension());
            $res = !isset($this->ignoreExt[$ext]);
            $this->addStatsItem('checker_ignore_ext', $res, $file);
            return $res;
        };

        $this->check_short_ext = function (FileInfo $file) {
            $ext = strtolower($file->getExtension());
            return in_array($ext, self::SHORT_LIST_EXT);
        };

        $this->ignore_path_pattern = function (FileInfo $file) {
            foreach ($this->ignoreListPatterns as $pattern) {
                if (($pattern !== '') && preg_match($pattern, $file->getFilename())) {
                    $this->addStatsItem('checker_ignore_path_pattern', false, $file);
                    return false;
                }
            }
            $this->addStatsItem('checker_ignore_path_pattern', true, $file);
            return true;
        };

        $this->imunify_filter = function (FileInfo $file) {
            if (!is_null($this->getIgnoredAVAdmin()) && preg_match($this->getIgnoredAVAdmin(), $file->getFilename())) {
                $this->addStatsItem('checker_imunify_filter', 'ignored_by_admin_pattern', $file);
                return false;
            }

            if ($this->checkAVAdminPathsIgnored($file->getFilename())) {
                $this->addStatsItem('checker_imunify_filter', 'ignored_by_admin_path', $file);
                return false;
            }

            if (!is_null($this->getIgnoredAVInternal()) && preg_match($this->getIgnoredAVInternal(), $file->getFilename())) {
                foreach ($this->getAdminWatched() as $rec_watched) {
                    if (fnmatch($rec_watched, $file->getFilename())) {
                        $this->addStatsItem('checker_imunify_filter', 'watched_by_admin_pattern___ignored_by_internal_pattern', $file);
                        return true;
                    }
                }
                $this->addStatsItem('checker_imunify_filter', 'ignored_by_internal_pattern', $file);
                return false;
            }
            $this->addStatsItem('checker_imunify_filter', true, $file);
            return true;
        };

        $this->file_checkers[] = $this->check_is_file;
        $this->file_checkers[] = $this->check_size_range;
        $this->file_checkers[] = $this->check_ext;
        $this->file_checkers[] = $this->ignore_dots;
        $this->dir_checkers[]  = $this->ignore_dots;
    }

    public function setIgnoreListFile($filepath)
    {
        if (!is_readable($filepath)) {
            return;
        }
        $this->ignoreList = [];
        $content = file_get_contents($filepath);
        $list = explode("\n", $content);
        foreach ($list as $base64_filepath) {
            if ($base64_filepath !== '') {
                $this->ignoreList[$base64_filepath] = '';
            }
        }
    }

    public function addToExcludes($path)
    {
        $this->excludes[$path] = '';
    }

    public function setExcludes($paths)
    {
        $this->excludes = array_flip($paths);
    }

    public function setIgnoreFilenames($templates)
    {
        if (!$templates) {
            return;
        }

        $this->no_match_patterns = explode(',', $templates);
        for ($i = 0, $iMax = count($this->no_match_patterns); $i < $iMax; $i++) {
            $this->no_match_patterns[$i] = trim($this->no_match_patterns[$i]);
        }
    }

    public function setOnlyFilepaths($templates)
    {
        if (empty($templates)) {
            return;
        }
        $this->match_patterns = explode(',', $templates);
        for ($i = 0, $iMax = count($this->match_patterns); $i < $iMax; $i++) {
            $this->match_patterns[$i] = trim($this->match_patterns[$i]);
        }
    }

    public function setSkipFilesOlder($unix_timestamp)
    {
        $this->skipFilesOlder = $unix_timestamp;
    }

    public function setSkipRootOwner()
    {
        $this->skipRootOwner = true;
    }

    public function setUidRange($min_max_uid)
    {
        if (is_array($min_max_uid)) {
            $this->uid_range = $min_max_uid;
        }
    }

    public function setSkipSystemOwner($value)
    {
        $this->skipSystemOwner = $value;
    }

    public function setFollowSymlink()
    {
        $this->followSymlink = true;
    }

    public function isFollowSymlink()
    {
        return $this->followSymlink;
    }


    public function setIgnoreQuarantine()
    {
        $this->ignoreQuarantine = true;
    }

    public function setIgnorePathPattern($value)
    {
        $this->ignorePathPattern = $value;
    }

    public function setDefaultExcludes($value)
    {
        $this->defaultExcludes = $value;
    }

    public function generateCheckers()
    {
        $file_checkers = $this->file_checkers;
        $dir_checkers = $this->dir_checkers;

        if ($this->defaultExcludes) {
            $this->excludes = array_merge(array_flip(self::IMUNIFY_DIRS), $this->excludes);
        }
        if (!empty($this->excludes)) {
            $file_checkers[] = $this->ignore_excludes;
            $dir_checkers[] = $this->ignore_excludes;
        }
        if ($this->ignorePathPattern) {
            $file_checkers[] = $this->ignore_path_pattern;
            $dir_checkers[]  = $this->ignore_path_pattern;
        }
        if ($this->match_patterns) {
            $file_checkers[] = $this->check_file_patterns;
        }
        if ($this->no_match_patterns) {
            $file_checkers[] = $this->check_file_not_patterns;
        }
        if ($this->skipRootOwner) {
            $file_checkers[] = $this->check_is_not_root;
        }
        if ($this->skipSystemOwner && !empty($this->uid_range)) {
            $file_checkers[] = $this->check_is_not_system;
        }

        if(!$this->followSymlink) {
            $file_checkers[] = $this->ignore_symlink;
            $dir_checkers[]  = $this->ignore_symlink;
        }

        if ($this->ignoreQuarantine) {
            $file_checkers[] = $this->ignore_quar;
            $dir_checkers[]  = $this->ignore_quar;
        }

        if ($this->skipFilesOlder) {
            $file_checkers[] = $this->check_file_older;
        }

        if ($this->ignoreFilenameByRegexp) {
            $file_checkers[] = $this->check_ignore_filename_template;
        }

        if (!empty($this->ignoreList)) {
            $file_checkers[] = $this->check_ignore_file;
            $dir_checkers[] = $this->check_ignore_file;
        }

        if ($this->onlyFilepathRegexp) {
            $file_checkers[] = $this->check_only_filepath_template;
        }

        if (!empty($this->ignoreExt)) {
            $file_checkers[] = $this->ignore_ext;
        }

        if ($this->imunify_filters) {
            $file_checkers[] = $this->imunify_filter;
            $dir_checkers[]  = $this->imunify_filter;
        }

        $this->ignoreListPatterns = array_merge($this->ignoreListPatterns, self::IMUNIFY_LOG_PATTERN, self::LOG_AND_MAIL_PATTERN);

        if($this->smartScan) {
            $this->ignoreListPatterns = array_merge($this->ignoreListPatterns, self::SKIP_SMART_MASK);
        }

        $this->ignoreListPatterns = array_map(function($item) {
            return ($item !== '') ? ('#' . $item . '#') : $item;
        }, $this->ignoreListPatterns);

        if ($this->imunify_filters && file_exists($this->ignored_avadmin_paths_file)) {
            $this->loadIgnoredAVAdminPaths();
        }

        $this->file_checkers = $file_checkers;
        $this->dir_checkers = $dir_checkers;
        $this->generated = true;
    }

    public function getFileCheckers()
    {
        return $this->file_checkers;
    }

    public function getDirCheckers()
    {
        return $this->dir_checkers;
    }

    private function funcInArray($func, $array)
    {
        foreach ($array as $item) {
            if ($this->$item === $func) {
                return true;
            }
        }
        return false;
    }

    private function check($file, $where, $skip_filters = [])
    {
        if (!$file) {
            return false;
        }
        foreach ($where as $func) {
            if(empty($func) || (!empty($skip_filters) && $this->funcInArray($func, $skip_filters))) {
                continue;
            }
            if (!$func($file)) {
                return false;
            }
        }
        return true;
    }

    public function needToScan($file, $only_dir = false, $skip_filters = [])
    {
        if (!$file) {
            return false;
        }

        $this->addStatsItem('finder', 'FOUND_BEFORE_CHECKERS', $file);

        if (!$only_dir && !$this->check($file, $this->getFileCheckers(), $skip_filters)) {
            return false;
        }

        if ($only_dir && !$this->check($file, $this->getDirCheckers(), $skip_filters)) {
            return false;
        }

        $this->addStatsItem('finder', 'FOUND_AFTER_CHECKERS', $file);

        return true;
    }

    private function getTree($file, $basename = false)
    {
        $tree = [];
        $path = $file;
        $tree[] = $basename ? AibolitHelpers::getBaseName($file) : $file;
        while ($path !== '.' && $path !== '/' && $path !== '') {
            $path = dirname($path, 1);
            $tree[] = $basename ? AibolitHelpers::getBaseName($path) : $path;
        }
        return $tree;
    }

    private function pathRelatesTo($tree, $pathes, $base64 = false)
    {
        foreach ($tree as $path) {
            if ($base64) {
                $path = base64_encode($path);
            }
            if (isset($pathes[$path])) {
                return true;
            }
        }
        return false;
    }

    private function addStatsItem(string $item, $verdict, FileInfo $file)
    {
        if (defined('CLS_DECISION_MAKING_STATS')) {
            if ($verdict === true) {
                $verdict = DecisionMakingStats::CHECKER_SCAN;
            }
            if ($verdict === false) {
                $verdict = DecisionMakingStats::CHECKER_SKIP;
            }
            DecisionMakingStats::addStatsItem($item, $verdict, $file);
        }
    }

    public function checkShortExt(FileInfo $file)
    {
        return $this->check_short_ext->call($this, $file);
    }

    public function checkNotSystem(FileInfo $file)
    {
        return $this->check_is_not_system->call($this, $file);
    }

    public function checkIsBig(FileInfo $file)
    {
        $res = ($file->getSize() > $this->size_range[1]);
        if ($res) {
            $this->addStatsItem('checker_size_range', 'TOO_BIG', $file);
        }
        return $res;
    }

    public function checkIsElf(FileInfo $file)
    {
        $header = @file_get_contents($file->getFilename(), false, null, 0, 4);
        return ($header === chr(127) . 'ELF');
    }

    public function getGenerated()
    {
        return $this->generated;
    }

}


/**
 * Class ScanList
 */
class ScanList extends \SplFileObject
{
    private $base64;
    private $skip_first_line;

    public function __construct($filepath, $base64 = false, $skip_first_line = false)
    {
        parent::__construct($filepath, 'r');
        $this->setFlags(SplFileObject::READ_AHEAD | SplFileObject::SKIP_EMPTY | SplFileObject::DROP_NEW_LINE);
        $this->base64 = $base64;
        $this->skip_first_line = $skip_first_line;
    }

    #[\ReturnTypeWillChange]
    public function rewind()
    {
        parent::rewind();
        if ($this->skip_first_line) {
            parent::next();
        }
    }

    #[\ReturnTypeWillChange]
    public function current()
    {
        return $this->base64 ? FilepathEscaper::decodeFilepathByBase64(parent::current()) : parent::current();
    }

    #[\ReturnTypeWillChange]
    public function seek($line)
    {
        parent::seek(++$line);
    }

    #[\ReturnTypeWillChange]
    public function count()
    {
        $this->seek($this->getSize());
        $size = $this->key();
        $this->seek(0);
        if ($this->skip_first_line) {
            $size--;
        }
        return $size;
    }
}


if (!defined('FUNC_AIBOLIT_ON_BIGFILE')) {
    define('FUNC_AIBOLIT_ON_BIGFILE', function_exists('aibolit_onBigFile'));
}
if (!defined('FUNC_AIBOLIT_ON_READ_ERROR')) {
    define('FUNC_AIBOLIT_ON_READ_ERROR', function_exists('aibolit_onReadError'));
}
class Scanner
{
    private $addPrefix;
    private $noPrefix;
    private $finder;
    private $vars;
    private $debug;
    private $critical_fs;
    private $max_size_scan_bytes;

    public function __construct($finder, $vars, $debug = null, $max_size_scan_bytes = null)
    {
        defined('SCAN_DELAY') ?: define('SCAN_DELAY', 0);

        $this->addPrefix            = isset($vars->options['addprefix'])    ? $vars->options['addprefix']   : '';
        $this->noPrefix             = isset($vars->options['noprefix'])     ? $vars->options['noprefix']    : '';
        $this->finder               = $finder;
        $this->vars                 = $vars;
        $this->suspicious           = isset($vars->options['with-suspicious']);
        $this->debug                = $debug;
        $this->critical_fs          = Factory::instance()->create(CriticalFileSpecification::class);
        $this->max_size_scan_bytes  = is_null($max_size_scan_bytes) ? MAX_SIZE_SCAN_BYTES : $max_size_scan_bytes;
    }

    private function CloudAssitedFilter($car, $files_list)
    {
        $black_files = [];
        $white_files = [];
        $white_extended_files = [];
        $injection_files = [];
        $cas_time = 0;
        try {
            $cas_start_time       = AibolitHelpers::currentTime();
            $cloud_assist_files   = new CloudAssistedFiles($car, $files_list, $this->vars);
            $cas_time             = AibolitHelpers::currentTime() - $cas_start_time;
            $white_files          = $cloud_assist_files->getWhiteList();
            $white_extended_files = $cloud_assist_files->getWhiteExtendedList();
            $black_files          = $cloud_assist_files->getBlackList();
            $injection_files      = $cloud_assist_files->getInjectionList();
            unset($cloud_assist_files);
        }
        catch (\Exception $e) {
            fwrite(STDERR, 'Warning: [CAS] ' . $e->getMessage() . PHP_EOL);
            if (isset($this->debug)) {
                $this->debug->QCR_Debug($e->getMessage());
            }
        }
        foreach ($white_files as $file => $prop) {
            $this->caAddStatsItem('white', $prop['fi']);
        }
        foreach ($white_extended_files as $file => $prop) {
            $this->caAddStatsItem('white_extended', $prop['fi']);
        }
        foreach ($black_files as $file => $prop) {
            $this->caAddStatsItem('black', $prop['fi']);
        }
        foreach ($injection_files as $file => $prop) {
            $this->caAddStatsItem('injection', $prop['fi']);
        }
        foreach (array_intersect_key($black_files, $white_files)  as $file => $prop) {
            $this->caAddStatsItem('dual_use', $prop['fi']);
        }
        $this->vars->blackFiles = @array_diff_assoc(
            array_merge($this->vars->blackFiles, $black_files, $injection_files),
            array_merge($white_files, $white_extended_files)
        );
        $res = @array_diff_key($files_list, $black_files, $injection_files, $white_files, $white_extended_files);
        foreach ($res as $file) {
            $this->caAddStatsItem(true, $file);
        }
        ResidentStats::setWhiteCount(count($white_files));
        ResidentStats::setWhiteExtendedCount(count($white_extended_files));
        ResidentStats::setBlackCount(count($black_files));
        ResidentStats::setInjectionCount(count($injection_files));
        ResidentStats::addCasTime($cas_time);
        return $res;
    }

    public function QCR_ScanDirectories($l_RootDir)
    {
        static $l_Buffer = '';

        if (isset($this->debug)) {
            $this->debug->QCR_Debug('Scan ' . $l_RootDir);
        }

        $listFiles = $this->finder->find($l_RootDir);
        foreach ($listFiles as $l_FileName) {
            if (ONE_PASS) {
                $file = new FileInfo($l_FileName, $this->vars->counter);
                $this->QCR_ScanFile($file, $this->vars, null, $this->vars->counter++);
            } else {
                $l_Buffer .= FilepathEscaper::encodeFilepathByBase64($l_FileName) . "\n";
            }

            $this->vars->counter++;

            if (strlen($l_Buffer) > 32000) {
                file_put_contents(QUEUE_FILENAME, $l_Buffer, FILE_APPEND) || die2("Cannot write to file " . QUEUE_FILENAME);
                $l_Buffer = '';
            }

        }

        $this->vars->symLinks        = $this->finder->getSymlinks();
        $this->vars->doorway         = $this->finder->getDoorways();
        $this->vars->foundTotalDirs  = $this->finder->getTotalDirs();
        $this->vars->foundTotalFiles = $this->finder->getTotalFiles();

        if (!empty($l_Buffer)
            && (isset($this->vars->options['use-template-in-path'])
                || $l_RootDir == ROOT_PATH
            )
        ) {
            file_put_contents(QUEUE_FILENAME, $l_Buffer, FILE_APPEND) || die2("Cannot write to file " . QUEUE_FILENAME);
            $l_Buffer = '';
        }
        unset($listFiles);
    }

    public function QCR_GoScan($s_file, $ca, $callback = null, $filters = false, $skip_filters = [])
    {
        if (defined('CLS_PROGRESS')) {
            Progress::setStage(Progress::STAGE_SCAN);
        }
        if (isset($this->debug)) {
            $this->debug->QCR_Debug('QCR_GoScan ');
        }
        try {

            $i = 0;
            $filesForCloudAssistedScan = [];

            if (!is_null($ca) && defined('RAPID_ACCOUNT_SCAN')) {
                $cloud_assited_storage = Factory::instance()->create(CloudAssistedStorage::class, [RAPID_ACCOUNT_SCAN]);
                $storage = Factory::instance()->create(RapidScanStorage::class, [RAPID_ACCOUNT_SCAN]);
                /** @var RapidAccountScan $scanner */
                $scanner = Factory::instance()->create(RapidAccountScan::class, [$this, $storage, $ca, $cloud_assited_storage, &$this->vars, $i]);
                $scanner->scan($s_file, $this->vars, constant('RapidAccountScan::RESCAN_' . RAPID_ACCOUNT_SCAN_TYPE));
                if ($scanner->getStrError()) {
                    if (isset($this->debug)) {
                        $this->debug->QCR_Debug('Rapid scan log: ' . $scanner->getStrError());
                    }
                }
                $this->vars->rescanCount += $scanner->getRescanCount();
                $this->vars->rescanRxGood += $scanner->getRescanRxGoodCount();
                return;
            }

            $scan_bufer_files = function ($files_list) use ($callback, $ca) {
                $this->vars->hashtable = new HashTable();
                $files_to_scan = $this->CloudAssitedFilter($ca, $files_list);
                $this->vars->files_and_ignored += count($files_list) - count($files_to_scan);
                foreach ($files_to_scan as $file) {
                    $this->QCR_ScanFile($file, $this->vars, $callback, $file->getIndex());
                    $file->cleanContentCache();
                }
                $this->vars->hashtable = null;
            };

            foreach ($s_file as $index => $filepath) {
                $file = new FileInfo($filepath, $index, $this->vars->hashtable);
                if (!$file->file_exists()) {
                    continue;
                }
                $filesize = $file->getSize();

                if ($callback !== null) {
                    $this->callCallback($callback);
                }

                if ($filters instanceof FileFilter) {
                    if (!$filters->needToScan($file, false, $skip_filters)) {
                        $this->vars->foundTotalFiles--;
                        continue;
                    }
                }

                if (isset($this->vars->users)) {
                    $this->vars->users->add($file->getUid());
                }

                if (substr($filepath, -1) == DIR_SEPARATOR || is_null($ca)) {
                    $this->QCR_ScanFile($file, $this->vars, $callback, $i++);
                    continue;
                }

                if ($this->isFileTooBigForCloudscan($filesize)) {
                    $this->caAddStatsItem('skipped', $file);
                    $this->QCR_ScanFile($file, $this->vars, $callback, $file->getIndex());
                    continue;
                }

                // collecting files to scan with Cloud Assistant
                $filesForCloudAssistedScan[$file->getFilename()] = $file;
                if (count($filesForCloudAssistedScan) >= CLOUD_ASSIST_LIMIT) {
                    $scan_bufer_files($filesForCloudAssistedScan, $i);
                    $filesForCloudAssistedScan = [];
                }
            }

            if (count($filesForCloudAssistedScan)) {
                $scan_bufer_files($filesForCloudAssistedScan, $i);
            }

            unset($filesForCloudAssistedScan);

        } catch (Exception $e) {
            if (isset($this->debug)) {
                $this->debug->QCR_Debug($e->getMessage());
            }
        }
        if (defined('CLS_PROGRESS')) {
            Progress::done();
        }
    }

    public function QCR_ScanFile(FileInfo $file, $vars, $callback = null, $i = 0, $show_progress = true)
    {
        $l_Filename = $file->getFilename();

        $this->delayWithCallback(SCAN_DELAY, $callback);
        $return = [RapidScanStorageRecord::RX_GOOD, '', ''];
        $g_SkipNextCheck = false;
        $g_SusExt = false;

        $l_CriticalDetected = false;
        $error = 0;

        if (substr($l_Filename, -1) == DIR_SEPARATOR) {
            // FOLDER
            $vars->structure['n'][$i] = $l_Filename;
            $vars->totalFolder++;
            if (defined('CLS_PROGRESS')) {
                Progress::setCurrentFile($l_Filename);
                Progress::setFilesTotal($vars->foundTotalFiles);
                Progress::setDetected([
                    Progress::DETECT_PHP => count($vars->criticalPHP),
                    Progress::DETECT_JS  => count($vars->criticalJS),
                    Progress::DETECT_SUS => count($vars->warningPHP),
                    Progress::DETECT_PHS => count($vars->phishing),
                ]);

                Progress::updateScan($vars->files_and_ignored);
            }
            return null;
        }

        if (isset($this->debug)) {
            $this->debug->QCR_Debug('Scan file ' . $file->getFilename());
        }

        if ($show_progress && defined('CLS_PROGRESS')) {
            Progress::setCurrentFile($l_Filename);
            Progress::setFilesTotal($vars->foundTotalFiles);
            Progress::setDetected([
                Progress::DETECT_PHP => count($vars->criticalPHP),
                Progress::DETECT_JS  => count($vars->criticalJS),
                Progress::DETECT_SUS => count($vars->warningPHP),
                Progress::DETECT_PHS => count($vars->phishing),
            ]);
            Progress::updateScan(++$vars->files_and_ignored);
        }

        $l_Ext      = strtolower($file->getExtension());
        $l_Content  = '';

        $check_heuristics = defined('USE_HEURISTICS') || defined('USE_HEURISTICS_SUSPICIOUS') || defined('USE_HEURISTICS_IGNORE');

        if ($check_heuristics && $file->isBinary()) {
            if (defined('USE_HEURISTICS_IGNORE')) {
                $this->addStatsItem('elf', 'heuristics_ignore', $file);
                HashVerdicts::add($file->getSha256(), 'elf:heuristics_ignore');
                return null;
            }

            $this->AddResult($file, $i, $vars);

            $heur_sig = 'SMW-HEUR-ELF';

            if (defined('USE_HEURISTICS')) {
                $this->addStatsItem('elf', 'heuristics', $file);
                $vars->criticalPHP[]            = $i;
                $vars->criticalPHPFragment[]    = $heur_sig;
                $vars->criticalPHPSig[]         = $heur_sig;
                HashVerdicts::add($file->getSha256(), 'elf:heuristics');
            }
            elseif (defined('USE_HEURISTICS_SUSPICIOUS')) {
                $this->addStatsItem('elf', 'heuristics_suspicious', $file);
                $vars->warningPHP[]         = $i;
                $vars->warningPHPFragment[] = $heur_sig;
                $vars->warningPHPSig[]      = $heur_sig;
                HashVerdicts::add($file->getSha256(), 'elf:heuristics_suspicious');
            }

            $return = [RapidScanStorageRecord::HEURISTIC, $heur_sig, $heur_sig];
            return $return;
        }

        $this->addStatsItem('elf', true, $file);

        // FILE
        $is_too_big     = $this->isFileTooBigForScanWithSignatures($file->getSize());
        if ($file->getSize() === null) {
            fwrite(STDERR, 'Warning: Can\'t stat file '. $file->getFilename() . ', skipping.' . PHP_EOL);
            return null;
        }

        if (!$this->max_size_scan_bytes && $is_too_big) {
            $this->addStatsItem('checker_size_range_sig_scan', 'TOO_BIG', $file);
            HashVerdicts::add($file->getSha256(), 'checker_size_range_sig_scan:TOO_BIG');
            if (FUNC_AIBOLIT_ON_BIGFILE) {
                aibolit_onBigFile($l_Filename);
            }
            return false;
        }
        $this->addStatsItem('checker_size_range_sig_scan', true, $file);

        $l_TSStartScan  = AibolitHelpers::currentTime();
        $vars->totalFiles++;
        if (SMART_SCAN
            && !$this->max_size_scan_bytes
            && !$is_too_big
            && !$this->critical_fs->satisfiedBy($l_Ext, 'extensions')
            && !$file->isInteresting()
        ) {
            HashVerdicts::add($file->getSha256(), 'smart_scan:is_not_interesting');
            $this->addStatsItem('smart_scan', 'is_not_interesting', $file);
            if (DEBUG_MODE) {
                echo "Skipped file, not critical.\n";
            }
            Errors::add('pcre', $file, 'FileInfo', $file->getError());
            $return = [RapidScanStorageRecord::RX_SKIPPED_SMART, '', ''];
            if (is_object($this->debug) && $this->debug->getDebugPerformance() == true) {
                $this->debug->addFile($l_Filename, AibolitHelpers::currentTime() - $l_TSStartScan);
            }
            unset($l_Unwrapped);
            unset($l_Content);
            return $return;
        }
        Errors::add('pcre', $file, 'FileInfo', $file->getError());
        if (SKIP_DIE && $file->isLog()) {
            $this->addStatsItem('smart_scan', 'is_die', $file);
            HashVerdicts::add($file->getSha256(), 'smart_scan:is_die');
            if (DEBUG_MODE) {
                echo "Skipped file, is log.\n";
            }
            Errors::add('pcre', $file, 'FileInfo', $file->getError());
            $return = [RapidScanStorageRecord::RX_SKIPPED_DIE, '', ''];
            if (is_object($this->debug) && $this->debug->getDebugPerformance() == true) {
                $this->debug->addFile($l_Filename, AibolitHelpers::currentTime() - $l_TSStartScan);
            }
            unset($l_Unwrapped);
            unset($l_Content);
            return $return;
        }
        Errors::add('pcre', $file, 'FileInfo', $file->getError());
        $file_type = $file->filetype();
        $l_Unwrapped = '';
        if ($file_type === 'file' ||
            (isset($vars->options['follow-symlink']) && $file_type === 'link') ||
            ($file_type === 'unknown' && $file instanceof ZipFileInfo)
        ) {
            if ($is_too_big && $this->max_size_scan_bytes) {
                $l_Content = $file->getContentBytes($this->max_size_scan_bytes);
            } else {
                $l_Content = $file->getContent();
            }
            $l_Unwrapped = $file->getContentWithoutSpaces($this->max_size_scan_bytes);
        }
        if (SMART_SCAN && !$this->satisfiedBySmartScan($this->critical_fs, $l_Ext, $l_Content, 'extensions',
                'critical_content')) {
            $this->addStatsItem('smart_scan', 'is_not_critical', $file);
            HashVerdicts::add($file->getSha256(), 'smart_scan:is_not_critical');
            $return = [RapidScanStorageRecord::RX_SKIPPED_SMART, '', ''];
            if (is_object($this->debug) && $this->debug->getDebugPerformance() == true) {
                $this->debug->addFile($l_Filename, AibolitHelpers::currentTime() - $l_TSStartScan);
            }
            Errors::add('pcre', $file, 'CriticalFileSpecification', $this->critical_fs->getError());
            unset($l_Unwrapped);
            unset($l_Content);
            return $return;
        }
        Errors::add('pcre', $file, 'CriticalFileSpecification', $this->critical_fs->getError());
        if (SMART_SCAN) {
            $this->addStatsItem('smart_scan', true, $file);
        }
        if (($l_Content == '' || $l_Unwrapped == '') && $file->getSize() > 0) {
            $this->addStatsItem('checker_before_norm', 'failed_to_read', $file);
            $vars->notRead[] = $file->getFilename();
            if (FUNC_AIBOLIT_ON_READ_ERROR) {
                aibolit_onReadError($l_Filename, 'io');
            }
            $return = [RapidScanStorageRecord::CONFLICT, 'notread', ''];
            $this->AddResult('[io] ' . $l_Filename, $i, $vars);
            return $return;
        }

        // ignore itself
        if (strpos($l_Content, '76fcb20d10904791fe17cef4af433460') !== false) {
            $this->addStatsItem('checker_before_norm', 'ignore_selfscan', $file);
            HashVerdicts::add($file->getSha256(), 'checker_before_norm:ignore_selfscan');
            return false;
        }

        $l_UnicodeContent = Encoding::detectUTFEncoding($l_Content);
        //$l_Unwrapped = $l_Content;

        // check vulnerability in files
        $l_CriticalDetected = $this->CheckVulnerability($l_Filename, $i, $l_Content, $vars);

        if ($l_UnicodeContent !== false) {
            if (Encoding::iconvSupported()) {
                $l_Unwrapped = Encoding::convertToCp1251($l_UnicodeContent, $l_Unwrapped);
            } else {
                $vars->notRead[] = $file->getFilename();
                if (FUNC_AIBOLIT_ON_READ_ERROR) {
                    aibolit_onReadError($l_Filename, 'ec');
                }
                $return = [RapidScanStorageRecord::CONFLICT, 'no_iconv', ''];
                $this->AddResult('[ec] ' . $l_Filename, $i, $vars);
            }
        }

        $this->addStatsItem('checker_before_norm', true, $file);

        // critical
        $g_SkipNextCheck = false;

        $started = AibolitHelpers::currentTime();

        if (AI_DEOBFUSCATE) {
            $l_DeobfObj = new Deobfuscator($l_Unwrapped, $l_Content, $this->debug);
            $l_DeobfType = $l_DeobfObj->getObfuscateType($l_Unwrapped);
            Errors::add('pcre', $file, 'Deobfuscator', $l_DeobfObj->getError());
        }

        if (isset($l_DeobfType) && $l_DeobfType !== '') {
            $this->addStatsItem('deobfuscator', 'deobfuscated', $file);
            $l_Unwrapped = $l_DeobfObj->deobfuscate();
            Errors::add('pcre', $file, 'Deobfuscator', $l_DeobfObj->getError());
            $g_SkipNextCheck = $this->checkFalsePositives($l_Filename, $l_Unwrapped, $l_DeobfType, $vars);
        } else {
            $this->addStatsItem('deobfuscator', 'nothing_to_deobfuscate', $file);
            if (DEBUG_MODE) {
                stdOut("\n...... NOT OBFUSCATED\n");
            }
        }
        if (defined('CLS_PERFORMANCE_STATS')) {
            PerformanceStats::addPerformanceItem(PerformanceStats::DEOBF_STAT, AibolitHelpers::currentTime() - $started);
        }
        $l_Unwrapped = Normalization::normalize($l_Unwrapped, false, $error);
        Errors::add('pcre', $file, 'Normalization', $error);

        $hs_verdict = '';
        $hs_verdictSus = '';

        if (defined('HS')) {
            $this->addStatsItem('files_submitted_to_scan_hs', 'original', $file, strlen($l_Content));
            $this->addStatsItem('files_submitted_to_scan_hs', 'unwrapped', $file, strlen($l_Unwrapped));
            $g_SusExt = HyperScan::hs_precheckSusExt($l_Content, $l_Unwrapped, $hs_verdictSus);
            $hs_precheck = HyperScan::hs_precheck($l_Content, $l_Unwrapped, $this->suspicious, $hs_verdict);
            if (!$hs_precheck && ($g_SusExt === false)) {
                $this->addStatsItem('hyperscan', 'no_match', $file);
                HashVerdicts::add($file->getSha256(), 'hyperscan:no_match');
                $return = [RapidScanStorageRecord::RX_GOOD, '', ''];
                if ($l_CriticalDetected) {
                    $this->AddResult($file, $i, $vars);
                }
                if (is_object($this->debug) && $this->debug->getDebugPerformance() == true) {
                    $this->debug->addFile($l_Filename, AibolitHelpers::currentTime() - $l_TSStartScan);
                }
                unset($l_Unwrapped);
                unset($l_Content);
                return $return;
            } else if (!$hs_precheck && ($g_SusExt !== false)) {
                $sig_id = 'SMW-ESUS-' . $g_SusExt;
                $this->addStatsItem('hyperscan', $hs_verdictSus, $file);
                HashVerdicts::add($file->getSha256(), 'hyperscan:' . $hs_verdictSus);
                $return = [RapidScanStorageRecord::RX_SUSPICIOUS_EXTENDED, (string)$g_SusExt, $sig_id];
                $this->AddResult($file, $i, $vars);
                $vars->suspiciousExt[]     = $i;
                $vars->suspiciousExtSig[]  = $sig_id;
                $vars->suspiciousExtFrag[] = $sig_id;
                if (is_object($this->debug) && $this->debug->getDebugPerformance() == true) {
                    $this->debug->addFile($l_Filename, AibolitHelpers::currentTime() - $l_TSStartScan);
                }
                unset($l_Unwrapped);
                unset($l_Content);
                return $return;
            }
        }

        $verdict = '';

        $processResult = function ($checker, $content, $l_Pos, $l_SigId, &$return, $tag = '') use (
            &$vars,
            $l_Ext,
            $i,
            &
            $verdict
        ) {
            $checkers = [
                'CriticalPHP'           => ['criticalPHP', 'criticalPHPFragment', 'criticalPHPSig'],
                'CriticalCron'          => ['criticalPHP', 'criticalPHPFragment', 'criticalPHPSig'],
                'CriticalPHP_2'         => ['criticalPHP', 'criticalPHPFragment', 'criticalPHPSig'],
                'CriticalPHP_3'         => ['criticalPHP', 'criticalPHPFragment', 'criticalPHPSig'],
                'CriticalPHP_4'         => ['criticalPHP', 'criticalPHPFragment', 'criticalPHPSig'],
                'CriticalPHP_5'         => ['criticalPHP', 'criticalPHPFragment', 'criticalPHPSig'],
                'CriticalPHPGIF'        => ['criticalPHP', 'criticalPHPFragment', 'criticalPHPSig'],
                'CriticalPHPUploader'   => ['criticalPHP', 'criticalPHPFragment', 'criticalPHPSig'],
                'CriticalJS'            => ['criticalJS', 'criticalJSFragment', 'criticalJSSig'],
                'CriticalJS_PARA'       => ['criticalJS', 'criticalJSFragment', 'criticalJSSig'],
                'WarningPHP'            => ['warningPHP', 'warningPHPFragment', 'warningPHPSig'],
                'Phishing'              => ['phishing', 'phishingFragment', 'phishingSigFragment'],
                'Adware'                => ['adwareList', 'adwareListFragment'],
            ];

            $verdict = $tag;

            if(strpos($vars->signs->_Mnemo[$l_SigId], '-SUS-') !== false) {
                $checkers['CriticalCron'] = $checkers['WarningPHP'];
            }

            if (strpos($checker, 'Critical') !== false) {
                if ($l_Ext === 'js') {
                    $checker = 'CriticalJS';
                }
                $return = [RapidScanStorageRecord::RX_MALWARE, $l_SigId, $this->getFragment($content, $l_Pos)];
            }

            if ($checker === 'WarningPHP' || $checker === 'Phishing' || (($checker === 'CriticalCron') && ($checker['CriticalCron'] === $checker['WarningPHP']))) {
                $return = [RapidScanStorageRecord::RX_SUSPICIOUS, $l_SigId, $this->getFragment($content, $l_Pos)];
            }

            $vars->{$checkers[$checker][0]}[] = $i;
            $vars->{$checkers[$checker][1]}[] = $this->getFragment($content, $l_Pos);
            if (isset($checkers[$checker][2])) {
                $vars->{$checkers[$checker][2]}[] = $l_SigId;
            }
            if (EMU_LOG_OFFSETS) {
                $vars->structure['offset'] ?? $vars->structure['offset'] = [];
                $vars->structure['offset'][$i] = $this->getLogEmuOffsets($content, $l_Pos);
            }
        };

        if (!$g_SkipNextCheck) {
            $checkers['CriticalPHP'] = true;
            if (AI_EXPERT_MODE > 0) {
                $checkers['CriticalPHP_3'] = true;
            }
            if (AI_EXPERT_MODE > 1) {
                $checkers['CriticalPHP_2'] = true;
            }
            $checkers['CriticalPHP_4'] = true;
            if (AI_EXPERT_MODE > 0) {
                $checkers['CriticalPHP_5'] = true;
            }
            $checkers['CriticalJS'] = false;
            if (AI_EXPERT_MODE > 1) {
                $checkers['CriticalJS_PARA'] = false;
            }

            if ($this->suspicious) {
                $checkers['WarningPHP'] = false;
            }

            if ($file->isCron()) {
                $checkers['CriticalCron'] = true;
            }

            $this->addStatsItem('files_submitted_to_scan_pcre', 'original', $file, strlen($l_Content));
            $this->addStatsItem('files_submitted_to_scan_pcre', 'unwrapped', $file, strlen($l_Unwrapped));

            $g_SkipNextCheck = ScanUnit::QCR_ScanContent($checkers, $l_Unwrapped, $l_Content, $vars->signs,
                $this->debug, null,
                $processResult, $return, $error);
            Errors::add('pcre', $file, 'Scanner', $error);
        }

        if (!$g_SkipNextCheck && isset($checkers['Adware'])) {
            // articles
            if (stripos($l_Filename, 'article_index')) {
                $verdict = 'match_Adware';
                $vars->adwareList[] = $i;
                $l_CriticalDetected = true;
            }
        }

        $hs_verdict = (($g_SusExt !== false) && !$g_SkipNextCheck) ? $hs_verdictSus : $hs_verdict;

        if (!$g_SkipNextCheck && ($g_SusExt !== false)) {
            // suspicious_extended
            $sig_id = 'SMW-ESUS-' . $g_SusExt;
            $vars->suspiciousExt[]      = $i;
            $vars->suspiciousExtSig[]   = $sig_id;
            $vars->suspiciousExtFrag[]  = $sig_id;
            $l_CriticalDetected = true;
            $return = [RapidScanStorageRecord::RX_SUSPICIOUS_EXTENDED, (string)$g_SusExt, $sig_id];
        }

        if (defined('HS') && $hs_verdict !== '') {
            $this->addStatsItem('hyperscan', $hs_verdict, $file);
            HashVerdicts::add($file->getSha256(), 'hyperscan:' . $hs_verdict);
        }

        if (is_object($this->debug) && $this->debug->getDebugPerformance() == true) {
            $this->debug->addFile($l_Filename, AibolitHelpers::currentTime() - $l_TSStartScan);
        }

        if (!$g_SkipNextCheck && $verdict === '') {
            $verdict = 'no_match';
        }
        $this->addStatsItem('pcre', $verdict, $file);
        HashVerdicts::add($file->getSha256(), 'pcre:' . $verdict);
        // end of if (!$g_SkipNextCheck) {

        $this->delayWithCallback(SCAN_DELAY, $callback);
        if ($g_SkipNextCheck || $l_CriticalDetected) {
            $this->AddResult($file, $i, $vars);
        }

        unset($l_Unwrapped);
        unset($l_Content);

        return $return;
    }

    private function callCallback($callback)
    {
        if ($callback !== null) {
            call_user_func($callback);
        }
    }

    private function delayWithCallback($delay, $callback)
    {
        $delay *= 1000;
        $this->callCallback($callback);
        if ($delay === 0) {
            return;
        }
        while ($delay > 500000) {
            $delay -= 500000;
            usleep(500000);
            $this->callCallback($callback);
        }
        usleep($delay);
        $this->callCallback($callback);
    }

    /**
     * @param FileInfo $file
     * @param int $i
     * @param Variables $vars
     */
    public function AddResult($file, $i, $vars)
    {
        if (is_string($file)) {
            $vars->structure['n'][$i]   = $file;
            return;
        }
        $vars->structure['n'][$i]   = $file->getFilename();
        $vars->structure['s'][$i]   = $file->getSize();
        $vars->structure['c'][$i]   = $file->getCreated();
        $vars->structure['m'][$i]   = $file->getModified();
        $vars->structure['u'][$i]   = $file->getUid();
        $vars->structure['g'][$i]   = $file->getGid();
        $vars->structure['p'][$i]   = $file->getMode();
        $vars->structure['e'][$i]   = time();
        $vars->structure['crc'][$i] = $file->isBinary() ? $file->getSha1file() : $file->getHash();
        $vars->structure['sha256'][$i] = $file->getSha256();
    }

    public function prepareBigFilesToCriticalList($list, &$vars)
    {
        $base = isset($vars->structure['n']) ? count($vars->structure['n']) : 0;
        foreach ($list as $i => $fn) {
            $l_Ext = strtolower(AibolitHelpers::getFileExtension($fn));
            if ($this->critical_fs->satisfiedBy($l_Ext, 'extensions')) {
                $file = new FileInfo($fn, $base + $i);
                if ($file->getSize() === null) {
                    fwrite(STDERR, 'Warning: Can\'t stat file '. $file->getFilename() . ', skipping.' . PHP_EOL);
                    unset($file);
                    continue;
                }
                $vars->criticalPHP[]         = $file->getIndex();
                $vars->criticalPHPFragment[] = "BIG FILE. SKIPPED.";
                $vars->criticalPHPSig[]      = "big_1";
                $this->AddResult($file, $file->getIndex(), $vars);
            }
        }
    }

    public function prepareBigElfFilesToCriticalSusList($list, &$vars)
    {
        $base = isset($vars->structure['n']) ? count($vars->structure['n']) : 0;
        foreach ($list as $i => $fn) {
            $file = new FileInfo($fn, $base + $i);
            if ($file->getSize() === null) {
                fwrite(STDERR, 'Warning: Can\'t stat file '. $file->getFilename() . ', skipping.' . PHP_EOL);
                unset($file);
                continue;
            }
            $heur_sig = 'SMW-HEUR-ELF';
            if (defined('USE_HEURISTICS')) {
                $vars->criticalPHP[]            = $file->getIndex();
                $vars->criticalPHPFragment[]    = $heur_sig;
                $vars->criticalPHPSig[]         = $heur_sig;
            }
            elseif (defined('USE_HEURISTICS_SUSPICIOUS')) {
                $vars->warningPHP[]         = $file->getIndex();
                $vars->warningPHPFragment[] = $heur_sig;
                $vars->warningPHPSig[]      = $heur_sig;
            }
            $this->AddResult($file, $file->getIndex(), $vars);
        }
    }

    private function satisfiedBySmartScan($fs, $ext, $content, $ext_table, $content_table)
    {
        $need_scan = $fs->satisfiedBy($ext, $ext_table) || $fs->satisfiedByContent($content, $content_table);
        if (!$need_scan && DEBUG_MODE) {
            echo "Skipped file, not critical.\n";
        }
        return $need_scan;
    }

///////////////////////////////////////////////////////////////////////////

    private function CheckVulnerability($par_Filename, $par_Index, $par_Content, $vars)
    {
        global $g_CmsListDetector, $defaults;

        $use_cms_detector = ($g_CmsListDetector instanceof CmsVersionDetector);

        if (!$use_cms_detector && !$defaults['use_template_in_path']) {
            return false;
        }

        $l_Vuln = [];

        $par_Filename = strtolower($par_Filename);

        if ((strpos($par_Filename, 'libraries/joomla/session/session.php') !== false) && (strpos($par_Content, '&& filter_var($_SERVER[\'HTTP_X_FORWARDED_FOR') === false)) {
            $l_Vuln['id']   = 'RCE : https://docs.joomla.org/Security_hotfixes_for_Joomla_EOL_versions';
            $l_Vuln['ndx']  = $par_Index;
            $vars->vulnerable[] = $l_Vuln;
            return true;
        }

        if ($use_cms_detector
            && (strpos($par_Filename, 'administrator/components/com_media/helpers/media.php') !== false)
            && (strpos($par_Content, '$format == \'\' || $format == false ||') === false)
        ) {
            if ($g_CmsListDetector->isCms(CmsVersionDetector::CMS_JOOMLA, '1.5')) {
                $l_Vuln['id']   = 'AFU : https://docs.joomla.org/Security_hotfixes_for_Joomla_EOL_versions';
                $l_Vuln['ndx']  = $par_Index;
                $vars->vulnerable[] = $l_Vuln;
                return true;
            }

            return false;
        }

        if ($use_cms_detector
            && (strpos($par_Filename, 'joomla/filesystem/file.php') !== false)
            && (strpos($par_Content, '$file = rtrim($file, \'.\');') === false)
        ) {
            if ($g_CmsListDetector->isCms(CmsVersionDetector::CMS_JOOMLA, '1.5')) {
                $l_Vuln['id']   = 'AFU : https://docs.joomla.org/Security_hotfixes_for_Joomla_EOL_versions';
                $l_Vuln['ndx']  = $par_Index;
                $vars->vulnerable[] = $l_Vuln;
                return true;
            }

            return false;
        }

        if ((strpos($par_Filename, 'editor/filemanager/upload/test.html') !== false) || (stripos($par_Filename, 'editor/filemanager/browser/default/connectors/php/') !== false) || (stripos($par_Filename, 'editor/filemanager/connectors/uploadtest.html') !== false) || (strpos($par_Filename, 'editor/filemanager/browser/default/connectors/test.html') !== false)) {
            $l_Vuln['id']   = 'AFU : FCKEDITOR : http://www.exploit-db.com/exploits/17644/ & /exploit/249';
            $l_Vuln['ndx']  = $par_Index;
            $vars->vulnerable[] = $l_Vuln;
            return true;
        }

        if ((strpos($par_Filename, 'inc_php/image_view.class.php') !== false) || (strpos($par_Filename, '/inc_php/framework/image_view.class.php') !== false)) {
            if (strpos($par_Content, 'showImageByID') === false) {
                $l_Vuln['id']   = 'AFU : REVSLIDER : http://www.exploit-db.com/exploits/35385/';
                $l_Vuln['ndx']  = $par_Index;
                $vars->vulnerable[] = $l_Vuln;
                return true;
            }

            return false;
        }

        if (strpos($par_Filename, 'includes/database/database.inc') !== false) {
            if (strpos($par_Content, 'foreach ($data as $i => $value)') !== false) {
                $l_Vuln['id']   = 'SQLI : DRUPAL : CVE-2014-3704';
                $l_Vuln['ndx']  = $par_Index;
                $vars->vulnerable[] = $l_Vuln;
                return true;
            }

            return false;
        }

        if (strpos($par_Filename, 'engine/classes/min/index.php') !== false) {
            if (strpos($par_Content, 'tr_replace(chr(0)') === false) {
                $l_Vuln['id']   = 'AFD : MINIFY : CVE-2013-6619';
                $l_Vuln['ndx']  = $par_Index;
                $vars->vulnerable[] = $l_Vuln;
                return true;
            }

            return false;
        }

        if ((strpos($par_Filename, 'timthumb.php') !== false) || (strpos($par_Filename, 'thumb.php') !== false) || (strpos($par_Filename, 'cache.php') !== false) || (strpos($par_Filename, '_img.php') !== false)) {
            if (strpos($par_Content, 'code.google.com/p/timthumb') !== false && strpos($par_Content, '2.8.14') === false) {
                $l_Vuln['id']   = 'RCE : TIMTHUMB : CVE-2011-4106,CVE-2014-4663';
                $l_Vuln['ndx']  = $par_Index;
                $vars->vulnerable[] = $l_Vuln;
                return true;
            }

            return false;
        }

        if (strpos($par_Filename, 'components/com_rsform/helpers/rsform.php') !== false) {
            if (preg_match('~define\s*\(\s*\'_rsform_version\'\s*,\s*\'([^\']+)\'\s*\)\s*;~msi', $par_Content, $version)) {
                $version = $version[1];
                if (version_compare($version, '1.5.2') !== 1) {
                    $l_Vuln['id']   = 'RCE : RSFORM : rsform.php, LINE 1605';
                    $l_Vuln['ndx']  = $par_Index;
                    $vars->vulnerable[] = $l_Vuln;
                    return true;
                }
            }
            return false;
        }


        if (strpos($par_Filename, 'fancybox-for-wordpress/fancybox.php') !== false) {
            if (strpos($par_Content, '\'reset\' == $_REQUEST[\'action\']') !== false) {
                $l_Vuln['id']   = 'CODE INJECTION : FANCYBOX';
                $l_Vuln['ndx']  = $par_Index;
                $vars->vulnerable[] = $l_Vuln;
                return true;
            }

            return false;
        }


        if (strpos($par_Filename, 'cherry-plugin/admin/import-export/upload.php') !== false) {
            if (strpos($par_Content, 'verify nonce') === false) {
                $l_Vuln['id']   = 'AFU : Cherry Plugin';
                $l_Vuln['ndx']  = $par_Index;
                $vars->vulnerable[] = $l_Vuln;
                return true;
            }

            return false;
        }

        if (strpos($par_Filename, 'tiny_mce/plugins/tinybrowser/tinybrowser.php') !== false) {
            $l_Vuln['id']   = 'AFU : TINYMCE : http://www.exploit-db.com/exploits/9296/';
            $l_Vuln['ndx']  = $par_Index;
            $vars->vulnerable[] = $l_Vuln;

            return true;
        }

        if (strpos($par_Filename, '/bx_1c_import.php') !== false) {
            if (strpos($par_Content, '$_GET[\'action\']=="getfiles"') !== false) {
                $l_Vuln['id']   = 'AFD : https://habrahabr.ru/company/dsec/blog/326166/';
                $l_Vuln['ndx']  = $par_Index;
                $vars->vulnerable[] = $l_Vuln;

                return true;
            }
        }

        if (strpos($par_Filename, 'scripts/setup.php') !== false) {
            if (strpos($par_Content, 'PMA_Config') !== false) {
                $l_Vuln['id']   = 'CODE INJECTION : PHPMYADMIN : http://1337day.com/exploit/5334';
                $l_Vuln['ndx']  = $par_Index;
                $vars->vulnerable[] = $l_Vuln;
                return true;
            }

            return false;
        }

        if (strpos($par_Filename, '/uploadify.php') !== false) {
            if (strpos($par_Content, 'move_uploaded_file($tempFile,$targetFile') !== false) {
                $l_Vuln['id']   = 'AFU : UPLOADIFY : CVE: 2012-1153';
                $l_Vuln['ndx']  = $par_Index;
                $vars->vulnerable[] = $l_Vuln;
                return true;
            }

            return false;
        }

        if (strpos($par_Filename, 'com_adsmanager/controller.php') !== false) {
            if (strpos($par_Content, 'move_uploaded_file($file[\'tmp_name\'], $tempPath.\'/\'.basename($file[') !== false) {
                $l_Vuln['id']   = 'AFU : https://revisium.com/ru/blog/adsmanager_afu.html';
                $l_Vuln['ndx']  = $par_Index;
                $vars->vulnerable[] = $l_Vuln;
                return true;
            }

            return false;
        }

        if (strpos($par_Filename, 'wp-content/plugins/wp-mobile-detector/resize.php') !== false) {
            if (strpos($par_Content, 'file_put_contents($path, file_get_contents($_REQUEST[\'src\']));') !== false) {
                $l_Vuln['id']   = 'AFU : https://www.pluginvulnerabilities.com/2016/05/31/aribitrary-file-upload-vulnerability-in-wp-mobile-detector/';
                $l_Vuln['ndx']  = $par_Index;
                $vars->vulnerable[] = $l_Vuln;
                return true;
            }

            return false;
        }

        if (strpos($par_Filename, 'core/lib/drupal.php') !== false) {
            $version = '';
            if (preg_match('|VERSION\s*=\s*\'(8\.\d+\.\d+)\'|smi', $par_Content, $tmp_ver)) {
                $version = $tmp_ver[1];
            }

            if (($version !== '') && (version_compare($version, '8.5.1', '<'))) {
                $l_Vuln['id']   = 'Drupageddon 2 : SA-CORE-2018–002';
                $l_Vuln['ndx']  = $par_Index;
                $vars->vulnerable[] = $l_Vuln;
                return true;
            }


            return false;
        }

        if (strpos($par_Filename, 'changelog.txt') !== false) {
            $version = '';
            if (preg_match('|Drupal\s+(7\.\d+),|smi', $par_Content, $tmp_ver)) {
                $version = $tmp_ver[1];
            }

            if (($version !== '') && (version_compare($version, '7.58', '<'))) {
                $l_Vuln['id']   = 'Drupageddon 2 : SA-CORE-2018–002';
                $l_Vuln['ndx']  = $par_Index;
                $vars->vulnerable[] = $l_Vuln;
                return true;
            }

            return false;
        }

        if (strpos($par_Filename, 'phpmailer.php') !== false) {
            $l_Detect = false;
            if (strpos($par_Content, 'PHPMailer') !== false) {
                $l_Found = preg_match('~Version:\s*(\d+)\.(\d+)\.(\d+)~', $par_Content, $l_Match);

                if ($l_Found) {
                    $l_Version = $l_Match[1] * 1000 + $l_Match[2] * 100 + $l_Match[3];

                    if ($l_Version < 2520) {
                        $l_Detect = true;
                    }
                }

                if (!$l_Found) {

                    $l_Found = preg_match('~Version\s*=\s*\'(\d+)\.*(\d+)\.(\d+)~i', $par_Content, $l_Match);
                    if ($l_Found) {
                        $l_Version = $l_Match[1] * 1000 + $l_Match[2] * 100 + $l_Match[3];
                        if ($l_Version < 5220) {
                            $l_Detect = true;
                        }
                    }
                }

                if ($l_Detect) {
                    $l_Vuln['id']   = 'RCE : CVE-2016-10045, CVE-2016-10031';
                    $l_Vuln['ndx']  = $par_Index;
                    $vars->vulnerable[] = $l_Vuln;
                    return true;
                }
            }

            return false;
        }
    }

    private function checkFalsePositives($l_Filename, $l_Unwrapped, $l_DeobfType, $vars)
    {

        if ($l_DeobfType != '') {
            if (DEBUG_MODE) {
                stdOut("\n-----------------------------------------------------------------------------\n");
                stdOut("[DEBUG]" . $l_Filename . "\n");
                stdOut("\n...... $l_DeobfType ...........\n");
                var_dump($l_Unwrapped);
                stdOut("\n");
            }

            switch ($l_DeobfType) {
                case 'Bitrix':
                    foreach ($vars->signs->_DeMapper as $fkey => $fvalue) {
                        if (DEBUG_MODE) {
                            stdOut("[$fkey] => [$fvalue]\n");
                        }

                        if ((strpos($l_Filename, $fkey) !== false) && (strpos($l_Unwrapped, $fvalue) !== false)) {
                            if (DEBUG_MODE) {
                                stdOut("\n[DEBUG] *** SKIP: False Positive\n");
                            }

                            return true;
                        }
                    }
                    break;
            }


            return false;
        }
    }

    private function getFragment($par_Content, $par_Pos)
    {

        $l_MaxChars = MAX_PREVIEW_LEN;

        $par_Content = preg_replace('/[\x00-\x1F\x80-\xFF]/', '~', $par_Content);

        $l_MaxLen   = strlen($par_Content);
        $l_RightPos = min($par_Pos + $l_MaxChars, $l_MaxLen);
        $l_MinPos   = max(0, $par_Pos - $l_MaxChars);

        $l_Res = ($l_MinPos > 0 ? '…' : '') . substr($par_Content, $l_MinPos, $par_Pos - $l_MinPos) . '__AI_MARKER__' . substr($par_Content, $par_Pos, $l_RightPos - $par_Pos - 1);

        $l_Res = AibolitHelpers::makeSafeFn(Normalization::normalize($l_Res), $this->addPrefix, $this->noPrefix);

        $l_Res = str_replace('~', ' ', $l_Res);

        $l_Res = preg_replace('~[\s\t]+~', ' ', $l_Res);

        $l_Res = str_replace('' . '?php', '' . '?php ', $l_Res);

        return $l_Res;
    }

    private function getLogEmuOffsets($par_Content, $par_Pos)
    {
        $ret = [];
        preg_match('~[A-Z_]\!\~\](\d+:[A-F\d]+)\[~m', strrev($par_Content), $matches, PREG_OFFSET_CAPTURE, (-$par_Pos - 1));
        $offsets = isset($matches[1][0]) ? strrev($matches[1][0]) : false;
        if ($offsets) {
            $offsets = explode(':', $offsets);
            $offsets[0] = hexdec($offsets[0]);
            $offsets[1] = (int)$offsets[1];
            $ret = $offsets;
        }
        return $ret;
    }

    /**
     * @return array
     */
    public function whitelisting()
    {
        // whitelist
        $snum   = 0;
        $i      = -1;

        if (!isset($this->vars->structure['crc'])) {
            return [$snum, $i];
        }

        $list   = $this->check_whitelist($this->vars->structure['crc'], $snum);
        $keys   = [
            'criticalPHP',
            'criticalJS',
            'phishing',
            'adwareList',
            'warningPHP'
        ];

        foreach ($keys as $p) {
            if (empty($this->vars->{$p})) {
                continue;
            }
            $p_Fragment = $p . 'Fragment';
            $p_Sig      = $p . 'Sig';

            if ($p == 'phishing') {
                $p_Sig = $p . 'SigFragment';
            }

            $count = count($this->vars->{$p});
            for ($i = 0; $i < $count; $i++) {
                $id = $this->vars->{$p}[$i];
                if ($this->vars->structure['crc'][$id] !== 0 && in_array($this->vars->structure['crc'][$id], $list)) {
                    unset($this->vars->{$p}[$i], $this->vars->{$p_Sig}[$i], $this->vars->{$p_Fragment}[$i]);
                }
            }

            $this->vars->{$p}             = array_values($this->vars->{$p});
            $this->vars->{$p_Fragment}    = array_values($this->vars->{$p_Fragment});
            if (!empty($this->vars->{$p_Sig})) {
                $this->vars->{$p_Sig}     = array_values($this->vars->{$p_Sig});
            }
        }
        return [$snum, $i];
    }

    public function check_whitelist($list, &$snum)
    {
        if (empty($list)) {
            return [];
        }

        $avdb = '';
        $file = __DIR__ . '/AIBOLIT-WHITELIST.db';
        if ((isset($this->vars->options['avdb']) && !empty($this->vars->options['avdb']) && ($avdb = $this->vars->options['avdb'])) || (isset($this->vars->options['c']) && !empty($this->vars->options['c']) && ($avdb = $this->vars->options['c']))) {
            if (file_exists($avdb)) {
                $file = dirname($avdb) . '/AIBOLIT-WHITELIST.db';
            }
        }

        try {
            $db = FileHashMemoryDb::open($file);
        } catch (Exception $e) {
            stdOut("\nAn error occurred while loading the white list database from " . $file . "\n");
            return [];
        }

        $snum = $db->count();
        stdOut("\nLoaded " . ceil($snum) . " known files from " . $file . "\n");

        return $db->find($list);
    }

///////////////////////////////////////////////////////////////////////////

    private function isFileTooBigForScanWithSignatures($filesize)
    {
        return (MAX_SIZE_TO_SCAN > 0 && $filesize > MAX_SIZE_TO_SCAN) || ($filesize < 0);
    }

    private function isFileTooBigForCloudscan($filesize)
    {
        return (MAX_SIZE_TO_CLOUDSCAN > 0 && $filesize > MAX_SIZE_TO_CLOUDSCAN) || ($filesize < 0);
    }

    private function caAddStatsItem($verdict, FileInfo $file)
    {
        if (defined('CLS_DECISION_MAKING_STATS')) {
            if ($verdict === true) {
                $verdict = DecisionMakingStats::VERDICT_OK;
            }
            DecisionMakingStats::addStatsItem('cloud_assisted_scan', $verdict, $file);
        }
    }

    private function addStatsItem(string $item, $verdict, FileInfo $file_info, $size = null)
    {
        if (defined('CLS_DECISION_MAKING_STATS')) {
            if ($verdict === true) {
                $verdict = DecisionMakingStats::CHECKER_SCAN;
            }
            if ($verdict === false) {
                $verdict = DecisionMakingStats::CHECKER_SKIP;
            }
            DecisionMakingStats::addStatsItem($item, $verdict, $file_info, $size);
        }
    }
}



class ScanUnit
{
    public static function QCR_ScanContent($checkers, $l_Unwrapped, $l_Content, $signs, $debug = null, $precheck = null, $processResult = null, &$return = null, &$error = null)
    {
        $smart_skipped = false;
        $flag = false;
        foreach ($checkers as $checker => $full) {
            $l_pos = 0;
            $l_SignId = '';
            if (isset($precheck) && is_callable($precheck)) {
                if (!$precheck($checker, $l_Unwrapped) && ($full && !$precheck($checker, $l_Content))) {
                    $smart_skipped = true;
                    continue;
                }
            }
            $flag = ScanCheckers::{$checker}($l_Unwrapped, $l_pos, $l_SignId, $signs, $debug, $error);
            if ($flag && isset($processResult) && is_callable($processResult)) {
                $tag = 'match_o:?,u:1_' . $checker;
                $processResult($checker, $l_Unwrapped, $l_pos, $l_SignId, $return, $tag);
            }

            if (!$flag && $full) {
                $flag = ScanCheckers::{$checker}($l_Content, $l_pos, $l_SignId, $signs, $debug, $error);
                if ($flag && isset($processResult) && is_callable($processResult)) {
                    $tag = 'match_o:1,u:0_' . $checker;
                    $processResult($checker, $l_Content, $l_pos, $l_SignId, $return, $tag);
                }
            }
            if ($flag) {
                return true;
            }
        }
        if (!$flag && $smart_skipped) {
            $return = [RapidScanStorageRecord::RX_SKIPPED_SMART, '', ''];
        }
        return false;
    }

    public static function Rescan($content, $signs, $debug = null, $deobfuscate = false, $processResult = null, &$return = null)
    {
        $checkers['CriticalPHP'] = true;
        $l_Unwrapped = Normalization::strip_whitespace($content);
        $l_UnicodeContent = Encoding::detectUTFEncoding($content);
        if ($l_UnicodeContent !== false) {
            if (Encoding::iconvSupported()) {
                $l_Unwrapped = Encoding::convertToCp1251($l_UnicodeContent, $l_Unwrapped);
            }
        }

        if ($deobfuscate) {
            $l_DeobfObj = new Deobfuscator($l_Unwrapped, $content);
            $l_DeobfType = $l_DeobfObj->getObfuscateType($l_Unwrapped);
        }

        if (isset($l_DeobfType) && $l_DeobfType != '') {
            $l_Unwrapped = $l_DeobfObj->deobfuscate();
        }

        $l_Unwrapped = Normalization::normalize($l_Unwrapped);

        $getRescanRes = function ($checker, $content, $l_Pos, $l_SigId, &$return) use ($signs) {
            if ($signs->needSkipId($l_SigId)) {
                $return = 2;
            } else {
                $return = 1;
            }
        };
        $return = 0;
        self::QCR_ScanContent($checkers, $l_Unwrapped, $content, $signs, null, null, $getRescanRes, $return);
        return $return;
    }
}


if (!defined('CLS_SCAN_CHECKERS')) {
    define('CLS_SCAN_CHECKERS', true);
}
class ScanCheckers
{
    const URL_GRAB = '~(?:<(script|iframe|object|embed|img|a)\s*[^<]{0,300}?)?((?:https?:)?\\\\?/\\\\?/(?:www\.)?[-a-zA-Z0-9@:%._\+\~#=]{2,256}\.[a-z]{2,10}\b(?:[-a-zA-Z0-9@:%_\+.\~#?&/=\\\\]*))(.{0,300}?</\1>)?~msi';

    public static function WarningPHP($l_Content, &$l_Pos, &$l_SigId, $signs, $debug = null, &$error = null)
    {
        foreach ($signs->_SusDB as $l_Item) {
            if (preg_match($l_Item, $l_Content, $l_Found, PREG_OFFSET_CAPTURE)) {
                if (!self::CheckException($l_Content, $l_Found, $signs)) {
                    $l_Pos   = $l_Found[0][1];
                    $l_SigId = LoadSignaturesForScan::getSigId($l_Found);
                    return true;
                }
            } else if (isset($error) && $error === 0) {
                $error = preg_last_error();
            }
        }
        return false;
    }

    public static function CriticalCron($l_Content, &$l_Pos, &$l_SigId, $signs, $debug = null, &$error = null)
    {
        foreach ($signs->_CronDB as $l_Item) {
            if (preg_match($l_Item, $l_Content, $l_Found, PREG_OFFSET_CAPTURE)) {
                if (!self::CheckException($l_Content, $l_Found, $signs)) {
                    $l_Pos   = $l_Found[0][1];
                    $l_SigId = LoadSignaturesForScan::getSigId($l_Found);
                    return true;
                }
            } else if (isset($error) && $error === 0) {
                $error = preg_last_error();
            }
        }
        return false;
    }

    ////////////////////////////////////////////////////////////////////////////
    public static function Adware($l_Content, &$l_Pos, &$l_SigId, $signs, $debug = null, &$error = null)
    {
        $l_Res = false;

        foreach ($signs->_AdwareSig as $l_Item) {
            $offset = 0;
            while (preg_match($l_Item, $l_Content, $l_Found, PREG_OFFSET_CAPTURE, $offset)) {
                if (!self::CheckException($l_Content, $l_Found, $signs)) {
                    $l_Pos = $l_Found[0][1];
                    $l_SigId = 'adware';
                    return true;
                }

                $offset = (int)$l_Found[0][1] + 1;
            }
            if (isset($error) && $error === 0) {
                $error = preg_last_error();
            }
        }

        return $l_Res;
    }

    ////////////////////////////////////////////////////////////////////////////
    public static function CheckException(&$l_Content, &$l_Found, $signs, $debug = null, &$error = null)
    {
        if (!(isset($signs->_ExceptFlex) && is_array($signs->_ExceptFlex))) {
            return false;
        }
        $l_FoundStrPlus = substr($l_Content, max($l_Found[0][1] - 10, 0), 70);

        foreach ($signs->_ExceptFlex as $l_ExceptItem) {
            if (@preg_match($l_ExceptItem, $l_FoundStrPlus, $l_Detected)) {
                return true;
            }
            if (isset($error) && $error === 0) {
                $error = preg_last_error();
            }
        }

        return false;
    }

    ////////////////////////////////////////////////////////////////////////////
    public static function Phishing($l_Content, &$l_Pos, &$l_SigId, $signs, $debug = null, &$error = null)
    {
        $l_Res = false;

        foreach ($signs->_PhishingSig as $l_Item) {
            $offset = 0;
            while (preg_match($l_Item, $l_Content, $l_Found, PREG_OFFSET_CAPTURE, $offset)) {
                if (!self::CheckException($l_Content, $l_Found, $signs)) {
                    $l_Pos   = $l_Found[0][1];
                    $l_SigId = LoadSignaturesForScan::getSigId($l_Found);

                    if (is_object($debug) && $debug->getDebugMode() == true) {
                        echo "Phis: $l_Content matched [$l_Item] in $l_Pos\n";
                    }

                    return $l_Pos;
                }
                $offset = (int)$l_Found[0][1] + 1;

            }
            if (isset($error) && $error === 0) {
                $error = preg_last_error();
            }
        }

        return $l_Res;
    }

    ////////////////////////////////////////////////////////////////////////////
    public static function CriticalJS($l_Content, &$l_Pos, &$l_SigId, $signs, $debug = null, &$error = null)
    {
        $l_Res = false;

        foreach ($signs->_JSVirSig as $l_Item) {
            $offset = 0;
            if (is_object($debug) && $debug->getDebugPerformance() == true) {
                $stat_start = AibolitHelpers::currentTime();
            }
            $time = AibolitHelpers::currentTime();
            $res = preg_match($l_Item, $l_Content, $l_Found, PREG_OFFSET_CAPTURE, $offset);
            if (isset($error)  && $error === 0 && !$res) {
                $error = preg_last_error();
            }
            if (defined('CLS_PERFORMANCE_STATS')) {
                PerformanceStats::addPerformanceItem(PerformanceStats::PCRE_SCAN_STAT, AibolitHelpers::currentTime() - $time);
            }
            while ($res) {
                if (!self::CheckException($l_Content, $l_Found, $signs)) {
                    $l_Pos   = $l_Found[0][1];
                    $l_SigId = LoadSignaturesForScan::getSigId($l_Found);

                    if (is_object($debug) && $debug->getDebugMode() == true) {
                        echo "JS: $l_Content matched [$l_Item] in $l_Pos\n";
                    }

                    $l_Res = true;
                    break;
                }

                $offset = (int)$l_Found[0][1] + 1;
                $time = AibolitHelpers::currentTime();
                $res = preg_match($l_Item, $l_Content, $l_Found, PREG_OFFSET_CAPTURE, $offset);
                if (isset($error)  && $error === 0 && !$res) {
                    $error = preg_last_error();
                }
                if (defined('CLS_PERFORMANCE_STATS')) {
                    PerformanceStats::addPerformanceItem(PerformanceStats::PCRE_SCAN_STAT, AibolitHelpers::currentTime() - $time);
                }
            }

            if (is_object($debug) && $debug->getDebugPerformance() == true) {
                $stat_stop = AibolitHelpers::currentTime();
                $debug->addPerformanceItem($l_Item, $stat_stop - $stat_start);
            }

        }

        return $l_Res;
    }

    public static function CriticalJS_PARA($l_Content, &$l_Pos, &$l_SigId, $signs, $debug = null, &$error = null)
    {
        foreach ($signs->X_JSVirSig as $l_Item) {
            if (is_object($debug) && $debug->getDebugPerformance() == true) {
                $stat_start = AibolitHelpers::currentTime();
            }

            if (preg_match($l_Item, $l_Content, $l_Found, PREG_OFFSET_CAPTURE)) {
                if (!self::CheckException($l_Content, $l_Found, $signs)) {
                    $l_Pos   = $l_Found[0][1];
                    //$l_SigId = myCheckSum($l_Item);
                    $l_SigId = LoadSignaturesForScan::getSigId($l_Found);

                    if (is_object($debug) && $debug->getDebugMode() == true) {
                        echo "JS PARA: $l_Content matched [$l_Item] in $l_Pos\n";
                    }
                    return true;
                }
            } else if (isset($error) && $error === 0) {
                $error = preg_last_error();
            }

            if (is_object($debug) && $debug->getDebugPerformance() == true) {
                $stat_stop = AibolitHelpers::currentTime();
                $debug->addPerformanceItem($l_Item, $stat_stop - $stat_start);
            }
        }
        return false;
    }

    ////////////////////////////////////////////////////////////////////////////
    public static function CriticalPHPGIF($l_Content, &$l_Pos, &$l_SigId, $signs, $debug = null, &$error = null)
    {
        if (strpos($l_Content, 'GIF89') === 0) {
            $l_Pos = 0;
            $l_SigId = 'GIF';
            if (is_object($debug) && $debug->getDebugMode() == true) {
                echo "CRIT 6: $l_Content matched [GIF] in $l_Pos\n";
            }

            return true;
        }
        return false;
    }

    public static function CriticalPHPUploader($l_Content, &$l_Pos, &$l_SigId, $signs, $debug = null, &$error = null)
    {
        // detect uploaders / droppers
        $l_Found = null;
        if ((strlen($l_Content) < 2048) && ((($l_Pos = strpos($l_Content, 'multipart/form-data')) > 0) || (($l_Pos = strpos($l_Content, '$_FILE[') > 0)) || (($l_Pos = strpos($l_Content, 'move_uploaded_file')) > 0) || (preg_match('|\bcopy\s*\(|smi', $l_Content, $l_Found, PREG_OFFSET_CAPTURE)))) {
            if ($l_Found != null) {
                $l_Pos = $l_Found[0][1];
                $l_SigId = 'uploader';
            }
            if (is_object($debug) && $debug->getDebugMode() == true) {
                echo "CRIT 7: $l_Content matched [uploader] in $l_Pos\n";
            }

            return true;
        }
    }

    public static function CriticalPHP_3($l_Content, &$l_Pos, &$l_SigId, $signs, $debug = null, &$error = null)
    {
        foreach ($signs->X_FlexDBShe as $l_Item) {
            if (is_object($debug) && $debug->getDebugPerformance() == true) {
                $stat_start = AibolitHelpers::currentTime();
            }

            if (preg_match($l_Item, $l_Content, $l_Found, PREG_OFFSET_CAPTURE)) {
                if (!self::CheckException($l_Content, $l_Found, $signs)) {
                    $l_Pos   = $l_Found[0][1];
                    $l_SigId = LoadSignaturesForScan::getSigId($l_Found);

                    if (is_object($debug) && $debug->getDebugMode() == true) {
                        echo "CRIT 3: $l_Content matched [$l_Item] in $l_Pos\n";
                    }

                    return true;
                }
            } else if (isset($error) && $error === 0) {
                $error = preg_last_error();
            }

            if (is_object($debug) && $debug->getDebugPerformance() == true) {
                $stat_stop = AibolitHelpers::currentTime();
                $debug->addPerformanceItem($l_Item, $stat_stop - $stat_start);
            }
        }
        return false;
    }

    public static function CriticalPHP_2($l_Content, &$l_Pos, &$l_SigId, $signs, $debug = null, &$error = null)
    {
        foreach ($signs->XX_FlexDBShe as $l_Item) {
            if (is_object($debug) && $debug->getDebugPerformance() == true) {
                $stat_start = AibolitHelpers::currentTime();
            }

            if (preg_match($l_Item, $l_Content, $l_Found, PREG_OFFSET_CAPTURE)) {
                if (!self::CheckException($l_Content, $l_Found, $signs)) {
                    $l_Pos   = $l_Found[0][1];
                    $l_SigId = LoadSignaturesForScan::getSigId($l_Found);

                    if (is_object($debug) && $debug->getDebugMode() == true) {
                        echo "CRIT 2: $l_Content matched [$l_Item] in $l_Pos\n";
                    }

                    return true;
                }
            } else if (isset($error) && $error === 0) {
                $error = preg_last_error();
            }

            if (is_object($debug) && $debug->getDebugPerformance() == true) {
                $stat_stop = AibolitHelpers::currentTime();
                $debug->addPerformanceItem($l_Item, $stat_stop - $stat_start);
            }
        }
        return false;
    }

    public static function CriticalPHP_4($l_Content, &$l_Pos, &$l_SigId, $signs, $debug = null, &$error = null)
    {
        $l_Content_lo = strtolower($l_Content);

        foreach ($signs->_DBShe as $l_Item) {
            $l_Pos = strpos($l_Content_lo, $l_Item);
            if ($l_Pos !== false) {
                $l_SigId = AibolitHelpers::myCheckSum($l_Item);

                if (is_object($debug) && $debug->getDebugMode() == true) {
                    echo "CRIT 4: $l_Content matched [$l_Item] in $l_Pos\n";
                }

                return true;
            }
        }
        return false;
    }

    public static function CriticalPHP_5($l_Content, &$l_Pos, &$l_SigId, $signs, $debug = null, &$error = null)
    {
        $l_Content_lo = strtolower($l_Content);

        foreach ($signs->X_DBShe as $l_Item) {
            $l_Pos = strpos($l_Content_lo, $l_Item);
            if ($l_Pos !== false) {
                $l_SigId = AibolitHelpers::myCheckSum($l_Item);

                if (is_object($debug) && $debug->getDebugMode() == true) {
                    echo "CRIT 5: $l_Content matched [$l_Item] in $l_Pos\n";
                }

                return true;
            }
        }
        return false;
    }

    public static function CriticalPHP($l_Content, &$l_Pos, &$l_SigId, $signs, $debug = null, &$error = null)
    {
        foreach ($signs->_FlexDBShe as $l_Item) {
            $offset = 0;

            if (is_object($debug) && $debug->getDebugPerformance() == true) {
                $stat_start = AibolitHelpers::currentTime();
            }
            $time = AibolitHelpers::currentTime();
            $res = preg_match($l_Item, $l_Content, $l_Found, PREG_OFFSET_CAPTURE, $offset);
            if (isset($error) && $error === 0 && !$res) {
                $error = preg_last_error();
            }
            if (defined('CLS_PERFORMANCE_STATS')) {
                PerformanceStats::addPerformanceItem(PerformanceStats::PCRE_SCAN_STAT, AibolitHelpers::currentTime() - $time);
            }
            while ($res) {
                if (!self::CheckException($l_Content, $l_Found, $signs)) {
                    $l_Pos   = $l_Found[0][1];
                    //$l_SigId = myCheckSum($l_Item);
                    $l_SigId = LoadSignaturesForScan::getSigId($l_Found);

                    if (is_object($debug) && $debug->getDebugMode() == true) {
                        echo "CRIT 1: $l_Content matched [$l_Item] in $l_Pos\n";
                    }

                    return true;
                }

                $offset = (int)$l_Found[0][1] + 1;
                $time = AibolitHelpers::currentTime();
                $res = preg_match($l_Item, $l_Content, $l_Found, PREG_OFFSET_CAPTURE, $offset);
                if (isset($error) && $error === 0 && !$res) {
                    $error = preg_last_error();
                }
                if (defined('CLS_PERFORMANCE_STATS')) {
                    PerformanceStats::addPerformanceItem(PerformanceStats::PCRE_SCAN_STAT, AibolitHelpers::currentTime() - $time);
                }
            }
            if (is_object($debug) && $debug->getDebugPerformance() == true) {
                $stat_stop = AibolitHelpers::currentTime();
                $debug->addPerformanceItem($l_Item, $stat_stop - $stat_start);
            }

        }

        return false;
    }

    public static function isOwnUrl($url, $own_domain)
    {
        if ($own_domain === null || $own_domain === '') {
            return false;
        }
        return (bool)preg_match($own_domain, $url);
    }

    public static function isUrlInList($url, $list)
    {
        if (isset($list)) {
            foreach ($list as $item) {
                if (preg_match($item, $url, $id, PREG_OFFSET_CAPTURE)) {
                    return $id;
                }
            }
        }

        return false;
    }

    public static function UrlChecker($l_Content, &$l_Pos, &$l_SigId, $signs, $debug = null, &$error = null)
    {
        $l_Pos      = [];
        $l_SigId    = [];
        $offset     = 0;

        while (preg_match(self::URL_GRAB, $l_Content, $l_Found, PREG_OFFSET_CAPTURE, $offset)) {
            $l_Found[2][0] = str_replace('\/', '/', $l_Found[2][0]);
            if (!self::isOwnUrl($l_Found[2][0], $signs->getOwnUrl())
                && (isset($signs->whiteUrls) && !self::isUrlInList($l_Found[2][0], $signs->whiteUrls->getDb()))
            ) {
                if ($id = self::isUrlInList($l_Found[2][0], $signs->blackUrls->getDb())) {
                    if (isset($l_Found[1][0]) && $l_Found[1][0] !== '' && isset($l_Found[3][0]) && $l_Found[3][0] !== '') {
                        $l_Pos['black'][] = $l_Found[2][1];
                        $l_SigId['black'][] = $signs->blackUrls->getSig($id);
                    }
                } else {
                    $l_Pos['unk'][] = $l_Found[2][1];
                    $l_SigId['unk'][] = $l_Found[2][0];
                }
            }
            $offset = (int)$l_Found[2][1] + strlen($l_Found[2][0]);
        }
        if (isset($error) && $error === 0) {
            $error = preg_last_error();
        }
        return !empty($l_Pos);
    }
}



class TemplateList
{
    /**
     * #############
     * # MAIN_PAGE #
     * #############
     */
    const MAIN_PAGE = <<<MAIN_PAGE
<html>
<head>
    <!-- revisium.com/ai/ -->
    <meta http-equiv="Content-Type" content="text/html;charset=utf-8" >
    <META NAME="ROBOTS" CONTENT="NOINDEX,NOFOLLOW">
    <title>@@HEAD_TITLE@@</title>
    <style type="text/css" title="currentStyle">
        @import "https://cdn.revisium.com/ai/media/css/demo_page2.css";
        @import "https://cdn.revisium.com/ai/media/css/jquery.dataTables2.css";
    </style>

    <script type="text/javascript" language="javascript" src="https://cdn.revisium.com/ai/jquery.js"></script>
    <script type="text/javascript" language="javascript" src="https://cdn.revisium.com/ai/datatables.min.js"></script>
    <style>
        body {
            font-family: Tahoma, sans-serif;
            color: #5a5a5a;
            background: #FFFFFF;
            font-size: 14px;
            margin: 20px;
            padding: 0;
        }

        .header {
            font-size: 34px;
            margin: 0 0 10px 0;
        }

        .hidd {
            display: none;
        }

        .ok {
            color: green;
        }

        .line_no {
            -webkit-border-radius: 4px;
            -moz-border-radius: 4px;
            border-radius: 4px;

            background: #DAF2C1;
            padding: 2px 5px 2px 5px;
            margin: 0 5px 0 5px;
        }

        .credits_header {
            -webkit-border-radius: 4px;
            -moz-border-radius: 4px;
            border-radius: 4px;

            background: #F2F2F2;
            padding: 10px;
            font-size: 11px;
            margin: 0 0 10px 0;
        }

        .marker {
            color: #FF0090;
            font-weight: 100;
            background: #FF0090;
            padding: 2px 0 2px 0;
            width: 2px;
        }

        .title {
            font-size: 24px;
            margin: 20px 0 10px 0;
            color: #9CA9D1;
        }

        .summary {
            float: left;
            width: 500px;
        }

        .summary TD {
            font-size: 12px;
            border-bottom: 1px solid #F0F0F0;
            font-weight: 700;
            padding: 10px 0 10px 0;
        }

        .crit, .vir {
            color: #D84B55;
        }

        .intitem {
            color: #4a6975;
        }

        .spacer {
            margin: 0 0 50px 0;
            clear: both;
        }

        .warn {
            color: #F6B700;
        }

        .clear {
            clear: both;
        }

        .offer {
            -webkit-border-radius: 4px;
            -moz-border-radius: 4px;
            border-radius: 4px;

            width: 500px;
            background: #F2F2F2;
            color: #747474;
            font-family: Helvetica, Arial, sans-serif;
            padding: 30px;
            margin: 20px 0 0 550px;
            font-size: 14px;
        }

        .offer-our-products {
            -webkit-border-radius: 4px;
            -moz-border-radius: 4px;
            border-radius: 4px;

            width: 500px;
            background: #f6f5e0;
            color: #747474;
            font-family: Helvetica, Arial, sans-serif;
            padding: 30px;
            margin: 20px 0 0 550px;
            font-size: 14px;
        }


        HR {
            margin-top: 15px;
            margin-bottom: 15px;
            opacity: .2;
        }

        .flist {
            font-family: Henvetica, Arial, sans-serif;
        }

        .flist TD {
            font-size: 11px;
            padding: 5px;
        }

        .flist TH {
            font-size: 12px;
            height: 30px;
            padding: 5px;
            background: #CEE9EF;
        }


        .it {
            font-size: 14px;
            font-weight: 100;
            margin-top: 10px;
        }

        .crit .it A {
            color: #E50931;
            line-height: 25px;
            text-decoration: none;
        }

        .warn .it A {
            color: #F2C900;
            line-height: 25px;
            text-decoration: none;
        }


        .details {
            font-family: Calibri, sans-serif;
            font-size: 12px;
            margin: 10px 10px 10px 0;
        }

        .crit .details {
            color: #A08080;
        }

        .warn .details {
            color: #808080;
        }

        .details A {
            color: #FFF;
            font-weight: 700;
            text-decoration: none;
            padding: 2px;
            background: #E5CEDE;
            -webkit-border-radius: 7px;
            -moz-border-radius: 7px;
            border-radius: 7px;
        }

        .details A:hover {
            background: #A0909B;
        }

        .ctd {
            margin: 10px 0 10px 0;
            align: center;
        }

        .ctd A {
            color: #0D9922;
        }

        .disclaimer {
            color: darkgreen;
            margin: 10px 10px 10px 0;
        }

        .note_vir {
            margin: 10px 0 10px 0;
        / / padding: 10 px;
            color: #FF4F4F;
            font-size: 15px;
            font-weight: 700;
            clear: both;

        }

        .note_warn {
            margin: 10px 0 10px 0;
            color: #F6B700;
            font-size: 15px;
            font-weight: 700;
            clear: both;
        }

        .note_int {
            margin: 10px 0 10px 0;
            color: #60b5d6;
            font-size: 15px;
            font-weight: 700;
            clear: both;
        }

        .updateinfo {
            color: #FFF;
            text-decoration: none;
            background: #E5CEDE;
            -webkit-border-radius: 7px;
            -moz-border-radius: 7px;
            border-radius: 7px;

            margin: 10px 0 10px 0;
            padding: 10px;
        }


        .caution {
            color: #EF7B75;
            text-decoration: none;
            margin: 20px 0 0 0;
            font-size: 12px;
        }

        .footer {
            color: #303030;
            text-decoration: none;
            background: #F4F4F4;
            -webkit-border-radius: 7px;
            -moz-border-radius: 7px;
            border-radius: 7px;

            margin: 80px 0 10px 0px;
            padding: 10px;
        }

        .rep {
            color: #303030;
            text-decoration: none;
            background: #94DDDB;
            -webkit-border-radius: 7px;
            -moz-border-radius: 7px;
            border-radius: 7px;

            margin: 10px 0 10px 0;
            padding: 10px;
            font-size: 12px;
        }

    </style>
</head>
<body>

<div class="header">@@MAIN_TITLE@@ @@PATH_URL@@ (@@MODE@@)</div>
<div class="credits_header">@@CREDITS@@</div>
<div class="details_header">
    @@STAT@@<br/>
    @@SCANNED@@ @@MEMORY@@.
</div>

@@WARN_QUICK@@

<div class="summary">
    @@SUMMARY@@
</div>

<div class="offer">
    @@OFFER@@
</div>

<div class="offer-our-products">
    @@OFFER_OUR_PRODUCTS@@
</div>

<div class="clear"></div>

@@MAIN_CONTENT@@

<div class="footer">
    @@FOOTER@@
</div>

<script language="javascript">
    function hsig(id) {
        var divs = document.getElementsByTagName("tr");
        for(var i = 0; i < divs.length; i++){

            if (divs[i].getAttribute('o') == id) {
                divs[i].innerHTML = '';
            }
        }

        return false;
    }


    $(document).ready(function(){
        $('#table_crit').dataTable({
            "aLengthMenu": [[100 , 500, -1], [100, 500, "All"]],
            "aoColumns": [
                {"iDataSort": 7, "width":"70%"},
                {"iDataSort": 5},
                {"iDataSort": 6},
                {"bSortable": true},
                {"bVisible": false},
                {"bVisible": false},
                {"bVisible": false},
                {"bVisible": false}
            ],
            "paging": true,
            "iDisplayLength": 500,
            "oLanguage": {
                "sLengthMenu": "@@msg1@@",
                "sZeroRecords": "@@msg2@@",
                "sInfo": "@@msg3@@",
                "sInfoEmpty": "@@msg4@@",
                "sInfoFiltered": "@@msg5@@",
                "sSearch":       "@@msg6@@",
                "sUrl":          "",
                "oPaginate": {
                    "sFirst": "@@msg7@@",
                    "sPrevious": "@@msg8@@",
                    "sNext": "@@msg9@@",
                    "sLast": "@@msg10@@"
                },
                "oAria": {
                    "sSortAscending": "@@msg11@@",
                    "sSortDescending": "@@msg12@@"
                }
            }

        } );

    });

    $(document).ready(function(){
        $('#table_vir').dataTable({
            "aLengthMenu": [[100 , 500, -1], [100, 500, "All"]],
            "paging": true,
            "aoColumns": [
                {"iDataSort": 7, "width":"70%"},
                {"iDataSort": 5},
                {"iDataSort": 6},
                {"bSortable": true},
                {"bVisible": false},
                {"bVisible": false},
                {"bVisible": false},
                {"bVisible": false}
            ],
            "iDisplayLength": 500,
            "oLanguage": {
                "sLengthMenu": "@@msg1@@",
                "sZeroRecords": "@@msg2@@",
                "sInfo": "@@msg3@@",
                "sInfoEmpty": "@@msg4@@",
                "sInfoFiltered": "@@msg5@@",
                "sSearch":       "@@msg6@@",
                "sUrl":          "",
                "oPaginate": {
                    "sFirst": "@@msg7@@",
                    "sPrevious": "@@msg8@@",
                    "sNext": "@@msg9@@",
                    "sLast": "@@msg10@@"
                },
                "oAria": {
                    "sSortAscending":  "@@msg11@@",
                    "sSortDescending": "@@msg12@@"
                }
            },

        } );

    });

    if ($('#table_warn0')) {
        $('#table_warn0').dataTable({
            "aLengthMenu": [[100 , 500, -1], [100, 500, "All"]],
            "paging": true,
            "aoColumns": [
                {"iDataSort": 7, "width":"70%"},
                {"iDataSort": 5},
                {"iDataSort": 6},
                {"bSortable": true},
                {"bVisible": false},
                {"bVisible": false},
                {"bVisible": false},
                {"bVisible": false}
            ],
            "iDisplayLength": 500,
            "oLanguage": {
                "sLengthMenu": "@@msg1@@",
                "sZeroRecords": "@@msg2@@",
                "sInfo": "@@msg3@@",
                "sInfoEmpty": "@@msg4@@",
                "sInfoFiltered": "@@msg5@@",
                "sSearch":       "@@msg6@@",
                "sUrl":          "",
                "oPaginate": {
                    "sFirst": "@@msg7@@",
                    "sPrevious": "@@msg8@@",
                    "sNext": "@@msg9@@",
                    "sLast": "@@msg10@@"
                },
                "oAria": {
                    "sSortAscending":  "@@msg11@@",
                    "sSortDescending": "@@msg12@@"
                }
            }

        } );
    }

    if ($('#table_warn1')) {
        $('#table_warn1').dataTable({
            "aLengthMenu": [[100 , 500, -1], [100, 500, "All"]],
            "paging": true,
            "aoColumns": [
                {"iDataSort": 7, "width":"70%"},
                {"iDataSort": 5},
                {"iDataSort": 6},
                {"bSortable": true},
                {"bVisible": false},
                {"bVisible": false},
                {"bVisible": false},
                {"bVisible": false}
            ],
            "iDisplayLength": 500,
            "oLanguage": {
                "sLengthMenu": "@@msg1@@",
                "sZeroRecords": "@@msg2@@",
                "sInfo": "@@msg3@@",
                "sInfoEmpty": "@@msg4@@",
                "sInfoFiltered": "@@msg5@@",
                "sSearch":       "@@msg6@@",
                "sUrl":          "",
                "oPaginate": {
                    "sFirst": "@@msg7@@",
                    "sPrevious": "@@msg8@@",
                    "sNext": "@@msg9@@",
                    "sLast": "@@msg10@@"
                },
                "oAria": {
                    "sSortAscending":  "@@msg11@@",
                    "sSortDescending": "@@msg12@@"
                }
            }

        } );
    }
</script>
<!-- @@SERVICE_INFO@@  -->
</body>
</html>
MAIN_PAGE;

    #region templates ru
    /**
     * #############
     * # FOOTER_RU #
     * #############
     */
    const FOOTER_RU = <<<FOOTER
   <div class="disclaimer"><span class="vir">[!]</span> Отказ от гарантий: невозможно гарантировать обнаружение всех вредоносных скриптов. Поэтому разработчик сканера не несет ответственности за возможные последствия работы сканера AI-Bolit или неоправданные ожидания пользователей относительно функциональности и возможностей.
   </div>
   <div class="thanx">
      Мы будем чрезвычайно благодарны за любые упоминания сканера AI-Bolit на вашем сайте, в блоге, среди друзей, знакомых и клиентов. <br/>Ссылку можно поставить на страницу <a href="https://revisium.com/ai/">https://revisium.com/ai/</a>.<br/>
    </div>
FOOTER;

    /**
     * ###########################
     * # OFFER_RU #
     * ###########################
     */
    const OFFER_RU = <<<OFFER_ON_VIRUS_FOUND
    <div>
     <div class="crit" style="font-size: 17px; margin-bottom: 20px"><b>Внимание! Наш сканер обнаружил подозрительный или вредоносный код</b>.</div> 
     <p>Возможно, ваш сайт был взломан. Рекомендуем срочно <a href="https://revisium.com/ru/order/#fform" target=_blank>проконсультироваться со специалистами</a> по данному отчету.</p>
     <p><hr size=1></p>
     <p>Рекомендуем также проверить сайт бесплатным <b><a href="https://rescan.pro/?utm=aibolit" target=_blank>онлайн-сканером ReScan.Pro</a></b>.</p>
     <p><hr size=1></p>
         <div class="caution">@@CAUTION@@</div>
    </div>
OFFER_ON_VIRUS_FOUND;

    /**
     * #########################
     * # OFFER_OUR_PRODUCTS_RU #
     * #########################
     */
    const OFFER_OUR_PRODUCTS_RU = <<<OFFER_OUR_PRODUCTS
       <b>Наши продукты:</b><br/>
              <ul>
               <li style="margin-top: 10px"><font color=red><sup>[new]</sup></font><b><a href="https://revisium.com/ru/products/antivirus_for_ispmanager/" target=_blank>Антивирус для ISPmanager Lite</a></b> &mdash;  сканирование и лечение сайтов прямо в панели хостинга</li>
               <li style="margin-top: 10px"><b><a href="https://revisium.com/ru/blog/revisium-antivirus-for-plesk.html" target=_blank>Антивирус для Plesk</a> Onyx 17.x</b> &mdash;  сканирование и лечение сайтов прямо в панели хостинга</li>
               <li style="margin-top: 10px"><b><a href="https://cloudscan.pro/ru/" target=_blank>Облачный антивирус CloudScan.Pro</a> для веб-специалистов</b> &mdash; лечение сайтов в один клик</li>
               <li style="margin-top: 10px"><b><a href="https://revisium.com/ru/antivirus-server/" target=_blank>Антивирус для сервера</a></b> &mdash; для хостинг-компаний, веб-студий и агентств.</li>
              </ul>  
    </div>
OFFER_OUR_PRODUCTS;
    #endregion

    #region templates eng
    /**
     * #############
     * # FOOTER_EN #
     * #############
     */
    const FOOTER_EN = <<<FOOTER
           <div class="disclaimer"><span class="vir">[!]</span> Disclaimer: We're not liable to you for any damages, including general, special, incidental or consequential damages arising out of the use or inability to use the script (including but not limited to loss of data or report being rendered inaccurate or failure of the script). There's no warranty for the program. Use at your own risk. 
           </div>
           <div class="thanx">
              We're greatly appreciate for any references in the social medias, forums or blogs to our scanner AI-BOLIT <a href="https://revisium.com/aibo/">https://revisium.com/aibo/</a>.<br/>
            </div>
FOOTER;

    /**
     * ###########################
     * # OFFER_ON_VIRUS_FOUND_EN #
     * ###########################
     */
    const OFFER_EN = <<<OFFER_ON_VIRUS_FOUND
<div>
 <div class="crit" style="font-size: 17px;"><b>Attention! The scanner has detected suspicious or malicious files.</b></div> 
 <br/>Most likely the website has been compromised. Please, <a href="https://revisium.com/en/contacts/" target=_blank>contact web security experts</a> from Revisium to check the report or clean the malware.
 <p><hr size=1></p>
 Also check your website for viruses with our free <b><a href="http://rescan.pro/?en&utm=aibo" target=_blank>online scanner ReScan.Pro</a></b>.
</div>
<br/>
<div>
   Revisium contacts: <a href="https://revisium.com/en/contacts/">https://revisium.com/en/home/</a>
</div>
<div class="caution">@@CAUTION@@</div>
OFFER_ON_VIRUS_FOUND;


    /**
     * #########################
     * # OFFER_OUR_PRODUCTS_EN #
     * #########################
     */
    const OFFER_OUR_PRODUCTS_EN = <<<OFFER_OUR_PRODUCTS
<b>Special Offers:</b><br/>
              <ul>
               <li style="margin-top: 10px"><font color=red><sup>[new]</sup></font><b><a href="http://ext.plesk.com/packages/b71916cf-614e-4b11-9644-a5fe82060aaf-revisium-antivirus">Antivirus for Plesk Onyx</a></b> hosting panel with one-click malware cleanup and scheduled website scanning.</li>
               <li style="margin-top: 10px"><font color=red></font><b><a href="https://www.ispsystem.com/addons-modules/revisium">Antivirus for ISPmanager Lite</a></b> hosting panel with one-click malware cleanup and scheduled website scanning.</li>
               <li style="margin-top: 10px">Professional malware cleanup and web-protection service with 6 month guarantee for only $99 (one-time payment): <a href="https://revisium.com/en/home/#order_form">https://revisium.com/en/home/</a>.</li>
              </ul>  
    </div>
OFFER_OUR_PRODUCTS;
    #endregion
}


class TranslateList
{
    const RU = [
        //Переменные для javascript
        'data_table.length_menu'           => 'Отображать по _MENU_ записей',
        'data_table.zero_records'          => 'Ничего не найдено',
        'data_table.info'                  => 'Отображается c _START_ по _END_ из _TOTAL_ файлов',
        'data_table.info_empty'            => 'Нет файлов',
        'data_table.info_filtered'         => '(всего записей _MAX_)',
        'data_table.search'                => 'Поиск:',
        'data_table.paginate.first'        => 'Первая',
        'data_table.paginate.previous'     => 'Предыдущая',
        'data_table.paginate.next'         => 'Следующая',
        'data_table.paginate.last'         => 'Последняя',
        'data_table.aria.sort_ascending'   => ': активировать для сортировки столбца по возрастанию',
        'data_table.aria.sort_descending'  => ': активировать для сортировки столбцов по убыванию',
        'header.scan_report_title'         => 'Отчет сканера <a href="https://revisium.com/ai/">AI-Bolit</a> v@@VERSION@@:',
        'offer.when_no_critical'           => 'Обращаем внимание на то, что большинство CMS <b>без дополнительной защиты</b> рано или поздно <b>взламывают</b>.<p> Компания <a href="https://revisium.com/">"Ревизиум"</a> предлагает услугу превентивной защиты сайта от взлома с использованием уникальной <b>процедуры "цементирования сайта"</b>. Подробно на <a href="https://revisium.com/ru/client_protect/">странице услуги</a>. <p>Лучшее лечение &mdash; это профилактика.',
        'offer_our_products'               => TemplateList::OFFER_OUR_PRODUCTS_RU,
        'offer.when_has_critical'          => TemplateList::OFFER_RU,
        'сaution.aibolit_file'             => 'Не оставляйте файл отчета на сервере, и не давайте на него прямых ссылок с других сайтов. Информация из отчета может быть использована злоумышленниками для взлома сайта, так как содержит информацию о настройках сервера, файлах и каталогах.',
        'сaution.scanner_set_password'     => "Сканер AI-Bolit запускается с паролем. Если это первый запуск сканера, вам нужно придумать сложный пароль и вписать его в файле ai-bolit.php в строке №34. <p>Например, <b>'PASS', =>'%s',</b><p>
После этого откройте сканер в браузере, указав пароль в параметре \"p\". <p>Например, так <b>http://mysite.ru/ai-bolit.php?p=%s</b>. ",
        'сaution.quick_scanned'            => '<div class="rep" style="color: #0000A0">Внимание, скрипт выполнил быструю проверку сайта. Проверяются только наиболее критические файлы, но часть вредоносных скриптов может быть не обнаружена. Пожалуйста, запустите скрипт из командной строки для выполнения полного тестирования. Подробнее смотрите в <a href="https://revisium.com/ai/faq.php">FAQ вопрос №10</a>.</div>',
        'warning.weak_password'            => "Вы установили слабый пароль на скрипт AI-BOLIT. Укажите пароль не менее 8 символов, содержащий латинские буквы в верхнем и нижнем регистре, а также цифры. Например, такой <b>%s</b>",
        'warning.folder_read_permission'   => 'Текущая директория не доступна для чтения скрипту. Пожалуйста, укажите права на доступ <b>rwxr-xr-x</b> или с помощью командной строки <b>chmod +r имя_директории</b>',
        'warnings'                         => 'Предупреждения',
        'warning.reading_error'            => 'Непроверенные файлы - ошибка чтения',
        'info.time_elapsed'                => "Затрачено времени: <b>%s</b>. Сканирование начато %s, сканирование завершено %s",
        'info.files_checked'               => 'Всего проверено %s директорий и %s файлов.',
        'info.non_commercial_use'          => 'Сканер бесплатный только для личного некоммерческого использования. Информация по <a href="https://revisium.com/ai/faq.php#faq11" target=_blank>коммерческой лицензии</a> (пункт №11). <a href="https://revisium.com/images/mini_aibolit.jpg">Авторское свидетельство</a> о гос. регистрации в РосПатенте №2012619254 от 12 октября 2012 г.',
        'critical.title'                   => '<div class="title">Критические замечания</div>',
        'not_detected.shell_scripts'       => 'Вирусы и вредоносные скрипты не обнаружены.',
        'detected.shell_scripts'           => 'Эти файлы могут быть вредоносными или хакерскими скриптами',
        'detected.javascript'              => 'Эти файлы могут быть javascript вирусами',
        'detected.executables'             => 'Обнаружены сигнатуры исполняемых файлов unix и нехарактерных скриптов. Они могут быть вредоносными файлами',
        'detected.bad_links'               => 'Дорвеи, реклама, спам-ссылки, редиректы',
        'detected.phishing_pages'          => 'Обнаружены фишинговые страницы',
        'file.not_found.more_than'         => 'Не найдено файлов больше чем %s',
        'file.recommend_to_remove'         => 'Временные файлы или файлы(каталоги) - кандидаты на удаление по ряду причин',
        'file.scanned_manual'              => 'Просканированы только файлы, перечисленные в %s. Для полного сканирования удалите файл %s и запустите сканер повторно.',
        'file.suspicion.heuristic_analyze' => 'Эвристический анализ обнаружил подозрительные файлы. Проверьте их на наличие вредоносного кода.',
        'file.encrypted'                   => 'Зашифрованных файлов',
        'file.hidden'                      => 'Скрытых файлов',
        'file.added'                       => "Добавленные файлы",
        'file.updated'                     => "Измененные файлы",
        'file.deleted'                     => "Удаленные файлы",
        'file_structure.updates'           => "Изменения в файловой структуре",
        'hidden_files'                     => 'Скрытые файлы',
        'doorway.might'                    => 'Возможно, каталог с дорвеем',
        'doorway.not_found'                => 'Не найдено директорий c дорвеями',
        'suspicion.multiple'               => 'Двойное расширение, зашифрованный контент или подозрение на вредоносный скрипт. Требуется дополнительный анализ',
        'suspicion.malicious'              => 'Подозрение на вредоносный скрипт',
        'suspicion.htaccess'               => 'Подозрение на мобильный редирект, подмену расширений или автовнедрение кода',
        'suspicion.non_php'                => 'В не .php файле содержится стартовая сигнатура PHP кода. Возможно, там вредоносный код',
        'suspicion.hidden_link'            => 'Невидимые ссылки. Подозрение на ссылочный спам',
        'suspicion.doorway'                => 'Подозрение на дорвей',
        'suspicion.code'                   => 'Скрипт использует код, который часто встречается во вредоносных скриптах',
        'suspicion.obfuscated_variables'   => 'Подозрение на обфусцированные переменные',
        'suspicion.global_array'           => 'Подозрительное использование массива глобальных переменных',
        'suspicion.file_time'              => "Подозрительные параметры времени изменения файла",
        'suspicion.file_attributes'        => "Подозрительные атрибуты файла",
        'suspicion.file_location'          => "Подозрительное местоположение файла",
        'symlinks'                         => 'Символические ссылки (symlinks)',
        'hidden_links'                     => 'Невидимые ссылки',
        'link.symbolic'                    => 'Символических ссылок',
        'links.adware_spam'                => 'Рекламных ссылок и кодов',
        'links.empty'                      => 'Пустых ссылок',
        'display_only_first'               => 'Отображены только первые ',
        'skipped.adirignore'               => 'Директории из файла .adirignore были пропущены при сканировании',
        'founded_CMS'                      => 'Версии найденных CMS',
        'folder.unsafe_writable'           => 'Потенциально небезопасно! Директории, доступные скрипту на запись',
        'folder.unsafe_writable_not_found' => 'Не найдено директорий, доступных на запись скриптом',
        'folder.added'                     => "Добавленные каталоги",
        'folder.deleted'                   => "Удаленные каталоги",
        'memory_used'                      => 'Использовано памяти при сканировании: ',
        'notice.scan_express'              => '<div class="rep">Внимание! Выполнена экспресс-проверка сайта. Просканированы только файлы с расширением .php, .js, .html, .htaccess. В этом режиме могут быть пропущены вирусы и хакерские скрипты в файлах с другими расширениями. Чтобы выполнить более тщательное сканирование, поменяйте значение настройки на <b>\'scan_all_files\' => 1</b> в строке 50 или откройте сканер в браузере с параметром full: <b><a href="ai-bolit.php?p=&full">ai-bolit.php?p=&full</a></b>. <p>Не забудьте перед повторным запуском удалить файл %s</div>',
        'feedback_for_script'              => 'Мы будем чрезвычайно благодарны за любые упоминания скрипта AI-Bolit на вашем сайте, в блоге, среди друзей, знакомых и клиентов. Ссылочку можно поставить на <a href="https://revisium.com/ai/">https://revisium.com/ai/</a>.',
        'report_for'                       => 'Отчет по ',
        'function.many_reference'          => 'Много косвенных вызовов функции',
        'str.abnormal_split'               => 'Дробление строки на символы',
        'scan.offer_modes_after_express'   => 'Сканирование выполнено в экспресс-режиме. Многие вредоносные скрипты могут быть не обнаружены.<br> Рекомендуем проверить сайт в режиме "Эксперт" или "Параноидальный". Подробно описано в <a href="https://revisium.com/ai/faq.php">FAQ</a> и инструкции к скрипту.',
        'mobile_redirects'                 => 'Мобильных редиректов',
        'skipped.large_file'               => 'Большие файлы (больше чем %s). Пропущено',
        'malware'                          => 'Вредоносных скриптов',
        'js_virused'                       => 'JS Вирусов',
        'phishing_pages'                   => 'Фишинговых страниц',
        'executable_files'                 => 'Исполняемых файлов',
        'iframe_injections'                => 'IFRAME вставок',
        'skipped_large_file'               => 'Пропущенных больших файлов',
        'error.read_file'                  => 'Ошибок чтения файлов',
        'suspicious'                       => 'Подозрительных',
        'report.summary'                   => 'Сводный отчет',
        'footer'                           => TemplateList::FOOTER_RU,
        'notice.files_may_not_malicious'   => "Обращаем внимание, что обнаруженные файлы не всегда являются вирусами и хакерскими скриптами. Сканер минимизирует число ложных обнаружений, но это не всегда возможно, так как найденный фрагмент может встречаться как во вредоносных скриптах, так и в обычных.<p>Для диагностического сканирования без ложных срабатываний мы разработали специальную версию <u><a href=\"https://revisium.com/ru/blog/ai-bolit-4-ISP.html\" target=_blank style=\"background: none; color: #303030\">сканера для хостинг-компаний</a></u>.",
        'script.vulnerable'                => "Уязвимости в скриптах",
        'path'                             => 'Путь',
        'property_change'                  => 'Изменение свойств',
        'content_change'                   => 'Изменение содержимого',
        'size'                             => 'Размер',
        'php_config'                       => 'Конфигурация PHP',
    ];

    const EN = [
        //variables for javascript
        'data_table.length_menu'           => 'Display _MENU_ records',
        'data_table.zero_records'          => 'Not found',
        'data_table.info'                  => 'Display from _START_ to _END_ of _TOTAL_ files',
        'data_table.info_empty'            => 'No files',
        'data_table.info_filtered'         => '(total _MAX_)',
        'data_table.search'                => 'Filter/Search:',
        'data_table.paginate.first'        => 'First',
        'data_table.paginate.previous'     => 'Previous',
        'data_table.paginate.next'         => 'Next',
        'data_table.paginate.last'         => 'Last',
        'data_table.aria.sort_ascending'   => ': activate to sort row ascending order',
        'data_table.aria.sort_descending'  => ': activate to sort row descending order',
        'header.scan_report_title'         => 'AI-Bolit v@@VERSION@@ Scan Report:',
        'offer.when_no_critical'           => '',
        'offer_our_products'               => TemplateList::OFFER_OUR_PRODUCTS_EN,
        'offer.when_has_critical'          => TemplateList::OFFER_EN,
        'сaution.aibolit_file'             => 'Caution! Do not leave either ai-bolit.php or report file on server and do not provide direct links to the report file. Report file contains sensitive information about your website which could be used by hackers. So keep it in safe place and don\'t leave on website!',
        'сaution.scanner_set_password'     => "Open AI-BOLIT with password specified in the beggining of file in PASS variable. <br/>E.g. http://you_website.com/ai-bolit.php?p=<b>%s</b>",
        'сaution.quick_scanned'            => '<div class="rep" style="color: #0000A0">Attention! Script has performed quick scan. It scans only .html/.js/.php files  in quick scan mode so some of malicious scripts might not be detected. <br>Please launch script from a command line thru SSH to perform full scan.',
        'warning.weak_password'            => "Your password for AI-BOLIT is too weak. Password must be more than 8 character length, contain both latin letters in upper and lower case, and digits. E.g. <b>%s</b>",
        'warning.folder_read_permission'   => 'Current folder is not readable. Please change permission for <b>rwxr-xr-x</b> or using command line <b>chmod +r folder_name</b>',
        'warnings'                         => 'Warnings',
        'warning.reading_error'            => 'Reading error. Skipped.',
        'info.time_elapsed'                => "<div class=\"rep\">%s malicious signatures known, %s virus signatures and other malicious code. Elapsed: <b>%s</b
>.<br/>Started: %s. Stopped: %s</div> ",
        'info.files_checked'               => 'Scanned %s folders and %s files.',
        'info.non_commercial_use'          => 'For non-commercial use only.',
        'critical.title'                   => '<div class="title">Critical</div>',
        'detected.shell_scripts'           => 'Shell script signatures detected. Might be a malicious or hacker\'s scripts',
        'not_detected.shell_scripts'       => 'Shell scripts signatures not detected.',
        'detected.javascript'              => 'Javascript virus signatures detected:',
        'detected.executables'             => 'Unix executables signatures and odd scripts detected. They might be a malicious binaries or rootkits:',
        'detected.bad_links'               => 'This script has black-SEO links or linkfarm. Check if it was installed by yourself:',
        'detected.phishing_pages'          => 'Phishing pages detected:',
        'file.not_found.more_than'         => 'Files greater than %s not found',
        'file.recommend_to_remove'         => 'Files recommended to be remove due to security reason:',
        'file.scanned_manual'              => 'Quick scan through the files from %s. For full scan remove %s and launch scanner once again.',
        'file.suspicion.heuristic_analyze' => 'Heuristic Analyzer has detected suspicious files. Check if they are malware.',
        'file.encrypted'                   => 'Encrypted files',
        'file.hidden'                      => 'Hidden files',
        'files_may_not_malicious'          => "Notice! Some of detected files may not contain malicious code. Scanner tries to minimize a number of false positives, but sometimes it's impossible, because same piece of code may be used either in malware or in normal scripts.",
        'file.added'                       => "Added files",
        'file.updated'                     => "Modified files",
        'file.deleted'                     => "Deleted files",
        'file_structure.updates'           => "Integrity Check Report",
        'hidden_files'                     => 'Hidden files:',
        'doorway.might'                    => 'Files might be a part of doorway:',
        'doorway.not_found'                => 'Doorway folders not detected',
        'suspicion.multiple'               => 'Suspicious encoded strings, extra .php extention or external includes detected in PHP files. Might be a malicious or hacker\'s script:',
        'suspicion.malicious'              => 'Might be a malicious or hacker\'s script:',
        'suspicion.htaccess'               => 'Malicious code in .htaccess (redirect to external server, extention handler replacement or malicious code auto-append):',
        'suspicion.non_php'                => 'Non-PHP file has PHP signature. Check for malicious code:',
        'suspicion.hidden_link'            => 'These files have invisible links, might be black-seo stuff:',
        'suspicion.doorway'                => 'Folders contained too many .php or .html files. Might be a doorway:',
        'suspicion.code'                   => 'Suspicious code detected. It\'s usually used in malicious scrips:',
        'suspicion.obfuscated_variables'   => 'Suspected for obfuscated variables',
        'suspicion.global_array'           => 'Suspected for $GLOBAL array usage',
        'suspicion.file_time'              => "Suspicious file mtime and ctime",
        'suspicion.file_attributes'        => "Suspicious file permissions",
        'suspicion.file_location'          => "Suspicious file location",
        'symlinks'                         => 'Symlinks:',
        'hidden_links'                     => 'List of invisible links:',
        'link.symbolic'                    => 'Symbolic links',
        'links.adware_spam'                => 'Adware and spam links',
        'links.empty'                      => 'Empty links',
        'display_only_first'               => 'Displayed first ',
        'skipped.adirignore'               => 'The following list of files specified in .adirignore has been skipped:',
        'founded_CMS'                      => 'CMS found:',
        'folder.unsafe_writable'           => 'Potentially unsafe! Folders which are writable for scripts:',
        'folder.unsafe_writable_not_found' => 'Writable folders not found',
        'folder.added'                     => "Added directories",
        'folder.deleted'                   => "Deleted directories",
        'memory_used'                      => 'Memory used: ',
        'notice.scan_express'              => '<div class="notice"><span class="vir">[!]</span> Ai-BOLIT is working in quick scan mode, only .php, .html, .htaccess files will be checked. Change the following setting \'scan_all_files\' => 1 to perform full scanning.</b>. </div>',
        'feedback_for_script'              => "I'm sincerely appreciate reports for any bugs you may found in the script. Please email me: <a href=\"mailto:audit@revisium.com\">audit@revisium.com</a>.<p> Also I appriciate any reference to the script in your blog or forum posts. Thank you for the link to download page: <a href=\"https://revisium.com/aibo/\">https://revisium.com/aibo/</a>",
        'report_for'                       => 'Report for ',
        'function.many_reference'          => 'Function called by reference',
        'str.abnormal_split'               => 'Abnormal split of string',
        'scan.offer_modes_after_express'   => 'Scanning has been done in simple mode. It is strongly recommended to perform scanning in "Expert" mode. See readme.txt for details.',
        'mobile_redirects'                 => 'Mobile redirects',
        'skipped.large_file'               => 'Large files (greater than %s! Skipped:',
        'malware'                          => 'Malware',
        'js_virused'                       => 'JS viruses',
        'phishing_pages'                   => 'Phishing pages',
        'executable_files'                 => 'Unix executables',
        'iframe_injections'                => 'IFRAME injections',
        'skipped_large_file'               => 'Skipped big files',
        'critical.error_read_file'         => 'Reading errors',
        'suspicious'                       => 'Suspicious',
        'report.summary'                   => 'Summary',
        'footer'                           => TemplateList::FOOTER_EN,
        'script.vulnerable'                => "Vulnerable Scripts",
        'path'                             => 'Path',
        'property_change'                  => 'iNode Changed',
        'content_change'                   => 'Modified',
        'size'                             => 'Size',
        'php_config'                       => 'PHP Info',
    ];
}


class UserList
{
    private $users = [];

    public function add($uid)
    {
        $this->users[$uid] = '';
    }

    public function getList()
    {
        ksort($this->users);
        return array_keys($this->users);
    }

    public function setList($list)
    {
        $this->users = $list;
    }
}

/**
 * Class HyperScan
 * contains Hyperscan related functions
 */
class HyperScan
{
    private static $usage = [];
    private static $critical_content_hs = '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';
    private static $scratch_content_hs;
    private static $interesting_hs = '7ZrLUhpBFIZ7huEyiiJe8IIoKt7wMm1VllYFNqkskpSLPIDvkY3LLF1mmefIiqos8hAs8hDZYMlAuofu6e4fUQgaielf29Nfn+5zpmemAM/QbDabhHjJixNCyFWCcN3++PyNKDnRL5F/lUXx8TJr2cUelwfMIbuKa4umv8vkCiv5lWvm1I9Dz3FXPilXNBmXaP2y8H2p9O8xOi9abD1HQjQ+1xNj0jqiuZDfhXEUX5+EsYTWl3H1fQwrvq5RGW3NvrBU2HXNV2Zt+65FsLmrPCF57QpmidrHlGiDVK7HKk8EuwkvmUpn/Kni3Tzq+ufez6TzQ+fbsmXLli2/DH7u9xvLli1btmzZ8rNzLU/I5RwbZ5aylq3X04OKJ3Wtz+fWwY/LEsAeMNZhUsBp4AywD8zrHHwfUkXWHDiwGcwplU6zlvIc4nENKh/1SZbXRq3jHAnb6fY0bD5UVlhZ/cH9aS5xGpyh9/YU8VA51q5zvXshul/YRW3cV7ACdTXddrvtbrcT3vKeVEd1w2jY9Idh2L4JdbXD8CaMhx7MH7bbrVbrv7cdHG9PxnGNa9n90HraPK2h5t3+afybyTiPdv/WWmvtS7PjqsZag9tBD32HEfscs7/1/dOv2Q/T+vNRqcsxQkfa2QpkHhm3scA+r8VJ7s+PGv14zl/LPHp+twfdn0yj5B/xOM7ffnz/TubR8yfHuWZWVlYvRljr+JfF/y+uuapec33Pd1rGfQl8I+wFFndG0FzGrB2dERJ//+UhnYn1Afu51gpUgajkeI6oCHH5Pmten/ykn/KV0lrfz/j+lOwT1hy310/4/Rrg70/4l8ULPVdYjNPE5wRe0kt5nuK04kzs751TvqmAnZZp31ecVTwT+435VJs/q6/PMQW5uVw+l1M8r3gh9lN9PtXmL5rrl4x4BaagsFxYKRQUrypei/1Un0+1+UVz/boZj5rxS0xBaaO0WSopLiveiv1Un0+1+dvm+h0zHjXjV5iCym5lr1JRvA8c+anOVPMfmOsPzXjUjF9lClg7qlYVHwNHfqozVf4Tcz01450yBaeRgKnONPZTcz5lCmikiB2mwHGdhDP8q10AjCsnoVauaxo4C4x14FngHPAccB54HngBGL62SpaAC8DLwCvAq8BrwEXgdeAS8AbwJnAZeAsYnwfsAONb7i7wHvA+8AHwIXAV+Aj4GPgE+BSY3+/8PeKruBGpGMfnL6jHfh7zWPoN';
    private static $scratch_interesting_hs;
    private static $log_hs = '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';
    private static $scratch_log_hs;

    private static $php;
    private static $scratch_php;

    private static $js;
    private static $scratch_js;

    private static $sus;
    private static $scratch_sus;

    private static $susext;
    private static $scratch_susext;

    private static $cron;
    private static $scratch_cron;

    public static function init()
    {
        if (!extension_loaded('hyperscan')) {
            return false;
        }

        $db = null;
        if (hs_database_deserialize(gzinflate(base64_decode(self::$critical_content_hs)), $db) === HS_SUCCESS) {
            self::$critical_content_hs = $db;
            if (hs_alloc_scratch(self::$critical_content_hs, self::$scratch_content_hs) === HS_SUCCESS) {
                self::$usage['critical'] = true;
            }
        }

        $db = null;
        if (hs_database_deserialize(gzinflate(base64_decode(self::$interesting_hs)), $db) === HS_SUCCESS) {
            self::$interesting_hs = $db;
            if (hs_alloc_scratch(self::$interesting_hs, self::$scratch_interesting_hs) === HS_SUCCESS) {
                self::$usage['interesting'] = true;
            }
        }

        $db = null;
        if (hs_database_deserialize(gzinflate(base64_decode(self::$log_hs)), $db) === HS_SUCCESS) {
            self::$log_hs = $db;
            if (hs_alloc_scratch(self::$log_hs, self::$scratch_log_hs) === HS_SUCCESS) {
                self::$usage['log'] = true;
            }
        }
        return true;
    }

    public static function initExtDb($folder, $ver)
    {
        if (!extension_loaded('hyperscan')) {
            return false;
        }

        if (!file_exists($folder) || !is_dir($folder)) {
            fwrite(STDERR, '[HS] Error loading hyperscan db ' . $folder . ' not exists.' . PHP_EOL);
            return false;
        }
        return self::load($folder, $ver);
    }

    public static function matchCritical($content)
    {
        $time = AibolitHelpers::currentTime();
        $res = self::match($content, self::$critical_content_hs, self::$scratch_content_hs);
        if (defined('CLS_PERFORMANCE_STATS')) {
            PerformanceStats::addPerformanceItem(PerformanceStats::HS_SMART_STAT, AibolitHelpers::currentTime() - $time);
        }
        return ($res !== false);
    }

    public static function matchInteresting($content)
    {
        $time = AibolitHelpers::currentTime();
        $res = self::match($content, self::$interesting_hs, self::$scratch_interesting_hs);
        if (defined('CLS_PERFORMANCE_STATS')) {
            PerformanceStats::addPerformanceItem(PerformanceStats::HS_SMART_STAT, AibolitHelpers::currentTime() - $time);
        }
        return ($res !== false);
    }

    public static function matchLog($content)
    {
        $time = AibolitHelpers::currentTime();
        $res = self::match($content, self::$log_hs, self::$scratch_log_hs);
        if (defined('CLS_PERFORMANCE_STATS')) {
            PerformanceStats::addPerformanceItem(PerformanceStats::HS_SMART_STAT, AibolitHelpers::currentTime() - $time);
        }
        return ($res !== false);
    }

    public static function canMatchCritical()
    {
        return self::$usage['critical'] ?? false;
    }

    public static function canMatchInteresting()
    {
        return self::$usage['interesting'] ?? false;
    }

    public static function canMatchLog()
    {
        return self::$usage['log'] ?? false;
    }

    public static function hs_precheck($content, $unwrapped, $check_sus, &$ret = null)
    {

        $ret = 'no_match';

        if (!self::canMatchPhp() || !self::canMatchJs() || !self::canMatchSus()) {
            return true;
        }

        $o = 'o:?';
        $u = 'u:?';
        if (self::canMatchPhp()) {
            if ((self::matchPhp($unwrapped) && $u = 'u:1') || (self::matchPhp($content) && (($o = 'o:1') && ($u = 'u:0')))) {
                $ret = 'match_' . $o . ',' . $u . '_php';
                return true;
            }
        }

        if (self::canMatchJs()) {
            if ((self::matchJs($unwrapped) && $u = 'u:1') || (self::matchJs($content) && (($o = 'o:1') && ($u = 'u:0')))) {
                $ret = 'match_' . $o . ',' . $u . '_js';
                return true;
            }
        }

        if (self::canMatchCron()) {
            if ((self::matchCron($unwrapped) && $u = 'u:1') || (self::matchCron($content) && (($o = 'o:1') && ($u = 'u:0')))) {
                $ret = 'match_' . $o . ',' . $u . '_cron';
                return true;
            }
        }

        if ($check_sus && self::canMatchSus()) {
            if ((self::matchSus($unwrapped) && $u = 'u:1') || (self::matchSus($content) && (($o = 'o:1') && ($u = 'u:0')))) {
                $ret = 'match_' . $o . ',' . $u . '_sus';
                return true;
            }
        }

        return false;
    }

    public static function hs_precheckSusExt($content, $unwrapped, &$ret = null)
    {
        $ret = 'no_match';
        $o = 'o:?';
        $u = 'u:?';
        if (self::canMatchSusExt()) {
            if ((($id_sign = self::matchSusExt($unwrapped)) && $u = 'u:1') || (($id_sign = self::matchSusExt($content)) && (($o = 'o:1') && ($u = 'u:0')))) {
                $ret = 'match_' . $o . ',' . $u . '_sus_extended';
                return $id_sign;
            }
        }
        return false;
    }



    private static function match($content, $db, $scratch)
    {
        $id_sign = false;
        $err = hs_scan($content, HS_MODE_BLOCK, $db, $scratch, function ($id, $from, $to) use (&$id_sign) {
            $id_sign = $id;
            return false;
        });
        return $id_sign;
    }

    private static function matchPhp($content)
    {
        $time = AibolitHelpers::currentTime();
        $res = self::match($content, self::$php, self::$scratch_php);
        if (defined('CLS_PERFORMANCE_STATS')) {
            PerformanceStats::addPerformanceItem(PerformanceStats::HS_SCAN_STAT, AibolitHelpers::currentTime() - $time);
        }
        return ($res !== false);
    }

    private static function matchJs($content)
    {
        $time = AibolitHelpers::currentTime();
        $res = self::match($content, self::$js, self::$scratch_js);
        if (defined('CLS_PERFORMANCE_STATS')) {
            PerformanceStats::addPerformanceItem(PerformanceStats::HS_SCAN_STAT, AibolitHelpers::currentTime() - $time);
        }
        return ($res !== false);
    }

    private static function matchSus($content)
    {
        $time = AibolitHelpers::currentTime();
        $res = self::match($content, self::$sus, self::$scratch_sus);
        if (defined('CLS_PERFORMANCE_STATS')) {
            PerformanceStats::addPerformanceItem(PerformanceStats::HS_SCAN_STAT, AibolitHelpers::currentTime() - $time);
        }
        return ($res !== false);
    }

    private static function matchSusExt($content)
    {
        $time = AibolitHelpers::currentTime();
        $res = self::match($content, self::$susext, self::$scratch_susext);
        if (defined('CLS_PERFORMANCE_STATS')) {
            PerformanceStats::addPerformanceItem(PerformanceStats::HS_SCAN_STAT, AibolitHelpers::currentTime() - $time);
        }
        return $res;
    }

    private static function matchCron($content)
    {
        $time = AibolitHelpers::currentTime();
        $res = self::match($content, self::$cron, self::$scratch_cron);
        if (defined('CLS_PERFORMANCE_STATS')) {
            PerformanceStats::addPerformanceItem(PerformanceStats::HS_SCAN_STAT, AibolitHelpers::currentTime() - $time);
        }
        return $res;
    }

    private static function canMatchPhp()
    {
        return self::$usage['php'] ?? false;
    }

    private static function canMatchJs()
    {
        return self::$usage['js'] ?? false;
    }

    private static function canMatchSus()
    {
        return self::$usage['sus'] ?? false;
    }

    private static function canMatchSusExt()
    {
        return self::$usage['susext'] ?? false;
    }

    private static function canMatchCron()
    {
        return self::$usage['cron'] ?? false;
    }

    private static function load($folder, $ver)
    {
        $version = @file_get_contents($folder . '/' . 'version.txt');
        if ($version !== $ver) {
            fwrite(STDERR, '[HS] Error loading hyperscan db ' . $version . ' != ' . $ver . PHP_EOL);
            return false;
        }

        $db = null;
        if (hs_database_mmap_deserialize($folder . '/' . 'hs_php.db', $db) === HS_SUCCESS) {
            self::$php = $db;
            if (hs_alloc_scratch(self::$php, self::$scratch_php) === HS_SUCCESS) {
                self::$usage['php'] = true;
            }
        }

        $db = null;
        if (hs_database_mmap_deserialize($folder . '/' . 'hs_js.db', $db) === HS_SUCCESS) {
            self::$js = $db;
            if (hs_alloc_scratch(self::$js, self::$scratch_js) === HS_SUCCESS) {
                self::$usage['js'] = true;
            }
        }

        $db = null;
        if (hs_database_mmap_deserialize($folder . '/' . 'hs_sus.db', $db) === HS_SUCCESS) {
            self::$sus = $db;
            if (hs_alloc_scratch(self::$sus, self::$scratch_sus) === HS_SUCCESS) {
                self::$usage['sus'] = true;
            }
        }

        $db = null;
        if (hs_database_mmap_deserialize($folder . '/' . 'hs_susext.db', $db) === HS_SUCCESS) {
            self::$susext = $db;
            if (hs_alloc_scratch(self::$susext, self::$scratch_susext) === HS_SUCCESS) {
                self::$usage['susext'] = true;
            }
        }

        $db = null;
        if (hs_database_mmap_deserialize($folder . '/' . 'hs_cron.db', $db) === HS_SUCCESS) {
            self::$cron = $db;
            if (hs_alloc_scratch(self::$cron, self::$scratch_cron) === HS_SUCCESS) {
                self::$usage['cron'] = true;
            }
        }
        return $db;
    }
}


if (!defined('CLS_PERFORMANCE_STATS')) {
    define('CLS_PERFORMANCE_STATS', true);
}
class PerformanceStats
{
    const HS_SMART_STAT     = 'smart_time_hs';
    const HS_SCAN_STAT      = 'scan_time_hs';
    const PCRE_SMART_STAT   = 'smart_time_preg';
    const PCRE_SCAN_STAT    = 'scan_time_preg';
    const FINDER_STAT       = 'finder_time';
    const CAS_STAT          = 'cas_time';
    const DEOBF_STAT        = 'deobfuscate_time';

    private static $performance_stats = [];
    private static $performance_types = [
        self::HS_SMART_STAT,
        self::HS_SCAN_STAT,
        self::PCRE_SMART_STAT,
        self::PCRE_SCAN_STAT,
        self::FINDER_STAT,
        self::CAS_STAT,
        self::DEOBF_STAT
    ];

    public static function initPerformanceItems()
    {
        foreach (self::getPerformanceTypes() as $item) {
            self::$performance_stats[$item] = 0;
        }
    }

    public static function addPerformanceItem($item, $time)
    {
        self::$performance_stats[$item] += $time;
    }

    public static function getPerformanceItem($item)
    {
        if (!isset(self::$performance_stats[$item])) {
            return 0;
        }
        return self::$performance_stats[$item];
    }

    public static function getPerformanceTypes()
    {
        return self::$performance_types;
    }
}


if (!defined('CLS_PROGRESS')) {
    define('CLS_PROGRESS', true);
}

if (!defined('FUNC_JSON_ENCODE')) {
    define('FUNC_JSON_ENCODE', function_exists('json_encode'));
}
if (!defined('FUNC_AIBOLIT_ON_PROGRESS_UPDATE')) {
    define('FUNC_AIBOLIT_ON_PROGRESS_UPDATE', function_exists('aibolit_onProgressUpdate'));
}
/**
 * Tracking progress of scan
 * Class Progress
 */
class Progress
{
    const STAGE_START   = 'start';
    const STAGE_LIST    = 'list';
    const STAGE_SCAN    = 'scan';
    const STAGE_DONE    = 'done';

    const DETECT_PHP    = 'php';
    const DETECT_JS     = 'js';
    const DETECT_SUS    = 'sus';
    const DETECT_PHS    = 'phs';

    const PREFIX_ADD    = 'add';
    const PREFIX_NO     = 'no';

    const ALLOWED_STAGES = [self::STAGE_START, self::STAGE_LIST, self::STAGE_SCAN, self::STAGE_DONE];

    private static $updated;
    private static $started;
    private static $stage_started;
    private static $files_total;
    private static $current_file;
    private static $stage;
    private static $last_saved;

    private static $progress_log;
    private static $shared_mem;
    private static $create_shared_mem = false;

    private static $detected = [self::DETECT_PHP => 0, self::DETECT_JS => 0, self::DETECT_SUS => 0, self::DETECT_PHS => 0];
    private static $prefixes = [self::PREFIX_ADD => '', self::PREFIX_NO => ''];

    private static $progress_string;
    private static $progress_array;

    private static $print_func;

    /**
     * Init progress
     */
    public static function init()
    {
        $time           = AibolitHelpers::currentTime();
        self::$started  = $time;
        self::$detected = [self::DETECT_PHP => 0, self::DETECT_JS => 0, self::DETECT_SUS => 0, self::DETECT_PHS => 0];
        self::$prefixes = [self::PREFIX_ADD => '', self::PREFIX_NO => ''];

        self::$updated          = $time;
        self::$stage_started    = $time;
        self::$files_total      = 0;
        self::$current_file     = '';
        self::$stage            = self::STAGE_START;

        self::$progress_log = null;
        self::$shared_mem   = null;

        self::$progress_array = [
            'self'          => __FILE__,
            'started'       => self::$started,
            'updated'       => self::$updated,
            'progress'      => 0,
            'time_elapsed'  => 0,
            'time_left'     => 0,
            'files_left'    => 0,
            'files_total'   => 0,
            'current_file'  => '',
            'stage'         => self::$stage,
            'list_speed'    => null,
            'scan_speed'    => null,
        ];
    }

    /**
     * Get average files/sec
     * @param int $files
     * @param float $time
     * @return float
     */
    private static function getAvg(int $files, float $time): float
    {
        if ($time < 1) {
            return 0;
        }
        $fs = floor($files / round($time, 0));
        if ($fs > 0) {
            return round($fs, 2);
        }
        return 0;
    }

    /**
     * update data of list stage progress
     * @param int $total_files
     */
    public static function updateList(int $total_files)
    {
        if (self::$stage !== self::STAGE_LIST) {
            return;
        }
        self::$updated  = AibolitHelpers::currentTime();
        $elapsed_time   = AibolitHelpers::currentTime() - self::$started;
        $fs             = self::getAvg($total_files, (AibolitHelpers::currentTime() - self::$stage_started));
        $stat = '';
        if ($fs > 0) {
            $stat = ' [Avg: ' . $fs . ' files/s]';
        }

        $l_FN = substr(self::$current_file, -60);

        self::$progress_string = "[$l_FN] Selected: " . self::$files_total . " of {$total_files}. " . $stat;

        self::$progress_array['stage']          = self::$stage;
        self::$progress_array['updated']        = self::$updated;
        self::$progress_array['time_elapsed']   = round($elapsed_time, 0);
        self::$progress_array['files_total']    = self::$files_total;
        self::$progress_array['current_file']   = self::$prefixes[self::PREFIX_ADD] . str_replace(self::$prefixes[self::PREFIX_NO], '', self::$current_file);
        self::$progress_array['list_speed']     = $fs;

        if (FUNC_AIBOLIT_ON_PROGRESS_UPDATE) {
            aibolit_onProgressUpdate(self::$progress_array);
        }

        self::save();
    }

    /**
     * update data of scan stage progress
     * @param int $index
     */
    public static function updateScan(int $index)
    {
        if (self::$stage !== self::STAGE_SCAN) {
            return;
        }
        self::$updated   = AibolitHelpers::currentTime();
        $total_files     = self::$files_total;
        $elapsed_time    = AibolitHelpers::currentTime() - self::$started;
        $percent         = number_format($total_files ? $index * 100 / $total_files : 0, 1);
        $stat            = '';
        $left_time       = 0;
        $fs              = self::getAvg($index, (AibolitHelpers::currentTime() - self::$stage_started));
        $left_files      = $total_files - $index;
        if ($fs > 0) {
            $left_time = ($left_files / $fs); //ceil($left_files / $fs);
            $stat = ' [Avg: ' . $fs . ' files/s' . ($left_time > 0 ? ' Left: ' . AibolitHelpers::seconds2Human($left_time) : '') . '] [Mlw:' . (self::$detected[self::DETECT_PHP] + self::$detected[self::DETECT_SUS]) . '|' . (self::$detected[self::DETECT_JS] + self::$detected[self::DETECT_PHS]) . ']';
        }

        $l_FN = substr(self::$current_file, -60);

        self::$progress_string = "$percent% [$l_FN] " . $index . " of {$total_files}. " . $stat;

        self::$progress_array['stage']          = self::$stage;
        self::$progress_array['updated']        = self::$updated;
        self::$progress_array['time_elapsed']   = round($elapsed_time, 0);
        self::$progress_array['files_total']    = self::$files_total;
        self::$progress_array['current_file']   = self::$prefixes[self::PREFIX_ADD] . str_replace(self::$prefixes[self::PREFIX_NO], '', self::$current_file);
        self::$progress_array['progress']       = $percent;
        self::$progress_array['time_left']      = round($left_time);
        self::$progress_array['files_left']     = $left_files;
        self::$progress_array['scan_speed']     = $fs;

        if (FUNC_AIBOLIT_ON_PROGRESS_UPDATE) {
            aibolit_onProgressUpdate(self::$progress_array);
        }
        self::save();
    }

    /**
     * update stage + time in progress data
     */
    public static function update()
    {
        self::$progress_array['stage']          = self::$stage;
        self::$progress_array['updated']        = self::$updated;
        self::$progress_array['time_elapsed']   = round((AibolitHelpers::currentTime() - self::$started), 0);
    }

    /**
     * stage 'done' of progress
     */
    public static function done()
    {
        self::setStage(self::STAGE_DONE);

        if (self::$progress_log !== null && file_exists(self::$progress_log)) {
            @unlink(self::$progress_log);
        }
        if (self::$shared_mem && self::$shared_mem->isValid()) {
            self::$shared_mem->close(self::$create_shared_mem);
        }
        self::$shared_mem = null;
        self::$progress_log = null;
        self::$create_shared_mem = false;
    }

    /**
     * Call user-provided function for output to cli
     */
    public static function print()
    {
        $text = str_pad(self::$progress_string ?? '', 160, ' ', STR_PAD_RIGHT);
        if (is_callable(self::$print_func)) {
            call_user_func(self::$print_func, str_repeat(chr(8), 160) . $text, false);
        }
    }

    /**
     * Flush all data to file, shared-memory and cli
     */
    public static function save()
    {
        self::print();
        if (self::$progress_log && (time() - self::$last_saved > 1)) {
            if (FUNC_JSON_ENCODE) {
                file_put_contents(self::$progress_log, json_encode(self::$progress_array));
            } else {
                file_put_contents(self::$progress_log, serialize(self::$progress_array));
            }

            self::$last_saved = time();
        }

        if (self::$shared_mem && self::$shared_mem->isValid()) {
            self::$shared_mem->write(self::$progress_array);
        }
    }

    /**
     * Setter for total files
     * @param int $files_total
     */
    public static function setFilesTotal(int $files_total)
    {
        self::$files_total = $files_total;
    }

    /**
     * Setter for current file in progress
     * @param string $current_file
     */
    public static function setCurrentFile(string $current_file)
    {
        self::$current_file = $current_file;
    }

    /**
     * Getter for current progress stage
     * @return string
     */
    public static function getStage():string
    {
        return self::$stage;
    }

    /**
     * Setter for current progress stage
     * @param string $stage
     */
    public static function setStage(string $stage)
    {
        if (!in_array($stage, self::ALLOWED_STAGES)) {
            return;
        }
        self::$stage = $stage;
        self::$stage_started = AibolitHelpers::currentTime();
        self::$updated = AibolitHelpers::currentTime();
        self::update();
        self::save();
    }

    /**
     * Setter for progress log file
     * @param string $progress_log
     */
    public static function setProgressLog(string $progress_log)
    {
        self::$progress_log = $progress_log;
        self::update();
        self::save();
    }

    /**
     * Getter for shared-memory region
     * @return resource
     */
    public static function getSharedMem()
    {
        return self::$shared_mem;
    }

    /**
     * Setter for shared-memory region
     * @param string $shared_mem
     * @return bool
     */
    public static function setSharedMem(string $shared_mem): bool
    {
        if (self::$create_shared_mem) {
            @$shid = new SharedMem((int)$shared_mem, "n", 0600, 5000);
        } else {
            @$shid = new SharedMem((int)$shared_mem, "w", 0, 0);
        }
        if ($shid->isValid()) {
            self::$shared_mem = $shid;
            self::update();
            self::save();
            return true;
        }

        return false;
    }

    /**
     * Setter for detection data
     * @param int[] $detected
     */
    public static function setDetected(array $detected)
    {
        self::$detected[self::DETECT_PHP] = $detected[self::DETECT_PHP] ?? self::$detected[self::DETECT_PHP];
        self::$detected[self::DETECT_JS] = $detected[self::DETECT_JS] ?? self::$detected[self::DETECT_JS];
        self::$detected[self::DETECT_SUS] = $detected[self::DETECT_SUS] ?? self::$detected[self::DETECT_SUS];
        self::$detected[self::DETECT_PHS] = $detected[self::DETECT_PHS] ?? self::$detected[self::DETECT_PHS];
    }

    /**
     * Setter for prefixes for filepath
     * @param string[] $prefixes
     */
    public static function setPrefixes(array $prefixes)
    {
        self::$prefixes[self::PREFIX_ADD] = $prefixes[self::PREFIX_ADD] ?? self::$prefixes[self::PREFIX_ADD];
        self::$prefixes[self::PREFIX_NO] = $prefixes[self::PREFIX_NO] ?? self::$prefixes[self::PREFIX_NO];
    }

    /**
     * Setter for flag if we create shared-memory region
     * @param bool $create_shared_mem
     */
    public static function setCreateSharedMem(bool $create_shared_mem)
    {
        self::$create_shared_mem = $create_shared_mem;
    }

    /**
     * Getter for flag if we create shared-memory region
     * @return bool
     */
    public static function isCreateSharedMem(): bool
    {
        return self::$create_shared_mem;
    }

    /**
     * Set external function for cli output
     * @param callable $print_func
     * @return bool
     */
    public static function setPrintFunc(callable $print_func): bool
    {
        if (!is_callable($print_func)) {
            return false;
        }
        self::$print_func = $print_func;
        return true;
    }

}


if (!defined('CLS_PROC_STATS')) {
    define('CLS_PROC_STATS', true);
}
class ProcStats {

    const STATUS = 'status';
    const IO = 'io';
    const STAT = 'stat';

    public static function collectAll(): array
    {
        return [
            self::STATUS => self::parse(@file_get_contents('/proc/' . getmypid() . '/' . self::STATUS)),
            self::IO => self::parse(@file_get_contents('/proc/' . getmypid() . '/' . self::IO)),
            self::STAT => explode(' ', @file_get_contents('/proc/' . getmypid() . '/' . self::STAT))
        ];
    }

    private static function parse($string): array
    {
        $data = [];
        $lines = explode("\n", $string);
        foreach ($lines as $line) {
            $tmp = explode(':', $line);
            if ($tmp !== false)
            {
                $data[trim($tmp[0])] = trim(str_replace(' kB', '', $tmp[1]));
            }
        }
        return $data;
    }
}



class ZipScanner
{
    private $filepath;
    private $filter;
    private $vars;
    private $callback;
    private $max_size_scan_bytes;

    /**
     * @param string $filepath
     * @param Variables $vars
     * @param FileFilter|null $finder
     * @param Callback|null $callback
     */
    public function __construct(string $filepath, Variables $vars, $filter, $callback = null, $max_size_scan_bytes = null)
    {
        $this->filepath             = $filepath;
        $this->filter               = $filter;
        $this->vars                 = $vars;
        $this->callback             = $callback;
        $this->max_size_scan_bytes  = $max_size_scan_bytes;
    }

    /**
     * @param string $filepath
     * @return bool
     */
    public static function isZip(string $filepath)
    {
        return @file_get_contents($filepath, false, null, 0, 4) === "PK\x3\x4";
    }

    /**
     * @param int $maxSize
     * @param int $maxFiles
     * @return bool
     * @throws Exception
     */
    public function scan(int $maxSize = 0, int $maxFiles = 0, int $maxFolders = 0): bool
    {
        $zipStat = stat($this->filepath);
        if (!$zipStat) {
            throw new Exception();
        }

        if ($maxSize > 0 && $zipStat['size'] > $maxSize) {
            return false;
        }

        $zip = new Zip($this->filepath);
        if (!$zip->open()) {
            throw new Exception();
        }

        $countFiles = 0;
        $countFolders = 0;
        $totalFiles = $zip->archive->numFiles;
        for ($i = 0; $i < $totalFiles; $i++) {
            if ($maxFiles > 0 && $countFiles >= $maxFiles) {
                break;
            }
            if ($maxFolders > 0 && $countFolders >= $maxFolders) {
                break;
            }

            $fileinfo               = new ZipFileInfo($zip, $i, $this->filepath, $zipStat);
            $archive_filepath       = $fileinfo->getFilename();
            $size                   = $fileinfo->getSize();
            $is_folder              = $size === 0 && (substr($archive_filepath, -1) === '/');

            if ($is_folder) {
                $countFolders++;
                continue;
            }

            $countFiles++;

            if ($size === 0) {
                continue;
            }

            $scan = new Scanner(null, $this->vars, null, $this->max_size_scan_bytes);

            if (!is_null($this->callback)) {
                call_user_func($this->callback, false);
            }

            if ($this->filter instanceof ZipFileFilter
                && !$this->filter->needToScan(
                    $fileinfo,
                    false,
                    ZipFileFilter::SKIP_ZIP_CHECKERS
                )
            ) {
                continue;
            }

            $res = $scan->QCR_ScanFile(
                $fileinfo,
                $this->vars,
                null,
                $i,
                false
            );

            if ($res && $res[0] == RapidScanStorageRecord::RX_MALWARE) {
                return true;
            }
        }

        return false;
    }

    /**
     * @param ZipArchive $zip
     * @return int
     */
    private function getTotalUncompressedSize(ZipArchive $zip): int
    {
        $totalSize = 0;

        for ($i = 0; $i < $zip->numFiles; $i++) {
            $fileStats = $zip->statIndex($i);
            $totalSize += $fileStats['size'];
        }

        return $totalSize;
    }
}


class ZipFileFilter extends FileFilter
{
    const SKIP_ZIP_CHECKERS = [
        'check_is_not_root',
        'check_is_not_system',
        'check_is_file',
    ];

    public function __construct()
    {
        $this->zipFile = true;

        parent::__construct();
    }

}


class ZipFileInfo extends FileInfo
{
    protected $index    = 0;
    protected $filename = '';
    protected $size     = 0;
    protected $modified = 0;
    protected $zip;
    protected $fullFilename;
    protected $zipFilename;
    protected $zipStat;

    public function __construct(Zip $zip, $index, $zipFullFilename, $zipStat)
    {
        $this->zip         = $zip;
        $this->index       = $index;
        $this->zipFilename = $zipFullFilename;
        $this->zipStat     = $zipStat;
        $this->_setStat();
        parent::__construct($this->filename, $this->index, null);
    }

    protected function _setStat()
    {
        /** @var array $info */
        $info           = $this->zip->getFileInfo($this->index);
        $this->size     = $info['size'];
        $this->filename = 'zip://' . $this->zipFilename . '#' . $info['name'];
        $this->created  = $this->zipStat['ctime'];
        $this->modified = $this->zipStat['mtime'];
    }

    public function getStat()
    {
        return [
            'size'  => $this->size,
            'name'  => $this->filename,
            'ctime' => $this->created,
            'mtime' => $this->modified,
        ];
    }
}

if (!defined('CLS_DECISION_MAKING_STATS')) {
    define('CLS_DECISION_MAKING_STATS', true);
}
/**
 * Class to accumulate decision-making stats
 */
class DecisionMakingStats
{

    const CHECKER_SCAN = 'SCAN';
    const CHECKER_SCAN_DISABLED = self::CHECKER_SCAN . '(disabled)';
    const CHECKER_SCAN_CRON = self::CHECKER_SCAN . '(cron)';
    const CHECKER_SKIP = 'SKIP';
    const VERDICT_OK = self::CHECKER_SCAN;
    const NO_EXT_GROUP = 'no_ext';
    const NO_SIZE_GROUP = 'no_size';
    const EXT_TOTAL = 'total';
    const EXT_OTHER = 'other';
    const EXT_UNKNOWN = 'unknown';
    const EXT_DIR = '/dir';
    const TOP_EXT_COUNT = 2;

    /**
     * Hardcoded known exts aggregated from /etc/mime.types from CentOS7, CentOS8, Ubuntu22, Debian11, Alma9.7
     * @var string[]
     */
    private static $hardcoded_exts = ['a2l', 'aml', 'ez', 'atf', 'atfx', 'atxml', 'atom', 'atomcat', 'atomdeleted',
        'atomsvc', 'dwd', 'held', 'rsat', 'apxml', 'xdd', 'xcs', 'cbor', 'c3ex', 'ccmp', 'ccxml', 'cdfx', 'cdmia', 'cdmic',
        'cdmid', 'cdmio', 'cdmiq', 'cea', 'cellml', 'cml', 'clue', 'cmsc', 'cpl', 'csrattrs', 'mpd', 'mpdd', 'davmount',
        'dcd', 'dcm', 'dii', 'dit', 'xmls', 'dssc', 'xdssc', 'dvc', 'es', 'efi', 'emma', 'emotionml', 'epub', 'exi',
        'finf', 'fdt', 'pfr', 'geojson', 'gpkg', 'glbin', 'glbuf', 'gml', 'gz', 'tgz', 'stk', 'ink', 'inkml', 'ipfix',
        'its', 'js', 'jrd', 'json', 'json-patch', 'jsonld', 'lgr', 'wlnk', 'lostxml', 'lostsyncxml', 'lpf', 'lxf', 'hqx',
        'mads', 'mrc', 'mrcx', 'nb', 'ma', 'mb', 'mml', 'mbox', 'meta4', 'mets', 'mf4', 'maei', 'musd', 'mods', 'm21',
        'mp21', 'doc', 'mxf', 'nq', 'nt', 'orq', 'ors', 'bin', 'lha', 'lzh', 'exe', 'class', 'so', 'dll', 'img', 'iso',
        'oda', 'odx', 'opf', 'ogx', 'oxps', 'relo', 'pdf', 'pdx', 'pem', 'pgp', 'sig', 'p10', 'p12', 'pfx', 'p7m', 'p7c',
        'p7s', 'p8', 'p8e', 'cer', 'crl', 'pkipath', 'pki', 'pls', 'ps', 'eps', 'ai', 'provx', 'cw', 'cww', 'hpub', 'rnd',
        'rct', 'rdf-crypt', 'xsf', 'pskcxml', 'rdf', 'rapd', 'sls', 'rusd', 'rif', 'rnc', 'rld', 'rl', 'rfcxml', 'rs',
        'gbr', 'mft', 'roa', 'rtf', 'scim', 'scq', 'scs', 'spq', 'spp', 'sdp', 'senml-etchc', 'senml-etchj', 'senmlc',
        'senml', 'senmlx', 'senmle', 'sensmlc', 'sensml', 'sensmlx', 'sensmle', 'soc', 'shf', 'siv', 'sieve', 'cl',
        'smil', 'smi', 'sml', 'rq', 'srx', 'sql', 'gram', 'grxml', 'sru', 'ssml', 'stix', 'swidtag', 'tau', 'auc', 'tcu',
        'cuc', 'jsontd', 'ter', 'tsa', 'sac', 'tur', 'tuc', 'tei', 'teicorpus', 'odd', 'tfi', 'tsq', 'tsr', 'tsd', 'trig',
        'ttml', 'gsheet', 'rsheet', 'td', 'uis', '1km', 'plb', 'psb', 'pvb', 'sms', 'tcap', 'imgcal', 'pwn', 'aso', 'imp',
        'acu', 'atc', 'acutc', 'swf', 'fcdt', 'fxp', 'fxpl', 'xdp', 'xfdf', 'list3820', 'listafp', 'afp', 'pseg3820',
        'ovl', 'psg', 'ahead', 'azf', 'azs', 'azw3', 'acc', 'ami', 'ota', 'apkg', 'cii', 'fti', 'dist', 'distz', 'pkg',
        'mpkg', 'keynote', 'm3u8', 'numbers', 'pages', 'swi', 'artisan', 'iota', 'aep', 'package', 'bmml', 'ac2', 'bmpr',
        'mpm', 'ep', 'le', 'bmi', 'rep', 'tlclient', 'cdxml', 'pgn', 'mmd', 'cdy', 'csl', 'cla', 'rp9', 'c4g', 'c4d', 'c4f',
        'c4p', 'c4u', 'c11amc', 'c11amz', 'coffee', 'xodt', 'xott', 'xodp', 'xotp', 'xods', 'xots', 'cbr', 'cbz', 'ica',
        'icf', 'icd', 'ic0', 'ic1', 'ic2', 'ic3', 'ic4', 'ic5', 'ic6', 'ic7', 'ic8', 'csp', 'cst', 'cdbcmsg', 'ign',
        'ignition', 'cmc', 'clkx', 'clkk', 'clkp', 'clkt', 'clkw', 'wbs', 'ssvc', 'pml', 'ppd', 'curl', 'dart', 'rdz',
        'dbf', 'deb', 'udeb', 'uvf', 'uvvf', 'uvd', 'uvvd', 'uvt', 'uvvt', 'uvx', 'uvvx', 'uvz', 'uvvz', 'fe_launch',
        'dsm', 'dna', 'docjson', 'scld', 'dpg', 'mwc', 'dpgraph', 'dfac', 'fla', 'ait', 'svc', 'geo', 'dzr', 'mag', 'nml',
        'esf', 'msf', 'qam', 'slt', 'ssf', 'qcall', 'qca', 'espass', 'es3', 'et3', 'asice', 'sce', 'asics', 'tst', 'mpw',
        'pub', 'ecigprofile', 'ecig', 'ecigtheme', 'ez2', 'ez3', 'dim', 'fdf', 'msd', 'mseed', 'seed', 'dataless', 'flb',
        'zfc', 'gph', 'ftc', 'sfd', 'fm', 'fnc', 'ltf', 'fsc', 'oas', 'oa2', 'oa3', 'fg5', 'bh2', 'ddd', 'xdw', 'xbd',
        'xct', 'fzs', 'txd', 'g3', 'ggb', 'ggt', 'gex', 'gre', 'gxt', 'g2w', 'g3w', 'gmx', 'kml', 'kmz', 'gqf',
        'gqs', 'gac', 'ghf', 'gim', 'grv', 'gtm', 'tpl', 'vcg', 'hal', 'zmm', 'hbci', 'hbc', 'kom', 'upa', 'pkd', 'bpd',
        'hdt', 'les', 'hpgl', 'hpi', 'hpid', 'hps', 'jlt', 'pcl', 'sfd-hdstx', 'x3d', 'emm', 'mpy', 'irm', 'sc', 'icc',
        'icm', '1905.1', 'igl', 'imf', 'imi', 'ivp', 'ivu', 'imscc', 'igm', 'xpw', 'xpx', 'i2g', 'qbo', 'qfx', 'rcprofile',
        'irp', 'xpr', 'fcs', 'jam', 'rms', 'jisp', 'joda', 'ktz', 'ktr', 'karbon', 'chrt', 'kfo', 'flw', 'kon', 'kpr', 'kpt',
        'ksp', 'kwd', 'kwt', 'htke', 'kia', 'kne', 'knp', 'sdf', 'skp', 'skd', 'skm', 'skt', 'sse', 'lasjson', 'lasxml',
        'lbd', 'lbe', 'lcs', 'lca', 'loom', '123', 'wk4', 'wk3', 'wk1', 'apr', 'vew', 'prz', 'pre', 'nsf', 'ntf', 'ndl',
        'ns4', 'ns3', 'ns2', 'nsh', 'nsg', 'or3', 'or2', 'org', 'scm', 'lwp', 'sam', 'portpkg', 'mvt', 'mdc', 'mmdb',
        'mcd', 'mc1', 'cdkey', 'mwf', 'mfm', 'flo', 'igx', 'mif', 'daf', 'dis', 'mbk', 'mqy', 'msl', 'plc', 'txf', 'mpn',
        'mpc', 'xul', '3mf', 'cil', 'asf', 'cab', 'xls', 'xlm', 'xla', 'xlc', 'xlt', 'xlw', 'xltm', 'xlam', 'xlsb', 'xlsm',
        'eot', 'chm', 'ims', 'lrm', 'thmx', 'ppt', 'pps', 'pot', 'ppam', 'pptm', 'sldm', 'ppsm', 'potm', 'mpp', 'mpt',
        'tnef', 'tnf', 'docm', 'dotm', 'wcm', 'wdb', 'wks', 'wps', 'wpl', 'xps', 'msa', 'mseq', 'crtr', 'cif', 'mus',
        'msty', 'taglet', 'entity', 'request', 'bkm', 'kcm', 'nimn', 'nitf', 'nlu', 'nds', 'sfc', 'smc', 'nnd', 'nns',
        'nnw', 'ac', 'ngdat', 'n-gage', 'rpst', 'rpss', 'edm', 'edx', 'ext', 'odc', 'otc', 'odb', 'odf', 'odg', 'otg',
        'odi', 'oti', 'odp', 'otp', 'ods', 'ots', 'odt', 'odm', 'ott', 'oth', 'xo', 'dd2', 'tam', 'tamp', 'tamx', 'tat',
        'tatp', 'tatx', 'obgx', 'obg', 'oeb', 'oxt', 'osm', 'sldx', 'ppsx', 'potx', 'xlsx', 'xltx', 'docx', 'dotx', 'ndc',
        'mgp', 'dp', 'esa', 'oxlicg', 'prc', 'pdb', 'pqa', 'oprc', 'plp', 'dive', 'paw', 'str', 'ei6', 'pil', 'efif', 'wg',
        'plf', 'pbd', 'preminet', 'box', 'vbox', 'mgz', 'psfs', 'qps', 'ptid', 'bar', 'qxd', 'qxt', 'qwd', 'qwt', 'qxl',
        'qxb', 'quox', 'quiz', 'tree', 'rar', 'bed', 'mxl', 'cryptonote', 'link66', 'st', 'sar', 'scd', 'sla', 'slaz',
        's3df', 'scsf', 'sdoc', 'sdo', 's1w', 'seml', 'sem', 'smht', 'smh', 'sppt', 's1p', 'stif', 'sxls', 'sxl', 's1e',
        'stml', 's1h', 'spdf', 'spd', 's1a', 'see', 'sema', 'semd', 'semf', 'ssv', 'ifm', 'itp', 'iif', 'ipk', 'shp',
        'shx', 'sr', 'twd', 'twds', 'mmf', 'notebook', 'teacher', 'ptrom', 'pt', 'fo', 'zfo', 'sdkm', 'sdkd', 'dxp',
        'sfs', 'sqlite', 'sqlite3', 'smzip', 'sm', 'wadl', 'sus', 'susp', 'xsm', 'bdm', 'xdm', 'ddf', 'tao', 'pcap', 'cap',
        'dmp', 'qvd', 'ppttc', 'vfr', 'viaframe', 'tmo', 'tpt', 'mxs', 'tra', 'ufdl', 'ufd', 'frm', 'utz', 'umj',
        'unityweb', 'uoml', 'uo', 'urim', 'urimap', 'vmt', 'vcx', 'mxi', 'study-inter', 'model-inter', 'vwx', 'istc',
        'isws', 'ves', 'vsc', 'vsd', 'vst', 'vsw', 'vss', 'vis', 'vsf', 'sic', 'slc', 'wbxml', 'wmlc', 'wmlsc', 'wtb',
        'p2p', 'wsc', 'wmc', 'm', 'nbp', 'wpd', 'wqd', 'stf', 'wv', 'xar', 'xfdl', 'xfd', 'cpkg', 'dpkg', 'ppkg', 'xlim',
        'hvd', 'hvs', 'hvp', 'osf', 'saf', 'spf', 'yme', 'cmp', 'zir', 'zirz', 'zaz', 'vxml', 'vcj', 'wif', 'wgt', 'wsdl',
        'wspolicy', 'xav', 'xca', 'xdf', 'xel', 'xer', 'xns', 'xhtml', 'xhtm', 'xht', 'xlf', 'dtd', 'xop', 'xsl', 'xslt',
        'mxml', 'xhvml', 'xvml', 'xvm', 'yang', 'yin', 'zip', 'zst', '726', 'adts', 'aac', 'ass', 'ac3', 'amr', 'awb',
        'acn', 'aal', 'atx', 'at3', 'aa3', 'omg', 'au', 'snd', 'dls', 'evc', 'evb', 'enw', 'evw', 'lbc', 'l16', 'mhas',
        'mxmf', 'm4a', 'mp3', 'mpga', 'mp1', 'mp2', 'oga', 'ogg', 'opus', 'spx', 'sid', 'psid', 'qcp', 'smv', 'loas',
        'xhe', 'koz', 'uva', 'uvva', 'eol', 'mlp', 'dts', 'dtshd', 'plj', 'lvp', 'pya', 'vbk', 'ecelp4800', 'ecelp7470',
        'ecelp9600', 'multitrack', 'rip', 'smp3', 'smp', 's1m', 'ttc', 'otf', 'ttf', 'woff', 'woff2', 'exr', 'avci', 'avcs',
        'bmp', 'dib', 'cgm', 'drle', 'emf', 'fits', 'fit', 'fts', 'heic', 'heics', 'heif', 'heifs', 'hej2', 'hsj2', 'gif',
        'ief', 'jls', 'jp2', 'jpg2', 'jph', 'jhc', 'jpg', 'jpeg', 'jpe', 'jfif', 'jpm', 'jpgm', 'jpx', 'jpf', 'jxr', 'jxra',
        'jxrs', 'jxs', 'jxsc', 'jxsi', 'jxss', 'ktx', 'png', 'btif', 'btf', 'pti', 'svg', 'svgz', 't38', 'tiff', 'tif', 'tfx',
        'psd', 'azv', 'uvi', 'uvvi', 'uvg', 'uvvg', 'djvu', 'djv', 'dwg', 'dxf', 'fbs', 'fpx', 'fst', 'mmr', 'rlc', 'pgb',
        'ico', 'apng', 'mdi', 'hdr', 'rgbe', 'xyze', 'spng', 'spn', 's1n', 'sgif', 'sgi', 's1g', 'sjpg', 'sjp', 's1j',
        'tap', 'vtf', 'wbmp', 'xif', 'pcx', 'wmf', 'u8msg', 'u8dsn', 'u8mdn', 'u8hdr', 'eml', 'mail', 'art', 'glb', 'gltf',
        'igs', 'iges', 'msh', 'mesh', 'silo', 'mtl', 'obj', 'stl', 'dae', 'dwf', 'gdl', 'gsm', 'win', 'dor', 'lmp', 'rsm',
        'msm', 'ism', 'gtw', 'moml', 'mts', 'ogex', 'x_b', 'xmt_bin', 'x_t', 'xmt_txt', 'usdz', 'bsp', 'vtu', 'wrl', 'vrml',
        'x3db', 'x3dv', 'x3dvz', 'bmed', 'vpm', 'appcache', 'manifest', 'ics', 'ifb', 'css', 'csv', 'csvs', 'soa', 'zone',
        'html', 'htm', 'cnd', 'markdown', 'md', 'miz', 'n3', 'txt', 'asc', 'text', 'pm', 'el', 'c', 'h', 'cc', 'hh', 'cxx',
        'hxx', 'f90', 'conf', 'log', 'provn', 'rst', 'tag', 'dsc', 'rtx', 'sgml', 'sgm', 'tsv', 'tr', 'roff', 'ttl', 'uris',
        'uri', 'vcf', 'vcard', 'a', 'abc', 'ascii', 'copyright', 'dms', 'sub', 'jtd', 'flt', 'fly', 'flx', 'gv', 'dot',
        'hgl', '3dml', '3dm', 'spot', 'spo', 'mpf', 'ccc', 'mc2', 'uric', 'jad', 'sos', 'ts', 'si', 'sl', 'wml', 'wmls',
        'vtt', 'xml', 'xsd', 'rng', 'ent', '3gp', '3gpp', '3g2', '3gpp2', 'm4s', 'mj2', 'mjp2', 'mp4', 'mpg4', 'm4v',
        'mpeg', 'mpg', 'mpe', 'm1v', 'm2v', 'ogv', 'mov', 'qt', 'uvh', 'uvvh', 'uvm', 'uvvm', 'uvu', 'uvvu', 'uvp', 'uvvp',
        'uvs', 'uvvs', 'uvv', 'uvvv', 'dvb', 'fvt', 'mxu', 'm4u', 'pyv', 'nim', 'bik', 'bk2', 'smk', 'smpg', 's11', 's14',
        'sswf', 'ssw', 'smov', 'smo', 's1q', 'yt', 'viv', 'cpt', 'metalink', 'owx', 'rss', 'apk', 'dd', 'dcf', 'o4a', 'o4v',
        'dm', 'drc', 'dr', 'sxc', 'stc', 'sxd', 'std', 'sxi', 'sti', 'sxm', 'sxw', 'sxg', 'stw', 'sis', 'mms', 'anx',
        'bcpio', 'torrent', 'bz2', 'vcd', 'crx', 'cpio', 'csh', 'dcr', 'dir', 'dxr', 'dvi', 'spl', 'gtar', 'hdf', 'jar',
        'jnlp', 'pack', 'kil', 'latex', 'nc', 'cdf', 'pl', 'rpm', 'sh', 'shar', 'sit', 'sv4cpio', 'sv4crc', 'tar', 'tcl',
        'tex', 'texinfo', 'texi', 'man', '1', '2', '3', '4', '5', '6', '7', '8', 'me', 'ms', 'ustar', 'src', 'xpi', 'xspf',
        'xz', 'mid', 'midi', 'kar', 'aif', 'aiff', 'aifc', 'axa', 'flac', 'mka', 'mod', 'ult', 'uni', 'm15', 'mtm', '669',
        'med', 'm3u', 'wax', 'wma', 'ram', 'rm', 'ra', 's3m', 'stm', 'wav', 'xyz', 'webp', 'ras', 'pnm', 'pbm', 'pgm',
        'ppm', 'rgb', 'tga', 'xbm', 'xpm', 'xwd', 'sandboxed', 'pod', 'etx', 'webm', 'axv', 'flv', 'fxm', 'mkv', 'mk3d',
        'asx', 'wm', 'wmv', 'wmx', 'wvx', 'avi', 'movie', 'ice', 'sisx', 'atomsrv', 'lin', 'cu', 'tsp', 'hta', 'mjs', 'ser',
        'm3g', 'mdb', 'deploy', 'msu', 'msp', 'one', 'onetoc2', 'onetmp', 'onepkg', 'key', 'prf', 'p7z', 'epsi', 'epsf',
        'eps2', 'eps3', 'ddeb', 'cat', 'pptx', 'cod', 'sdc', 'sds', 'sda', 'sdd', 'sdw', 'sgl', 'wp5', 'wasm', 'wk',
        '7z', 'abw', 'dmg', 'cda', 'mph', 'wad', 'pfa', 'pfb', 'gsf', 'pcf', 'pcf.z', 'mm', 'gan', 'gnumeric', 'sgf',
        'gcf', 'taz', 'rhtml', 'phtml', 'pht', 'php', 'php3', 'php3p', 'php4', 'php5', 'phps', 'hwp', 'info', 'ins', 'isp',
        'iii', 'jmz', 'lyx', 'lzx', 'maker', 'frame', 'fb', 'book', 'fbdoc', 'application', 'com', 'bat', 'msi', 'wmd',
        'wmz', 'pac', 'nwc', 'o', 'oza', 'p7r', 'pyc', 'pyo', 'qgs', 'qtl', 'rdp', 'rb', 'sci', 'xcos', 'scr', 'sitx',
        'gf', 'pk', '~', '%', 'bak', 'old', 'sik', 'wz', 'crt', 'xcf', 'fig', 'csd', 'orc', 'sco', 'mpega', 'sofa', 'sd2',
        'alc', 'cac', 'cache', 'csf', 'cbin', 'cascii', 'ctab', 'cdx', 'c3d', 'cmdf', 'cpa', 'bsd', 'csml', 'csm', 'ctx',
        'cxf', 'cef', 'emb', 'embl', 'spc', 'inp', 'gam', 'gamin', 'fch', 'fchk', 'cub', 'gau', 'gjc', 'gjf', 'gal', 'gcg',
        'gen', 'hin', 'istr', 'ist', 'jdx', 'dx', 'kin', 'mcm', 'mmod', 'mol', 'rd', 'rxn', 'sd', 'tgf', 'mcif', 'mol2',
        'b', 'gpt', 'mop', 'mopcrt', 'zmt', 'moo', 'mvb', 'asn', 'prt', 'val', 'ros', 'sw', 'vms', 'vmd', 'xtel', 'jphc',
        'ktx2', 'b16', 'cr2', 'crw', 'cdr', 'pat', 'cdt', 'erf', 'jng', 'nef', 'orf', '323', 'shtml', 'uls', 'brf', 'srt',
        'sct', 'tm', 'bib', 'boo', 'h++', 'hpp', 'htc', 'c++', 'cpp', 'diff', 'patch', 'd', 'hs', 'java', 'ly', 'lhs',
        'moc', 'p', 'pas', 'gcd', 'py', 'scala', 'sfv', 'tk', 'ltx', 'sty', 'cls', 'vcs', 'dl', 'dif', 'dv', 'fli', 'gl',
        'lsf', 'lsx', 'mpv', 'mng', 'vrm', '1clr', 'cwl', 'exp', 'webmanifest', 'p21', 'stpnc', '210', 'ifc', 'sarif',
        'sarif-external-properties', 'age', 'arrow', 'arrows', 'lhzd', 'c9r', 'c9s', 'cryptomator', 'carjson', 'gdz',
        'genozip', 'ggs', 'car', 'las', '3tz', 'nebul', 'line', 'rlm', 'reload', 'smf', 'scl', 'aion', 'vtnstd', 'avif',
        'hif', 'jxl', 'stp', 'step', 'stpx', 'stpz', 'stpxz', 'u3d', 'pyox', 'vds', 'x3dz', 'cql', 'gff3', 'shaclc', 'shc',
        'shex', 'spdx', 'ged', 'hans', 'htaccess', 'cgi','sass', ''
    ];

    private static $structure = [];
    private static $top_extensions = ['php', 'js', 'html', self::EXT_TOTAL, self::EXT_DIR, self::EXT_UNKNOWN];

    private static $stat_settings = [
        'finder'                            => ['ext' => true, 'size' => true],
        'checker_is_file'                   => ['ext' => true, 'size' => false],
        'checker_size_range'                => ['ext' => true, 'size' => false],
        'checker_ext'                       => ['ext' => true, 'size' => false],
        'checker_ignore_excludes'           => ['ext' => false, 'size' => false],
        'checker_ignore_path_pattern'       => ['ext' => false, 'size' => false],
        'checker_file_patterns'             => ['ext' => false, 'size' => false],
        'checker_file_not_patterns'         => ['ext' => false, 'size' => false],
        'checker_is_not_root'               => ['ext' => false, 'size' => false],
        'checker_is_not_system'             => ['ext' => false, 'size' => false],
        'checker_file_older'                => ['ext' => false, 'size' => false],
        'checker_ignore_filename_template'  => ['ext' => false, 'size' => false],
        'checker_ignore_file'               => ['ext' => false, 'size' => false],
        'checker_only_filepath_template'    => ['ext' => false, 'size' => false],
        'checker_skip_ext'                  => ['ext' => true, 'size' => false],
        'checker_imunify_filter'            => ['ext' => true, 'size' => false],
        'rapid_scan'                        => ['ext' => false, 'size' => false],
        'cloud_assisted_scan'               => ['ext' => true, 'size' => false],
        'elf'                               => ['ext' => false, 'size' => false],
        'checker_size_range_sig_scan'       => ['ext' => true, 'size' => false],
        'smart_scan'                        => ['ext' => true, 'size' => false],
        'checker_before_norm'               => ['ext' => false, 'size' => false],
        'deobfuscator'                      => ['ext' => true, 'size' => false],
        'files_submitted_to_scan_hs'        => ['ext' => true, 'size' => true],
        'files_submitted_to_scan_pcre'      => ['ext' => true, 'size' => false],
        'hyperscan'                         => ['ext' => true, 'size' => false],
        'pcre'                              => ['ext' => true, 'size' => false],
    ];

    /**
     * @param string $item Ai-Bolit 'functional component/element/(whatever)', that processes files and sets verdicts to them
     * @param string $verdict a verdict, that was set by `item`, for a file at `$file`
     * @param FileInfo $file a file, for which the component `item` set verdict `verdict`
     * @param int $size size information for given file,
     * @return void
     */
    public static function addStatsItem(string $item, string $verdict, FileInfo $file, $size = null)
    {
        if ($size === null) {
            $size = $file->getSize();
        }

        if ($size === null) {
            return;
        }

        if (isset(self::$hardcoded_exts[0])) {
            self::$hardcoded_exts = array_flip(self::$hardcoded_exts);
        }

        $ext = isset(self::$hardcoded_exts[$file->getExtension()]) ? $file->getExtension() : self::EXT_UNKNOWN;

        $dir = $file->is_dir();
        $ext_group  = (isset(self::$stat_settings[$item]) && !self::$stat_settings[$item]['ext'])
            ? self::NO_EXT_GROUP
            : $ext;
        if ($ext_group === self::NO_EXT_GROUP && $dir) {
            return;
        }
        if ($dir) {
            $ext_group = self::EXT_DIR;
        }

        self::addStatsDataToArray($item, $verdict, $ext_group, $size);
        if ($ext_group !== self::EXT_DIR) {
            self::addStatsDataToArray($item, $verdict, self::EXT_TOTAL, $size);
        }
    }

    public static function addStatsDataToArray(string $item, string $verdict, string $ext, int $size)
    {
        $size_group = (isset(self::$stat_settings[$item]) && !self::$stat_settings[$item]['size']) ? self::NO_SIZE_GROUP : (int)floor(log($size, 2));

        if ($size_group !== self::NO_SIZE_GROUP) {
            if ($size_group <= 8) {
                $size_group = 8;
            } else if ($size_group > 8 && $size_group <= 12) {
                $size_group = 12;
            } else if ($size_group > 12 && $size_group <= 16) {
                $size_group = 16;
            } else if ($size_group > 16 && $size_group <= 20) {
                $size_group = 20;
            } else if ($size_group > 20 && $size_group <= 24) {
                $size_group = 24;
            } else {
                $size_group = 32;
            }
        }

        $path = &self::$structure[$item][$verdict][$ext];
        isset($path['ext_count']) ? $path['ext_count'] += 1 : $path['ext_count'] = 1;

        isset($path[$size_group]['count']) ? $path[$size_group]['count'] += 1       : $path[$size_group]['count'] = 1;
        isset($path[$size_group]['bytes']) ? $path[$size_group]['bytes'] += $size   : $path[$size_group]['bytes'] = $size;

        ///welford variance update
        isset($path[$size_group]['bytes_var'][0]) ?: $path[$size_group]['bytes_var'][0] = 0;
        isset($path[$size_group]['bytes_var'][1]) ?: $path[$size_group]['bytes_var'][1] = 0;
        self::welfordUpdate($size, $path[$size_group]['count'], $path[$size_group]['bytes_var']);
        ////////
    }

    /**
     * Update variance with welford's online algo
     * @param $size
     * @param $count
     * @param $res
     * @return mixed
     */
    public static function welfordUpdate($size, $count, &$res)
    {
        $delta = $size - $res[0];
        $res[0] += $delta / $count;
        $delta2 = $size - $res[0];
        $res[1] += $delta * $delta2;
        return $res;
    }

    /**
     * @return array
     */
    public static function getStats()
    {
        return self::$structure;
    }

    /**
     * Sort internal structure $top_extensions to the top of the list, next sort by ext_count value
     * @return void
     */
    private static function sortByTopExtsCountDesc()
    {
        foreach (self::$structure as &$verdicts) {
            foreach ($verdicts as &$extensions) {
                uksort($extensions, function ($a, $b) use ($extensions) {
                    if (in_array($a, self::$top_extensions) && !in_array($b, self::$top_extensions)) {
                        return -1;
                    }
                    if (in_array($b, self::$top_extensions) && !in_array($a, self::$top_extensions)) {
                        return 1;
                    }
                    if (in_array($a, self::$top_extensions) && in_array($b, self::$top_extensions)) {
                        return 0;
                    }
                    if ($extensions[$a]['ext_count'] === $extensions[$b]['ext_count']) {
                        return 0;
                    }
                    return ($extensions[$a]['ext_count'] > $extensions[$b]['ext_count']) ? -1 : 1;
                });
            }
        }
    }

    /**
     * Get final report from internal structure
     * @return array
     */
    public static function getReportData()
    {
        $report = [];

        self::sortByTopExtsCountDesc();

        //transfer php,js,html,total,dir,unknown and TOP_EXT_COUNT top extensions from internal structure to report
        foreach (self::$structure as $item => &$verdicts) {
            foreach ($verdicts as $verdict => &$extensions) {
                $i = 0;
                foreach ($extensions as $extension => &$grouped_sizes) {
                    foreach ($grouped_sizes as $size => &$counters) {
                        if ($size === 'ext_count') {
                            continue;
                        }
                        if ($extension === self::NO_EXT_GROUP) {
                            break;
                        }
                        if ($i >= self::TOP_EXT_COUNT) {
                            break 2;
                        }
                        $keys = [];
                        $keys['extension'] = (string)$extension;
                        if ($size !== self::NO_SIZE_GROUP) {
                            $keys['file-size'] = $size;
                        }
                        $stat = [
                            'keys'      => $keys,
                            'count'     => $counters['count'],
                            'bytes'     => $counters['bytes'],
                            'bytes_var' => $counters['bytes_var'],
                        ];
                        $report[$item][$verdict][] = $stat;
                        unset(self::$structure[$item][$verdict][$extension][$size]);
                    }
                    if ($extension !== self::NO_EXT_GROUP && !in_array($extension, self::$top_extensions, true)) {
                        $i++;
                    }
                    unset($counters);
                }
                unset($grouped_sizes);
            }
            unset($extensions);
        }
        unset($verdicts);

        //aggregate all left extensions in internal structure to 'other' extension
        foreach (self::$structure as $item => &$verdicts) {
            foreach ($verdicts as $verdict => &$extensions) {
                foreach ($extensions as $extension => &$grouped_sizes) {
                    foreach ($grouped_sizes as $size => &$counters) {
                        if ($size === 'ext_count') {
                            continue;
                        }
                        if (in_array($extension, [self::EXT_DIR, self::EXT_TOTAL, self::EXT_OTHER, self::NO_EXT_GROUP], true)) {
                            break;
                        }
                        $path = &self::$structure[$item][$verdict];

                        isset($path[self::EXT_OTHER][$size]['count'])
                            ? $path[self::EXT_OTHER][$size]['count'] += $path[$extension][$size]['count']
                            : $path[self::EXT_OTHER][$size]['count'] = $path[$extension][$size]['count'];

                        isset($path[self::EXT_OTHER][$size]['bytes'])
                            ? $path[self::EXT_OTHER][$size]['bytes'] += $path[$extension][$size]['bytes']
                            : $path[self::EXT_OTHER][$size]['bytes'] = $path[$extension][$size]['bytes'];

                        isset($path[self::EXT_OTHER][$size]['bytes_var'])
                            ? self::welfordUpdate($path[self::EXT_OTHER][$size]['bytes'], $path[self::EXT_OTHER][$size]['count'], $path[self::EXT_OTHER][$size]['bytes_var'])
                            : $path[self::EXT_OTHER][$size]['bytes_var'] = $path[$extension][$size]['bytes_var'];

                        unset(self::$structure[$item][$verdict][$extension][$size]);
                    }
                    unset($counters);
                }
                unset($grouped_sizes);
            }
            unset($extensions);
        }
        unset($verdicts);

        //here must be left only in internal structure 'other'
        //transfer 'other' extension from internal structure to report
        foreach (self::$structure as $item => &$verdicts) {
            foreach ($verdicts as $verdict => &$extensions) {
                foreach ($extensions as $extension => &$grouped_sizes) {
                    foreach ($grouped_sizes as $size => &$counters) {
                        if ($size === 'ext_count') {
                            continue;
                        }
                        $keys = [];
                        if ($extension === self::NO_EXT_GROUP) {
                            break;
                        }
                        $keys['extension'] = (string)$extension;
                        if ($size !== self::NO_SIZE_GROUP) {
                            $keys['file-size'] = $size;
                        }
                        $stat = [
                            'keys'      => $keys,
                            'count'     => $counters['count'],
                            'bytes'     => $counters['bytes'],
                            'bytes_var' => $counters['bytes_var'],
                        ];
                        $report[$item][$verdict][] = $stat;
                        unset(self::$structure[$item][$verdict][$extension][$size]);
                    }
                    unset($counters);
                }
                unset($grouped_sizes);
            }
            unset($extensions);
        }
        unset($verdicts);

        //calculate all bytes_var in report
        foreach ($report as $item => &$verdicts) {
            foreach ($verdicts as $verdict => &$counters) {
                foreach ($counters as $index => &$counter) {
                    $counter['bytes_var'] = $counter['count'] < 2 ? 0 : $counter['bytes_var'][1] / $counter['count'];
                }
                unset($counter);
            }
            unset($counters);
        }
        unset($verdicts);
        return $report;
    }
}

class IniConfig
{
    private static $config;
    private static $defaults = [
        'AT_CLKTCK' => 100,
    ];

    public static function parse($file)
    {
        if (!is_readable($file)) {
            throw new Exception("IniConfig: file '$file' is not readable");
        }
        if (self::$config === null) {
            self::$config = parse_ini_file($file);
        }
        return self::$config;
    }

    public static function get($key)
    {
        if (self::$config === null) {
            throw new Exception('IniConfig: no config loaded');
        }
        if (!isset(self::$config[$key]) && !isset(self::$defaults[$key])) {
            throw new Exception("IniConfig: no such key '$key'");
        }
        return self::$config[$key] ?? self::$defaults[$key];
    }
}


class HashVerdicts
{
    const API_URL = 'https://api.imunify360.com/api/hashes/report';
    const TOKEN_FILE = '/var/imunify360/iaid-token';
    protected static $hashes = [];
    protected static $count = 0;
    protected static $mh = null;
    protected static $ch = null;
    protected static $token = null;

    public static function init()
    {
        if (!defined('DEBUG_CA')) {
            define ('DEBUG_CA', false);
        }
        if (!is_readable(self::TOKEN_FILE)) {
            return;
        }
        self::$token = trim(file_get_contents(self::TOKEN_FILE));
        if (!isset(self::$mh)) {
            self::$mh = curl_multi_init();
        }
    }

    public static function add($hash, $verdict)
    {
        if (!isset(self::$token)) {
            return;
        }
        self::$hashes[$verdict][] = $hash;
        self::$count++;
        if (self::$count >= CLOUD_ASSIST_LIMIT) {
            static::sendData(self::$hashes);
            self::$count = 0;
            self::$hashes = [];
        }
    }

    protected static function sendData(array $hashes)
    {
        if (!isset(self::$token) || empty($hashes)) {
            return;
        }
        self::curlMWait();
        if (is_resource(self::$ch)) {
            curl_multi_remove_handle(self::$mh, self::$ch);
            curl_close(self::$ch);
        }
        $headers = [
            'Content-Type: application/json',
            'X-Auth: ' . self::$token
        ];
        try {
            self::$ch = curl_init();
            curl_multi_add_handle(self::$mh, self::$ch);
            curl_setopt(self::$ch, CURLOPT_CUSTOMREQUEST, 'POST');
            curl_setopt(self::$ch, CURLOPT_SSL_VERIFYPEER, false);
            curl_setopt(self::$ch, CURLOPT_SSL_VERIFYHOST, false);
            curl_setopt(self::$ch, CURLOPT_CONNECTTIMEOUT, 60);
            curl_setopt(self::$ch, CURLOPT_RETURNTRANSFER, true);
            curl_setopt(self::$ch, CURLOPT_HTTPHEADER, $headers);
            curl_setopt(self::$ch, CURLOPT_URL, (!DEBUG_CA ? self::API_URL : (CA_API_URL_DEBUG . '/api/hashes/report')));
            curl_setopt(self::$ch, CURLOPT_POSTFIELDS, json_encode($hashes));
            curl_multi_exec(self::$mh, $active);
        } catch (Exception $e) {
            curl_close(self::$ch);
            self::$ch = null;
        }
    }

    protected static function curlMWait()
    {
        do {
            $status = curl_multi_exec(self::$mh, $active);
            if ($active) {
                curl_multi_select(self::$mh);
            }
        } while ($active && $status == CURLM_OK);
    }

    public static function close()
    {
        if (!isset(self::$token)) {
            return;
        }
        if (self::$count > 0) {
            static::sendData(self::$hashes);
            self::$count = 0;
            self::$hashes = [];
        }
        self::curlMWait();
        if (is_resource(self::$ch)) {
            curl_multi_remove_handle(self::$mh, self::$ch);
            curl_close(self::$ch);
        }
        curl_multi_close(self::$mh);
        self::$mh = null;
        self::$ch = null;
        self::$token = null;
    }
}


class OsReleaseInfo
{
    private $prefix = '';
    private $release_file = '';
    const DEBIAN = ['debian'];
    const RHEL_FEDORA_CENTOS = ['rhel', 'fedora', 'centos'];
    const RHEL = ['rhel'];
    const UNKNOWN = ['unknown'];

    private $_supported_dists = [
        'SuSE', 'debian', 'fedora', 'redhat', 'centos',
        'mandrake', 'mandriva', 'rocks', 'slackware', 'yellowdog', 'gentoo',
        'UnitedLinux', 'turbolinux'];

    private $_release_filename = '(\w+)[-_](release|version)';
    private $_lsb_release_version = '(.+)'
    . ' release '
    . '([\d.]+)'
    . '[^(]*(?:\((.+)\))?';
    private $_release_version = '([^0-9]+)'
    . '(?: release )?'
    . '([\d.]+)'
    . '[^(]*(?:\((.+)\))?';

    private $release = [];

    public function __construct($prefix = '', $release_file = '/etc/os-release')
    {
        $this->prefix = $prefix;
        $this->release_file = $this->prefix . $release_file;
        $this->getRelease($this->release_file);
    }

    private function getOsReleaseAndVersion()
    {
        $ver = rtrim(@file_get_contents($this->prefix . '/etc/system-release'));
        return $ver ?: $this->release['VERSION'];
    }

    public function getOsVersion($release_and_version = false)
    {
        $rv = $release_and_version ? $release_and_version : $this->getOsReleaseAndVersion();
        if ($rv) {
            if (preg_match('~\s*(\d+\.\d+\S*)(\s|$)~', $rv, $m)) {
                return $m[1];
            }
        }
        return $this->release['VERSION_ID'] ? $this->release['VERSION_ID'] : false;
    }

    private function linuxDistribution($distname = '', $version = '', $id = '')
    {
        $dists = array_flip($this->_supported_dists);
        if (!file_exists($this->prefix . '/etc')) {
            return [$distname, $version, $id];
        }
        $file = '';
        $etc = scandir($this->prefix . '/etc');
        foreach ($etc as $file) {
            if (preg_match('~' . $this->_release_filename . '~', $file, $m)) {
                if (isset($dists[$m[1]])) {
                    $_distname = $m[1];
                    $distname = $m[1];
                    break;
                }
            }
        }
        $f = fopen($this->prefix . '/etc/' . $file, 'r');
        $firstline = fgets($f);
        fclose($f);
        list($_distname, $_version, $_id) = $this->_parseReleaseFile($firstline);

        if ($_distname) {
            $distname = $_distname;
        }

        if ($_version) {
            $version = $_version;
        }

        if ($_id) {
            $id = $_id;
        }

        return [$distname, $version, $id];
    }

    private function _parseReleaseFile($firstline)
    {
        $version = '';
        $id = '';
        if (preg_match('~' . $this->_lsb_release_version . '~', $firstline, $m)) {
            return [$m[1], $m[2], $m[3]];
        }

        if (preg_match('~' . $this->_release_version . '~', $firstline, $m)) {
            return [$m[1], $m[2], $m[3]];
        }

        $l = preg_split("~\s+~", trim($firstline), -1, PREG_SPLIT_NO_EMPTY);
        if (!empty($l)) {
            $version = $l[0];
            if (count($l) > 1) {
                $id = $l[1];
            }
        }
        return ['', $version, $id];
    }

    private function getReleaseFromFile($release_file)
    {
        $lines = file($release_file, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES);
        foreach ($lines as $line) {
            list($k, $v) = explode('=', rtrim($line), 2);
            $this->release[$k] = trim($v, '"');
        }
        if (isset($this->release['ID_LIKE'])) {
            $this->release['ID_LIKE'] = preg_split('~\s+~', $this->release['ID_LIKE'], -1, PREG_SPLIT_NO_EMPTY);
        } else {
            $this->release['ID_LIKE'] = [$this->release['ID']];
        }
    }

    private function getRelease($release_file = '')
    {
        if (count($this->release) != 0) {
            return $this->release;
        }
        if ($this->release_file) {
            $release_file = $this->release_file;
        }
        $osid = '';
        if (file_exists($release_file)) {
            $this->getReleaseFromFile($release_file);
        } else {
            $d = $this->linuxDistribution();
            if ($d && isset($d[0])) {
                $osid = current(preg_split('~\s+~', strtolower($d[0]), -1, PREG_SPLIT_NO_EMPTY));
                if ($osid == 'red' && strpos($d[0], 'Red Hat Enterprise Linux')) {
                    $osid = 'rhel';
                }
                $this->release['ID'] = $osid;
                $this->release['PRETTY_NAME'] = "{$d[0]} {$d[1]} ({$d[2]})";
                if (in_array($osid, ['cloudlinux', 'centos', 'rhel'])) {
                    $this->release['ID_LIKE'] = self::RHEL_FEDORA_CENTOS;
                } else if (in_array($osid, ['ubuntu', 'debian'])) {
                    $this->release['ID_LIKE'] = self::DEBIAN;
                } else {
                    $this->release['ID_LIKE'] = self::UNKNOWN;
                }
            } else {
                $this->release['ID'] = 'unknown';
                $this->release['ID_LIKE'] = self::UNKNOWN;
                $this->release['PRETTY_NAME'] = 'unknown';
            }
        }
        return $this->release;
    }

    public function getIdLike()
    {
        $rel = $this->getRelease();
        return $rel['ID_LIKE'];
    }

    public function isIdLikeCentos()
    {
        $rel = $this->getRelease();
        foreach (self::RHEL_FEDORA_CENTOS as $os) {
            if (in_array($os, $rel['ID_LIKE'])) {
                return true;
            }
        }
        return false;
    }

    public function isIdLikeRhel()
    {
        $rel = $this->getRelease();
        foreach (self::RHEL as $os) {
            if (in_array($os, $rel['ID_LIKE'])) {
                return true;
            }
        }
        return false;
    }

    public function isIdLikeDebian()
    {
        $rel = $this->getRelease();
        foreach (self::DEBIAN as $os) {
            if (in_array($os, $rel['ID_LIKE'])) {
                return true;
            }
        }
        return false;
    }

    public function getPrettyName()
    {
        $rel = $this->getRelease();
        return $rel['PRETTY_NAME'];
    }

    public function getOs()
    {
        $rel = $this->getRelease();
        return $rel['ID'];
    }

    public function isRhel()
    {
        return $this->getOs() == 'rhel';
    }

    public function isCentos()
    {
        return $this->getOs() == 'centos';
    }

    public function isUbuntu()
    {
        return $this->getOs() == 'ubuntu';
    }

    public function isCloudlinux()
    {
        return $this->getOs() == 'cloudlinux';
    }

    public function isDebian()
    {
        return $this->getOs() == 'debian';
    }
}


/**
 * Class FileHashMemoryDb.
 *
 * Implements operations to load the file hash database into memory and work with it.
 */
class FileHashMemoryDb
{
    const HEADER_SIZE = 1024;
    const ROW_SIZE = 20;

    /**
     * @var int
     */
    private $count;
    /**
     * @var array
     */
    private $header;
    /**
     * @var resource
     */
    private $fp;
    /**
     * @var array
     */
    private $data;

    /**
     * Creates a new DB file and open it.
     *
     * @param $filepath
     * @return FileHashMemoryDb
     * @throws Exception
     */
    public static function create($filepath)
    {
        if (file_exists($filepath)) {
            throw new Exception('File \'' . $filepath . '\' already exists.');
        }

        $value = pack('V', 0);
        $header = array_fill(0, 256, $value);
        file_put_contents($filepath, implode($header));

        return new self($filepath);
    }

    /**
     * Opens a particular DB file.
     *
     * @param $filepath
     * @return FileHashMemoryDb
     * @throws Exception
     */
    public static function open($filepath)
    {
        if (!file_exists($filepath)) {
            throw new Exception('File \'' . $filepath . '\' does not exist.');
        }

        return new self($filepath);
    }

    /**
     * FileHashMemoryDb constructor.
     *
     * @param mixed $filepath
     * @throws Exception
     */
    private function __construct($filepath)
    {
        $this->fp = fopen($filepath, 'rb');

        if (false === $this->fp) {
            throw new Exception('File \'' . $filepath . '\' can not be opened.');
        }

        try {
            $this->header = unpack('V256', fread($this->fp, self::HEADER_SIZE));
            $this->count = (int) (max(0, filesize($filepath) - self::HEADER_SIZE) / self::ROW_SIZE);
            foreach ($this->header as $chunk_id => $chunk_size) {
                if ($chunk_size > 0) {
                    $str = fread($this->fp, $chunk_size);
                } else {
                    $str = '';
                }
                $this->data[$chunk_id] = $str;
            }
        } catch (Exception $e) {
            throw new Exception('File \'' . $filepath . '\' is not a valid DB file. An original error: \'' . $e->getMessage() . '\'');
        }
    }

    /**
     * Calculates and returns number of hashes stored in a loaded database.
     *
     * @return int number of hashes stored in a DB
     */
    public function count()
    {
        return $this->count;
    }

    /**
     * Find hashes in a DB.
     *
     * @param array $list of hashes to find in a DB
     * @return array list of hashes from the $list parameter that are found in a DB
     */
    public function find($list)
    {
        sort($list);
        
        $hash = reset($list);

        $found = [];

        foreach ($this->header as $chunk_id => $chunk_size) {
            if ($chunk_size > 0) {
                $str = $this->data[$chunk_id];

                do {
                    $raw = pack("H*", $hash);
                    $id  = ord($raw[0]) + 1;

                    if ($chunk_id == $id AND $this->binarySearch($str, $raw)) {
                        $found[] = (string)$hash;
                    }

                } while ($chunk_id >= $id AND $hash = next($list));

                if ($hash === false) {
                    break;
                }
            }
        }

        return $found;
    }

    /**
     * Searches $item in the $str using an implementation of the binary search algorithm.
     *
     * @param $str
     * @param $item
     * @return bool
     */
    private function binarySearch($str, $item) {
        $item_size = strlen($item);
        if ($item_size == 0) {
            return false;
        }

        $first = 0;

        $last = floor(strlen($str) / $item_size);

        while ($first < $last) {
            $mid = $first + (($last - $first) >> 1);
            $b   = substr($str, $mid * $item_size, $item_size);
            if (strcmp($item, $b) <= 0) {
                $last = $mid;
            } else {
                $first = $mid + 1;
            }
        }

        $b = substr($str, $last * $item_size, $item_size);
        if ($b == $item) {
            return true;
        } else {
            return false;
        }
    }

    /**
     * FileHashDB destructor.
     */
    public function __destruct()
    {
        fclose($this->fp);
    }
}

class FilepathEscaper
{
    public static function encodeFilepath($filepath)
    {
        return str_replace(['\\', "\n", "\r"], ['\\\\', '\\n', '\\r'], $filepath);
    }
    
    public static function decodeFilepath($filepath)
    {
        return preg_replace_callback('~(\\\\+)(.)~', function ($matches) {
            $count = strlen($matches[1]);
            if ($count % 2 === 0) {
                return str_repeat('\\', $count/2) . $matches[2];
            }
            return str_repeat('\\', floor($count/2)) . stripcslashes('\\' . $matches[2]);
        }, $filepath);
    }
    
    public static function encodeFilepathByBase64($filepath)
    {
        return base64_encode($filepath);
    }
    
    public static function decodeFilepathByBase64($filepath_base64)
    {
        return base64_decode($filepath_base64);
    }
}


class StringToStreamWrapper {

    const WRAPPER_NAME = 'var';

    private static $_content;
    private $_position;

    /**
     * Prepare a new memory stream with the specified content
     * @return string
     */
    public static function prepare($content)
    {
        if (!in_array(self::WRAPPER_NAME, stream_get_wrappers())) {
            stream_wrapper_register(self::WRAPPER_NAME, get_class());
        }
        self::$_content = $content;
    }

    public function stream_open($path, $mode, $options, &$opened_path)
    {
        $this->_position = 0;
        return true;
    }

    public function stream_read($count)
    {
        $ret = substr(self::$_content, $this->_position, $count);
        $this->_position += strlen($ret);
        return $ret;
    }

    public function stream_stat()
    {
        return [];
    }

    public function stream_eof()
    {
        return $this->_position >= strlen(self::$_content);
    }

    public function stream_set_option($option , $arg1, $arg2 )
    {
        return true;
    }
}

class Normalization
{
    const MAX_ITERATION = 10;

    private static $confusables = "";

    private static function need_skip($string, $i)
    {
        $chars = " @\r\n\t.\"'\x0B\x0C\x00";
        if (isset($string[$i]) && strpos($chars, $string[$i]) !== false) {
            $i++;
            return $i;
        }
        return false;
    }

    private static function match_shortopen_tag($string, $i, $needle, $j)
    {
        $pos_needle = false;
        $pos_string = false;
        if ((isset($needle[$j - 2]) && isset($string[$i - 2]))
            && (($needle[$j - 2] == '<') && ($string[$i - 2] == '<'))
            && (isset($needle[$j - 1]) && isset($string[$i - 1]))
            && ($needle[$j - 1] == '?' && $string[$i - 1] == '?')
        ) {
            $pos_needle = $j;
            $pos_string = $i;
        }
        if ($pos_needle && (isset($needle[$pos_needle]) && $needle[$pos_needle] === 'p')
            && (isset($needle[$pos_needle + 1]) && $needle[$pos_needle + 1] === 'h')
            && (isset($needle[$pos_needle + 2]) && $needle[$pos_needle + 2] === 'p')
        ) {
            $pos_needle = $pos_needle + 3;
        }

        if ($pos_string && (isset($string[$pos_string]) && $string[$pos_string] === 'p')
            && (isset($string[$pos_string + 1]) && $string[$pos_string + 1] === 'h')
            && (isset($string[$pos_string + 2]) && $string[$pos_string + 2] === 'p')
        ) {

            $pos_string = $pos_string + 3;
        }
        return [$pos_needle, $pos_string];
    }

    public static function unescape($string, $save_length = false) {
        if (strpos($string, '\\\'') === false && strpos($string, '\\"') === false && strpos($string, '\\/') === false) {
            return $string;
        }
        $strippedStr = stripcslashes($string);
        if (!$save_length) {
            return $strippedStr;
        } else {
            $strippedStr = self::extend_string_with_spaces($string, $strippedStr);
            return $strippedStr;
        }
    }

    public static function strip_whitespace($string, $save_length = false)
    {
        $halt_postfix = '';
        if (preg_match('~__halt_compiler~mis', $string)
            && preg_match('~__halt_compiler\(\s{0,2000}\)\s{0,2000};.*$~mis', $string, $m, PREG_OFFSET_CAPTURE)
        ) {
            $pos = $m[0][1];
            $halt_postfix = $m[0][0];
            $string = substr($string, 0, $pos);
        }
        StringToStreamWrapper::prepare($string);
        $strippedStr = @php_strip_whitespace(StringToStreamWrapper::WRAPPER_NAME . '://');

        if (!$save_length) {
            return $strippedStr . $halt_postfix;
        } else {
            $strippedStr = self::extend_string_with_spaces($string, $strippedStr);
            return $strippedStr . $halt_postfix;
        }
    }

    public static function normalize($string, $save_length = false, &$error = null)
    {
        $search  = [ ' ;', ' =', ' ,', ' .', ' (', ' )', ' {', ' }', '; ', '= ', ', ', '. '
            , '( ', '( ', '{ ', '} ', ' !', ' >', ' <', ' _', '_ ', '< ',  '> ', ' $', ' %', '% '
            , '# ', ' #', '^ ', ' ^', ' &', '& ', ' ?', '? '];
        $replace = [  ';',  '=',  ',',  '.',  '(',  ')',  '{',  '}', ';',  '=',  ',',  '.'
            ,  '(',   ')', '{',  '}',   '!',  '>',  '<',  '_', '_',  '<',   '>',   '$',  '%', '%'
            ,  '#',   '#', '^',   '^',  '&', '&',   '?', '?'];

        $bad_chars = ['配', '内'];
        $string = str_replace($bad_chars, ' ', $string);
        $string = str_replace("\xEF\xBB\xBF", '   ', $string); //BOM

        $string = preg_replace_callback('~\bchr\(\s*([0-9a-fA-FxX\^]+)\s*\)~', function($m) use ($save_length) {
            if (strpos($m[1], '^') !== false) {
                $m[1] = Helpers::calc($m[1]);
            }
            if ($save_length) {
                return str_pad("'" . @chr(intval($m[1], 0)) . "'", strlen($m[0]), ' ');
            } else {
                return "'" . @chr(intval($m[1], 0)) . "'";
            }
        }, $string);
        if (isset($error) && $error === 0 && ($string === null || $string === '')) {
            $error = preg_last_error();
        }

        $string = preg_replace_callback('/\\\\(?:x(?<hex>[a-fA-F0-9]{1,2})|(?<oct>[0-9]{2,3}))/i', function($m) use ($save_length) {
            $is_oct     = isset($m['oct']);
            $full_str   = $m[0];
            $value      = $is_oct ? $m['oct'] : $m['hex'];
            if ($save_length) {
                if ($is_oct) {
                    return str_pad(@chr(octdec($value)), strlen($full_str), ' ');
                }
                return str_pad(chr(@hexdec($value)), strlen($full_str), ' ');
            } else {
                if ($is_oct) {
                    return @chr(octdec($value));
                }
                return @chr(hexdec($value));
            }
        }, $string);
        if (isset($error) && $error === 0 && ($string === null || $string === '')) {
            $error = preg_last_error();
        }

        $pattern = '~%([0-9a-fA-F]{2})~';
        if ($save_length && preg_match('~%25(%[0-9a-fA-F]{2}){2}(%25)?~ms', $string)) {
            $pattern = (isset($m[2]) && $m[2] !== '') ? '~% {0,2}([0-9a-fA-F ]{2,6})~' : '~% {0,2}([0-9a-fA-F]{2})~';
        }
        if (isset($error) && $error === 0 && ($string === null || $string === '')) {
            $error = preg_last_error();
        }

        for ($i = 0; $i < 2; $i++) {
            $string = preg_replace_callback($pattern, function($m) use ($save_length) {
                if ($save_length) {
                    return str_pad(chr(@hexdec($m[1])), strlen($m[0]), ' ');
                } else {
                    return @chr(hexdec($m[1]));
                }
            }, $string);
            if (isset($error) && $error === 0 && ($string === null || $string === '')) {
                $error = preg_last_error();
            }
        }

        $last_char = $string[-1] ?? '';

        if (!$save_length) {
            $string = str_replace('@', '', $string);
            $string = preg_replace('~\s+~msi', ' ', $string);
            $string = str_replace($search, $replace, $string);
            if (in_array($last_char, ["\r", "\n"]) && isset($string[-1]) && $string[-1] !== $last_char) {
                $string .= $last_char;
            }
        }

        $iter = 0;
        $regexpHtmlAmp = '/\&[#\w ]{2,20} {0,2}; {0,2}/i';
        while ($iter < self::MAX_ITERATION && preg_match($regexpHtmlAmp, $string)) {
            $string = preg_replace_callback($regexpHtmlAmp, function ($m) use ($save_length) {
                if ($save_length) {
                    if (strpos($m[0], '  ') !== false) {
                        $m[0] = str_pad(str_replace(' ', '', $m[0]), strlen($m[0]));
                    }
                    $string = $m[0] == '&nbsp;' ? ' ' : $m[0];
                    return str_pad(@html_entity_decode($string, ENT_QUOTES | ENT_HTML5), strlen($m[0]), ' ', STR_PAD_LEFT);
                } else {
                    $string = $m[0] == '&nbsp;' ? ' ' : $m[0];
                    return @html_entity_decode($string, ENT_QUOTES | ENT_HTML5);
                }
            }, $string);
            if (isset($error) && $error === 0 && ($string === null || $string === '')) {
                $error = preg_last_error();
            }
            $iter++;
        }
        if (isset($error) && $error === 0) {
            $error = preg_last_error();
        }

        $string = self::concatenate_strings($string, $save_length);
        if (isset($error) && $error === 0 && ($string === null || $string === '')) {
            $error = preg_last_error();
        }

        $string = preg_replace_callback('~<title[^>]{0,99}>\s*\K(.{0,300}?)(?=<\/title>)~mis', function($m) use ($save_length) {
            if (preg_match('~(?:\w[^\x00-\x7F]|[^\x00-\x7F]\w)~', $m[1])) {
                return self::HomoglyphNormalize($m[1]);
            }
            return $m[1];
        }, $string);
        if (isset($error) && $error === 0 && ($string === null || $string === '')) {
            $error = preg_last_error();
        }

        $string = preg_replace_callback('~<\?\s*p\s*h\s*p~msi', function ($m) {
            return str_pad('<?php', strlen($m[0]), ' ');
        }, $string);

        if (isset($error) && $error === 0 && ($string === null || $string === '')) {
            $error = preg_last_error();
        }

        $string = str_replace(' ', '  ', $string);  //0xc2, 0xa0

        if (!$save_length) {
            $string = str_replace('<?php', '<?php ', $string);
            $string = preg_replace('~\s+~msi', ' ', $string);
            $string = trim($string);
        } else {
            $string = str_replace('<?php', '<?   ', $string);
        }
        if (isset($error) && $error === 0) {
            $error = preg_last_error();
        }

        return $string;
    }

    public static function get_end_of_extended_length($string_normalized, $string_orig, $start_pos)
    {
        if (strlen($string_normalized) == $start_pos + 1) {
            return $start_pos;
        }

        if ($string_orig[$start_pos - 1] === 'c' && $string_orig[$start_pos] === 'h' && $string_orig[$start_pos + 1] === 'r') {
            for ($i = $start_pos + 1, $iMax = strlen($string_orig); $i < $iMax; $i++) {
                if ($string_orig[$i] === ')') {
                    break;
                }
            }
            $start_pos = $i;
        }

        if (
            ($string_orig[$start_pos - 1] === '<' && $string_orig[$start_pos] === '?')
            || ($string_orig[$start_pos + 1] === '/' && $string_orig[$start_pos + 2] === '*')
            || ($string_orig[$start_pos + 1] === '/' && $string_orig[$start_pos + 2] === '/')) {
            return $start_pos;
        }

        for ($i = $start_pos + 1, $iMax = strlen($string_normalized); $i < $iMax; $i++) {
            if ($string_orig[$i] === '\\' || $string_normalized[$i] !== ' ' || $string_orig[$i] === ' ') {
                break;
            }
        }
        return $i - 1;
    }

    public static function get_start_of_extended_length($string_normalized, $string_orig, $start_pos)
    {
        if ($string_orig[$start_pos - 1] === 'c' && $string_orig[$start_pos] === 'h' && $string_orig[$start_pos + 1] === 'r') {
            $start_pos -= 1;
        }

        for ($i = $start_pos - 1; $i > 1; $i--) {
            if ($string_orig[$i] === ' ') {
                continue;
            } else if ($string_orig[$i] === '.' && $string_orig[$i - 1] !== '\\') {
                return $i;
            } else {
                return $start_pos;
            }
        }
        return $start_pos;
    }

    public static function string_pos($string, $needle, $unescape = false)
    {
        $j      = 0;
        $skip   = false;
        $start  = false;
        $end    = 0;
        $last_tag = [false, false];

        $string_strip_whitespace = self::strip_whitespace($string, true);
        $needle = self::strip_whitespace($needle, false);
        $needle = preg_replace('~(?<!\:)//[^?\n]{1,15}(\n?\?>)~msi', '$1', $needle);

        $string = preg_replace_callback('~(<%3f|%253c%3f|%3c%3f)(php)?~msi', function ($m) {
            $ret = (isset($m[2]) && $m[2] !== '') ? '<?php' : '<?';
            return str_pad($ret, strlen($m[0]), ' ');
        }, $string_strip_whitespace);

        $string = preg_replace_callback('~(?:%3f>|%3f%253e|%3f%3e)~msi', function ($m) {
            return str_pad('?>', strlen($m[0]),  ' ', STR_PAD_LEFT);
        }, $string);

        $string = self::normalize($string, true);
        $needle = self::normalize($needle, false);
        $tempString = $string;
        $string = preg_replace_callback('~(?<![\*\\\\])/\*(?:(?:[^\*]|\*(?!\/))*)\*/~', function ($m) {
            return str_repeat(' ', strlen($m[0]));
        }, $string); //php_strip_whitespace don't strip all comments, from xoredStrings type, hack for this
        if (preg_last_error() !== 0) {
            $string = $tempString;
        }
        $tempNeedle = $needle;
        $needle = preg_replace('~(?<![\*\\\\])/\*(([^\*]|\*(?!\/))*)\*/~', '', $needle); //php_strip_whitespace don't strip all comments, from xoredStrings type, hack for this
        if (preg_last_error() !== 0) {
            $needle = $tempNeedle;
        }
        for ($i = 1; $i <= 7; $i++) {
            $string = preg_replace_callback('~(?<![\*\\\\]) {0,' . $i . '}/ {' . $i . '}\* {' . $i . '}(([^\*]| {' . $i . '}\* {' . $i . '}(?!\/))*) {' . $i . '}\* {' . $i . '}/~msi', function ($m) {
                return str_repeat(' ', strlen($m[0]));
            }, $string);
        }

        $string = preg_replace_callback('~% *([\da-f]) *([\da-f])~msi', function ($m) {
            return str_pad(chr(@hexdec($m[1] . $m[2])), strlen($m[0]), ' ');
        }, $string);
        $string = preg_replace_callback('~\\\\  x  ([\da-f])  ([\da-f])  ~msi', function ($m) {
            return str_pad(chr(@hexdec($m[1] . $m[2])), strlen($m[0]), ' ');
        }, $string);

        if ($unescape) {
            $string = self::unescape($string, true);
            $string = self::normalize($string, true);
        }

        $needle = self::concatenate_strings($needle, true);
        $needle = preg_replace('~\s+~msi', '', $needle);

        for ($i = 0, $iMax = strlen($string); $i < $iMax; $i++) {
            if(trim($string[$i]) === '' && @trim($needle[$j]) === '') {
                $string[$i] = $needle[$j] = ' ';
            }
            if ($string[$i] == $needle[$j]) {
                if ($j == 0) {
                    $start = $i;
                } elseif ($j == strlen($needle) - 1) {
                    $start = self::get_start_of_extended_length($string, $string_strip_whitespace, $start);
                    $end = self::get_end_of_extended_length($string, $string_strip_whitespace, $i);
                    return [$start, $end];
                }
                $j++;
            } else {
                $match_php_tag = self::match_shortopen_tag($string, $i, $needle, $j);
                if ($match_php_tag[0] !== false && ($last_tag[0] !== $match_php_tag[0])) {
                    $j = $match_php_tag[0];
                }
                if ($match_php_tag[1] !== false && ($last_tag[1] !== $match_php_tag[1])) {
                    $i = $match_php_tag[1] - 1;
                }
                $last_tag = $match_php_tag;
                if ($match_php_tag[0] !== false || ($match_php_tag[1] !== false && (!empty($last_tag)))) {
                    continue;
                }
                $skip = self::need_skip($string, $i);
                if ($skip !== false && $start !== false) {
                    $i = $skip - 1;
                } else {
                    $j = 0;
                }
            }
        }
        return false;
    }

    private static function concatenate_strings($string, $save_length)
    {
        $string = preg_replace_callback('/[\'"]\s*?[\+\.]+\s*?[\'"]/smi', function($m) use ($save_length) {
            if ($save_length) {
                return str_repeat(' ', strlen($m[0]));
            } else {
                return '';
            }
        }, $string);
        return $string;
    }

    private static function HomoglyphNormalize($str)
    {
        if (!is_array(self::$confusables)) {
            self::$confusables = @unserialize(@base64_decode(self::$confusables));
        }
        return str_replace(array_keys(self::$confusables), array_values(self::$confusables), $str);
    }

    private static function extend_string_with_spaces($string, $strippedStr)
    {
        $strippedStr = str_replace('<?php  ', '<?php ', $strippedStr);

        $in_comment_ml = false;
        $in_comment_nl = false;
        $iMax = strlen($string);
        $jMax = strlen($strippedStr);

        if ($iMax === $jMax) {
            return $string;
        }

        $newStr = '';
        $j = 0;

        for ($i = 0; $i < $iMax; $i++) {
            if (isset($strippedStr[$j]) && trim($string[$i]) === trim($strippedStr[$j]) && !$in_comment_ml && !$in_comment_nl) {
                $newStr .= $string[$i];
                $j++;
            } else if ((trim($string[$i]) === '/' && trim($string[$i + 1]) === '*') && !$in_comment_ml && !$in_comment_nl) {
                $in_comment_ml = true;
                $newStr .= '  ';
                $i++;
            } else if ((trim($string[$i]) === '*' && trim($string[$i + 1]) === '/') && $in_comment_ml) {
                $in_comment_ml = false;
                $newStr .= '  ';
                $i++;
            } else if ((trim($string[$i]) === '/' && trim($string[$i + 1]) === '/') && !$in_comment_nl && !$in_comment_ml) {
                $in_comment_nl = true;
                $newStr .= '  ';
                $i++;
            } else if ((trim($string[$i]) === '#') && !$in_comment_nl && !$in_comment_ml) {
                $in_comment_nl = true;
                $newStr .= ' ';
            } else if (($string[$i] === "\n" || $string[$i] === "\r") && $in_comment_nl) {
                $in_comment_nl = false;
                $newStr .= ' ';
            } else if (isset($string[$i]) && isset($string[$i + 1]) && $string[$i] === '?' && $string[$i + 1] === '>' && $in_comment_nl) {
                $in_comment_nl = false;
                $newStr .= $string[$i];
                $j++;
            } else if ((isset($strippedStr[$j]) && trim($string[$i]) !== trim($strippedStr[$j])) && ($in_comment_ml || $in_comment_nl)) {
                $newStr .= ' ';
            } else {
                $newStr .= ' ';
            }
        }
        return $newStr;
    }

    /**
     * @param array $confusables
     */
    public static function setConfusables(array $confusables)
    {
        self::$confusables = $confusables;
    }
}

if (!defined('FUNC_ICONV')) {
    define('FUNC_ICONV', function_exists('iconv') && is_callable('iconv'));
}
class Encoding
{
    // Unicode BOM is U+FEFF, but after encoded, it will look like this.

    const UTF32_BIG_ENDIAN_BOM = "\x00\x00\xFE\xFF";
    const UTF32_LITTLE_ENDIAN_BOM = "\xFF\xFE\x00\x00";
    const UTF16_BIG_ENDIAN_BOM = "\xFE\xFF";
    const UTF16_LITTLE_ENDIAN_BOM = "\xFF\xFE";
    const UTF8_BOM = "\xEF\xBB\xBF";

    public static function detectUTFEncoding($text)
    {
        $first2 = substr($text, 0, 2);
        $first3 = substr($text, 0, 3);
        $first4 = substr($text, 0, 4);

        if ($first3 == self::UTF8_BOM) {
            return 'UTF-8';
        } elseif ($first4 == self::UTF32_BIG_ENDIAN_BOM) {
            return 'UTF-32BE';
        } elseif ($first4 == self::UTF32_LITTLE_ENDIAN_BOM) {
            return 'UTF-32LE';
        } elseif ($first2 == self::UTF16_BIG_ENDIAN_BOM) {
            return 'UTF-16BE';
        } elseif ($first2 == self::UTF16_LITTLE_ENDIAN_BOM) {
            return 'UTF-16LE';
        }
        return false;
    }

    public static function iconvSupported()
    {
        return FUNC_ICONV;
    }

    public static function convertToCp1251($from, $str)
    {
        $ret = @iconv($from, 'CP1251//TRANSLIT', $str);
        if ($ret === false) {
            $ret = @iconv($from, 'CP1251//IGNORE', $str);
        }
        return $ret;
    }

    public static function convertToUTF8($from, $str)
    {
        return @iconv($from, 'UTF-8//IGNORE', $str);
    }
}


/**
 * Class RapidScanStorageRecord.
 *
 * Implements db record for RapidScan
 */
class RapidScanStorageRecord extends FileInfo
{
    const WHITE                  = 1;  // white listed file in cloud db
    const WHITE_EXTENDED         = 12; // white extended listed file in cloud db
    const BLACK                  = 6;  // black listed file in cloud db
    const DUAL_USE               = 2;  // dual used listed file in cloud db
    const UNKNOWN                = 3;  // unknown file --> file not listed in cloud db
    const HEURISTIC              = 4;  // detected as heuristic
    const CONFLICT               = 5;  // we have filename hashing conflict for this file
    const NEWFILE                = 0;  // this is a new file (or content changed)
    const RX_MALWARE             = 7;  // detected as malware by rx scan
    const RX_SUSPICIOUS          = 8;  // detected as suspicious by rx scan
    const RX_SUSPICIOUS_EXTENDED = 13;  //detected as suspicious_extended by rx scan
    const RX_GOOD                = 9;  // detected as good by rx scan
    const RX_SKIPPED_SMART       = 10; // skipped by smart scan
    const RX_SKIPPED_DIE         = 11; // skipped by smart scan

    /**
     * @var string;
     */
    protected $filename;
    /**
     * @var
     */
    protected $size;
    /**
     * @var int
     */
    private $key;
    /**
     * @var int
     */
    private $scanned_ts;
    /**
     * @var int
     */
    private $updated_ts;
    /**
     * @var int
     */
    private $verdict;
    /**
     * @var string
     */
    protected $sha2;
    /**
     * @var string
     */
    private $signature = '';
    /**
     * @var string
     */
    private $snippet = '';

    /**
     * RapidScanStorageRecord constructor.
     * @param $key
     * @param $scanned_ts
     * @param int $verdict
     * @param $sha2
     * @param string $signature
     */
    public function __construct($key, $scanned_ts, $verdict, $sha2, $signature, $filename, $snippet, $updated_ts = 0, $size = 0)
    {
        $this->filename     = $filename;
        $this->key          = $key;
        $this->scanned_ts   = $scanned_ts;
        $this->verdict      = $verdict;
        $this->sha2         = $sha2;
        $this->sha256       = bin2hex($sha2);
        $this->snippet      = $snippet;
        $this->updated_ts   = $updated_ts;
        $this->size         = $size;

        if ($this->sha256 === '') {
            $this->sha256 = 0;
        }

        if ($signature !== '') {
            $this->signature = self::padTo10Bytes($signature);
        }
    }

    /**
     * Create db storage record from file
     * @param $filename
     * @param string $signature
     * @param int $verdict
     * @return RapidScanStorageRecord
     * @throws Exception
     */
    public static function fromFile($file, $signature = '', $verdict = self::UNKNOWN, $snippet = '')
    {
        $filename = '';
        $stat = [];
        $inode = 0;
        $ctime = 0;
        $mtime = 0;
        $size  = 0;

        if (is_string($file) && file_exists($file)) {
            $filename = $file;
            $stat = stat($filename);
            $inode = $stat['ino'];
            $ctime = $stat['ctime'];
            $mtime = $stat['mtime'];
            $size  = $stat['size'];
        } else if ($file instanceof FileInfo && $file->file_exists()){
            $filename = $file->getFilename();
            $inode = $file->getInode();
            $ctime = $file->getCreated();
            $mtime = $file->getModified();
            $size  = $file->getSize();
        }
        if (!file_exists($filename)) {
            throw new Exception('File \'' . $filename . '\' doesn\'t exists.');
        }

        $key = self::getDBKey($filename, $inode);
        $scanned_ts = time();
        $updated_ts = max($mtime, $ctime);
        $sha2 = '';
        if (!$verdict) {
            $verdict = self::NEWFILE;
        }
        if ($signature !== '') {
            $signature = self::padTo10Bytes($signature);
        }
        return new self($key, $scanned_ts, $verdict, $sha2, $signature, $filename, $snippet, $updated_ts, $size);
    }

    private static function getDBKey($filename, $inode)
    {
        // TODO: You need to calculate hash so that its integer value does not go beyond 9,223,372,036,854,775,807
        // filename_hash is limited to 2,147,483,647 and $inode is not limited to anything.
        // And starting from $inode >= 1 billion there may be a chance of integer overflow
        return (int)((string)self::fileNameHash($filename) . (string)$inode);
    }

    /**
     * @param $array
     * @return RapidScanStorageRecord
     */
    public static function fromArray($array)
    {
        $key        = $array['key'];
        $scanned_ts = $array['scanned_ts'];
        $sha2       = hex2bin($array['sha2']);
        $verdict    = $array['verdict'];
        $signature  = $array['signature'];
        return new self($key, $scanned_ts, $verdict, $sha2, $signature, '', '');
    }

    /**
     * @return array
     */
    public function toArray()
    {
        $array['key']           = $this->key;
        $array['scanned_ts']    = $this->scanned_ts;
        $array['verdict']       = $this->verdict;
        $array['sha2']          = bin2hex($this->sha2);
        $array['signature']     = $this->signature;
        return $array;
    }

    /**
     * @param $value
     * @return int
     */
    public static function getTsFromValue($value)
    {
        $timestamp  = unpack("l", substr($value, 0, 8));
        $scanned_ts = array_pop($timestamp);
        return $scanned_ts;
    }

    /**
     * @param $value
     * @return int
     */
    public static function getVerdictFromValue($value)
    {
        return (int)ord($value[8]);
    }

    public static function getVerdictNameFromValue($value)
    {
        switch ($value) {
            case self::WHITE:
                return 'WHITE';
            case self::WHITE_EXTENDED:
                return 'WHITE_EXTENDED';
            case self::BLACK:
                return 'BLACK';
            case self::DUAL_USE:
                return 'DUAL_USE';
            case self::UNKNOWN:
                return 'UNKNOWN';
            case self::HEURISTIC:
                return 'HEURISTIC';
            case self::CONFLICT:
                return 'CONFLICT';
            case self::NEWFILE:
                return 'NEWFILE';
            case self::RX_MALWARE:
                return 'RX_MALWARE';
            case self::RX_SUSPICIOUS:
                return 'RX_SUSPICIOUS';
            case self::RX_GOOD:
                return 'RX_GOOD';
            case self::RX_SKIPPED_SMART:
                return 'RX_SKIPPED_SMART';
            case self::RX_SKIPPED_DIE:
                return 'RX_SKIPPED_DIE';
        }
        return '';
    }

    /**
     * @return array
     */
    public function calcSha2()
    {
        $this->sha2 = hex2bin($this->getSha256());
    }

    /**
     * @param $verdict
     */
    public function setVerdict($verdict)
    {
        $this->verdict = $verdict;
    }

    /**
     * @return int
     */
    public function getKey()
    {
        return $this->key;
    }

    /**
     * @param $signature
     */
    public function setSignature($signature)
    {
        if ($signature!=='') {
            $this->signature = self::padTo10Bytes($signature);
        }
    }

    /**
     * @param $ts
     */
    public function setScannedTs($ts)
    {
        $this->scanned_ts = $ts;
    }

    /**
     * Unpack bytestring $value to RapidScanStorageRecord
     * @param $hash
     * @param $value
     * @return RapidScanStorageRecord
     */
    public static function unpack($hash, $value)
    {
        // pack format
        // 8 bytes timestamp
        // 1 byte verdict
        // 32 bytes sha2
        // 10 bytes signature (only for BLACK, DUAL_USE, RX_MALWARE, RX_SUSPICIOUS)
        // note - we will hold bloomfilter for file later on for those that are WHITE
        // it will be used to detect installed apps

        $signature = '';
        $timestamp = unpack("l", substr($value, 0, 8));
        $scanned_ts = array_pop($timestamp);
        $verdict = $value[8];
        $verdict = (int)ord($verdict);
        $sha2 = substr($value, 9, 32);
        if (in_array($verdict, array(self::BLACK, self::DUAL_USE, self::RX_MALWARE, self::RX_SUSPICIOUS))) {
            $signature = substr($value, 41, 10);  # 10 bytes signature string
        }
        if (strlen($value) > 51) {
            $snippet = substr($value, 51);
        } else {
            $snippet = '';
        }

        if ($verdict === RapidScanStorageRecord::CONFLICT) { // Do not use sha256 from Rapid DB bacause this entry might be wrong
            $sha2 = '';
        }

        return new self($hash, $scanned_ts, $verdict, $sha2, $signature, '', $snippet);
    }

    /**
     * Pack RapidScanStorageRecord to bytestring to save in db
     * @return string
     */
    public function pack()
    {
        $signature = '';
        if (strlen($this->signature) > 0) {
            $signature = $this->signature;
        }
        return (($this->scanned_ts < 0) ? str_pad(pack("l", $this->scanned_ts), 8, "\xff") : str_pad(pack("l", $this->scanned_ts), 8, "\x00")) . pack("c", $this->verdict) . $this->sha2 . $signature . $this->snippet;
    }

    /**
     * Hash function for create hash of full filename to store in db as key
     * @param $str
     * @return int
     */
    private static function fileNameHash($str)
    {
        for ($i = 0, $h = 5381, $len = strlen($str); $i < $len; $i++) {
            $h = (($h << 5) + $h + ord($str[$i])) & 0x7FFFFFFF;
        }
        return $h;
    }

    /**
     * Convert string to utf-8 and fitting/padding it to 10 bytes
     * @param $str
     * @return string
     */
    private static function padTo10Bytes($str)
    {
        # convert string to bytes in UTF8, and add 0 bytes to pad it to 10
        # cut to 10 bytes of necessary
        $str = utf8_encode($str);
        $len = strlen($str);
        if ($len < 10) {
            $str = str_pad($str, 10, "\x00");
        } elseif ($len > 10) {
            $str = substr($str, 0, 10);
        }
        return $str;
    }

    /**
     * @return int
     */
    public function getScannedTs()
    {
        return $this->scanned_ts;
    }

    /**
     * @return int
     */
    public function getUpdatedTs()
    {
        return $this->updated_ts;
    }

    /**
     * @return int
     */
    public function getVerdict()
    {
        return $this->verdict;
    }

    /**
     * @return string
     */
    public function getSha2()
    {
        return $this->sha2;
    }

    /**
     * @return string
     */
    public function getSignature()
    {
        return $this->signature;
    }

    /**
     * @return string
     */
    public function getFilename()
    {
        return $this->filename;
    }

    /**
     * @return int
     */
    public function getSize()
    {
        return $this->size;
    }

    /**
     * @param $filename
     */
    public function setFilename($filename)
    {
        $this->filename = $filename;
        $stat = stat($filename);
        $this->size = $stat['size'];
        $this->updated_ts = max($stat['mtime'], $stat['ctime']);
    }

    /**
     * @return string
     */
    public function getSnippet()
    {
        return $this->snippet;
    }

    /**
     * @param $filename
     */
    public function setSnippet($snippet)
    {
        $this->snippet = $snippet;
    }
}


/**
 * Interface RapidScanStorage implements class to work with RapidScan db
 * @package Aibolit\Lib\Scantrack
 */
class RapidScanStorage
{
    const DB_VERSION = '1.0';

    protected $db_ver = '0';
    /**
     * @var string
     */
    protected $old_dir;
    /**
     * @var string
     */
    protected $new_dir;
    /**
     * @var resource
     */
    protected $new_db;
    /**
     * @var resource
     */
    protected $old_db;
    /**
     * @var resource
     */
    private $wb;
    /**
     * @var int
     */
    public $batch_count;

    /**
     * RapidScanStorage constructor.
     * @param $base - folder where db located
     */
    public function __construct($base)
    {
        if(!is_dir($base) && !mkdir($base, 0750) && !is_dir($base)) {
            throw new Exception(sprintf('Directory "%s" was not created', $base));
        }

        $this->old_dir = $base . '/current';
        $this->new_dir = $base . '/new';
        $options = [
            'create_if_missing' => true,
            'compression'       => LEVELDB_NO_COMPRESSION,
            'paranoid_checks'   => true
        ];
        $this->db_ver = $this->getDbVersion();
        if ($this->needMigrate()) {
            $this->migrateDb();
        }

        $this->new_db = new LevelDBWrap($this->new_dir, $options);

        try {
            $this->old_db = new LevelDBWrap($this->old_dir, $options);
        } catch (Exception $e) {
            self::rmtree($this->old_dir);
            $this->old_db = new LevelDBWrap($this->old_dir, $options);
        }

        $this->storeVersion();

        $this->wb = NULL;  // will be use to track writing to batch
        $this->batch_count = 0;
    }

    /**
     * @param RapidScanStorageRecord $record
     * @return bool
     */
    public function put(RapidScanStorageRecord $record)
    {
        $this->startBatch();
        $this->batch_count++;
        $value = $this->wb->put(pack('P', $record->getKey()), $record->pack());
        return $value;
    }

    /**
     * @param $hash
     * @return bool|RapidScanStorageRecord
     */
    public function getNew($hash)
    {
        $value = $this->new_db->get(pack('P', $hash));
        if($value) {
            $return = RapidScanStorageRecord::unpack($hash, $value);
            return $return;
        }
        return false;
    }

    /**
     * @param $hash
     * @return bool|RapidScanStorageRecord
     */
    public function getOld($hash)
    {
        $value = $this->old_db->get(pack('P', $hash));
        if($value) {
            $return = RapidScanStorageRecord::unpack($hash, $value);
            return $return;
        }
        return false;
    }

    /**
     * @param $hash
     * @return bool
     */
    public function delete($hash)
    {
        $return = $this->new_db->delete(pack('P', $hash));
        return $return;
    }

    /**
     * @param bool $leave
     * Close db, remove old db, move new to a new space
     * if $leave == true leave old folder, remove new (for tests)
     */
    public function finish($leave = false)
    {
        $this->old_db->close();
        $this->flushBatch();
        $this->new_db->close();
        if ($leave) {
            self::rmtree($this->new_dir);
        } else {
            self::rmtree($this->old_dir);
            rename($this->new_dir, $this->old_dir);
        }
    }

    /**
     * Start batch operations
     */
    private function startBatch()
    {
        if(!$this->wb) {
            $this->wb = new LevelDBWriteBatch();
            $this->batch_count = 0;
        }
    }

    /**
     *  write all data in a batch, reset batch
     */
    public function flushBatch()
    {
        if ($this->wb) {
            $this->new_db->write($this->wb);
            $this->batch_count = 0;
            $this->wb = NULL;
        }
    }
    /**
     * Helper function to remove folder tree
     * @param $path
     */
    public static function rmTree($path)
    {
        if (is_dir($path)) {
            foreach (scandir($path) as $name) {
                if (in_array($name, ['.', '..'])) {
                    continue;
                }
                $subpath = $path . DIRECTORY_SEPARATOR . $name;
                self::rmTree($subpath);
            }
            rmdir($path);
        } else {
            unlink($path);
        }
    }

    public function getOldTsForRescan($freq, $limit)
    {
        $freq           = $freq == 0 ? 1 : $freq;
        $i              = 0;
        $k              = 0;
        $timestamps     = [];
        $first_key      = false;
        $rewind_cnt     = 0;
        $it = $this->old_db->getIterator();

        for ($it->seek(random_bytes(1)), $i = 0; $i <= $limit; $it->next()) {
            if (!$it->valid()) {
                if ($rewind_cnt > 2) { // Empty base
                    break;
                }
                $it->rewind();
                $rewind_cnt++;
            }

            $key = $it->key();
            if ($first_key === false) {
                $first_key = $key;
            } elseif ($first_key === $key) {
                break;
            }
            $value = $it->current();
            if (!$value) {
                continue;
            }

            if (in_array(RapidScanStorageRecord::getVerdictFromValue($value)
                , [
                    RapidScanStorageRecord::RX_GOOD,
                    RapidScanStorageRecord::RX_SUSPICIOUS_EXTENDED
                ]
            )) {
                $i++;
                $timestamps[] = RapidScanStorageRecord::getTsFromValue($value);
            }
        }
        unset($it);
        sort($timestamps, SORT_NUMERIC);
        if ($i < $limit) {
            $limit = $i;
            $freq = 1;
        }
        $k = (int)($limit / $freq) - 1;
        return isset($timestamps[$k]) ? $timestamps[$k] : false;
    }

    public function getVersion()
    {
        return $this->db_ver;
    }

    private function getDbVersion()
    {
        if (!file_exists($this->old_dir . '/version.txt')) {
            return '0';
        }
        return trim(file_get_contents($this->old_dir . '/version.txt'));
    }

    private function needMigrate()
    {
        if ($this->db_ver === '0') {
            return true;
        }
        return false;
    }

    private function migrateDb()
    {
        $options = [
            'create_if_missing' => true,
            'compression'       => LEVELDB_NO_COMPRESSION,
            'paranoid_checks'   => true
        ];
        $this->new_db = new LevelDBWrap($this->new_dir, $options);
        try {
            $this->old_db = new LevelDBWrap($this->old_dir, $options);
        } catch (Exception $e) {
            self::rmtree($this->old_dir);
            $this->old_db = new LevelDBWrap($this->old_dir, $options);

            $this->storeVersion();
            $this->finish();

            return;
        }

        $this->wb = NULL;  // will be use to track writing to batch
        $this->batch_count = 0;
        $this->startBatch();
        foreach($this->old_db->getIterator() as $key => $value) {
            $this->new_db->put(pack('P', (int)$key), $value);
            $this->batch_count++;
            if ($this->batch_count > 1000) {
                $this->flushBatch();
            }
        }
        $this->flushBatch();
        $this->storeVersion();
        $this->finish();
    }

    private function storeVersion()
    {
        file_put_contents($this->new_dir . '/version.txt', RapidScanStorage::DB_VERSION);
    }
}


/**
 * For work with Cloud Assisted Storage
 * @package Aibolit\Lib\Scantrack
 */
class CloudAssistedStorage
{
    private $db_filepath = '';

    public function __construct($folder)
    {
        if(!is_dir($folder) && !mkdir($folder, 0750) && !is_dir($folder)) {
            throw new Exception(sprintf('Directory "%s" was not created', $folder));
        }
        $this->db_filepath = $folder . DIRECTORY_SEPARATOR . 'cloud_assisted_verdicts.json';
    }

    public function getList()
    {
        if (!file_exists($this->db_filepath)) {
            return [];
        }
        $content = file_get_contents($this->db_filepath);
        if (!$content) {
            return [];
        }
        $list = json_decode($content, true);
        if (!$list || !is_array($list)) {
            return [];
        }
        return $list;
    }

    public function putList($list)
    {
        file_put_contents($this->db_filepath, json_encode($list));
    }

    public function delete()
    {
        if (!file_exists($this->db_filepath)) {
            return;
        }
        unlink($this->db_filepath);
    }
}


/**
 * This is actual class that does account level scan
 * and remembers the state of scan
 * Class RapidAccountScan
 * @package Aibolit\Lib\Scantrack
 */
class RapidAccountScan
{
    const RESCAN_ALL        = 0; // mode of operation --> rescan all files that are not white/black/dual_use using cloud scanner & regex scanner
    const RESCAN_NONE       = 1; // don't re-scan any files that we already scanned
    const RESCAN_SUSPICIOUS = 2; // only re-scan suspicious files using only regex scanner

    const MAX_BATCH     = 1000; // max files to write in a db batch write
    const MAX_TO_SCAN   = 1000; // max files to scan using cloud/rx scanner at a time

    private $db;
    private $cas_db;
    private $cas_list = [];
    private $vars = null;
    private $scanlist;
    private $collisions;
    private $processedFiles;
    private $rescan_count = 0;
    private $rescan_rx_good_count = 0;
    private $counter = 0;
    private $str_error = false;
    private $scanner = null;
    private $freq;
    private $old_rescan_ts = false;
    private $ca = null;

    /**
     * RapidAccountScan constructor.
     * @param RapidScanStorage $rapidScanStorage
     */
    public function __construct(Scanner $scanner, RapidScanStorage $rapidScanStorage, CloudAssistedRequest $ca, CloudAssistedStorage $cloudAssistedStorage, Variables &$vars, int $counter = 0)
    {
        $this->db = $rapidScanStorage;
        $this->cas_db = $cloudAssistedStorage;
        $this->ca = $ca;
        $this->vars = $vars;
        $this->scanlist = [];
        $this->collisions = [];
        $this->processedFiles = 0;
        $this->counter = $counter;
        $this->scanner = $scanner;
        $this->freq = $vars->options['rapid-scan-rescan-frequency'] ?? false;

        if ($this->freq !== false) {
            $this->old_rescan_ts = $this->db->getOldTsForRescan($this->freq, 1000);
        }
    }

    /**
     * Get str error
     */
    public function getStrError()
    {
        return $this->str_error;
    }

    /**
     * Get count of rescan(regexp) files
     */
    public function getRescanCount()
    {
        return $this->rescan_count;
    }

    /**
     * Get count of rescan(regexp) RX_GOOD files
     */
    public function getRescanRxGoodCount()
    {
        return $this->rescan_rx_good_count;
    }

    /**
     * placeholder for actual regex scan
     * return RX_GOOD, RX_MALWARE, RX_SUSPICIOUS and signature from regex scaner
     * if we got one
     */
    private function regexScan(FileInfo $fileinfo, $i, $vars)
    {
        $this->rescan_count++;
        if (defined('CLS_PROGRESS')) {
            Progress::setCurrentFile($fileinfo->getFilename());
            Progress::setFilesTotal($vars->foundTotalFiles);
            Progress::setDetected([
                Progress::DETECT_PHP => count($vars->criticalPHP),
                Progress::DETECT_JS => count($vars->criticalJS),
                Progress::DETECT_SUS => count($vars->warningPHP),
                Progress::DETECT_PHS => count($vars->phishing),
            ]);

            Progress::updateScan(++$this->processedFiles);
        }
        $return = $this->scanner->QCR_ScanFile($fileinfo, $vars, null, $i, false);
        return $return;
    }

    /**
     * we will have batch of new files that we will scan
     * here we will write them into db once we scanned them
     * we need to check that there is no conflicts/collisions
     * in names, for that we check for data in db if such filename_hash
     * already exists, but we also keep set of filename_hashes of given
     * batch, to rule out conflicts in current batch as well
     */
    private function writeNew()
    {
        $this->collisions = [];
        foreach ($this->scanlist as $fileinfo) {
            if (in_array($fileinfo->getKey(), $this->collisions) || $this->db->getNew($fileinfo->getKey())) {
                $fileinfo->setVerdict(RapidScanStorageRecord::CONFLICT);
            }
            $this->collisions [] = $fileinfo->getKey();
            $this->db->put($fileinfo);
        }
    }

    /**
     * given a batch do cloudscan
     * @throws \Exception
     */
    private function doCloudScan()
    {
        if (count($this->scanlist) <= 0) {
            return;
        }

        $index_table    = [];
        $blackfiles     = [];
        $sha_list       = [];

        foreach ($this->scanlist as $i => $fileinfo) {
            $fileinfo->setVerdict(RapidScanStorageRecord::UNKNOWN);
            if ($this->isSkipCA($fileinfo)) {
                $this->caAddStatsItem('skipped', $fileinfo);
                continue;
            }
            $sha_list[] = bin2hex($fileinfo->getSha2());
            $index_table[] = $i;
        }

        $white_raw              = [];
        $black_raw              = [];
        $verdicts_black_raw     = [];
        $injection_raw          = [];
        $verdicts_injection_raw = [];
        $white_extended_raw     = [];

        try {
            list(
                $white_raw,
                $white_extended_raw,
                $black_raw,
                $verdicts_black_raw,
                $injection_raw,
                $verdicts_injection_raw
            ) = $this->ca->checkFilesByHash($sha_list);
        } catch (\Exception $e) {
            $this->str_error = $e->getMessage();
        }

        $white_merged = array_merge($white_raw, $white_extended_raw);
        $dual = array_intersect($white_merged, array_merge($black_raw, $injection_raw));
        $black_raw = array_diff($black_raw, $white_merged);
        $injection_raw = array_diff($injection_raw, $white_merged);

        foreach ($white_raw as $index) {
            $this->scanlist[$index_table[$index]]->setVerdict(RapidScanStorageRecord::WHITE);
            $this->caAddStatsItem('white', $this->scanlist[$index_table[$index]]);
        }
        foreach ($white_extended_raw as $index) {
            $this->scanlist[$index_table[$index]]->setVerdict(RapidScanStorageRecord::WHITE_EXTENDED);
            $this->caAddStatsItem('white_extended', $this->scanlist[$index_table[$index]]);
        }
        $signatures_db = [];
        foreach ($black_raw as $i => $index) {
            $this->scanlist[$index_table[$index]]->setVerdict(RapidScanStorageRecord::BLACK);
            $signature      = isset($verdicts_black_raw[$i]) ? $verdicts_black_raw[$i] : '';
            $signature_id   = 'c_' . hash('crc32', $signature);
            $signatures_db[$signature_id] = $signature;
            $this->scanlist[$index_table[$index]]->setSignature($signature_id);
            $blackfiles[$this->scanlist[$index_table[$index]]->getFilename()] = [
                'ts'        => time(),
                'sn'        => $signature,
                'ras_sigid' => $signature_id,
                'fi'        => $this->scanlist[$index_table[$index]],
            ];
            $this->caAddStatsItem('black', $this->scanlist[$index_table[$index]]);
        }
        foreach ($injection_raw as $i => $index) {
            $this->scanlist[$index_table[$index]]->setVerdict(RapidScanStorageRecord::BLACK);
            $signature      = isset($verdicts_injection_raw[$i]) ? $verdicts_injection_raw[$i] : '';
            $signature_id   = 'c_' . hash('crc32', $signature);
            $signatures_db[$signature_id] = $signature;
            $this->scanlist[$index_table[$index]]->setSignature($signature_id);
            $blackfiles[$this->scanlist[$index_table[$index]]->getFilename()] = [
                'ts'        => time(),
                'sn'        => $signature,
                'ras_sigid' => $signature_id,
                'fi'        => $this->scanlist[$index_table[$index]],
            ];
            $this->caAddStatsItem('injection', $this->scanlist[$index_table[$index]]);
        }

        $signatures_list = $this->cas_db->getList();
        foreach ($signatures_db as $hash => $sig) {
            $this->cas_list[$hash] = $sig;
            if (isset($signatures_list[$hash])) {
                continue;
            }
            $signatures_list[$hash] = $sig;
        }
        $this->cas_db->putList($signatures_list);

        foreach ($dual as $index) {
            $this->scanlist[$index_table[$index]]->setVerdict(RapidScanStorageRecord::DUAL_USE);
            $this->scanlist[$index_table[$index]]->setSignature('DUAL'); //later on we will get sig info from cloud
            $this->caAddStatsItem('dual_use', $this->scanlist[$index_table[$index]]);
        }

        // we can now update verdicts in batch for those that we know
        //add entries to report, when needed

        $this->vars->blackFiles = array_merge($this->vars->blackFiles, $blackfiles);

        unset($white_raw, $black_raw, $injection_raw, $dual, $sha_list, $index_table);
    }

    /**
     * regex scan a single file, add entry to report if needed
     * @param $fileInfo
     * @param $i
     */
    private function _regexScan($fileInfo, $i, $vars)
    {
        $regex_res = $this->regexScan($fileInfo, $i, $vars);
        if (!is_array($regex_res)) {
            return;
        }

        list($result, $sigId, $snippet) = $regex_res;
        $fileInfo->setVerdict($result);
        $fileInfo->setScannedTs(time());
        if ($result !== RapidScanStorageRecord::RX_GOOD
            || $result !== RapidScanStorageRecord::RX_SKIPPED_SMART
            || $result !== RapidScanStorageRecord::RX_SKIPPED_DIE
        ) {
            $fileInfo->setSignature($sigId);
            $fileInfo->setSnippet($snippet);
        }
    }

    /**
     * regex scan batch of files.
     */
    private function doRegexScan($vars)
    {
        foreach ($this->scanlist as $i => $fileinfo) {
            if (!in_array($fileinfo->getVerdict(), [
                RapidScanStorageRecord::WHITE,
                RapidScanStorageRecord::WHITE_EXTENDED,
                RapidScanStorageRecord::BLACK,
                RapidScanStorageRecord::DUAL_USE
            ])
            ) {
                if (!$this->isSkipCA($fileinfo)) {
                    $this->caAddStatsItem(true, $fileinfo);
                }
                $this->_regexScan($fileinfo, $i, $vars);
                $fileinfo->cleanContentCache();
            }
        }
    }

    private function processScanList($vars)
    {
        $this->doCloudScan();
        $this->doRegexScan($vars);
        $this->writeNew();
        $this->scanlist = [];
    }

    private function scanFile($filename, $rescan, $i, $vars)
    {
        $rxgood_rescan = false;
        $file = new FileInfo($filename, $i, $vars->hashtable);

        if (!$file->file_exists()) {
            return false;
        }
        $file = RapidScanStorageRecord::fromFile($file);

        $old_value = $this->db->getOld($file->getKey());
        $old_scanned = 0;
        if ($old_value) {
            $old_scanned = $old_value->getScannedTs();
            if ($file->getUpdatedTs() <= $old_scanned) {
                $file = $old_value;
                $file->setFilename($filename);
            }
        }

        if ($file->getVerdict() === RapidScanStorageRecord::UNKNOWN
            || $file->getVerdict() === RapidScanStorageRecord::CONFLICT
            || $file->getUpdatedTs() > $old_scanned
        ) {
            // these files have changed, or we know nothing about them, lets re-calculate sha2
            // and do full scan
            $file->calcSha2();
            $this->rsAddStatsItem(true, $file);
            $file->setVerdict(RapidScanStorageRecord::NEWFILE);
            $this->scanlist[$i] = $file;
        } elseif ($file->getVerdict() === RapidScanStorageRecord::BLACK) {
            //these files have not changed, but need to be reported as they are on one of the lists
            $signature_id = $file->getSignature();
            $signature = $this->cas_list[$signature_id] ?? '';
            $this->vars->blackFiles[$filename] = [
                'ts' => time(),
                'sn' => $signature,
                'ras_sigid' => $signature_id,
                'fi' => $file,
            ];
            $this->db->put($file);
            $this->rsAddStatsItem(false, $file);
        } elseif ($file->getVerdict() === RapidScanStorageRecord::DUAL_USE) {
            $this->db->put($file);
            $this->rsAddStatsItem(false, $file);
        } elseif (($rescan === self::RESCAN_SUSPICIOUS || $rescan === self::RESCAN_NONE)
            && $file->getVerdict() === RapidScanStorageRecord::RX_MALWARE
        ) {
            //these files were detected as rx malware before, let's report them
            $sigId = trim($file->getSignature(), "\0");

            if (isset($sigId) && isset($vars->signs->_Mnemo[$sigId])) {
                $snippet = $file->getSnippet();
                if (strtolower($file->getExtension()) === 'js') {
                    $vars->criticalJS[] = $i;
                    $vars->criticalJSFragment[] = $snippet;
                    $vars->criticalJSSig[] = $sigId;
                } else {
                    $vars->criticalPHP[] = $i;
                    $vars->criticalPHPFragment[] = $snippet;
                    $vars->criticalPHPSig[] = $sigId;
                }
                $this->scanner->AddResult($file, $i, $vars);
                $this->db->put($file);
                $this->rsAddStatsItem(false, $file);
            } else {
                $this->scanlist[$i] = $file;
                $this->rsAddStatsItem(true, $file);
            }
        } elseif ($rescan === self::RESCAN_NONE && AI_EXTRA_WARN
            && $file->getVerdict() === RapidScanStorageRecord::RX_SUSPICIOUS
        ) {
            //these files were detected as rx suspicious before, let's report them
            $sigId = trim($file->getSignature(), "\0");

            if (isset($sigId) && isset($vars->signs->_Mnemo[$sigId])) {
                $snippet = $file->getSnippet();
                $vars->warningPHP[] = $i;
                $vars->warningPHPFragment[] = $snippet;
                $vars->warningPHPSig[] = $sigId;
                $this->scanner->AddResult($file, $i, $vars);
                $this->db->put($file);
                $this->rsAddStatsItem(false, $file);
            } else {
                $this->scanlist[$i] = $file;
                $this->rsAddStatsItem(true, $file);
            }
        } elseif ($rescan === self::RESCAN_NONE
            && $file->getVerdict() === RapidScanStorageRecord::RX_SUSPICIOUS_EXTENDED) {
            //these files were detected as rx suspicious_extended before, let's report them
            $vars->suspiciousExt[] = $i;
            $vars->suspiciousExtSig[] = 'SMW-ESUS-' . $file->getSignature();
            $vars->suspiciousExtFrag[] = $file->getSnippet();
            $this->scanner->AddResult($file, $i, $vars);
            $this->db->put($file);
            $this->rsAddStatsItem(false, $file);
        } elseif ((
                $rescan === self::RESCAN_ALL
                && in_array($file->getVerdict(), [
                    RapidScanStorageRecord::RX_SUSPICIOUS,
                    RapidScanStorageRecord::RX_SUSPICIOUS_EXTENDED,
                    RapidScanStorageRecord::RX_GOOD,
                    RapidScanStorageRecord::RX_MALWARE,
                    RapidScanStorageRecord::HEURISTIC
                ])
            )
            || (
                $rescan === self::RESCAN_SUSPICIOUS
                && in_array($file->getVerdict(), [
                    RapidScanStorageRecord::RX_SUSPICIOUS,
                    RapidScanStorageRecord::HEURISTIC
                ])
            )
            || (
                $this->freq !== false && $this->old_rescan_ts !== false
                && $rescan === self::RESCAN_SUSPICIOUS
                && in_array($file->getVerdict(), [
                    RapidScanStorageRecord::RX_GOOD,
                    RapidScanStorageRecord::RX_SUSPICIOUS_EXTENDED
                ])
                && $old_scanned <= $this->old_rescan_ts
                && $rxgood_rescan = true
            )
        ) {
            //rescan all mode, all none white/black/dual listed files need to be re-scanned fully
            if ($rxgood_rescan) {
                $this->rescan_rx_good_count++;
            }
            $this->scanlist[$i] = $file;
            $this->rsAddStatsItem(true, $file);
        } elseif (defined('USE_HEURISTICS')
            && $file->getVerdict() === RapidScanStorageRecord::HEURISTIC
        ) { //mode === RESCAN_NONE
            //these files were detected as HEURISTIC before, let's report them as malware
            $snippet = $file->getSnippet();
            $vars->criticalPHP[] = $i;
            $vars->criticalPHPFragment[] = $snippet;
            $vars->criticalPHPSig[] = 'SMW-HEUR-ELF';
            $this->scanner->AddResult($file, $i, $vars);
            $this->db->put($file);
            $this->rsAddStatsItem(false, $file);
        } elseif (defined('USE_HEURISTICS_SUSPICIOUS')
            && $file->getVerdict() === RapidScanStorageRecord::HEURISTIC
        ) {
            //these files were detected as HEURISTIC, let's report them as suspicious
            $snippet = $file->getSnippet();
            $vars->warningPHP[] = $i;
            $vars->warningPHPFragment[] = $snippet;
            $vars->warningPHPSig[] = 'SMW-HEUR-ELF';
            $this->scanner->AddResult($file, $i, $vars);
            $this->db->put($file);
            $this->rsAddStatsItem(false, $file);
        } elseif ($file->getVerdict() === RapidScanStorageRecord::WHITE_EXTENDED
            && $file->getUpdatedTs() <= $old_scanned) {
            $this->scanlist[$i] = $file;
        } elseif ($file->getVerdict() === RapidScanStorageRecord::RX_SUSPICIOUS_EXTENDED) {
            //these files were detected as rx suspicious_extended before, let's report them
            $vars->suspiciousExt[] = $i;
            $vars->suspiciousExtSig[] = 'SMW-ESUS-' . $file->getSignature();
            $vars->suspiciousExtFrag[] = $file->getSnippet();
            $this->scanner->AddResult($file, $i, $vars);
            $this->db->put($file);
            $this->rsAddStatsItem(false, $file);
        } else {
            //in theory -- we should have only white files here...
            $this->db->put($file);
            $this->rsAddStatsItem(false, $file);
        }

        if (count($this->scanlist) >= self::MAX_TO_SCAN) {
            // our scan list is big enough
            // let's flush db, and scan the list
            $this->db->flushBatch();
            $this->processScanList($vars);
        }

        if ($this->db->batch_count >= self::MAX_BATCH) {
            //we have added many entries to db, time to flush it
            $this->db->flushBatch();
            $this->processScanList($vars);
        }
        unset($file);
        $vars->fileinfo = null;
    }

    public function scan($files, $vars, $rescan = self::RESCAN_SUSPICIOUS)
    {
        if (defined('CLS_PROGRESS')) {
            Progress::setStage(Progress::STAGE_SCAN);
        }
        $i = 0;
        $this->cas_list = $this->cas_db->getList();

        foreach ($files as $filepath) {
            $counter = $this->counter + $i;
            $vars->totalFiles++;
            $this->processedFiles = $counter - $vars->totalFolder - count($this->scanlist);
            if (defined('CLS_PROGRESS')) {
                Progress::setCurrentFile($filepath);
                Progress::setFilesTotal($vars->foundTotalFiles);
                Progress::setDetected([
                    Progress::DETECT_PHP => count($vars->criticalPHP),
                    Progress::DETECT_JS => count($vars->criticalJS),
                    Progress::DETECT_SUS => count($vars->warningPHP),
                    Progress::DETECT_PHS => count($vars->phishing),
                ]);

                Progress::updateScan($this->processedFiles);
            }
            $this->scanFile($filepath, $rescan, $counter, $vars);
            $i++;
        }

        if ($rescan == self::RESCAN_ALL) {
            $this->cas_db->delete();
            $this->cas_list = [];
            foreach ($this->vars->blackFiles as $blackfile) {
                $this->cas_list[$blackfile['ras_sigid']] = $blackfile['sn'];
            }
            $this->cas_db->putList($this->cas_list);
        }

        //let's flush db again
        $this->db->flushBatch();

        //process whatever is left in our scan list
        if (count($this->scanlist) > 0) {
            $this->processScanList($vars);
        }

        $this->whitelistening();

        //close databases and rename new into 'current'
        $this->db->finish();
        if (defined('CLS_PROGRESS')) {
            Progress::setStage(Progress::STAGE_DONE);
        }
    }

    private function whitelistening()
    {
        // whitelist
        $snum = 0;

        if (!isset($this->vars->structure['crc'])) {
            return;
        }

        $vars = $this->vars;

        $list = $this->scanner->check_whitelist($vars->structure['crc'], $snum);
        $keys = [
            'criticalPHP',
            'criticalJS',
            'phishing',
            'adwareList',
            'warningPHP'
        ];
        foreach ($keys as $p) {
            if (empty($vars->{$p})) {
                continue;
            }
            $p_Fragment = $p . 'Fragment';
            $p_Sig      = $p . 'Sig';
            if ($p === 'phishing') {
                $p_Sig = $p . 'SigFragment';
            }

            $count = count($vars->{$p});
            for ($i = 0; $i < $count; $i++) {
                $id = $vars->{$p}[$i];
                if ($vars->structure['crc'][$id] !== 0 && in_array($vars->structure['crc'][$id], $list)) {
                    $rec = RapidScanStorageRecord::fromFile($vars->structure['n'][$id]);
                    $rec->calcSha2();
                    $rec->setVerdict(RapidScanStorageRecord::RX_GOOD);
                    $this->db->put($rec);
                    unset($vars->{$p}[$i], $vars->{$p_Sig}[$i], $vars->{$p_Fragment}[$i]);
                }
            }

            $vars->{$p}             = array_values($vars->{$p});
            $vars->{$p_Fragment}    = array_values($vars->{$p_Fragment});
            if (!empty($vars->{$p_Sig})) {
                $vars->{$p_Sig} = array_values($vars->{$p_Sig});
            }
        }
    }

    private function isSkipCA($fileinfo)
    {
        $res = (substr($fileinfo->getFilename(), -1) === DIR_SEPARATOR
            || (MAX_SIZE_TO_CLOUDSCAN > 0 && filesize($fileinfo->getFilename()) > MAX_SIZE_TO_CLOUDSCAN)
            || (filesize($fileinfo->getFilename()) < 0));
        return $res;
    }

    private function rsAddStatsItem(bool $rescan, RapidScanStorageRecord $file)
    {
        if (defined('CLS_DECISION_MAKING_STATS')) {
            $verdict = RapidScanStorageRecord::getVerdictNameFromValue($file->getVerdict());
            $verdict .= ($rescan ? '-RESCAN' : '');
            DecisionMakingStats::addStatsItem('rapid_scan', $verdict, $file);
        }
    }

    private function caAddStatsItem($verdict, RapidScanStorageRecord $file)
    {
        if (defined('CLS_DECISION_MAKING_STATS')) {
            if ($verdict === true) {
                $verdict = DecisionMakingStats::VERDICT_OK;
            }
            DecisionMakingStats::addStatsItem('cloud_assisted_scan', $verdict, $file);
        }
    }
}

/**
 * DbFolderSpecification class file.
 */

/**
 * Class DbFolderSpecification.
 *
 * It can be use for checking requirements for a folder that is used for storing a RapidScan DB.
 */
class DbFolderSpecification
{
    /**
     * Check whether a particular folder satisfies requirements.
     *
     * @param string $folder
     * @return bool
     */
    public function satisfiedBy($folder)
    {
        if (!file_exists($folder) || !is_dir($folder)) {
            return false;
        }

        $owner_id = (int)fileowner($folder);
        if (function_exists('posix_getpwuid')) {
            $owner = posix_getpwuid($owner_id);
            if (!isset($owner['name']) || $owner['name'] !== 'root') {
                return false;
            }
        }
        elseif ($owner_id != 0) {
            return false;
        }

        $perms = fileperms($folder);
        if (($perms & 0x0100)                           // owner r
            && ($perms & 0x0080)                        // owner w
            && ($perms & 0x0040) && !($perms & 0x0800)  // owner x
            && !($perms & 0x0020)                       // group without r
            && !($perms & 0x0010)                       // group without w
            && (!($perms & 0x0008) || ($perms & 0x0400))// group without x
            && !($perms & 0x0004)                       // other without r
            && !($perms & 0x0002)                       // other without w
            && (!($perms & 0x0001) || ($perms & 0x0200))// other without x
        ) {
            return true;
        }
        return false;
    }
}


class LevelDBWrap
{
    private $db;

    public function __construct(string $dir, array $options = null)
    {
        if ($options) {
            $this->db = new LevelDB($dir, $options);
        } else {
            $this->db = new LevelDB($dir);
        }

    }

    public function get(string $key)
    {
        return $this->db->get($key);
    }

    public function put(string $key, string $value)
    {
        return $this->db->put($key, $value);
    }

    public function write($batch)
    {
        return $this->db->write($batch);
    }

    public function delete(string $key)
    {
        return $this->db->delete($key);
    }

    public function getIterator()
    {
        return $this->db->getIterator();
    }

    public function close()
    {
        if (version_compare(phpversion('leveldb'), '0.3.0', '<')) {
            $this->db->close();
        }

        $this->db = null;
    }
}
/**
 * CriticalFileSpecification class file.
 */

/**
 * Class CriticalFileSpecification.
 */
class CriticalFileSpecification
{
    /**
     * @var array list of extension
     */
    private $extensions = [
        'php',
        'htaccess',
        'cgi',
        'pl',
        'o',
        'so',
        'py',
        'sh',
        'phtml',
        'php3',
        'php4',
        'php5',
        'php6',
        'php7',
        'pht',
        'shtml',
        'susp',
        'suspected',
        'infected',
        'vir',
        'ico',
        'js',
        'json',
        'com',
        ''
    ];

    private $js_extensions = [
        'js',
        'json',
        'html',
        'htm',
        'suspicious'
    ];

    private $phish_extensions = [
        'js',
        'html',
        'htm',
        'suspected',
        'php',
        'phtml',
        'pht',
        'php7'
    ];

    private $error = 0;

    private $critical_content = '~\bcurl_exec\b|\blmp_block_info\b\$\w{1,10}\s*\x28|\bmail\s*\x28|\bfputs\b|EICAR-STANDARD-ANTIVIRUS-TEST-FILE|bank|(?:(?:^#!/us|\bch))r\b|(?:^#!/bi|(?:(?:sqliteCreateF|create_f))unctio|(?:(?:fsock|\bp))ope)n|(?:<\s*htm|(?:(?:setInter|\be))va)l\b|(?:(?:\b(?:cop|rin)|<\s*bod))y\b|(?:setTimeou|accoun|(?:(?:ob_sta|asse))r|<(?:(?:objec|scrip)))t|(?:\bmove_)|(?:\bfwrit|reg_replac|(?:(?:base64_dec|fromCharC))od|<(?:(?:\s*titl|ifram)))e|(?:(?:<\s*for|\bsyste))m[\s\x28]|(?:(?:call_user_fun|\bexe))c|(?:\barray|\bmysql|file_(?:(?:ge|pu))t)_|(?:(?:RewriteCon|<embe))d|(?:(?:navigator|document|location|\$this|window))\.|^\s*<\?(?:(?:php|=))|\$(?:(?:(?:GLOBAL|_FILE))S|_(?:SERVER|(?:GE|(?:(?:REQUE|PO))S)T))~smiS';

    public function __construct()
    {
        $this->extensions = array_flip(array_merge($this->extensions, $this->js_extensions, $this->phish_extensions));
    }

    /**
     * Check whether a particular file with specified extension is critical.
     *
     * @param string $ext
     * @param string $type
     * @return bool
     */
    public function satisfiedBy($ext, $type)
    {
        return isset($this->extensions[$ext]);
    }

    /**
     * Check whether a particular content is critical.
     *
     * @param string $content
     * @param string $type
     * @return bool
     */
    public function satisfiedByContent($content, $type)
    {
        if (HyperScan::canMatchCritical()) {
            return HyperScan::matchCritical($content);
        }
        $time = AibolitHelpers::currentTime();
        $res = preg_match($this->critical_content, $content, $l_Found) ? true : false;
        if ($this->error === 0) {
            $this->error = preg_last_error();
        }
        if (defined('CLS_PERFORMANCE_STATS')) {
            PerformanceStats::addPerformanceItem(PerformanceStats::PCRE_SMART_STAT, AibolitHelpers::currentTime() - $time);
        }
        return $res;
    }

    public function getError()
    {
        return $this->error;
    }
}


class Zip
{
    const ERRORS = [
        ZipArchive::ER_EXISTS => 'File already exists.',
        ZipArchive::ER_INCONS => 'Zip archive inconsistent',
        ZipArchive::ER_INVAL  => 'Invalid argument.',
        ZipArchive::ER_MEMORY => 'Malloc failure .',
        ZipArchive::ER_NOENT  => 'No such file.',
        ZipArchive::ER_NOZIP  => 'Not a zip archive .',
        ZipArchive::ER_OPEN   => 'Can\'t open file.',
        ZipArchive::ER_READ   => 'Read error.',
        ZipArchive::ER_SEEK   => 'Seek error.'
    ];

    /**
     * @var ZipArchive
     */
    public $archive;
    public $filename;
    public $error_code;
    public $error_message;

    /**
     * @param string $filename
     */
    public function __construct(string $filename)
    {
        $this->filename = $filename;
    }

    /**
     * @return bool|false
     */
    public function open(): bool
    {
        $archive = new ZipArchive();
        $res = $archive->open($this->filename);
        if ($res !== true) {
            $this->error_message = self::ERRORS[$res] ?? 'Zip error';
            $this->error_code    = $res;
            return false;
        }

        $this->archive = $archive;

        return true;
    }

    public function close()
    {
        $this->archive->close();
    }

    /**
     * @param int $index
     * @return array|false
     */
    public function getFileInfo(int $index)
    {
        return $this->archive->statIndex($index);
    }


    /**
     * @param int $index
     * @return false|string
     */
    public function getFileContent(int $index)
    {
        return $this->archive->getFromIndex($index);
    }
}
if (!defined('FUNC_HRTIME')) {
    define('FUNC_HRTIME', function_exists('hrtime'));
}
if (!defined('FUNC_ICONV')) {
    define('FUNC_ICONV', function_exists('iconv') && is_callable('iconv'));
}
class Helpers
{
    const REGEXP_BASE64_DECODE = '~base64_decode\s*\(\s*[\'"]([^\'"]*)[\'"]\s*\)~mis';
    const GOTO_MAX_HOPS        = 12000;

    /*************************************************************************************************************/
    /*                                Frequently used functions for deobfuscators                                */
    /*************************************************************************************************************/

    /**
     * This method normalizes string, converts characters to a readable form and some other things.
     * Also, the method can save the number of characters in the string by adding spaces if the number of characters has decreased.
     *
     * @param $string
     * @param false $save_length
     * @return string
     */
    public static function normalize($string, $save_length = false)
    {
        $search  = [ ' ;', ' =', ' ,', ' .', ' (', ' )', ' {', ' }', '; ', '= ', ', ', '. '
        , '( ', '( ', '{ ', '} ', ' !', ' >', ' <', ' _', '_ ', '< ',  '> ', ' $', ' %', '% '
        , '# ', ' #', '^ ', ' ^', ' &', '& ', ' ?', '? '];
        $replace = [  ';',  '=',  ',',  '.',  '(',  ')',  '{',  '}', ';',  '=',  ',',  '.'
        ,  '(',   ')', '{',  '}',   '!',  '>',  '<',  '_', '_',  '<',   '>',   '$',  '%', '%'
        ,  '#',   '#', '^',   '^',  '&', '&',   '?', '?'];

        if (!$save_length) {
            $string = str_replace('@', '', $string);
            $string = preg_replace('~\s+~smi', ' ', $string);
            $string = str_replace($search, $replace, $string);
        }

        $string = preg_replace_callback('~\bchr\(\s*([0-9a-fA-FxX\^]+)\s*\)~', static function($m) use ($save_length) {
            if (strpos($m[1], '^') !== false) {
                $m[1] = Helpers::calc($m[1]);
            }
            if ($save_length) {
                return str_pad("'" . @chr(intval($m[1], 0)) . "'", strlen($m[0]), ' ');
            } else {
                return "'" . @chr(intval($m[1], 0)) . "'";
            }
        }, $string);

        $string = preg_replace_callback('/\&\#([0-9]{1,3});/i', static function($m) use ($save_length) {
            if ($save_length) {
                return str_pad(@chr((int)$m[1]), strlen($m[0]), ' ');
            } else {
                return @chr((int)$m[1]);
            }
        }, $string);

        $string = preg_replace_callback('/\\\\(?:x(?<hex>[a-fA-F0-9]{1,2})|(?<oct>[0-9]{1,3}))/i', function($m) use ($save_length) {
            $is_oct     = isset($m['oct']);
            $full_str   = $m[0];
            $value      = $is_oct ? $m['oct'] : $m['hex'];
            if ($save_length) {
                if ($is_oct) {
                    return str_pad(@chr(octdec($value)), strlen($full_str), ' ');
                }
                return str_pad(chr(@hexdec($value)), strlen($full_str), ' ');
            } else {
                if ($is_oct) {
                    return @chr(octdec($value));
                }
                return @chr(hexdec($value));
            }
        }, $string);

        $string = preg_replace_callback('/[\'"]\s*?\.+\s*?[\'"]/smi', static function($m) use ($save_length) {
            if ($save_length) {
                return str_repeat(' ', strlen($m[0]));
            } else {
                return '';
            }
        }, $string);

        $string = preg_replace_callback('/[\'"]\s*?\++\s*?[\'"]/smi', static function($m) use ($save_length) {
            if ($save_length) {
                return str_repeat(' ', strlen($m[0]));
            } else {
                return '';
            }
        }, $string);

        if (!$save_length) {
            $string = str_replace('<?php', '<?php ', $string);
            $string = preg_replace('~\s+~', ' ', $string);
        }

        return $string;
    }

    /**
     * Code formatting. Not used in procu2 and ai-bolit
     *
     * @param $source
     * @return string
     */
    public static function format($source)
    {
        $t_count = 0;
        $in_object = false;
        $in_at = false;
        $in_php = false;
        $in_for = false;
        $in_comp = false;
        $in_quote = false;
        $in_var = false;

        if (!defined('T_ML_COMMENT')) {
            define('T_ML_COMMENT', T_COMMENT);
        }

        $result = '';
        @$tokens = token_get_all($source);
        foreach ($tokens as $token) {
            if (is_string($token)) {
                $token = trim($token);
                if ($token == '{') {
                    if ($in_for) {
                        $in_for = false;
                    }
                    if (!$in_quote && !$in_var) {
                        $t_count++;
                        $result = rtrim($result) . ' ' . $token . "\n" . str_repeat('    ', $t_count);
                    } else {
                        $result = rtrim($result) . $token;
                    }
                } elseif ($token == '$') {
                    $in_var = true;
                    $result .= $token;
                } elseif ($token == '}') {
                    if (!$in_quote && !$in_var) {
                        $new_line = true;
                        $t_count--;
                        if ($t_count < 0) {
                            $t_count = 0;
                        }
                        $result = rtrim($result) . "\n" . str_repeat('    ', $t_count) .
                            $token . "\n" . @str_repeat('    ', $t_count);
                    } else {
                        $result = rtrim($result) . $token;
                    }
                    if ($in_var) {
                        $in_var = false;
                    }
                } elseif ($token == ';') {
                    if ($in_comp) {
                        $in_comp = false;
                    }
                    if ($in_for) {
                        $result .= $token . ' ';
                    } else {
                        $result .= $token . "\n" . str_repeat('    ', $t_count);
                    }
                } elseif ($token == ':') {
                    if ($in_comp) {
                        $result .= ' ' . $token . ' ';
                    } else {
                        $result .= $token . "\n" . str_repeat('    ', $t_count);
                    }
                } elseif ($token == '(') {
                    $result .= ' ' . $token;
                } elseif ($token == ')') {
                    $result .= $token;
                } elseif ($token == '@') {
                    $in_at = true;
                    $result .= $token;
                } elseif ($token == '.') {
                    $result .= ' ' . $token . ' ';
                } elseif ($token == '=') {
                    $result .= ' ' . $token . ' ';
                } elseif ($token == '?') {
                    $in_comp = true;
                    $result .= ' ' . $token . ' ';
                } elseif ($token == '"') {
                    if ($in_quote) {
                        $in_quote = false;
                    } else {
                        $in_quote = true;
                    }
                    $result .= $token;
                } else {
                    $result .= $token;
                }
            } else {
                list($id, $text) = $token;
                switch ($id) {
                    case T_OPEN_TAG:
                    case T_OPEN_TAG_WITH_ECHO:
                        $in_php = true;
                        $result .= trim($text) . "\n";
                        break;
                    case T_CLOSE_TAG:
                        $in_php = false;
                        $result .= trim($text);
                        break;
                    case T_FOR:
                        $in_for = true;
                        $result .= trim($text);
                        break;
                    case T_OBJECT_OPERATOR:
                        $result .= trim($text);
                        $in_object = true;
                        break;

                    case T_ENCAPSED_AND_WHITESPACE:
                    case T_WHITESPACE:
                        $result .= trim($text);
                        break;
                    case T_GOTO:
                        $result = rtrim($result) . "\n" . str_repeat('    ', $t_count) . trim($text) . ' ';
                        break;
                    case T_RETURN:
                        $result = rtrim($result) . "\n" . str_repeat('    ', $t_count) . trim($text) . ' ';
                        break;
                    case T_ELSE:
                    case T_ELSEIF:
                        $result = rtrim($result) . ' ' . trim($text) . ' ';
                        break;
                    case T_CASE:
                    case T_DEFAULT:
                        $result = rtrim($result) . "\n" . str_repeat('    ', $t_count - 1) . trim($text) . ' ';
                        break;
                    case T_FUNCTION:
                    case T_CLASS:
                        $result .= "\n" . str_repeat('    ', $t_count) . trim($text) . ' ';
                        break;
                    case T_AND_EQUAL:
                    case T_AS:
                    case T_BOOLEAN_AND:
                    case T_BOOLEAN_OR:
                    case T_CONCAT_EQUAL:
                    case T_DIV_EQUAL:
                    case T_DOUBLE_ARROW:
                    case T_IS_EQUAL:
                    case T_IS_GREATER_OR_EQUAL:
                    case T_IS_IDENTICAL:
                    case T_IS_NOT_EQUAL:
                    case T_IS_NOT_IDENTICAL:
                    case T_LOGICAL_AND:
                    case T_LOGICAL_OR:
                    case T_LOGICAL_XOR:
                    case T_MINUS_EQUAL:
                    case T_MOD_EQUAL:
                    case T_MUL_EQUAL:
                    case T_OR_EQUAL:
                    case T_PLUS_EQUAL:
                    case T_SL:
                    case T_SL_EQUAL:
                    case T_SR:
                    case T_SR_EQUAL:
                    case T_START_HEREDOC:
                    case T_XOR_EQUAL:
                        $result = rtrim($result) . ' ' . trim($text) . ' ';
                        break;
                    case T_COMMENT:
                        $result = rtrim($result) . "\n" . str_repeat('    ', $t_count) . trim($text) . ' ';
                        break;
                    case T_ML_COMMENT:
                        $result = rtrim($result) . "\n";
                        $lines = explode("\n", $text);
                        foreach ($lines as $line) {
                            $result .= str_repeat('    ', $t_count) . trim($line);
                        }
                        $result .= "\n";
                        break;
                    case T_INLINE_HTML:
                        $result .= $text;
                        break;
                    default:

                        $result .= trim($text);
                        break;
                }
            }
        }
        return $result;
    }

    /**
     * Replace create_function(...) with function(){}
     *
     * @param $str
     * @return string
     */
    public static function replaceCreateFunction($str)
    {
        $hangs = 20;
        $str = stripcslashes($str);
        while (strpos($str, 'create_function') !== false && $hangs--) {
            $start_pos = strpos($str, 'create_function');
            $end_pos = 0;
            $brackets = 0;
            $started = false;
            $opened = 0;
            $closed = 0;
            for ($i = $start_pos, $iMax = strlen($str); $i < $iMax; $i++) {
                if ($str[$i] === '(') {
                    $started = true;
                    $brackets++;
                    $opened++;
                } else if ($str[$i] === ')') {
                    $closed++;
                    $brackets--;
                }
                if ($brackets == 0 && $started) {
                    $end_pos = $i + 1;
                    break;
                }
            }

            $cr_func = substr($str, $start_pos, $end_pos - $start_pos);
            $func = implode('function(', explode('create_function(\'', $cr_func, 2));
            $func = implode(') {', explode('\',\'', $func, 2));
            $func = substr($func, 0, -2) . '}';
            $str = str_replace($cr_func, $func, $str);
        }
        return $str;
    }

    /**
     * Calculate functions and simple mathematical expressions in code.
     * This function is applicable for simple expressions, if they are complex, then it may produce an incorrect result, in this case use MathCalc.
     *
     * @param $expr
     * @return string
     */
    public static function calc($expr)
    {
        if (is_array($expr)) {
            $expr = $expr[0];
        }
        $expr = str_replace([' ', "\r", "\n", "\t"], '', $expr);
        preg_match('~(chr|min|max|round)?\(([^\)]+)\)~msi', $expr, $expr_arr);
        if (@$expr_arr[1] == 'min' || @$expr_arr[1] == 'max') {
            return $expr_arr[1](explode(',', $expr_arr[2]));
        } elseif (@$expr_arr[1] == 'chr') {
            if ($expr_arr[2][0] === '(') {
                $expr_arr[2] = substr($expr_arr[2], 1);
            }
            $expr_arr[2] = self::calc($expr_arr[2]);
            return $expr_arr[1]((int)$expr_arr[2]);
        } elseif (@$expr_arr[1] == 'round') {
            $expr_arr[2] = self::calc($expr_arr[2]);
            return $expr_arr[1]($expr_arr[2]);
        } else {
            preg_match_all('~([\d\.a-fx]+)([\*\/\-\+\^\|\&])?~', $expr, $expr_arr);
            foreach ($expr_arr[1] as &$expr_arg) {
                if (strpos($expr_arg, "0x") !== false) {
                    $expr = str_replace($expr_arg, hexdec($expr_arg), $expr);
                    $expr_arg = hexdec($expr_arg);
                } else if ($expr_arg[0] === '0' && (strlen($expr_arg) > 1) && (strpos($expr_arg, '.') === false)) {
                    $expr = str_replace($expr_arg, octdec($expr_arg), $expr);
                    $expr_arg = octdec($expr_arg);
                }
            }
            if (in_array('*', $expr_arr[2]) !== false) {
                $pos = array_search('*', $expr_arr[2]);
                $res = $expr_arr[1][$pos] * $expr_arr[1][$pos + 1];
                $pos_subst = strpos($expr, $expr_arr[1][$pos] . '*' . $expr_arr[1][$pos + 1]);
                $expr = substr_replace($expr, $res, $pos_subst, strlen($expr_arr[1][$pos] . '*' . $expr_arr[1][$pos + 1]));
                $expr = self::calc($expr);
            } elseif (in_array('/', $expr_arr[2]) !== false) {
                $pos = array_search('/', $expr_arr[2]);
                $res = $expr_arr[1][$pos] / $expr_arr[1][$pos + 1];
                $pos_subst = strpos($expr, $expr_arr[1][$pos] . '/' . $expr_arr[1][$pos + 1]);
                $expr = substr_replace($expr, $res, $pos_subst, strlen($expr_arr[1][$pos] . '/' . $expr_arr[1][$pos + 1]));
                $expr = self::calc($expr);
            } elseif (in_array('-', $expr_arr[2]) !== false) {
                $pos = array_search('-', $expr_arr[2]);
                $res = $expr_arr[1][$pos] - $expr_arr[1][$pos + 1];
                $pos_subst = strpos($expr, $expr_arr[1][$pos] . '-' . $expr_arr[1][$pos + 1]);
                $expr = substr_replace($expr, $res, $pos_subst, strlen($expr_arr[1][$pos] . '-' . $expr_arr[1][$pos + 1]));
                $expr = self::calc($expr);
            } elseif (in_array('+', $expr_arr[2]) !== false) {
                $pos = array_search('+', $expr_arr[2]);
                $res = (float)$expr_arr[1][$pos] + (float)$expr_arr[1][$pos + 1];
                $pos_subst = strpos($expr, $expr_arr[1][$pos] . '+' . $expr_arr[1][$pos + 1]);
                $expr = substr_replace($expr, $res, $pos_subst, strlen($expr_arr[1][$pos] . '+' . $expr_arr[1][$pos + 1]));
                $expr = self::calc($expr);
            } elseif (in_array('^', $expr_arr[2]) !== false) {
                $pos = array_search('^', $expr_arr[2]);
                $res = (int)$expr_arr[1][$pos] ^ (int)$expr_arr[1][$pos + 1];
                $pos_subst = strpos($expr, $expr_arr[1][$pos] . '^' . $expr_arr[1][$pos + 1]);
                $expr = substr_replace($expr, $res, $pos_subst, strlen($expr_arr[1][$pos] . '^' . $expr_arr[1][$pos + 1]));
                $expr = self::calc($expr);
            } elseif (in_array('|', $expr_arr[2]) !== false) {
                $pos = array_search('|', $expr_arr[2]);
                $res = $expr_arr[1][$pos] | $expr_arr[1][$pos + 1];
                $pos_subst = strpos($expr, $expr_arr[1][$pos] . '|' . $expr_arr[1][$pos + 1]);
                $expr = substr_replace($expr, $res, $pos_subst, strlen($expr_arr[1][$pos] . '|' . $expr_arr[1][$pos + 1]));
                $expr = self::calc($expr);
            } elseif (in_array('&', $expr_arr[2]) !== false) {
                $pos = array_search('&', $expr_arr[2]);
                $res = $expr_arr[1][$pos] & $expr_arr[1][$pos + 1];
                $pos_subst = strpos($expr, $expr_arr[1][$pos] . '&' . $expr_arr[1][$pos + 1]);
                $expr = substr_replace($expr, $res, $pos_subst, strlen($expr_arr[1][$pos] . '&' . $expr_arr[1][$pos + 1]));
                $expr = self::calc($expr);
            } else {
                return $expr;
            }

            return $expr;
        }
    }

    /**
     * Get code inside eval()
     *
     * @param $string
     * @return string
     */
    public static function getEvalCode($string)
    {
        preg_match("/eval\(([^\)]+)\)/msi", $string, $matches);
        return (empty($matches)) ? '' : end($matches);
    }

    /**
     * Method for unwrapping goto constructs.
     *
     * @param string $content
     * @return string
     */
    public static function unwrapGoto(&$content): string
    {
        $processed = [];
        if (!preg_match('~\$[^\[\(\)\]=\+\-]{1,20}~msi', $content)) {
            return $content;
        }
        $label_num = 0;
        $label_name = 'tmp_spec_label';

        $replaceVars = [];

        $orig = $content;

        $content = preg_replace_callback('~\bgoto ([^\w;]+);~msi', function ($m) use (&$replaceVars, &$label_num, $label_name) {
            $label_num++;
            $newName = $label_name . $label_num;
            $replaceVars[] = [$m[1], $newName];
            return 'goto ' . $newName . '; ';
        }, $content);

        if (!empty($replaceVars)) {
            foreach ($replaceVars as $replaceVar) {
                $content = str_replace($replaceVar[0], $replaceVar[1], $content);
            }
        }

        $content = preg_replace_callback('~\b(if\s*(\([^)(]*+(?:(?2)[^)(]*)*+\))\s*)(goto\s*(?:\w+);)~msi', function($m) {
            return $m[1] . ' { ' . $m[3] . ' } ';
        }, $content);

        preg_match_all('~\bgoto\s?(\w+);~msi', $content, $gotoMatches, PREG_SET_ORDER);
        $gotoCount = count($gotoMatches);
        if ($gotoCount === 0 || $gotoCount > self::GOTO_MAX_HOPS) {
            return $content;
        }

        $label_num = 0;
        $label_name = 'tmp_label';

        $res      = '';
        $hops     = self::GOTO_MAX_HOPS;
        if (preg_match('~(.*?)(?:goto\s\w+;|\w+:)~msi', $content, $m)) {
            $res .= trim($m[1]) . PHP_EOL;
        }

        if (preg_match('~\w{1,99}:\s*(<\?php)~msi', $content, $m, PREG_OFFSET_CAPTURE)) {
            $orig = substr($content, 0, $m[1][1]);
            $content = str_replace('<?php ' . $orig, '', $content);
        }

        $content = preg_replace_callback('~(?<!: )\}\s*goto\s*\w+;~mis', function($m) use (&$label_num, $label_name) {
            $label_num++;
            return $label_name . $label_num . ': ' . $m[0];
        }, $content);

        //try to match all if's conditions it can be if or loop
        preg_match_all('~\b(\w+):\s*if\s*(\([^)(]*+(?:(?2)[^)(]*)*+\))\s*\{\s*goto\s*(\w+); (' . $label_name . '\d+):\s*\}\s*goto\s*(\w+);~msi', $content, $conds, PREG_SET_ORDER);
        foreach ($conds as $cond) {
            preg_match('~\b\w+:\s*(\w+):\s*goto\s*' . $cond[1] . '~msi',        $content, $while);
            preg_match('~\b' . $cond[5] . ':\s*(\w+):\s*goto\s*(\w+);~msi',     $content, $do);
            preg_match('~\b(\w+):\s*' . $cond[3] . ':\s*goto\s*(\w+);~msi',     $content, $m);
            preg_match('~\b(\w+):\s*goto\s*(\w+); goto\s*' . $m[1] . ';~msi',   $content, $ifelse);
            preg_match('~\b(\w+):\s*\w+:\s*goto\s*' . $cond[1] . ';~msi',       $content, $m);
            preg_match('~\b(\w+):[^:;]+[:;]\s*goto\s*(' . $m[1] . ');~msi',     $content, $m);
            preg_match('~\b(\w+):\s*' . $ifelse[2] . ':\s*goto\s*(\w+);~msi',   $content, $m);
            if (!empty($m) && ($m[2] === $cond[1])) { // if goto in last match point to this if statement - we have a loop, otherwise - if-else
                $ifelse = [];
            }
            if (preg_match('~\b\w+:\s*goto\s*' . $while[1] . ';\s*goto\s*\w+;~msi', $content) === 0) {
                $while = [];
            }

            if (empty($do) && empty($ifelse)) { //reverse conditions except do while & if else
                if ($cond[2][1] === '!') {
                    $cond[2] = substr_replace($cond[2], '', 1, 1);
                }
                else {
                    $cond[2] = '(!' . $cond[2] . ')';
                }
            }

            if (!empty($ifelse)) {
                $content = str_replace($cond[0],
                    $cond[1] . ': if ' . $cond[2] . ' { goto ' . $cond[3] . '; ' . $cond[4] . ': ' . '} else { goto ' . $cond[5] . ';',
                    $content
                );
                preg_match('~(\w+):\s*(' . $ifelse[2] . '):\s*goto\s*(\w+);~msi', $content, $m2);
                $content = str_replace($m2[0],
                    $m2[1] . ': goto ' . $cond[4] . '; ' . $m2[2] . ': } goto ' . $m2[3] . ';',
                    $content
                );
            }
            elseif (!empty($do)) {
                preg_match('~(\w+):\s*(' . $cond[3] . '):\s*goto\s*~msi', $content, $match);
                $tmp = $cond[0];
                $content = str_replace($match[0],
                    $match[1] . ': do { goto ' . $match[2] . '; ' . $match[2] . ': goto ',
                    $content
                );
                $cond[0] = $cond[1] . ': } while ' . $cond[2] . '; goto ' . $cond[5] . ';';
                $content = str_replace($tmp, $cond[0], $content);
            }
            else {
                if (!empty($while)) { //loop change if to while, reverse condition, exchange labels; in last goto $tmp_labelN
                    preg_match('~\w+:\s*goto\s*(' . $while[1] . ')~msi', $content, $match);
                    $content = str_replace($match[0], str_replace($match[1], $cond[4], $match[0]), $content);
                    $content = str_replace($cond[0],
                        $cond[1] . ': ' . 'while (' . $cond[2] . ') {' . 'goto ' . $cond[5] . '; ' . $cond[4] . ': } goto ' . $cond[3] . ';',
                        $content
                    );
                }
                else { //just if - need to reverse condition and exchange labels; in last need goto to $tmp_labelN
                    $tmp = $cond[0];
                    $cond[0] = $cond[1] . ': ' . 'if ' . $cond[2] . ' { goto ' . $cond[5] . '; ' . $cond[4] . ': } goto ' . $cond[3] . ';';
                    $content = str_replace($tmp, $cond[0], $content);
                    preg_match('~(\w+):\s*(' . $cond[3] . '):\s*goto\s*(\w+)~msi', $content, $match);
                    $content = str_replace($match[0],
                        $match[1] . ': goto ' . $cond[4] . '; ' . $match[2] . ': goto ' . $match[3],
                        $content
                    );
                }
            }
        }

        $nextGotoPos = 0;
        while ($nextGotoPos !== false
            && $hops-- > 0
            && preg_match('~goto\s(\w+);~msi', substr($content, $nextGotoPos), $gotoNameMatch, PREG_OFFSET_CAPTURE)
        ) {
            $gotoNameStr    = $gotoNameMatch[1][0] . ':';
            $gotoNameStrLen = strlen($gotoNameStr);
            $gotoPos        = strpos($content, $gotoNameStr);
            $nextGotoPos    = strpos($content, 'goto ', $gotoPos);
            $cutUntilPos    = ($nextGotoPos - $gotoPos) - $gotoNameStrLen;
            if ($gotoPos === false) {
                return $orig;
            }
            if (in_array($gotoNameStr, $processed)) {
                $nextGotoPos    = strpos($content, 'goto ', strpos($content, $gotoNameMatch[0][0]) + 1);
                continue;
            }
            $processed[] = $gotoNameStr;

            if ($nextGotoPos) {
                $substr = substr($content, $gotoPos + $gotoNameStrLen, $cutUntilPos);
            } else {
                $substr = substr($content, $gotoPos + $gotoNameStrLen);
            }

            $piece = trim($substr);
            $piece === '' ?: $res .= $piece . ' ';
        }
        $res = preg_replace('~\w{1,20}:~msi', '', $res);
        $res = stripcslashes($res);
        if (strpos($res, 'hex2bin("') !== false) {
            $res = preg_replace_callback('~hex2bin\((?|"([^"]*)"|\'([^\']*)\')\)~msi', function ($m) {
                return '\'' . hex2bin($m[1]) . '\'';
            }, $res);
        }
        if (strpos($res, 'pack("H') !== false) {
            $res = preg_replace_callback('~pack\("([^"]+)",\s*(?|"([^"]*)"|\'([^\']*)\')\)~msi', function ($m) {
                return '\'' . pack($m[1], $m[2]) . '\'';
            }, $res);
        }
        return $res;
    }

    /**
     * Get text inside quotes (' or ")
     *
     * @param $string
     * @return string
     */
    public static function getTextInsideQuotes($string)
    {
        if (preg_match_all('/("(.*)")/msi', $string, $matches)) {
            $array = end($matches);
            return @end($array);
        }

        if (preg_match_all('/\((\'(.*)\')/msi', $string, $matches)) {
            $array = end($matches);
            return @end($array);
        }

        return '';
    }

    /**
     * Get the value in quotes, the parity of the quotes is not checked.
     *
     * @param $string
     * @return array
     */
    public static function getNeedles($string)
    {
        preg_match_all("/'(.*?)'/msi", $string, $matches);

        return (empty($matches)) ? [] : $matches[1];
    }

    /**
     * Apply some formatting rules to the code
     *
     * @param $string
     * @return string
     */
    public static function formatPHP($string)
    {
        $string = str_replace('<?php', '', $string);
        $string = str_replace('?>', '', $string);
        $string = str_replace(PHP_EOL, "", $string);
        $string = str_replace(";", ";\n", $string);
        $string = str_replace("}", "}\n", $string);
        return $string;
    }

    /**
     * Parse array values of string and return array
     *
     * @param $string
     * @return array
     */
    public static function prepareArray($string)
    {
        $string = rtrim($string, ',');
        $array_string = Helpers::normalize($string);
        $list_str = explode(',', $array_string);
        $result = [];
        foreach ($list_str as $element) {
            $key = null;
            $value = $element;
            if (strpos($element, '=>') !== false) {
                list($key, $value) = explode('=>', $element);
            }
            $key = is_null($key) ? $key : trim($key, '\'"');
            $value = is_null($value) ? $value : trim($value, '\'"');

            if (is_null($key)) {
                $result[] = $value;
            }
            else {
                $result[$key] = $value;
            }
        }
        return $result;
    }

    /**
     * Detect text encoding
     *
     * @param $text
     * @return false|string
     */
    public static function detect_utf_encoding($text)
    {
        $first2 = substr($text, 0, 2);
        $first3 = substr($text, 0, 3);
        $first4 = substr($text, 0, 4);

        if ($first4 == chr(0x00) . chr(0x00) . chr(0xFE) . chr(0xFF)) {
            return 'UTF-32BE';
        } elseif ($first4 == chr(0xFF) . chr(0xFE) . chr(0x00) . chr(0x00)) {
            return 'UTF-32LE';
        } elseif ($first2 == chr(0xFE) . chr(0xFF)) {
            return 'UTF-16BE';
        } elseif ($first2 == chr(0xFF) . chr(0xFE)) {
            return 'UTF-16LE';
        }

        return false;
    }

    /**
     * Function safety check
     *
     * @param $func Function name
     * @return bool
     */
    public static function isSafeFunc($func)
    {
        $safeFuncs = [
            'base64_decode', 'gzinflate', 'gzdecode', 'gzuncompress', 'strrev', 'strlen',
            'str_rot13', 'urldecode', 'rawurldecode', 'stripslashes', 'chr',
            'htmlspecialchars_decode', 'convert_uudecode','pack', 'ord',
            'str_repeat', 'sprintf', 'str_replace', 'strtr', 'hex2bin',
            'trim', 'ltrim', 'rtrim', 'helpers::unserialize', 'utf8_encode',
        ];

        return in_array(strtolower($func), $safeFuncs);
    }

    /**
     * Convert the function to a safe one and return a boolean result was it possible to do it
     *
     * @param $func
     * @return bool
     */
    public static function convertToSafeFunc(&$func)
    {
        $replacedFuncs = [
            'unserialize' => 'Helpers::unserialize',
        ];

        $lowerFunc = strtolower($func);

        if (isset($replacedFuncs[$lowerFunc])) {
            $func = $replacedFuncs[$lowerFunc];
        }

        return self::isSafeFunc($func);
    }

    /**
     * Calculates a simple mathematical construct
     *
     * @param $task
     * @return string
     */
    public static function calculateMathStr($task)
    {
        $res = $task;

        while (preg_match('~\(?(\d+)\s?([+\-*\/])\s?(\d+)\)?~', $res, $subMatch)) {
            if (count($subMatch) === 4) {
                list($subSearch, $number_1, $operator, $number_2) = $subMatch;
                $res = str_replace($subSearch, self::calc("$number_1$operator$number_2"), $res);
            } else {
                return $res;
            }
        }

        return $res;
    }

    /**
     * From the content located in the input variable $content, get the values of the variables that can be calculated using the dictionary ($dictionary).
     * For example:
     * $dictionary: 'adnmpytr%uiqchsw_6jfoxkebzgl4v'
     * $content: $L1=$L1{8}.$L1{12}
     * return: ['$L1' => '%c']
     *
     * @param string $dictionary
     * @param string $content
     *
     * @return array
     */
    public static function getVarsFromDictionary($dictionary, $content) : array
    {
        $vars = [];
        preg_match_all('~(\$(?:[^\w]+|\w+)\s*=(\s?\.?\s?\$(?:[^\w]+|\w+)[{\[]\d+[\]}])+)~msi', $content, $concatMatches);
        for ($i = 0; $iMax = count($concatMatches[0]), $i <= $iMax; $i++) {
            preg_match_all('~(\$(?:[^\w]+|\w+)(=))?(\s?(\.?)\s?\$(?:[^\w]+|\w+)[{\[](\d+)[\]}])~msi',
                $concatMatches[0][$i], $varMatches);
            for ($j = 0; $jMax = count($varMatches[0]), $j < $jMax; $j++) {
                $varName = substr($varMatches[1][0], 0, -1);
                $value = $dictionary[(int)$varMatches[5][$j]] ?? '';

                if ($varMatches[2][$j] === '=') {
                    $vars[$varName] = $value;
                } else {
                    $vars[$varName] .= $value;
                }
            }
        }
        return $vars;
    }

    /**
     * From the content located in the input variable $content, calculate the variable values of which are concatenated from the variables of the dictionaries located in $vars.
     * Dictionary variables must already be in $vars when the function is run.
     *
     * @param array  $vars
     * @param string $content
     *
     * @return array
     */
    public static function getVarsFromDictionaryDynamically(array &$vars = [], string $content = ''): array
    {
        preg_match_all('~(\$(?:GLOBALS\[\')?\w+)(?:\'\])?(\.)?\s?\.?=\s?((?:\$(?:GLOBALS\[\')?\w+(?:\'\])?[{\[]?\d*[}\]]?\s?\.?\s?)+);~msi', $content, $varsMatches, PREG_SET_ORDER);

        foreach ($varsMatches as $varsMatch) {
            preg_match_all('~(\$(?:GLOBALS\[\')?\w+)(?:\'])?[{\[]?(\d+)?[}\]]?~msi', $varsMatch[3], $subVarsMatches, PREG_SET_ORDER);
            $concat = '';
            $varsMatch[1] = str_replace('GLOBALS[\'', '', $varsMatch[1]);
            foreach ($subVarsMatches as $subVarsMatch) {
                $subVarsMatch[1] = str_replace('GLOBALS[\'', '', $subVarsMatch[1]);
                if (isset($subVarsMatch[2])) {
                    $concat .= $vars[$subVarsMatch[1]][(int)$subVarsMatch[2]] ?? '';
                } else if ($varsMatch[1] !== $subVarsMatch[1]) {
                    $concat .= $vars[$subVarsMatch[1]];
                }
            }
            if (isset($vars[$varsMatch[1]])) {
                $vars[$varsMatch[1]] .= $concat;
            } else {
                $vars[$varsMatch[1]] = $concat;
            }
        }
        return $vars;
    }

    /**
     * Concatenate content of variables.
     * Examples: CheckDeobfuscationHelpersTest::testConcatVariableValues
     *
     * @param string $str
     * @return string
     */
    public static function concatVariableValues($str) : string
    {
        preg_match_all('/\$\w+\s?(\.?)=\s?"([\w=\+\/]+)"/', $str, $concatVars);
        $strVar = '';
        foreach ($concatVars[2] as $index => $concatVar) {
            if ($concatVars[1][$index] === '.') {
                $strVar .= $concatVar;
            } else {
                $strVar = $concatVar;
            }
        }
        return $strVar;
    }

    /**
     * Concatenate simple strings inside which there may be chunks of PHP code
     * Examples: CheckDeobfuscationHelpersTest::testConcatStr
     *
     * @param string $str
     * @return string
     */
    public static function concatStr($str) : string
    {
        preg_match_all('~(\.?)\s?[\'"(]([\w=\+/%&();]+)[)\'"]\s?~msi', $str, $concatStrings);
        $strVar = '';
        foreach ($concatStrings[2] as $index => $concatString) {
            if ($concatStrings[1][$index] === '.') {
                $strVar .= $concatString;
            } else {
                $strVar = $concatString;
            }
        }
        return $strVar;
    }

    /**
     * Concats simple strings without variable in content globally
     * Examples: CheckDeobfuscationHelpersTest::concatStringsInContent()
     *
     * @param string $str
     * @return string
     */
    public static function concatStringsInContent($str) : string
    {
        $strVar = preg_replace_callback('~(?:[\'"(][\w=();]*[)\'"]\s?\.?\s?){2,}~msi', static function ($m) {
            return '\'' . self::concatStr($m[0]) . '\'';
        }, $str);
        return $strVar;
    }

    /**
     * Replace the elements of the dictionary array with its values.
     * Examples: CheckDeobfuscationHelpersTest::testReplaceVarsFromDictionary()
     *
     * @param string $dictionaryVar
     * @param array $dictionaryValue
     * @param string $str
     * @param bool $quote
     *
     * @return string
     */
    public static function replaceVarsFromDictionary($dictionaryVar, $dictionaryValue, $str, $quote = true) : string
    {
        $result = $str;
        $result = preg_replace_callback('~(?:(\$(?:GLOBALS\[[\'"])?\w+(?:[\'"]\])?)[\[{][\'"(]?([\da-fx]+)[\'")]?[\]}]\s?(\.)?\s?)~msi',
            function ($match) use ($dictionaryValue, $dictionaryVar, $quote) {
                if (substr($match[2], 0, 2) === '0x') {
                    $match[2] = hexdec($match[2]);
                }
                if ($match[1] !== $dictionaryVar || !isset($dictionaryValue[(int)$match[2]])) {
                    return $match[0];
                }
                $lastChar = $match[3] ?? '';
                $value = $dictionaryValue[(int)$match[2]];
                $value = str_replace(['\'', '.'], ['@@quote@@', '@@dot@@'], $value);
                $value = $quote ? '\'' . $value . '\'' : $value;
                return $value . $lastChar;
            },
            $result
        );
        $result = str_replace('\'.\'', '', $result);
        $result = str_replace(['@@quote@@', '@@dot@@'], ['\\\'', '.'], $result);
        return $result;
    }

    /**
     * @param string $arrayName
     * @param array  $array
     * @param string $str
     *
     * @return string
     */
    public static function replaceVarsByArrayName(string $arrayName, array $array, string $str): string
    {
        $result = preg_replace_callback('~\s?(\$\w+)\s?\[\s?(\d+)\s?\]\s?~msi',
            function ($match) use ($array, $arrayName) {
                if ($match[1] !== $arrayName) {
                    return $match[0];
                }
                return $array[$match[2]] ?? $match[0];
            },
            $str
        );

        return $result;
    }

    /**
     * Collects simple or concated vars from str
     * @param string $str
     * @param string $trimQuote
     * @param array $vars
     * @param bool $remove
     *
     * @return array
     */
    public static function collectVars(&$str, $trimQuote = '"', &$vars = [], $remove = false) : array
    {
        if (!is_string($str)) {
            return $vars;
        }
        if (is_string($trimQuote)) {
            $tmp = $trimQuote;
            $trimQuote = [];
            $trimQuote[] = $tmp;
        }

        preg_match_all('~(\$(?:GLOBALS\[[\'"])?\w+)(?:[\'"]\])?\s?(\.)?=\s?([\'"].*?[\'"]);~msi', $str, $matches);

        foreach ($matches[1] as $index => $match) {
            $varName = $match;
            $varName = str_replace(['GLOBALS[\'', 'GLOBALS["'], '', $varName);
            $varValue = $matches[3][$index];
            foreach ($trimQuote as $quote) {
                $varValue = str_replace("$quote.$quote", '', $varValue);
                $varValue = trim($varValue, $quote);
            }
            $varValue = stripcslashes($varValue);
            if ($matches[2][$index] !== '.') {
                $vars[$varName] = $varValue;
            } else {
                $vars[$varName] .= $varValue;
            }
        }
        if ($remove) {
            $str = str_replace($matches[0], '', $str);
        }

        return $vars;
    }

    /**
     * Collects concated variable vars or str from str
     * @param string $str
     * @param string $trimQuote
     * @param array $vars
     * @param bool $remove
     *
     */
    public static function collectConcatedVars(&$str, string $trimQuote = '"', &$vars = [], $remove = false): array
    {
        if (!isset($vars)) {
            $vars = [];
        }
        if (!is_string($str)) {
            return $vars;
        }
        preg_match_all('~(\$\w+)\s?(\.)?=((?:\s?\.?\s?(?:[\'"][^"\']+[\'"]|\$\w{1,50}))+);~msi', $str, $matches, PREG_SET_ORDER);

        foreach ($matches as $match) {
            $varName = $match[1];
            $varValue = '';

            preg_match_all('~[\'"]([^"\']+)[\'"]|(\$\w{1,50})~msi', $match[3], $varsMatch, PREG_SET_ORDER);
            foreach ($varsMatch as $varMatch) {

                if ($varMatch[1] !== '') {
                    $varValue .= $varMatch[1];
                } else {
                    $varValue .= $vars[$varMatch[2]] ?? '';
                }

                $varValue = str_replace("$trimQuote.$trimQuote", '', $varValue);
                $varValue = stripcslashes(trim($varValue, $trimQuote));
            }

            if ($match[2] !== '.') {
                $vars[$varName] = $varValue;
            } else {
                $vars[$varName] .= $varValue;
            }

            if ($remove) {
                $str = str_replace($match[0], '', $str);
            }
        }

        return $vars;
    }

    /**
     * Collects simple or concated str
     * @param string $str
     * @param string $trimQuote
     *
     * @return string
     */
    public static function collectStr($str, string $trimQuote = '"') : string
    {
        preg_match('~["\'\w%=\.\+\/]+~msi', $str, $match);

        $str = str_replace("$trimQuote.$trimQuote", '', $match[0]);
        $str = trim($str, $trimQuote);

        return $str;
    }

    /**
     * Collects function wrapped vars with one arg from str
     * ex. var1 = base64_decode(str1); var2 = gzinflate(str2); and etc.
     *
     * @param string $str
     *
     * @return array
     */
    public static function collectFuncVars(string &$str, &$vars = [], $quotes = true, $delete = false): array
    {
        preg_match_all('~(\$\w+)\s*=\s*(\w+)\([\'"]([\w+/=\*]+)[\'"](?:,\s*[\'"]([\w+/=]*)[\'"])?(?:,\s*[\'"]([\w+/=]+)[\'"])?\);~msi', $str, $matches, PREG_SET_ORDER);

        foreach ($matches as $match) {
            $func = $match[2];
            $param1 = $match[3];
            $param2 = $match[4];
            $param3 = $match[5];

            if (self::convertToSafeFunc($func)) {
                if ($func === 'str_replace') {
                    $ret = @self::executeWrapper($func, [$param1, $param2, $param3]);
                } else if (in_array($func, ['trim', 'ltrim', 'rtrim', 'pack'])) {
                    $ret = @self::executeWrapper($func, [$param1, $param2]);
                } else {
                    $ret = @self::executeWrapper($func, [$param1]);
                }
            }
            $vars[$match[1]] = self::convertToSafeFunc($ret) ? $ret : ($quotes ? "'$ret'" : $ret);

            if ($delete) {
                $str = str_replace($match[0], '', $str);
            }
        }

        return $vars;
    }

    /**
     * Collects chr wrapped vars (concated or not) with one arg from str
     * ex. var1 = chr(123+323); var2 = chr(122+5432); and etc.
     *
     * @param string $str
     *
     * @return array
     */
    public static function collectChrVars(string $str, &$vars = []): array
    {
        preg_match_all(
            '~(\$\w{1,50})\s?=\s?((?:\$\w{1,50}\s?\(\d+[-+*//\s]+\d+\)[\s.]*)+);~msi',
            $str,
            $chrVars,
            PREG_SET_ORDER
        );

        foreach ($chrVars as $varStr) {
            $func = MathCalc::calcRawString($varStr[2]);
            preg_match_all('~\d+~msi', $func, $nums, PREG_SET_ORDER);
            $func = '';
            foreach ($nums as $num) {
                $func .= chr($num[0]);
            }
            $vars[$varStr[1]] = $func;
        }

        return $vars;
    }

    /**
     * @param array  $vars
     * @param string $str
     *
     * @return string
     */
    public static function replaceVarsFromArray(array $vars, string $str, bool $isFunc = false, $toStr = false) : string
    {
        $result = $str;

        uksort($vars, static function($a, $b) {
            return strlen($b) <=> strlen($a);
        });
        foreach ($vars as $name => $value) {
            $sub_name = substr($name, 1);
            $result = preg_replace_callback('~{?(@)?\${?[\'"]?GLOBALS[\'"]?}?\[[\'"](\w+)[\'"]\]}?~msi',
                function ($m) use ($value, $sub_name, $toStr) {
                    if ($m[2] !== $sub_name) {
                        return $m[0];
                    }
                    if ($toStr) {
                        return $m[1] . "'$value'";
                    }

                    return $m[1] . $value;
                }, $result);

            if (!is_string($value)) {
                continue;
            }
            $result = str_replace(['{' . $name . '}', $name . '('], [$value, trim($value, '\'"') . '('],
                $result);

            if (!$isFunc && !$toStr) {
                $result = str_replace($name, $value, $result);
            } else if ($toStr) {
                $result = str_replace($name, "'$value'", $result);
            }
        }

        return $result;
    }

    /**
     * Removes duplicated string variables after replacing
     *
     * @param string $str
     *
     * @return string
     */
    public static function removeDuplicatedStrVars($str) : string
    {
        return preg_replace('~[\'"]?([^\'"]+)[\'"]?\s?=\s?[\'"]?\1[\'"]?;~msi','', $str);
    }

    /**
     * @param $chars
     * @param $str
     * @return array
     */
    public static function assembleStrings($chars, $str)
    {
        $vars = [];
        array_walk($chars, static function(&$x) {
            $x = "'$x'";
        });
        $parts = explode(';', $str);
        foreach ($parts as &$part) {
            $vals = explode('=', $part);
            $part = str_replace($vals[1], strtr($vals[1], $chars), $part);
        }
        $str = implode(';', $parts);
        $vars = self::collectVars($str, '\'');
        return $vars;
    }

    /**
     * Expand base64decode() function
     *
     * @param string $str
     * @param string $quote
     * @return string
     */
    public static function replaceBase64Decode($str, $quote = '\'')
    {
        $hangs = 10;
        while(preg_match(self::REGEXP_BASE64_DECODE, $str) && $hangs--) {
            $str = preg_replace_callback(self::REGEXP_BASE64_DECODE, static function ($m) use ($quote) {
                if (substr($m[1], 0, 2) === '\x') {
                    $m[1] = stripcslashes($m[1]);
                }
                return $quote . base64_decode($m[1]) . $quote;
            }, $str);
        }
        return $str;
    }

    /**
     * Expand hex2bin() function
     *
     * @param string $str
     * @param string $quote
     * @return string
     */
    public static function replaceHex2Bin($str, $quote = '\'')
    {
        return preg_replace_callback('~hex2bin\s*\(\s*[\'"]([^\'"]*)[\'"]\s*\)~msi', static function ($m) use ($quote) {
            return $quote . hex2bin($m[1]) . $quote;
        }, $str);
    }

    /**
     * Calc min(), max() and round().
     * This function can be used with simple constructions, if they are complex, then it is better to use a separate MathCalc class.
     *
     * @param string $string
     * @param int $max_iterations
     * @return string
     */
    public static function replaceMinMaxRound($string, $max_iterations = 15)
    {
        $i = 0;
        $regexp_for_multi_min_max_round = '~(?:min|max|round)\(\s*\d+[\.\,\|\s\|+\|\-\|\*\|\/]([\d\s\.\,\+\-\*\/]+)?\)~msi';
        while (preg_match($regexp_for_multi_min_max_round, $string) && $i < $max_iterations) {
            $string = preg_replace_callback($regexp_for_multi_min_max_round, ['Helpers','calc'], $string);
            $i++;
        }

        $regexp_for_single_min_max_round = '~(?:min|max|round)\(\s*\d+\s*\)~msi';
        while (preg_match($regexp_for_single_min_max_round, $string) && $i < $max_iterations) {
            $string = preg_replace_callback($regexp_for_single_min_max_round, ['Helpers','calc'], $string);
            $i++;
        }

        $regexp_for_brackets = '~\(\s*\d+[\.\|\s\|+\|\-\|\*\|\/]([\d\s\.\+\-\*\/]+)?\)~msi';
        while (preg_match($regexp_for_brackets, $string) && $i < $max_iterations) {
            $string = preg_replace_callback($regexp_for_brackets, ['Helpers','calc'], $string);
            $i++;
        }

        return $string;
    }

    /**
     * Calc XOR with key
     *
     * @param string $encrypted
     * @param string $key
     * @return string
     */
    public static function xorWithKey($encrypted, $key)
    {
        $res = '';
        for ($i = 0, $iMax = strlen($encrypted); $i < $iMax; ) {
            for ($j = 0; $j < strlen($key) && $i < strlen($encrypted); $j++, $i++) {
                $res .= $encrypted[$i] ^ $key[$j];
            }
        }
        return $res;
    }

    /**
     * Calc XOR when char xored with previous char
     *
     * @param string $encrypted
     * @return string
     */
    public static function xorWithPrevChar($encrypted)
    {
        $res = '';
        for ($i = 0, $iMax = strlen($encrypted); $i < $iMax; $i++) {
            $num = $encrypted[$i];
            $res .= $encrypted[++$i] ^ $num;
        }
        return $res;
    }

    /**
     * Similar to the native PHP function unserialize(), but it is safe as it only supports simple data types.
     *
     * @param string $string
     * @return array|bool|float|int|string|null
     */
    public static function unserialize(&$string)
    {
        $type = substr($string, 0, 2);
        $string = substr($string, 2);
        switch ($type) {
            case 'N;':
                return null;
            case 'b:':
                list($ret, $string) = explode(';', $string, 2);
                return (bool)(int)$ret;
            case 'i:':
                list($ret, $string) = explode(';', $string, 2);
                return (int)$ret;
            case 'd:':
                list($ret, $string) = explode(';', $string, 2);
                return (float)$ret;
            case 's:':
                list($length, $string) = explode(':', $string, 2);
                $length = (int) $length;
                if (($length > strlen($string) - 3) || ($string[0] !== '"') || (substr($string, $length + 1, 2) !== '";')) {
                    return '';
                }
                $ret = substr($string, 1, $length);
                $string = substr($string, $length + 3);
                return $ret;
            case 'a:':
                $ret = [];
                list($length, $string) = explode(':', $string, 2);
                if ($string[0] !== '{') {
                    return '';
                }
                $length = (int) $length;
                $string = substr($string, 1);
                for ($i= 0; $i < $length; $i++) {
                    $ret[self::unserialize($string)] = self::unserialize($string);
                }
                if ($string === '') {
                    return $ret;
                }
                $end = substr($string, 0, 2);
                if ($end !== '' && $end !== '};' && $end !== '}' && $end !== '}}') {
                    return '';
                }
                $string = substr($string, 2);
                return $ret;
            case 'O:':
                list($length, $string) = explode(':', $string, 2);
                $length = (int) $length;
                $string = substr($string, $length + 3);
                list($length, $string) = explode(':', $string, 2);
                $string = preg_replace('~{([^{}]*+(?:(?R)[^{}]*)*+)}~msi', '', $string);
                return '';
            default:
                return '';
        }
    }

    /**
     * Post processing after deobfuscation
     *
     * @param string $deobfuscated
     * @return string
     */
    public static function postProcess($deobfuscated) : string
    {
        $deobfuscated = preg_replace_callback('~"[\w\\\\\s=;_<>&/\.-]+"~msi', static function ($matches) {
            return preg_match('~\\\\x[2-7][0-9a-f]|\\\\1[0-2][0-9]|\\\\[3-9][0-9]|\\\\0[0-4][0-9]|\\\\1[0-7][0-9]~msi', $matches[0]) ? stripcslashes($matches[0]) : $matches[0];
        }, $deobfuscated);

        $deobfuscated = preg_replace_callback('~echo\s*"((.*?[^\\\\])??((\\\\\\\\)+)?+)"~msi', static function ($matches) {
            return preg_match('~\\\\x[2-7][0-9a-f]|\\\\1[0-2][0-9]|\\\\[3-9][0-9]|\\\\0[0-4][0-9]|\\\\1[0-7][0-9]~msi', $matches[0]) ? stripcslashes($matches[0]) : $matches[0];
        }, $deobfuscated);

        preg_match_all('~(global\s*(\$[\w_]+);)\2\s*=\s*"[^"]+";~msi', $deobfuscated, $matches, PREG_SET_ORDER);
        foreach ($matches as $match) {
            $deobfuscated = str_replace($match[0], '', $deobfuscated);
            $deobfuscated = str_replace($match[1], '', $deobfuscated);
        }

        preg_match_all('~\$\{"GLOBALS"\}\[[\'"](\w+)[\'"]\]=["\'](\w+)[\'"];~msi', $deobfuscated, $matches, PREG_SET_ORDER);
        foreach ($matches as $match) {
            $deobfuscated = preg_replace_callback('~\$\{\$\{"GLOBALS"\}\[[\'"](\w+)[\'"]\]\}~msi', static function ($matches) use ($match) {
                if ($matches[1] !== $match[1]) {
                    return $matches[0];
                }
                return '$' . $match[2];
            }, $deobfuscated);
            $deobfuscated = str_replace($match[0], '', $deobfuscated);
        }

        if (strpos($deobfuscated, '${$') !== false) {
            preg_match_all('~\$\{(\$\w+)\}~msi', $deobfuscated, $matches);
            preg_match_all('~(\$\w+)\s*=\s*["\'](\w+)[\'"];~msi', $deobfuscated, $matches2);
            $replace_to = [];
            foreach ($matches[1] as $k => $match) {
                $index = array_search($match, $matches2[1]);
                if ($index !== false) {
                    $replace_to[] = '$' . $matches2[2][$index];
                } else {
                    unset($matches[0][$k]);
                }
            }
            if (!empty($replace_to)) {
                $deobfuscated = str_replace($matches[0], $replace_to, $deobfuscated);
            }
        }

        if (strpos($deobfuscated, 'chr(')) {
            $deobfuscated = preg_replace_callback('~chr\((\d+)\)~msi', static function ($matches) {
                return "'" . chr($matches[1]) . "'";
            }, $deobfuscated);
        }
        return $deobfuscated;
    }

    /*************************************************************************************************************/
    /*                                Helper functions for individual obfuscators                                */
    /*************************************************************************************************************/

    /**
     * @param $a
     * @param $b
     *
     * @return string
     */
    public static function decodefuncDictVars($a, $b)
    {
        $c = preg_split("//", $a, -1, PREG_SPLIT_NO_EMPTY);
        foreach ($c as $d => $e) {
            $c[$d] = chr(ord($e) + $b);
        }
        $res = implode("", $c);

        return $res;
    }

    /**
     * @param $string
     * @param $amount
     *
     * @return string
     */
    public static function rotencode($string, $amount)
    {
        $key = substr($string, 0, 1);
        if (strlen($string) == 1) {
            return chr(ord($key) + $amount);
        } else {
            return chr(ord($key) + $amount) . self::rotencode(
                    substr($string, 1, strlen($string) - 1),
                    $amount);
        }
    }

    /**
     * @param string $data
     * @param string $key
     *
     * @return string
     */
    public static function decodeEvalFileContentBySize(string $data, string $key): string
    {
        $res = '';
        $key = md5($key) . md5($key . $key);
        $key_len = strlen($key);
        $data_len = strlen($data);
        for ($i = 0; $i < $data_len; $i++) {
            $res .= chr(ord($data[$i]) ^ ord($key[$i % $key_len]));
        }

        return $res;
    }

    /**
     * @param string $key
     * @param string $data
     *
     * @return string
     */
    public static function decodeFuncVars(string $key, string $data): string
    {
        $hakfku = $data;
        $keyLen = strlen($key);
        $dataLen = strlen($hakfku);
        $res = "";
        for ($i = 0; $i < $dataLen;) {
            for ($j = 0; ($j < $keyLen && $i < $dataLen); $j++, $i++) {
                $res .= $hakfku[$i] ^ $key[$j];
            }
        }

        return $res;
    }

    public static function dictionarySampleDecode($string)
    {
        $str1 = substr($string, 0, 5);
        $str2 = substr($string, 7, -7);
        $str3 = substr($string, -5);
        return gzinflate(base64_decode($str1 . $str2 . $str3));
    }

    public static function dictionarySampleDecode2($string)
    {
        $last = substr($string,-2);
        $arr = str_split($string);
        $result = '';
        for ($i = 0; $i < count($arr) - 2; $i = $i + 2) {
            $result .= $arr[$i + 1] . $arr[$i];
        }
        $result .= $last;
        return $result;
    }

    public static function codelock_dec($codelock_v)
    {
        switch ($codelock_v) {
            case "A":
                $dv = 0;
                break;
            case "B":
                $dv = 1;
                break;
            case "C":
                $dv = 2;
                break;
            case "D":
                $dv = 3;
                break;
            case "E":
                $dv = 4;
                break;
            case "F":
                $dv = 5;
                break;
            case "G":
                $dv = 6;
                break;
            case "H":
                $dv = 7;
                break;
            case "I":
                $dv = 8;
                break;
            case "J":
                $dv = 9;
                break;
            case "K":
                $dv = 10;
                break;
            case "L":
                $dv = 11;
                break;
            case "M":
                $dv = 12;
                break;
            case "N":
                $dv = 13;
                break;
            case "O":
                $dv = 14;
                break;
            case "P":
                $dv = 15;
                break;
            case "Q":
                $dv = 16;
                break;
            case "R":
                $dv = 17;
                break;
            case "S":
                $dv = 18;
                break;
            case "T":
                $dv = 19;
                break;
            case "U":
                $dv = 20;
                break;
            case "V":
                $dv = 21;
                break;
            case "W":
                $dv = 22;
                break;
            case "X":
                $dv = 23;
                break;
            case "Y":
                $dv = 24;
                break;
            case "Z":
                $dv = 25;
                break;
            case "a":
                $dv = 26;
                break;
            case "b":
                $dv = 27;
                break;
            case "c":
                $dv = 28;
                break;
            case "d":
                $dv = 29;
                break;
            case "e":
                $dv = 30;
                break;
            case "f":
                $dv = 31;
                break;
            case "g":
                $dv = 32;
                break;
            case "h":
                $dv = 33;
                break;
            case "i":
                $dv = 34;
                break;
            case "j":
                $dv = 35;
                break;
            case "k":
                $dv = 36;
                break;
            case "l":
                $dv = 37;
                break;
            case "m":
                $dv = 38;
                break;
            case "n":
                $dv = 39;
                break;
            case "o":
                $dv = 40;
                break;
            case "p":
                $dv = 41;
                break;
            case "q":
                $dv = 42;
                break;
            case "r":
                $dv = 43;
                break;
            case "s":
                $dv = 44;
                break;
            case "t":
                $dv = 45;
                break;
            case "u":
                $dv = 46;
                break;
            case "v":
                $dv = 47;
                break;
            case "w":
                $dv = 48;
                break;
            case "x":
                $dv = 49;
                break;
            case "y":
                $dv = 50;
                break;
            case "z":
                $dv = 51;
                break;
            case "0":
                $dv = 52;
                break;
            case "1":
                $dv = 53;
                break;
            case "2":
                $dv = 54;
                break;
            case "3":
                $dv = 55;
                break;
            case "4":
                $dv = 56;
                break;
            case "5":
                $dv = 57;
                break;
            case "6":
                $dv = 58;
                break;
            case "7":
                $dv = 59;
                break;
            case "8":
                $dv = 60;
                break;
            case "9":
                $dv = 61;
                break;
            case "+":
                $dv = 62;
                break;
            case "/":
                $dv = 63;
                break;
            case "=":
                $dv = 64;
                break;
            default:
                $dv = 0;
                break;
        }
        return $dv;
    }

    public static function codelock_run($ciph, $key)
    {
        $m = 0;
        $abc = "";
        for ($i = 0, $iMax = strlen($ciph); $i < $iMax; $i++) {
            $c = substr($ciph, $i, 1);
            $dv = Helpers::codelock_dec($c);
            $dv = ($dv - $m) / 4;
            $fb = decbin($dv);
            while (strlen($fb) < 4) {
                $fb = "0" . $fb;
            }
            $abc = $abc . $fb;
            $m++;
            if ($m > 3) {
                $m = 0;
            }
        }
        $kl = 0;
        $pd = "";
        for ($j = 0, $jMax = strlen($abc); $j < $jMax; $j = $j + 8) {
            $c = substr($abc, $j, 8);
            $k = substr($key, $kl, 1);
            $dc = bindec($c);
            $dc = $dc - strlen($key);
            $c = chr($dc);
            $kl++;
            if ($kl >= strlen($key)) {
                $kl = 0;
            }
            $dc = ord($c) ^ ord($k);
            $p = chr($dc);
            $pd = $pd . $p;
        }
        return $pd;
    }

    public static function codelock_dec_int($codelock_decint_code, $codelock_calc_key)
    {
        if ($codelock_calc_key !== "") {
            $codelock_calc_key = base64_encode($codelock_calc_key);
            $codelock_k1 = substr($codelock_calc_key, 0, 1);
            $codelock_k2 = substr($codelock_calc_key, 1, 1);
            $codelock_k3 = substr($codelock_calc_key, 2, 1);
            $codelock_decint_code = str_replace("$", "$codelock_k1", $codelock_decint_code);
            $codelock_decint_code = str_replace("(", "$codelock_k2", $codelock_decint_code);
            $codelock_decint_code = str_replace(")", "$codelock_k3", $codelock_decint_code);
        }
        $codelock_decint_code = base64_decode($codelock_decint_code);
        return $codelock_decint_code;
    }

    public static function decodeClassDecryptedWithKey(string $data, int $num, string $key): string
    {
        $CTL = function ($start, &$data, &$data_long)
        {
            $n = strlen($data);
            $tmp = unpack('N*', $data);
            $j = $start;
            foreach ($tmp as $value) $data_long[$j++] = $value;
            return $j;
        };

        $LtoC = function ($l)
        {
            return pack('N', $l);
        };

        $add = function ($i1, $i2)
        {
            $result = 0.0;
            foreach (func_get_args() as $value) {
                if (0.0 > $value) {
                    $value -= 1.0 + 0xffffffff;
                }
                $result += $value;
            }
            if (0xffffffff < $result || -0xffffffff > $result) {
                $result = fmod($result, 0xffffffff + 1);
            }
            if (0x7fffffff < $result) {
                $result -= 0xffffffff + 1.0;
            } elseif (-0x80000000 > $result) {
                $result += 0xffffffff + 1.0;
            }
            return $result;
        };

        $rsLT = function ($integer, $n)
        {
            if (0xffffffff < $integer || -0xffffffff > $integer) {
                $integer = fmod($integer, 0xffffffff + 1);
            }
            if (0x7fffffff < $integer) {
                $integer -= 0xffffffff + 1.0;
            } elseif (-0x80000000 > $integer) {
                $integer += 0xffffffff + 1.0;
            }
            if (0 > $integer) {
                $integer &= 0x7fffffff;
                $integer >>= $n;
                $integer |= 1 << (31 - $n);
            } else {
                $integer >>= $n;
            }
            return $integer;
        };

        $delg = function ($y, $z, &$w, &$k, $num) use ($add, $rsLT)
        {
            $sum = 0xC6EF3720;
            $klhys = 0x9E3779B9;
            $n = $num;
            while ($n-- > 0) {
                $z = $add($z, -($add($y << 4 ^ $rsLT($y, 5), $y) ^ $add($sum, $k[$rsLT($sum, 11) & 3])));
                $sum = $add($sum, -$klhys);
                $y = $add($y, -($add($z << 4 ^ $rsLT($z, 5), $z) ^ $add($sum, $k[$sum & 3])));
            }
            $w[0] = $y;
            $w[1] = $z;
        };

        $resize = function (&$data, $size, $nonull = false)
        {
            $n = strlen($data);
            $nmod = $n % $size;
            if (0 == $nmod) $nmod = $size;
            if ($nmod > 0) {
                if ($nonull) {
                    for ($i = $n; $i < $n - $nmod + $size; ++$i) {
                        $data[$i] = $data[$i % $n];
                    }
                } else {
                    for ($i = $n; $i < $n - $nmod + $size; ++$i) {
                        $data[$i] = chr(0);
                    }
                }
            }
            return $n;
        };

        $ncdL = $CTL(0, $data, $enc_data_long);
        $resize($key, 16, true);
        $n_key_long = $CTL(0, $key, $key_long);
        $data = '';
        $w = array(0, 0);
        $j = 0;
        $len = 0;
        $k = array(0, 0, 0, 0);
        $pos = 0;
        for ($i = 0; $i < $ncdL; $i += 2) {
            if ($j + 4 <= $n_key_long) {
                $k[0] = $key_long[$j];
                $k[1] = $key_long[$j + 1];
                $k[2] = $key_long[$j + 2];
                $k[3] = $key_long[$j + 3];
            } else {
                $k[0] = $key_long[$j % $n_key_long];
                $k[1] = $key_long[($j + 1) % $n_key_long];
                $k[2] = $key_long[($j + 2) % $n_key_long];
                $k[3] = $key_long[($j + 3) % $n_key_long];
            }
            $j = ($j + 4) % $n_key_long;
            $delg($enc_data_long[$i], $enc_data_long[$i + 1], $w, $k, $num);
            if (0 == $i) {
                $len = $w[0];
                if (4 <= $len) {
                    $data .= $LtoC($w[1]);
                } else {
                    $data .= substr($LtoC($w[1]), 0, $len % 4);
                }
            } else {
                $pos = ($i - 1) * 4;
                if ($pos + 4 <= $len) {
                    $data .= $LtoC($w[0]);
                    if ($pos + 8 <= $len) {
                        $data .= $LtoC($w[1]);
                    } elseif ($pos + 4 < $len) {
                        $data .= substr($LtoC($w[1]), 0, $len % 4);
                    }
                } else {
                    $data .= substr($LtoC($w[0]), 0, $len % 4);
                }
            }
        }
        return $data;
    }

    public static function stripsquoteslashes($str)
    {
        $res = '';
        for ($i = 0, $iMax = strlen($str); $i < $iMax; $i++) {
            if (isset($str[$i+1]) && ($str[$i] == '\\' && ($str[$i+1] == '\\' || $str[$i+1] == '\''))) {
                continue;
            } else {
                $res .= $str[$i];
            }
        }
        return $res;
    }

    public static function decodeFileGetContentsWithFunc($data, $key)
    {
        $out_data = "";

        for ($i = 0; $i < strlen($data);) {
            for ($j = 0; $j < strlen($key) && $i < strlen($data); $j++, $i++) {
                $out_data .= chr(ord($data[$i]) ^ ord($key[$j]));
            }
        }

        return $out_data;
    }

    public static function decrypt_T_func($l)
    {
        $x2 = 256;
        $W2 = 8;
        $cY = [];
        $I3 = 0;
        $C4 = 0;
        for ($bs = 0, $bsMax = strlen($l); $bs < $bsMax; $bs++) {
            $I3 = ($I3 << 8) + ord($l[$bs]);
            $C4 += 8;
            if ($C4 >= $W2) {
                $C4 -= $W2;
                $cY[] = $I3 >> $C4;
                $I3 &= (1 << $C4) - 1;
                $x2++;
                if ($x2 >> $W2) {
                    $W2++;
                }
            }
        }
        $K5 = range("\x0", "\377");
        $UH = '';
        foreach ($cY as $bs => $xd) {
            if (!isset($K5[$xd])) {
                $iU = $Co . $Co[0];
            } else {
                $iU = $K5[$xd];
            }
            $UH .= $iU;
            if ($bs) {
                $K5[] = $Co . $iU[0];
            }
            $Co = $iU;
        }
        return $UH;
    }

    //from sample_16
    public static function someDecoder($str)
    {
        $str = base64_decode($str);
        $TC9A16C47DA8EEE87 = 0;
        $TA7FB8B0A1C0E2E9E = 0;
        $T17D35BB9DF7A47E4 = 0;
        $T65CE9F6823D588A7 = (ord($str[1]) << 8) + ord($str[2]);
        $i = 3;
        $T77605D5F26DD5248 = 0;
        $block = 16;
        $T7C7E72B89B83E235 = "";
        $T43D5686285035C13 = "";
        $len = strlen($str);

        $T6BBC58A3B5B11DC4 = 0;

        for (; $i < $len;) {
            if ($block == 0) {
                $T65CE9F6823D588A7 = (ord($str[$i++]) << 8);
                $T65CE9F6823D588A7 += ord($str[$i++]);
                $block = 16;
            }
            if ($T65CE9F6823D588A7 & 0x8000) {
                $TC9A16C47DA8EEE87 = (ord($str[$i++]) << 4);
                $TC9A16C47DA8EEE87 += (ord($str[$i]) >> 4);
                if ($TC9A16C47DA8EEE87) {
                    $TA7FB8B0A1C0E2E9E = (ord($str[$i++]) & 0x0F) + 3;
                    for ($T17D35BB9DF7A47E4 = 0; $T17D35BB9DF7A47E4 < $TA7FB8B0A1C0E2E9E; $T17D35BB9DF7A47E4++) {
                        $T7C7E72B89B83E235[$T77605D5F26DD5248 + $T17D35BB9DF7A47E4] =
                            $T7C7E72B89B83E235[$T77605D5F26DD5248 - $TC9A16C47DA8EEE87 + $T17D35BB9DF7A47E4];
                    }
                    $T77605D5F26DD5248 += $TA7FB8B0A1C0E2E9E;
                } else {
                    $TA7FB8B0A1C0E2E9E = (ord($str[$i++]) << 8);
                    $TA7FB8B0A1C0E2E9E += ord($str[$i++]) + 16;
                    for ($T17D35BB9DF7A47E4 = 0; $T17D35BB9DF7A47E4 < $TA7FB8B0A1C0E2E9E;
                         $T7C7E72B89B83E235[$T77605D5F26DD5248 + $T17D35BB9DF7A47E4++] = $str[$i]) {
                    }
                    $i++;
                    $T77605D5F26DD5248 += $TA7FB8B0A1C0E2E9E;
                }
            } else {
                $T7C7E72B89B83E235[$T77605D5F26DD5248++] = $str[$i++];
            }
            $T65CE9F6823D588A7 <<= 1;
            $block--;
            if ($i == $len) {
                $T43D5686285035C13 = $T7C7E72B89B83E235;
                if (is_array($T43D5686285035C13)) {
                    $T43D5686285035C13 = implode($T43D5686285035C13);
                }
                $T43D5686285035C13 = "?" . ">" . $T43D5686285035C13;
                return $T43D5686285035C13;
            }
        }
    }

    public static function someDecoder2($WWAcmoxRAZq, $sBtUiFZaz)   //sample_05
    {
        $JYekrRTYM = str_rot13(gzinflate(str_rot13(base64_decode('y8svKCwqLiktK6+orFdZV0FWWljPyMzKzsmNNzQyNjE1M7ewNAAA'))));
        if ($WWAcmoxRAZq == 'asedferg456789034689gd') {
            $cEerbvwKPI = $JYekrRTYM[18] . $JYekrRTYM[19] . $JYekrRTYM[17] . $JYekrRTYM[17] . $JYekrRTYM[4] . $JYekrRTYM[21];
            return self::convertToSafeFunc($cEerbvwKPI) ? @self::executeWrapper($cEerbvwKPI, [$sBtUiFZaz]) : '';
        } elseif ($WWAcmoxRAZq == 'zfcxdrtgyu678954ftyuip') {
            $JWTDeUKphI = $JYekrRTYM[1] . $JYekrRTYM[0] . $JYekrRTYM[18] . $JYekrRTYM[4] . $JYekrRTYM[32] .
                $JYekrRTYM[30] . $JYekrRTYM[26] . $JYekrRTYM[3] . $JYekrRTYM[4] . $JYekrRTYM[2] . $JYekrRTYM[14] .
                $JYekrRTYM[3] . $JYekrRTYM[4];
            return self::convertToSafeFunc($JWTDeUKphI) ? @self::executeWrapper($JWTDeUKphI, [$sBtUiFZaz]) : '';
        } elseif ($WWAcmoxRAZq == 'gyurt456cdfewqzswexcd7890df') {
            $rezmMBMev = $JYekrRTYM[6] . $JYekrRTYM[25] . $JYekrRTYM[8] . $JYekrRTYM[13] . $JYekrRTYM[5] . $JYekrRTYM[11] . $JYekrRTYM[0] . $JYekrRTYM[19] . $JYekrRTYM[4];
            return self::convertToSafeFunc($rezmMBMev) ? @self::executeWrapper($rezmMBMev, [$sBtUiFZaz]) : '';
        } elseif ($WWAcmoxRAZq == 'zcdfer45dferrttuihvs4321890mj') {
            $WbbQXOQbH = $JYekrRTYM[18] . $JYekrRTYM[19] . $JYekrRTYM[17] . $JYekrRTYM[26] . $JYekrRTYM[17] . $JYekrRTYM[14] . $JYekrRTYM[19] . $JYekrRTYM[27] . $JYekrRTYM[29];
            return self::convertToSafeFunc($WbbQXOQbH) ? @self::executeWrapper($WbbQXOQbH, [$sBtUiFZaz]) : '';
        } elseif ($WWAcmoxRAZq == 'zsedrtre4565fbghgrtyrssdxv456') {
            $jPnPLPZcMHgH = $JYekrRTYM[2] . $JYekrRTYM[14] . $JYekrRTYM[13] . $JYekrRTYM[21] . $JYekrRTYM[4] . $JYekrRTYM[17] . $JYekrRTYM[19] . $JYekrRTYM[26] . $JYekrRTYM[20] . $JYekrRTYM[20] . $JYekrRTYM[3] . $JYekrRTYM[4] . $JYekrRTYM[2] . $JYekrRTYM[14] . $JYekrRTYM[3] . $JYekrRTYM[4];
            return self::convertToSafeFunc($jPnPLPZcMHgH) ? @self::executeWrapper($jPnPLPZcMHgH, [$sBtUiFZaz]) : '';
        }
    }

    public static function someDecoder3($str)
    {
        $l = base64_decode($str);
        $lllllll = 0;
        $lllll = 3;
        $llllll = (ord($l[1]) << 8) + ord($l[2]);
        $lllllllll = 16;
        $llllllll = [];
        for ($lllllMax = strlen($l); $lllll < $lllllMax;) {
            if ($lllllllll == 0) {
                $llllll = (ord($l[$lllll++]) << 8);
                $llllll+= ord($l[$lllll++]);
                $lllllllll = 16;
            }
            if ($llllll & 0x8000) {
                $lll = (ord($l[$lllll++]) << 4);
                $lll+= (ord($l[$lllll]) >> 4);
                if ($lll) {
                    $ll = (ord($l[$lllll++]) & 0x0f) + 3;
                    for ($llll = 0;$llll < $ll;$llll++) $llllllll[$lllllll + $llll] = $llllllll[$lllllll - $lll + $llll];
                    $lllllll+= $ll;
                } else {
                    $ll = (ord($l[$lllll++]) << 8);
                    $ll+= ord($l[$lllll++]) + 16;
                    for ($llll = 0;$llll < $ll;$llllllll[$lllllll + $llll++] = ord($l[$lllll]));
                    $lllll++;
                    $lllllll+= $ll;
                }
            } else {
                $llllllll[$lllllll++] = ord($l[$lllll++]);
            }
            $llllll <<= 1;
            $lllllllll--;
        }
        $lllll = 0;
        $lllllllll="?".chr(62);
        $llllllllll = "";
        for (;$lllll < $lllllll;) {
            $llllllllll.= chr($llllllll[$lllll++] ^ 0x07);
        }
        $lllllllll.=$llllllllll.chr(60)."?";
        return $lllllllll;
    }

    public static function PHPJiaMi_decoder($str, $md5, $rand, $lower_range = '')
    {
        $md5_xor = md5($md5);
        $lower_range = !$lower_range ? ord($rand) : $lower_range;
        $layer1 = '';
        for ($i=0, $iMax = strlen($str); $i < $iMax; $i++) {
            $layer1 .= ord($str[$i]) < 245 ? ((ord($str[$i]) > $lower_range && ord($str[$i]) < 245) ? chr(ord($str[$i]) / 2) : $str[$i]) : '';
        }
        $layer1 = base64_decode($layer1);
        $result = '';
        $j = $len_md5_xor = strlen($md5_xor);
        for ($i=0, $iMax = strlen($layer1); $i < $iMax; $i++) {
            $j = $j ? $j : $len_md5_xor;
            $j--;
            $result .= $layer1[$i] ^ $md5_xor[$j];
        }
        return $result;
    }

    public static function someDecoder4($ae, $key)
    {
        $at = [];
        for ($i = 0, $iMax = strlen($key); $i < $iMax; $i++) {
            if ((int)$key[$i] > 0) {
                $at[$i] = $key[$i];
            }
        }
        $at = array_values($at);
        $str = "";
        for ($i = 0, $iMax = count($ae); $i < $iMax; $i++) {
            if ($i < count($ae) - 1) {
                $str .= str_replace(md5($at[$i]), "", $ae[$i]);
            } else {
                $str .= $ae[$i];
            }
        }
        return $str;
    }

    public static function someDecoder5($str, $key, $mn1, $mn2, $mn3)
    {
        $c = array(496, 140, 32);
        if ($key == $mn3) {
            $res = substr($str, $c[0] + $c[1], $c[2]);
        }
        elseif ($key == $mn1) {
            $res = substr($str, $c[0], $c[1]);
        }
        elseif ($key = $mn2) {
            $res = trim(substr($str, $c[0] + $c[1] + $c[2]));
        }
        return $res;
    }

    public static function someDecoder6($a, $b)
    {
        if($b == md5($a)) {
            return base64_decode($a);
        } else {
            echo("The file was modified");
        }
    }

    public static function OELoveDecoder($arg1, $arg2 = '')
    {
        if (empty($arg1)) {
            return '';
        }
        $arg1 = base64_decode($arg1);
        if ($arg2 == '') return ~$arg1;
        //if ($arg2 == '-1') @271552362217();
        $len = strlen($arg1);
        $arg2 = str_pad($arg2, $len, $arg2);
        return $arg2 ^ $arg1;
    }

    public static function aanKFMDigitsDecode($digits)
    {
        $res = '';
        $len = ceil(strlen($digits) / 3) * 3;
        $cipher = str_pad($digits, $len, '0', STR_PAD_LEFT);
        for ($i = 0; $i < (strlen($cipher) / 3);$i++) {
            $res .= chr(substr($cipher, $i * 3, 3));
        }
        return $res;
    }

    public static function gegelShellDecode($str, $pieces)
    {
        $decoded = '';
        $tmp = explode("\n", $str);
        for ($i = 0; $i < sizeof($tmp); $i++) {
            $decoded .= trim($tmp[$i]);
        }
        if (!$pieces) {
            return gzinflate(base64_decode($decoded));
        }
        $res = '';
        for ($i = 0; $i < sizeof($pieces); $i += 2) {
            if ($i % 4) {
                $res .= substr($decoded, $pieces[$i], $pieces[$i + 1]);
            } else {
                $res .= strrev(substr($decoded, $pieces[$i], $pieces[$i + 1]));
            }
        };
        $res = base64_decode($res);
        return $res;
    }

    public static function obf20200414_1_decrypt($data, $key)
    {
        $key = md5($key);
        $x = 0;
        $data = base64_decode($data);
        $len = strlen($data);
        $l = strlen($key);
        $char = '';
        for ($i = 0; $i < $len; $i++) {
            if ($x === $l) {
                $x = 0;
            }
            $char .= substr($key, $x, 1);
            $x++;
        }
        $str = '';
        for ($i = 0; $i < $len; $i++) {
            if (ord(substr($data, $i, 1)) < ord(substr($char, $i, 1))) {
                $str .= chr((ord(substr($data, $i, 1)) + 256) - ord(substr($char, $i, 1)));
            } else {
                $str .= chr(ord(substr($data, $i, 1)) - ord(substr($char, $i, 1)));
            }
        }
        return $str;
    }

    public static function Xxtea_decrypt($str, $key) {
        $str2long = function ($s, $w) {
            $v = unpack("V*", $s. str_repeat("\0", (4 - strlen($s) % 4) & 3));
            $v = array_values($v);
            if ($w) {
                $v[count($v)] = strlen($s);
            }
            return $v;
        };
        $long2str = function ($v, $w) {
            $len = count($v);
            $n = ($len - 1) << 2;
            if ($w) {
                $m = $v[$len - 1];
                if (($m < $n - 3) || ($m > $n)) return false;
                $n = $m;
            }
            $s = array();
            for ($i = 0; $i < $len; $i++) {
                $s[$i] = pack("V", $v[$i]);
            }

            if ($w) {
                return substr(join('', $s), 0, $n);
            } else {
                return join('', $s);
            }
        };

        $int32 = function($n) {
            while ($n >= 2147483648) $n -= 4294967296;
            while ($n <= -2147483649) $n += 4294967296;
            return (int)$n;
        };


        if ($str == "") {
            return "";
        }
        $str = base64_decode($str);
        $v = $str2long($str, false);
        $k = $str2long($key, false);
        if (count($k) < 4) {
            for ($i = count($k); $i < 4; $i++) {
                $k[$i] = 0;
            }
        }

        $n = count($v) - 1;

        $z = $v[$n];
        $y = $v[0];

        $delta = 0x9E3779B9;
        $q = floor(6 + 52 / ($n + 1));
        $sum = $int32($q * $delta);
        while ($sum != 0) {
            $e = $sum >> 2 & 3;
            for ($p = $n; $p > 0; $p--) {
                $z = $v[$p - 1];
                $mx = $int32((($z >> 5 & 0x07ffffff) ^ $y << 2) + (($y >> 3 & 0x1fffffff) ^ $z << 4)) ^ $int32(($sum ^ $y) + ($k[$p & 3 ^ $e] ^ $z));
                $y = $v[$p] = $int32($v[$p] - $mx);
            }
            $z = $v[$n];
            $mx = $int32((($z >> 5 & 0x07ffffff) ^ $y << 2) + (($y >> 3 & 0x1fffffff) ^ $z << 4)) ^ $int32(($sum ^ $y) + ($k[$p & 3 ^ $e] ^ $z));
            $y = $v[0] = $int32($v[0] - $mx);
            $sum = $int32($sum - $delta);
        }

        return $long2str($v, true);
    }

    public static function Xtea_decrypt($text, $key)
    {

        $add = function ($i1, $i2) {
            $result = 0.0;
            foreach (func_get_args() as $value) {
                if (0.0 > $value) {
                    $value -= 1.0 + 0xffffffff;
                }
                $result += $value;
            }

            if (0xffffffff < $result || -0xffffffff > $result) {
                $result = fmod($result, 0xffffffff + 1);
            }

            if (0x7fffffff < $result) {
                $result -= 0xffffffff + 1.0;
            } else if (-0x80000000 > $result) {
                $result += 0xffffffff + 1.0;
            }
            return $result;
        };

        $rshift = function ($integer, $n) {
            if (0xffffffff < $integer || -0xffffffff > $integer) {
                $integer = fmod($integer, 0xffffffff + 1);
            }

            if (0x7fffffff < $integer) {
                $integer -= 0xffffffff + 1.0;
            } else if (-0x80000000 > $integer) {
                $integer += 0xffffffff + 1.0;
            }

            if (0 > $integer) {
                $integer &= 0x7fffffff;
                $integer >>= $n;
                $integer |= 1 << (31 - $n);
            } else {
                $integer >>= $n;
            }
            return $integer;
        };

        $block_decrypt = function ($y, $z, $key) use ($add, $rshift) {
            $delta = 0x9e3779b9;
            $sum = 0xC6EF3720;
            $n = 32;

            for ($i = 0; $i < 32; $i++) {
                $z = $add($z, -($add($y << 4 ^ $rshift($y, 5), $y)
                    ^ $add($sum, $key[$rshift($sum, 11) & 3])));
                $sum = $add($sum, -$delta);
                $y = $add($y, -($add($z << 4 ^ $rshift($z, 5), $z)
                    ^ $add($sum, $key[$sum & 3])));

            }
            return [$y, $z];
        };

        $str2long = function ($data) {
            $tmp = unpack('N*', $data);
            $data_long = [];
            $j = 0;

            foreach ($tmp as $value) $data_long[$j++] = $value;
            return $data_long;
        };

        $long2str = function ($l) {
            return pack('N', $l);
        };

        $_key = '';
        $cbc = 1;

        if(is_array($key)) {
            $_key = $key;
        } else if(isset($key) && !empty($key)) {
            $_key = $str2long(str_pad($key, 16, $key));
        } else {
            $_key = [0, 0, 0, 0];
        }

        $plain = [];
        $cipher = $str2long(base64_decode($text));

        if($cbc == 1) {
            $i = 2;
        } else {
            $i = 0;
        }

        for ($i, $iMax = count($cipher); $i < $iMax; $i += 2) {
            $return = $block_decrypt($cipher[$i], $cipher[$i+1], $_key);
            if($cbc == 1) {
                $plain[] = [$return[0] ^ $cipher[$i - 2], $return[1] ^ $cipher[$i - 1]];
            } else {
                $plain[] = $return;
            }
        }

        $output = "";
        for($i = 0, $iMax = count($plain); $i < $iMax; $i++) {
            $output .= $long2str($plain[$i][0]);
            $output .= $long2str($plain[$i][1]);
        }

        return $output;
    }

    public static function getDecryptKeyForTinkleShell($size)
    {
        $bx = md5(base64_encode($size));
        $len = strlen($bx);
        $arr = [];
        for ($i = 0; $i < $len; $i++) {
            $arr[] = substr($bx, $i, 1);
        }
        $arr = array_unique($arr);
        $newstr = "";
        foreach ($arr as $k => $v) {
            $newstr .= $v;
        }
        if (strlen($newstr) < 9) {
            if (strpos($newstr, 'A') === false) {
                $newstr .= 'A';
            }
            if (strpos($newstr, 'B') === false) {
                $newstr .= 'B';
            }
            if (strpos($newstr, 'C') === false) {
                $newstr .= 'C';
            }
            if (strpos($newstr, 'D') === false) {
                $newstr .= 'D';
            }
            if (strpos($newstr, 'E') === false) {
                $newstr .= 'E';
            }
            if (strpos($newstr, 'F') === false) {
                $newstr .= 'F';
            }
            if (strpos($newstr, 'G') === false) {
                $newstr .= 'G';
            }
        }

        return strtoupper($newstr);
    }

    /**
     * For 4 args
     * @param array $arr
     *
     * @return string
     */
    public static function decodeEvalCreateFunc_1(array $arr) : string
    {
        $args = $arr;

        for ($i = 0; $i < 4; $i++) {
            for ($j = 0, $jMax = strlen($args[$i]); $j < $jMax; $j++) {
                $args[$i][$j] = chr(ord($args[$i][$j]) - ($i ? $args[$j xor $j] : 1));
            }
            if ($i === 2 && self::convertToSafeFunc($args[1]) && self::convertToSafeFunc($args[2])) {
                $args[3] = @self::executeWrapper($args[1], [@self::executeWrapper($args[2], [$args[3]])]);
            }
        }

        return $args[3];
    }

    /**
     * For 3 args
     * @param array $arr
     *
     * @return string
     */
    public static function decodeEvalCreateFunc_2(array $arr) : string
    {
        $args = $arr;

        for ($i = 0; $i < 3; $i++) {
            for ($j = 0, $jMax = strlen($args[$i]); $j < $jMax; $j++) {
                $args[$i][$j] = chr(ord($args[$i][$j]) - 1);
            }
            if ($i === 1 && self::convertToSafeFunc($args[0]) && self::convertToSafeFunc($args[1])) {
                $args[2] = @self::executeWrapper($args[0],[@self::executeWrapper($args[1], [$args[2]])]);
            }
        }

        return $args[2];
    }

    public static function decodeACharCustom($encoded)
    {
        $result = '';
        $i = 0;
        $len = strlen($encoded);
        while ($i < $len) {
            if ($encoded[$i] === ' ') {
                $result .= ' ';
            } else if ($encoded[$i] === '!') {
                $result .= chr((ord($encoded[$i + 1]) - ord('A')) * 16 + (ord($encoded[$i + 2]) - ord('a')));
                $i += 2;
            } else {
                $result .= chr (ord($encoded[$i]) + 1);
            }
            $i++;
        }
        return $result;
    }

    public static function joomlaInjectDecoder($params, $op, $delta)
    {
        $params = explode(',', $params);
        $params = array_reverse($params);
        for ($i = 1, $iMax = count($params); $i < $iMax; $i++) {
            if ($i !== 0 ) {
                $params[$i] = substr($params[$i], 1, -1);
            }
            for ($j = 0, $jMax = strlen($params[$i]); $j < $jMax; $j++) {
                $tmp = ord($params[$i][$j]);
                if ($op === '-') {
                    $tmp = $tmp - $delta;

                } else if ($op === '+') {
                    $tmp = $tmp + $delta;
                }
                $params[$i][$j] = chr($tmp);
            }
            if ($i === 0) {
                break;
            }
            if (self::convertToSafeFunc($params[$i])) {
                $params[0] = @self::executeWrapper($params[$i], [$params[0]]);
            }
            if ($i === $iMax - 1) {
                $i = -1;
            }
        }
        return $params[0];
    }

    public static function deobfuscatorIO_string($string, $key)
    {
        $m = [];
        $n = 0;
        $p = '';
        $string = base64_decode($string);
        for ($i = 0, $iMax = strlen($string); $i < $iMax; $i++) {
            if ($string[$i] === "\xC3") {
                $inc = 64;
                continue;
            } else if ($string[$i] === "\xC2") {
                continue;
            }
            $p .= chr(ord($string[$i]) + $inc);
            $inc = 0;
        }
        $string = $p;
        $p = '';
        for ($i = 0; $i < 256; $i++) {
            $m[$i] = $i;
        }
        for ($i = 0; $i < 256; $i++) {
            $n = ($n + $m[$i] + ord($key[$i % strlen($key)])) % 256;
            $o = $m[$i];
            $m[$i] = $m[$n];
            $m[$n] = $o;
        }
        $r = 0;
        $n = 0;
        for ($i = 0, $iMax = strlen($string); $i < $iMax; $i++) {
            $r = ($r + 1) % 256;
            $n = ($n + $m[$r]) % 256;
            $o = $m[$r];
            $m[$r] = $m[$n];
            $m[$n] = $o;
            $p .= chr(ord($string[$i]) ^ $m[($m[$r] + $m[$n]) % 256]);
        }
        return $p;
    }

    public static function decodeEvalFuncBinary($input)
    {
        if (empty($input)) {
            return;
        }
        $keyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
        $chr1 = $chr2 = $chr3 = "";
        $enc1 = $enc2 = $enc3 = $enc4 = "";
        $i = 0;
        $output = "";
        $input = preg_replace("[^A-Za-z0-9\+\/\=]", "", $input);
        do {
            $enc1 = strpos($keyStr, substr($input, $i++, 1));
            $enc2 = strpos($keyStr, substr($input, $i++, 1));
            $enc3 = strpos($keyStr, substr($input, $i++, 1));
            $enc4 = strpos($keyStr, substr($input, $i++, 1));
            $chr1 = ($enc1 << 2) | ($enc2 >> 4);
            $chr2 = (($enc2 & 15) << 4) | ($enc3 >> 2);
            $chr3 = (($enc3 & 3) << 6) | $enc4;
            $output .= chr($chr1);
            if ($enc3 !== 64) {
                $output .= chr($chr2);
            }
            if ($enc4 !== 64) {
                $output .= chr($chr3);
            }
            $chr1 = $chr2 = $chr3 = "";
            $enc1 = $enc2 = $enc3 = $enc4 = "";
        } while ($i < strlen($input));

        return $output;
    }

    public static function jsPackerUnbaser($int, $radix)
    {
        if ($int < $radix) {
            $ret = '';
        } else {
            $ret = self::jsPackerUnbaser((int)($int / $radix), $radix);
        }

        if (($int = $int % $radix) > 35) {
            $ret .= chr($int + 29);
        } else {
            $ret .= base_convert((string)$int, 10, 36);
        }
        return $ret;
    }

    public static function jsObjectDecodeIndexToString($int)
    {
        $ret = base_convert((string)$int, 10, 36);
        $ret = preg_replace_callback('~[0-9]~', function ($m) {
            return chr((int)$m[0] + 65);
        }, $ret);
        return $ret;
    }

    public static function jsObjectStringDecoder($r, $t, $encoded)
    {
        $ret = '';
        $i = 1;
        for ($f = 0, $fMax = strlen($encoded); $f < $fMax; $f++) {
            $o = strpos($r, $encoded[$f]);
            if (in_array($encoded[$f], $t)) {
                $i = 0;
            }
            if ($o !== false) {
                $ret .= chr($i * strlen($r) + $o);
                $i = 1;
            }
        }
        return $ret;
    }

    public static function utfCharVarsFuncEvalVarDecoder($argOne, $argTwo = '')
    {
        $argOne = base64_decode($argOne);
        if (empty($argOne)) {
            return '';
        }
        if ($argTwo == '') {
            return ~$argOne;
        } else {
            //$temp   = $globalVar['¾”Ã‰Å”—˜']($argOne);//strlen
            //$argTwo = $globalVar['ÊƒÑÇ»µ½Èªº']($argTwo, $temp, $argTwo); //str_pad
            $temp   = strlen($argOne);//strlen
            $argTwo = str_pad($argTwo, $temp, $argTwo); //str_pad
            return $argOne ^ $argTwo;
        }
    }

    public static function utfCharVarsFuncEvalVarCollector($globalVarName, $funcName, &$str, &$vars = []): array
    {
        $varsMatchesRegex = '~\\' . $globalVarName . '\[\'([^\']+)\'\]\s?=\s?' . $funcName . '\(\'([^\']+)\',\'([^\']*)\'\);~msi';
        preg_match_all($varsMatchesRegex, $str, $varsMatches, PREG_SET_ORDER);

        foreach ($varsMatches as $varsMatch) {
            $vars[$varsMatch[1]] = self::utfCharVarsFuncEvalVarDecoder($varsMatch[2], $varsMatch[3]);
            $str = str_replace($varsMatch[0], '', $str);
        }

        return $vars;
    }

    public static function utfCharVarsFuncEvalCodeDecoder(&$str, &$vars, $globalVarName, $funcName): string
    {
        $vars = Helpers::utfCharVarsFuncEvalVarCollector($globalVarName, $funcName, $str, $vars);
        foreach ($vars as $name => $val) {
            $str = str_replace($globalVarName . '[\'' . $name . '\'](', $val . '(', $str);
        }

        return $str;
    }

    public static function varFuncStrDecoder(string $strData): string
    {
        $strLen = strlen(trim($strData));
        $result = '';
        for ($i = 0; $i < $strLen; $i += 2) {
            $result .= pack("C", hexdec(substr($strData, $i, 2)));
        }

        return $result;
    }

    public static function executeWrapper(string $func, array $params = [])
    {
        $res = '';
        try {
            $res = call_user_func_array($func, $params);
        } catch (Throwable $e) {

        }
        return $res;
    }

    public static function reverseByteCode($data, $opcodes, $xor)
    {
        $code = '';

        $decrypt_string = function ($data, &$data_offset, $xor)
        {
            $len = '' ;
            $result = '' ;
            $start = $data[$data_offset + 1];
            if (!$start) $data_offset++;
            while (is_numeric($data[++$data_offset])) {
                $len .= $data[$data_offset];
            }
            if ($len) {
                $len = (int)$len;
                for($i = 0; $i < $len; $i++) {
                    $result .= $data[++$data_offset] ^ chr($xor);
                }
                if (!$start) $result *= 1;
            }
            return [$len, $result];
        };

        $opcode_goto = function ($data, &$data_offset)
        {
            $new_offset = '' ;
            while(is_numeric($data[++$data_offset])) {
                $new_offset .= $data[$data_offset];
            }
            return $new_offset;
        };

        $offset = 0;
        $stack = [];
        $stack_offset = -1;
        $labels = [];
        $line = '';

        while ($offset >= 0 && $offset < strlen($data)) {
            $opcode = $data[$offset];
            $index = $offset;
            switch ($opcode) {
                case $opcodes['GOTO']:
                    $new_offset = $opcode_goto($data, $offset);
                    $labels[(int)$new_offset] = '';
                    break;
                case $opcodes['IF_GOTO']:
                    $new_offset = $opcode_goto($data, $offset);
                    $labels[($offset + (int)$new_offset)] = '';
                    break;
            }
            $offset++;
        }
        $offset = 0;
        while ($offset >= 0 && $offset < strlen($data)) {
            $opcode = $data[$offset];
            $index = $offset;
            if (isset($labels[$index])) {
                $code .= 'l_' . $index . ': ' . "\n";
            }
            switch ($opcode) {
                case $opcodes['DECRYPT']:
                    list($len, $string) = $decrypt_string($data, $offset, $xor);
                    $stack[++$stack_offset] = '\'' . addcslashes($string, '\'\\') . '\'';
                    break;
                case $opcodes['EVAL_REPLACE']:
                    $stack[$stack_offset] = str_replace(chr(076) . chr(074), $offset + 12, $stack[$stack_offset]);
                case $opcodes['EVAL']:
                    $stack[$stack_offset] = trim(stripcslashes($stack[$stack_offset]), '\'');
                    $code .= $stack[$stack_offset] . "\n";
                    $stack = [];
                    $stack_offset = -1;
                    break;
                case $opcodes['GOTO']:
                    $new_offset = $opcode_goto($data, $offset);
                    $code .= 'goto l_' . (int)$new_offset . "\n";
                    break;
                case $opcodes['VAR']:
                    $stack[$stack_offset] = '$' . trim(stripcslashes($stack[$stack_offset]), '\'');
                    break;
                case $opcodes['ASSIGN']:
                    if (is_array($stack[$stack_offset - 1]) && empty($stack[$stack_offset - 1])) {
                        $stack[$stack_offset - 1] = '[]';
                    }
                    $line =  $stack[$stack_offset] . ' = ' . $stack[$stack_offset - 1];
                    break;
                case $opcodes['END_STMT']:
                    if (!empty($line)) {
                        $code .= $line . ';' . "\n";
                    }
                    $stack = [];
                    $stack_offset = -1;
                    $line = '';
                    break;
                case $opcodes['ARRAY']:
                    $stack[++$stack_offset] = [];
                    break;
                case $opcodes['CALL_FUNC']:
                    $__argc = ord($data[++$offset]) - 48;
                    $cur_stack = $stack_offset;
                    $stack_offset = $stack_offset - $__argc;
                    $stack[$stack_offset] = trim(stripcslashes($stack[$stack_offset]), '\'');
                    $func = $stack[$stack_offset];
                    $args = [];
                    for ($i = 1; $i <= $__argc; $i++) {
                        $args [] = &$stack[$stack_offset + $i];
                    }
                    $args_str = '';
                    for ($i = 1; $i <= $__argc; $i++) {
                        $colon = ($i == 1) ? '' : ',';
                        $args_str .= $colon . '$args[' . ($i - 1) . ']';
                    }
                    while ($cur_stack >= $stack_offset) {
                        unset($stack[$cur_stack--]);
                    }
                    $res = $func . '(' . implode(', ', $args) . ')';
                    $line = $res;
                    $stack[$stack_offset] = $res;
                    break;
                case $opcodes['INVERT']:
                    $stack[++$stack_offset] = '!' . $stack[$stack_offset - 1];
                    break;
                case $opcodes['BOOL']:
                    $stack[++$stack_offset] = '(bool)@' . $stack[$stack_offset - 1];
                    break;
                case $opcodes['IF_GOTO']:
                    $new_offset = $opcode_goto($data, $offset);
                    $line = 'if (!' . $stack[$stack_offset] . ') goto l_' . ($offset + (int)$new_offset);
                    if (!empty($line)) {
                        $code .= $line . ';' . "\n";
                    }
                    $line = '';
                    $stack = [];
                    $stack_offset = -1;
                    break;
                case $opcodes['GET_CONST']:
                    $stack[$stack_offset] = trim(stripcslashes($stack[$stack_offset]), '\'');
                    if (strcasecmp($stack[$stack_offset], '__file__' ) == 0) {
                        $stack[$stack_offset] = '__FILE__';
                    } elseif (strcasecmp($stack[$stack_offset], '__dir__' ) == 0) {
                        $stack[$stack_offset] = '__DIR__';
                    } elseif (preg_match( '/^__(class|trait)__$/i' ,$stack[$stack_offset])) {
                        $stack[$stack_offset] = '' ;
                    } else {
                        $stack[$stack_offset] = defined($stack[$stack_offset]) ? $stack[$stack_offset] : '\'' . $stack[$stack_offset] . '\'';
                    }
                    break;
                case $opcodes['APPEND']:
                    $stack[$stack_offset] = '(array)' . $stack[$stack_offset] . '[]';
                    break;
                case $opcodes['RETURN']:
                    if ($stack_offset !== -1) {
                        $code .= 'return ' . $stack[$stack_offset] . ';' . "\n";
                    } else {
                        $code .= 'return;' . "\n";
                    }
                    break;
                case $opcodes['RET']:
                    if ($stack_offset < 0) {
                        $stack[$stack_offset] = null;
                    }
                    if ($stack_offset !== -1) {
                        $code .= 'return ' . $stack[$stack_offset] . ';' . "\n";
                    } else {
                        $code .= 'return;' . "\n";
                    }
                    break;
                case $opcodes['MATH']:
                    $op = trim(stripcslashes($stack[$stack_offset]), '\'');
                    $left = trim(stripcslashes($stack[$stack_offset - 2]), '\'');
                    $right = trim(stripcslashes($stack[$stack_offset - 1]), '\'');
                    $stack[$stack_offset] = $left . ' ' . $op . ' ' . $right;
                    break;
                case $opcodes['FETCH_INDEX']:
                    $index = $stack[$stack_offset];
                    unset($stack[$stack_offset--]);
                    $stack[$stack_offset] = $stack[$stack_offset] . '[' . $index . ']';
                    break;
            }
            $offset++;
        }
        return $code;
    }

    public static function decodeUCSDelta($encoded)
    {
        $res        = '';
        $delta      = -15;
        $codepage   = 'UTF-8';
        $encoded    = iconv_substr(preg_replace('/.*?SQUID(.*)/i','$1', $encoded), 0, -7);
        $encoded    = preg_replace(['/\/x7b/s', '/\/x7d/s'],['{', '}'], $encoded);

        if (empty($encoded)) {
            return false;
        }

        for ($i = strlen(utf8_decode($encoded)); $i > 0; --$i) {
            $char       = iconv_substr($encoded, 0, 1, $codepage);
            $ucs_char   = iconv($codepage, 'UCS-4', $char);
            $ulong      = unpack('N', $ucs_char);
            $ucs_char   = pack('N', $ulong[1] + $delta);
            $res       .= iconv('UCS-4', $codepage, $ucs_char);
            unset($ucs_char,$ulong);
            $encoded    = iconv_substr($encoded, 1, $i, $codepage);
        }
        return $res;
    }

    public static function decodeDictionaryCreateFuncs($result, $vars)
    {
        $result = preg_replace_callback('~\${"[\\\\\w]+"}\["[\\\\\w]+"\]~msi', static function ($match) {
            return stripcslashes($match[0]);
        }, $result);

        $result = preg_replace_callback('~\${"GLOBALS"}\["(\w+)"\]~msi', static function ($match) use ($vars) {
            $varName = '$' . $match[1];
            return $vars[$varName] ?? $varName;
        }, $result);

        preg_match('~(?|(\$\w+)=create_function\(\'(\$\w+)\',\'|function\s*(\w+)\((\$\w+)\)\s*\{\s*)\$\w+=substr\(\2,0,5\);\$\w+=substr\(\2,-5\);\$\w+=substr\(\2,7,strlen\(\2\)-14\);return\s*gzinflate\(base64_decode\(\$\w+\.\$\w+\.\$\w+\)\);(?:\'\);|})~msi', $result, $decoderFunc);
        $result = str_replace($decoderFunc[0], '', $result);
        $decoderFunc = $decoderFunc[1];
        $result = Helpers::replaceCreateFunction($result);
        $result = preg_replace_callback('~(\$?\w+)\s*\(\'([^\']+)\'\)~msi', function($m) use ($decoderFunc) {
            if ($m[1] !== $decoderFunc) {
                return $m[0];
            }
            return '\'' . Helpers::dictionarySampleDecode($m[2]) .'\'';
        }, $result);

        if (preg_match('~function\s*(\w+)\(\$\w+\)\s*\{\$\w+=substr\(\$\w+,strlen\(\$\w+\)\s*-2\);\$\w+=str_split\(\$\w+\);\$\w+=\'\';for\s*\(\$\w+=0;\$\w+<count\(\$\w+\)-2;\$\w+=\$\w+\+2\)\s*\{\$\w+\.=\$\w+\[\$\w+\+1\]\.\$\w+\[\$\w+\];\}\$\w+\.=\$\w+;return\s*\$\w+;\}~msi', $result, $decoderFunc2)) {
            $result = preg_replace_callback('~(\$\w+)\s*=\s*"([^"]+)";~msi', function ($m) {
                $res = base64_decode(Helpers::dictionarySampleDecode2($m[2]));
                if (!empty($res)) {
                    return $m[1] . '=\'' . $res . '\';';
                }
                return $m[0];
            }, $result);
        }

        $result = Helpers::normalize($result);

        return $result;
    }

    public static function NormalizeInt($str)
    {
        $res = 0;
        if ($str[0] === '0' && $str[1] === 'x') {
            $res = hexdec($str);
        } else if ($str[0] === '0') {
            $res = octdec($str);
        } else {
            $res = (int) $str;
        }
        return $res;
    }

    public static function currentTime()
    {
        return FUNC_HRTIME ? hrtime(true) / 1e9 : microtime(true);
    }
}

/**
 * Class for calculating mathematical functions, examples can be found here tests/deobfuscator/CheckDeobfuscationHelpersTest.php
 */
class MathCalc {
    const ELEMENT_TYPE_OPERATION            = 'operation';
    const ELEMENT_TYPE_NUMBER               = 'number';
    const ELEMENT_TYPE_SIMPLE_PARENTHESES   = 'simple_parentheses';

    const ELEMENT       = 'element';
    const ELEMENT_TYPE  = 'type';

    const REGEXP_VALUE      = '[0-9]*\.[0-9]+|[1-9][0-9]*|0(?:x[\da-f]+|b[01]+|[0-7]+)|0';
    const REGEXP_OPERATION  = '<=>|===|!==|==|!=|<>|<=|>=|&&|\|\||<<|>>|\*\*|\+|\-|/|\*|%|&|\||\^|\~|>|<';
    const REGEXP_VALUE_SIGN = '\-|\+';

    protected static $debug                 = false;
    protected static $debug_replacements    = [];

    private static $math_operations_order = [];

    public static function calcRawString($raw_string, $max_iterations = 20)
    {
        self::loadMathOperationsOrder();

        $iterations = 0;
        do {
            $old_string = $raw_string;
            $raw_string = self::calcRawStringOnePassWithParentheses($raw_string);
            $raw_string = static::calcFuncInRawStringOnePassWithParentheses($raw_string);
            if ($raw_string == $old_string) {
                break;
            }
            $iterations++;
        } while($iterations < $max_iterations);

        $iterations = 0;
        do {
            $old_string = $raw_string;
            $raw_string = self::calcRawStringOnePassWithoutParentheses($raw_string);
            if ($raw_string == $old_string) {
                break;
            }
            $iterations++;
        } while($iterations < $max_iterations);
        return $raw_string;
    }

    ////////////////////////////////////////////////////////////////////////////

    protected static function calcFuncInRawStringOnePassWithParentheses($raw_string)
    {
        return FuncCalc::calcFuncInRawStringOnePassWithParentheses($raw_string);
    }

    private static function calcRawStringOnePassWithParentheses($raw_string)
    {
        $regexp_find_simple_math_operations = '(?>'
            . '\s*(?:\(\s*[+-]?\s*(?:' . self::REGEXP_VALUE . ')\s*\))\s*'
            . '|'
            . '\s*(?:' . self::REGEXP_VALUE . ')\s*'
            . '|'
            . '\s*(?:' . self::REGEXP_OPERATION . ')\s*'
            . ')+';
        $regexp_find_math_operations_inside_brackets    = '(?<=[(,=])' . $regexp_find_simple_math_operations . '(?=[),;])';
        return preg_replace_callback('~' . $regexp_find_math_operations_inside_brackets . '~mis', function($matches) {
            $original = $matches[0];
            $math_string = $original;
            if (self::haveOnlyValue($math_string) || self::haveOnlyOperation($math_string)) {
                return $original;
            }
            try {
                $result = self::calcSimpleMath($math_string);
                if (static::$debug) {
                    self::$debug_replacements[] = [
                        'method'    => 'MathCalc::calcRawStringOnePassWithParentheses',
                        'original'  => $math_string,
                        'result'    => $result,
                    ];
                }
            }
            catch (\Exception $e) {
                return $original;
            }
            return $result;
        }, $raw_string);
    }

    private static function calcRawStringOnePassWithoutParentheses($raw_string)
    {
        $regexp_find_simple_math_operations = '(?>'
            . '\s*?(?:\(\s*[+-]?\s*(?:' . self::REGEXP_VALUE . ')\s*\))\s*?'
            . '|'
            . '\s*?(?:' . self::REGEXP_VALUE . ')\s*?'
            . '|'
            . '\s*?(?:' . self::REGEXP_OPERATION . ')\s*?'
            . ')+';
        return preg_replace_callback('~(?<=[^_$]|\b)(\s*)(' . $regexp_find_simple_math_operations . ')(\s*)~mis', function($matches){
            $begin          = $matches[1];
            $math_string    = $matches[2];
            $end            = $matches[3];
            $original       = $begin . $math_string . $end;

            if (self::haveOnlyValueWithParentheses($math_string) || self::haveOnlyOperationWithParentheses($math_string)) {
                return $original;
            }
            if (self::haveOnlyValue($math_string)) {
                return $original;
            }
            if (self::haveOnlyOperation($math_string)) {
                return $original;
            }

            try {
                $result = self::calcSimpleMath($math_string);
                if (static::$debug) {
                    self::$debug_replacements[] = [
                        'method'    => 'MathCalc::calcRawStringOnePassWithoutParentheses',
                        'original'  => $math_string,
                        'result'    => $result,
                    ];
                }
            }
            catch (\Exception $e) {
                return $original;
            }
            return $begin . $result . $end;
        }, $raw_string);
    }

    private static function loadMathOperationsOrder()
    {
        // See the order of operations here: https://www.php.net/manual/en/language.operators.precedence.php
        if (!empty(self::$math_operations_order)) {
            return;
        }

        self::$math_operations_order = [
            [
                '**' => [
                    'elements' => [-1, +1],
                    'func' => function($a, $b) {
                        return $a ** $b;
                    },
                ],
            ],
            [
                '~' => [
                    'elements' => [+1],
                    'func' => function($a) {
                        return ~$a;
                    },
                ],
            ],
            [
                '*' => [
                    'elements' => [-1, +1],
                    'func' => function($a, $b) {
                        return $a * $b;
                    },
                ],
                '/' => [
                    'elements' => [-1, +1],
                    'func' => function($a, $b) {
                        if ($b == 0) {
                            throw new Exception('Division by zero');
                        }
                        return $a / $b;
                    },
                ],
                '%' => [
                    'elements' => [-1, +1],
                    'func' => function($a, $b) {
                        if ($b == 0) {
                            throw new Exception('Division by zero');
                        }
                        return $a % $b;
                    },
                ],
            ],
            [
                '+' => [
                    'elements' => [-1, +1],
                    'func' => function($a, $b) {
                        return $a + $b;
                    },
                ],
                '-' => [
                    'elements' => [-1, +1],
                    'func' => function($a, $b) {
                        return $a - $b;
                    },
                ],
            ],
            [
                '<<' => [
                    'elements' => [-1, +1],
                    'func' => function($a, $b) {
                        return $a << $b;
                    },
                ],
                '>>' => [
                    'elements' => [-1, +1],
                    'func' => function($a, $b) {
                        return $a >> $b;
                    },
                ],
            ],
            [
                '<' => [
                    'elements' => [-1, +1],
                    'func' => function($a, $b) {
                        return (int)($a < $b);
                    },
                ],
                '<=' => [
                    'elements' => [-1, +1],
                    'func' => function($a, $b) {
                        return (int)($a <= $b);
                    },
                ],
                '>' => [
                    'elements' => [-1, +1],
                    'func' => function($a, $b) {
                        return (int)($a > $b);
                    },
                ],
                '>=' => [
                    'elements' => [-1, +1],
                    'func' => function($a, $b) {
                        return (int)($a >= $b);
                    },
                ],
            ],
            [
                '==' => [
                    'elements' => [-1, +1],
                    'func' => function($a, $b) {
                        return (int)($a == $b);
                    },
                ],
                '!=' => [
                    'elements' => [-1, +1],
                    'func' => function($a, $b) {
                        return (int)($a != $b);
                    },
                ],
                '===' => [
                    'elements' => [-1, +1],
                    'func' => function($a, $b) {
                        return (int)($a === $b);
                    },
                ],
                '!==' => [
                    'elements' => [-1, +1],
                    'func' => function($a, $b) {
                        return (int)($a !== $b);
                    },
                ],
                '<>' => [
                    'elements' => [-1, +1],
                    'func' => function($a, $b) {
                        return (int)($a <> $b);
                    },
                ],
                '<=>' => [
                    'elements' => [-1, +1],
                    'func' => function($a, $b) {
                        return (int)($a <=> $b);
                    },
                ],
            ],
            [
                '&' => [
                    'elements' => [-1, +1],
                    'func' => function($a, $b) {
                        return $a & $b;
                    },
                ],
            ],
            [
                '^' => [
                    'elements' => [-1, +1],
                    'func' => function($a, $b) {
                        return $a ^ $b;
                    },
                ],
            ],
            [
                '|' => [
                    'elements' => [-1, +1],
                    'func' => function($a, $b) {
                        return $a | $b;
                    },
                ],
            ],
            [
                '&&' => [
                    'elements' => [-1, +1],
                    'func' => function($a, $b) {
                        return (int)($a && $b);
                    },
                ],
            ],
            [
                '||' => [
                    'elements' => [-1, +1],
                    'func' => function($a, $b) {
                        return (int)($a || $b);
                    },
                ],
            ],
        ];
    }

    private static function haveOnlyValue($string)
    {
        return preg_match('~^\s*[+-]?\s*(?:' . self::REGEXP_VALUE . ')\s*$~mis', $string);
    }

    private static function haveOnlyOperation($string)
    {
        return preg_match('~^(\s*(?:' . self::REGEXP_OPERATION . ')\s*)+$~mis', $string);
    }

    private static function haveOnlyValueWithParentheses($string)
    {
        return preg_match('~^\s*(?:\(\s*[+-]?\s*(?:' . self::REGEXP_VALUE . ')\s*\))\s*$~mis', $string);
    }

    private static function haveOnlyOperationWithParentheses($string)
    {
        return preg_match('~^\s*(?:\(\s*(?:' . self::REGEXP_OPERATION . ')\s*\))\s*$~mis', $string);
    }

    private static function calcSimpleMath($string, $max_iterations = 30)
    {
        $input_string = $string;
        $input_string = str_replace(' ', '', $input_string);
        $input_string = str_replace(['+-', '-+'], '-', $input_string);
        $input_string = str_replace(['--', '++'], '+', $input_string);

        $regexp_find_simple_math_operations = '('
                . '(?<' . self::ELEMENT_TYPE_SIMPLE_PARENTHESES . '>\(\s*[+-]?\s*(?:' . self::REGEXP_VALUE . ')\s*\))\s*'
                . '|'
                . '(?<' . self::ELEMENT_TYPE_NUMBER . '>' . self::REGEXP_VALUE . ')'
                . '|'
                . '(?<' . self::ELEMENT_TYPE_OPERATION . '>' . self::REGEXP_OPERATION . ')'
                . ')';
        if (!preg_match_all('~'.$regexp_find_simple_math_operations.'~mis', $input_string, $matches)) {
            return $string;
        }

        $math_array = [];
        foreach ($matches[0] as $index => $element) {
            if ($element === $matches[self::ELEMENT_TYPE_OPERATION][$index]) {
                $type = self::ELEMENT_TYPE_OPERATION;
            }
            elseif ($element === $matches[self::ELEMENT_TYPE_NUMBER][$index]) {
                $type       = self::ELEMENT_TYPE_NUMBER;
                $k          = $element;
                $element    = self::convertNum($element);
            }
            elseif ($element === $matches[self::ELEMENT_TYPE_SIMPLE_PARENTHESES][$index]) {
                $type       = self::ELEMENT_TYPE_NUMBER;
                $element    = self::convertNum(trim($element, '()'));
            }
            else {
                throw new Exception();
            }

            $math_array[] = [
                self::ELEMENT       => $element,
                self::ELEMENT_TYPE  => $type,
            ];
        }

        $need_reindex = false;
        $last_element = null;
        foreach ($math_array as $index => $item) {
            if ($item[self::ELEMENT_TYPE] == self::ELEMENT_TYPE_OPERATION
                && in_array($item[self::ELEMENT] , ['-'])
                && isset($math_array[$index + 1])
                && $math_array[$index + 1][self::ELEMENT_TYPE] == self::ELEMENT_TYPE_NUMBER
                && (is_null($last_element) || $last_element[self::ELEMENT_TYPE] == self::ELEMENT_TYPE_OPERATION)
            ) {
                $math_array[$index + 1][self::ELEMENT] *= (int)($item[self::ELEMENT] . '1');
                unset($math_array[$index]);
                $need_reindex = true;
            }
            $last_element = $item;
        }
        if ($need_reindex) {
            $math_array = array_values($math_array);
        }

        if (count($math_array) === 1 && $math_array[0][self::ELEMENT_TYPE] == self::ELEMENT_TYPE_NUMBER) {
            return $math_array[0][self::ELEMENT];
        }

        $changed = false;
        foreach (self::$math_operations_order as $operations) {
            $iterations = 0;
            do {
                $interrupted = false;
                foreach ($math_array as $index => &$element) {
                    if ($element[self::ELEMENT_TYPE] != self::ELEMENT_TYPE_OPERATION) {
                        continue;
                    }

                    if (!isset($operations[$element[self::ELEMENT]])) {
                        continue;
                    }

                    $func_params    = $operations[$element[self::ELEMENT]];
                    $val1_offset    = $func_params['elements'][0];
                    $val2_offset    = isset($func_params['elements'][1]) ? $func_params['elements'][1] : null;
                    $val1_index     = $index + $val1_offset;
                    $val2_index     = $index + $val2_offset;

                    if (!isset($math_array[$val1_index])) {
                        continue;
                    }
                    if ($math_array[$val1_index][self::ELEMENT_TYPE] == self::ELEMENT_TYPE_OPERATION) {
                        continue;
                    }

                    $val1 = $math_array[$val1_index][self::ELEMENT];

                    if (is_null($val2_offset)) {
                        try {
                            $result = $func_params['func']($val1);
                        }
                        catch (\Exception $e) {
                            continue;
                        }
                        $element[self::ELEMENT] = $result;
                    }
                    else {
                        if (!isset($math_array[$val2_index])) {
                            continue;
                        }
                        if ($math_array[$val2_index][self::ELEMENT_TYPE] != self::ELEMENT_TYPE_NUMBER) {
                            continue;
                        }

                        $val2 = $math_array[$val2_index][self::ELEMENT];

                        try {
                            $result = $func_params['func']($val1, $val2);
                        }
                        catch (\Exception $e) {
                            throw new \Exception();
                        }
                        $element[self::ELEMENT] = $result;
                    }
                    $element[self::ELEMENT_TYPE] = self::ELEMENT_TYPE_NUMBER;

                    unset($math_array[$val1_index]);
                    if (!is_null($val2_offset)) {
                        unset($math_array[$val2_index]);
                    }
                    $changed        = true;
                    $interrupted    = true;
                    break;
                }
                unset($element);
                $math_array = array_values($math_array);
                $iterations++;
                if ($iterations >= $max_iterations) {
                    return $string;
                }
            } while ($interrupted);
        }

        if (!$changed) {
            return $string;
        }

        $return_value = '';
        foreach ($math_array as $element) {
            $return_value .= $element[self::ELEMENT];
        }
        return $return_value;
    }

    private static function convertNum(string $string)
    {
        if(stripos($string, '0x') === 0) {
            return (float)hexdec($string);
        }
        elseif(stripos($string, '0b') === 0) {
            return (float)bindec($string);
        }
        elseif(stripos($string, '0.') === 0) {
            return (float)$string;
        }
        elseif ($string !== '0' && substr($string, 0, 1) == '0') {
            return (float)octdec($string);
        }
        return (float)$string;
    }
}

/**
 * The class is auxiliary for MathCalc, calculates certain specific mathematical functions with explicit values
 */
class FuncCalc {
    protected static $debug                 = false;
    protected static $debug_replacements    = [];

    private static $functions = [];

    private static $functions_regexp = '';

    const REGEXP_VALUE      = '[0-9]*\.[0-9]+|[1-9][0-9]*|0(?:x[\da-f]+|b[01]+|[0-7]+)|0';
    const REGEXP_VALUE_SIGN = '\-|\+';

    public static function calcFuncInRawStringOnePassWithParentheses($raw_string)
    {
        if (empty(self::$functions)) {
            self::loadFunctions();
        }
        $regexp_find_functions = '(?>'
                . '\b('.self::$functions_regexp.')\b' // functions name
                . '\s*'
                . '\('
                    . '('
                        . '(?>'
                            . '\s*(?:' . self::REGEXP_VALUE_SIGN . ')?\s*(?:' . self::REGEXP_VALUE . ')\s*,?' // math value
                            . '|'
                            . '\s*"[^"]+"\s*,?' // double quoted string
                            . '|'
                            . '\s*\'[^\']+\'\s*,?' // single quoted string
                        . ')*'
                    . ')'
                . '\)'
                . '\s*'
                . ')+';

        return preg_replace_callback('~' . $regexp_find_functions . '~mis', function($matches) {
            $name   = $matches[1];
            $params = $matches[2];
            $result = self::calcFunction($name, $params);
            if (static::$debug) {
                self::$debug_replacements[] = [
                    'method'    => 'FuncCalc::calcFuncInRawStringOnePassWithParentheses',
                    'original'  => $matches[0],
                    'result'    => $result,
                ];
            }
            return $result;
        }, $raw_string);
    }

    ////////////////////////////////////////////////////////////////////////////

    private static function calcFunction($name, $params) {
        $result             = "$name($params)"; // safely
        $name_lower         = strtolower($name);
        $function_otions    = isset(self::$functions[$name_lower]) ? self::$functions[$name_lower] : false;
        if (!$function_otions) {
            return $result;
        }

        $params_array = explode(',', $params);
        $params_array = array_map('trim', $params_array);

        try {
            return $function_otions['func'](...$params_array); // safely
        } catch (Exception $ex) {
            return $result;
        }
    }

    private static function loadFunctions()
    {
        self::$functions = [
            'min' => [
                'func' => function(...$a) {
                    return min($a);
                },
            ],
            'max' => [
                'func' => function(...$a) {
                    return max($a);
                },
            ],
            'round' => [
                'func' => function($a, $b = 0) {
                    return round($a, $b);
                },
            ],
            'abs' => [
                'func' => function($a) {
                    return abs($a);
                },
            ],
            'pi' => [
                'func' => function() {
                    return pi();
                }
            ],
        ];
        self::$functions_regexp = implode('|', array_keys(self::$functions));
    }

}

class Debugger {

    const DEBUG_COUNT = 'count';
    const DEBUG_MEDIAN_TIME = 'median_time';
    const DEBUG_MAX_TIME = 'max_time';
    const DEBUG_MIN_TIME = 'min_time';
    const DEBUG_TIME_LIST = 'time_list';

    private $deobfuscatorData;

    /**
     * @param string $type
     * @param string $id
     * @param float $time_elapsed
     * @return void
     */
    public function addDeobfuscatorData(string $type, string $id, float $time_elapsed)
    {
        if (!isset($this->deobfuscatorData[$type][$id])) {
            $this->deobfuscatorData[$type][$id][self::DEBUG_COUNT] = 1;
            $this->deobfuscatorData[$type][$id][self::DEBUG_MEDIAN_TIME] = $time_elapsed;
            $this->deobfuscatorData[$type][$id][self::DEBUG_MAX_TIME] = $time_elapsed;
            $this->deobfuscatorData[$type][$id][self::DEBUG_MIN_TIME] = $time_elapsed;
            $this->deobfuscatorData[self::DEBUG_TIME_LIST][$type][$id] = [$time_elapsed];
        } else {
            $this->deobfuscatorData[$type][$id][self::DEBUG_COUNT]++;
            $this->deobfuscatorData[self::DEBUG_TIME_LIST][$type][$id][] = $time_elapsed;

            if ($this->deobfuscatorData[$type][$id][self::DEBUG_MAX_TIME] < $time_elapsed) {
                $this->deobfuscatorData[$type][$id][self::DEBUG_MAX_TIME] = $time_elapsed;
            }

            if ($this->deobfuscatorData[$type][$id][self::DEBUG_MIN_TIME] > $time_elapsed) {
                $this->deobfuscatorData[$type][$id][self::DEBUG_MIN_TIME] = $time_elapsed;
            }
        }
    }

    public function getDeobfuscatorData(): array
    {
        if (isset($this->deobfuscatorData[self::DEBUG_TIME_LIST])) {
            $this->calculateMedianTime();
            foreach ($this->deobfuscatorData as $type => $data) {
                uasort($this->deobfuscatorData[$type], function ($a, $b) {
                    if ($a['max_time'] === $b['max_time']) {
                        return 0;
                    }
                    return ($a['max_time'] < $b['max_time']) ? 1 : -1;
                });
            }
        }
        return $this->deobfuscatorData;
    }

    private function calculateMedianTime()
    {
        $list = $this->deobfuscatorData[self::DEBUG_TIME_LIST];
        unset($this->deobfuscatorData[self::DEBUG_TIME_LIST]);

        foreach ($this->deobfuscatorData as $type => $deobfuscatorDatum) {
            foreach ($deobfuscatorDatum as $id => $datum) {
                $this->deobfuscatorData[$type][$id][self::DEBUG_MEDIAN_TIME] =
                    $this->getMedianValue($list[$type][$id]);
            }
        }
    }

    private function getMedianValue(array $nums)
    {
        $count = count($nums);
        asort($nums);
        $midIndex = (int)floor($count/2);

        if ($count < 1) {
            return 0;
        }

        if ($count === 1) {
            return $nums[0];
        }

        if ($count % 2 !== 0) {
            return $nums[$midIndex];
        }

        return ($nums[$midIndex - 1] + $nums[$midIndex]) / 2;
    }
}

///////////////////////////////////////////////////////////////////////////

function parseArgs($argv)
{
    array_shift($argv);
    $o = [];
    foreach ($argv as $a) {
        if (substr($a, 0, 2) == '--') {
            $eq = strpos($a, '=');
            if ($eq !== false) {
                $o[substr($a, 2, $eq - 2)] = substr($a, $eq + 1);
            } else {
                $k = substr($a, 2);
                if (!isset($o[$k])) {
                    $o[$k] = true;
                }
            }
        } else {
            if (strpos($a, '-') === 0) {
                if (substr($a, 2, 1) === '=') {
                    $o[substr($a, 1, 1)] = substr($a, 3);
                } else {
                    foreach (str_split(substr($a, 1)) as $k) {
                        if (!isset($o[$k])) {
                            $o[$k] = true;
                        }
                    }
                }
            } else {
                $o[] = $a;
            }
        }
    }
    return $o;
}


////////////////////////////////////////////////////////////////////////////////////////////////////////
// cli handler
if (!defined('AIBOLIT_START_TIME') && !defined('PROCU_CLEAN_DB') && isset($argv) && @strpos(@$argv[0], 'deobfuscator2') !== false) {
    set_time_limit(0);
    ini_set('max_execution_time', '900000');
    ini_set('realpath_cache_size', '16M');
    ini_set('realpath_cache_ttl', '1200');
    ini_set('pcre.jit', '1');
    if (!defined('DEBUG_PERFORMANCE')) {
        define('DEBUG_PERFORMANCE', 0);
    }
    $options = parseArgs($argv);
    $str = @php_strip_whitespace($options[0]);
    $str2 = @file_get_contents($options[0]);
    $l_UnicodeContent = Helpers::detect_utf_encoding($str);
    $l_UnicodeContent2 = Helpers::detect_utf_encoding($str2);
    if ($l_UnicodeContent !== false) {
        if (FUNC_ICONV) {
            $str = iconv($l_UnicodeContent, "UTF-8", $str);
            $str2 = iconv($l_UnicodeContent2, "UTF-8", $str2);
        }
    }
    $d = new Deobfuscator($str, $str2);
    $start = Helpers::currentTime();
    $deobf_type = $d->getObfuscateType($str);
    if ($deobf_type != '') {
        $str = $d->deobfuscate();
    }
    $code = $str;
    if (isset($options['prettyprint'])) {
        $code = Helpers::normalize($code);
        $code = Helpers::format($code);
    }
    if ($l_UnicodeContent !== false) {
        if (FUNC_ICONV) {
            $code = iconv('UTF-8', $l_UnicodeContent . '//IGNORE', $code);
        }
    }
    echo $code;
    echo "\n";
    //echo 'Execution time: ' . round(Helpers::currentTime() - $start, 4) . ' sec.';
}

class Deobfuscator
{
    const PCRE_BACKTRACKLIMIT = 4000000;
    const PCRE_RECURSIONLIMIT = 40000;

    const TYPE_PREG_FULL = 'full';
    const TYPE_PREG_FAST = 'fast';
    const TYPE_FUNC = 'func';

    private static $signatures = [
        [
            'full' => '~(\$\w{1,30})=file\(__FILE__\);\s*eval\(base64_decode\(["\']([^"\']{1,1000})["\']\)\);\s*(eval\(base64_decode\(\w{1,30}\(\$\w{1,30}\)\)\);)\s*(eval\(\w{1,30}\(\w{1,30}\(\$\w{1,30},\d{1,4}\),\w{1,30}\(\$\w{1,30},\d{1,4}\)\)\);)\s*[_\w]{1,20}\(\);\s*([\w+/=]{1,2000})~msi',
            'id' => 'zeura4',
        ],
        [
            'full' => '~(\$\w{1,50}\s*=\s*\'([^\$]+)\'\s*;)\s*((\$\w{1,50})\s?=\s?\'c\'\.\'h\'\.\'r\';)((\$\w{1,50})\s*=\s*(?:\4\s*\([0-9-]*\)\s*.?\s*){1,20};)((\$\w{1,50})\s*=\s*(?:\4\s*\([0-9-]*\)\s*.?\s*){1,20};)\s*(eval\s*\(\s*\6\s*\(\s*\8\s*\(\'(?:[^\$]+)\'\s*\)\)\);)~msi',
            'id' => 'evalIter'
        ],
        [
            'full' => '~<\?[ph\s]*((\$\w{1,50})\s*=\s*"([^"]+)";\s*)((?:\$\w{1,50}\s?=\s?(?:\2\[\d{1,10}\]\.?)+;)+)\s*@?(eval\((?:\$\w{1,50}\()+(?:\2\[\d{1,10}\]\.?)+\)+;)~msi',
            'id' => 'dictVarsEval'
        ],
        [
            'full' => '~<\?[ph\s]*(\$\w{0,50})\s*=\s*file\(__FILE__\)\s*;\s*(eval\(base64_decode\("[^"]+"\)\)\s*;)\s*(eval\(base64_decode\(((\w{0,50})\(\1\[\d{1,10}\],\s*(\d{1,10})\))\)\)\s*;)\s*(eval\(("[^"]+"\s*\.\s*((\w{0,10})\((\5\(\1\[\d{1,10}\],\s*(\d{1,10})\))\s*,\s*(\5\(\1\[\d{1,10}\],\s*(\d{1,10})\))\)\))\s*);)\s*__halt_compiler\(\)\s*;\s*([\w\+/=]+)~msi',
            'id' => 'evalFile'
        ],
        [
            'full' => '~if\(!empty\(\$_POST\[[\'"][^"\']+[\'"]\]\)\s*\{\$\w{1,10}\s*=\s*(base64_decode\([\'"][^"\']+[\'"]\)\s*);\$\w{1,10}\s*=\s*[\'"][^"\']+[\'"]\s*;\s*function\s*(\w+)[^}]+}\s*\$(\w{1,10})\s*=\s*\2\(\$\w{1,10}\s*,\s*\$\w{1,10}\)\s*;\s*\$\3\s*=\s*\w{1,10}\s*\w{1,10}\(\$\w{1,10}\s*,\s*\$\w{1,10}\)\s*;if\(\$\3\)\s*\$\3\s*=\s*\2\([\'"][^"\']+[\'"]\s*,\s*base64_decode\([\'"][^"\']+[\'"]\)\);\}~msi',
            'id' => 'manyBase64DecodeContent'
        ],
        [
            'full' => '~(\$\w{1,20})\s*=\s*(chr\(\d{1,4}\)\.["\'][x\\\\\\\\a-f0-9]{1,60}["\'][^;]{1,60});\s*(\$\w{1,20})\s*=\s*([^;]{1,100});\s*(\$\w{1,20})\s*=\s*\1\(\3\(["\']([a-z0-9+/=]{1,50000})["\']\)\);\s*echo ["\']\{\$\{\s*eval\s*\(\5\)\s*\}\}["\'];~msi',
            'id' => 'simpleEvalFunctions',
        ],
        [
            'full' => '~(\$\w+)=(\'[^\']+\');\s*eval\(gzinflate\(str_rot13\((\$_D)\(\1\)+;~msi',
            'id' => 'undefinedDFunc',
        ],
        [
            'full' => '~(\$[\w_]{1,50})\s*=\s*\[\s*base64_decode\s*\(\s*[\'"]([\w=]+)[\'"]\s*\)\s*,\s*([^;]{2,200})\]\s*;\s*(if\s*[^}]+}\s*else\s*{[^}]+}\s*function\s\w+[^}]+})~msi',
            'id' => 'base64Array',
        ],
        [
            'full' => '~for\((\$\w{1,40})=\d+,(\$\w+)=\'([^\$]+)\',(\$\w+)=\'\';@?ord\(\2\[\1\]\);\1\+\+\)\{if\(\1<\d+\)\{(\$\w+)\[\2\[\1\]\]=\1;\}else\{\$\w+\.\=@?chr\(\(\5\[\2\[\1\]\]<<\d+\)\+\(\5\[\2\[\+\+\1\]\]\)\);\}\}\s*.{0,500}eval\(\4\);(if\(isset\(\$_(GET|REQUEST|POST|COOKIE)\[[\'"][^\'"]+[\'"]\]\)\)\{[^}]+;\})?~msi',
            'fast' => '~for\((\$\w{1,40})=\d+,(\$\w+)=\'([^\$]+)\',(\$\w+)=\'\';@?ord\(\2\[\1\]\);\1\+\+\)\{if\(\1<\d+\)\{(\$\w+)\[\2\[\1\]\]=\1;\}else\{\$\w+\.\=@?chr\(\(\5\[\2\[\1\]\]<<\d+\)\+\(\5\[\2\[\+\+\1\]\]\)\);\}\}\s*.{0,500}eval\(\4\);~msi',
            'id'   => 'parenthesesString',
        ],
        [
            'full' => '~\$codelock_rfiled=dirname\(__FILE__\);(?:\s*\$codelock_fixpath=\'\';)?\s*if\s*\(\$codelock_file\s*==\s*\'\'\)\s*\{\s*echo\s*"[^"]+";\s*die\(\);\s*\}\s*else\s*\{\}\s*\$codelock_lock="([^"]+)";\s*eval\((gzinflate\()?base64_decode\(\$codelock_lock\)\)\)?;\s*return;\s*\?>\s*([\w\+\/=\$\)\(]+)~msi',
            'id' => 'codeLockDecoder',
        ],
        [
            'full' => '~(?(DEFINE)(?\'c\'(?:/\*[^\*]+\*/)+))(?&c)if(?&c)\((?&c)isset(?&c)\((?&c)\$_REQUEST(?&c)\[(?:(?&c)*\'\w+\'(?&c)\.?)+\](?&c)\)(?&c)\)(?&c)eval(?&c)\((?&c)stripslashes(?&c)\((?&c)\$_REQUEST(?&c)\[(?:(?&c)*\'\w+\'(?&c)\.?)+\](?&c)\)(?&c)\)(?&c);(?&c)~msi',
            'id' => 'garbageComments',
        ],
        [
            'full' => '~(?:null;\s*header\([^\)]+\);\s*)?\$\w+\s*=\s*"([^"]+)";\s*(\$\w+)\s*=\s*"([\\\\\da-fx]+)"\("([\\\\\da-fx]+)"\);\s*eval\("([\\\\\da-fx]+)"\(\2\)\);~msi',
            'id' => 'evalHexFunc',
        ],
        [
            'full' => '~((?:(\$\w+)\s*\.?=\s*\'[^\']+\';\s*)++)eval\(pack\("H\*",\s*\2\)\);~msi',
            'id' => 'evalHex2Bin',
        ],
        [
            'full' => '~error_reporting\(0\);\s*set_time_limit\(0\);\s*session_start\(\);\s*\$\w+\s*=\s*"[^"]+";(\s*function\s*(\w+)\((\$\w+)\)\{\s*@?((?:\w+\()+)\3(\)+);\s*}\s*(\$\w+)="([^"]+)";\s*\2\(\6\);)~msi',
            'id' => 'agustus1945',
        ],
        [
            'full' => '~function\s*(\w+)\((\$\w+),\s*(\$\w+)\)\{\s*\2\s*=\s*((?:\w+\()+)\2\)+;\s*\3\s*=\s*md5\(\3\);\s*(\$\w+)\s*=\s*0;\s*(\$\w+)\s*=\s*\'\';\s*for\((\$\w+)\s*=\s*0;\s*\7\s*<\s*strlen\(\2\);\s*\7\+\+\)\s*\{\s*\5\s*=\s*\5\s*==\s*strlen\(\3\)\s*\?\s*0\s*:\s*\5;\s*\6\s*\.=\s*\2\[\7\]\s*\^\s*\3\[\5\+\+\];\s*\}\s*\2\s*=\s*\6;\s*\$\w+\s*=\s*\'\';\s*for\((\$\w+)\s*=\s*0;\8\s*<\s*strlen\(\2\);\s*\8\+\+\)\{\s*\$\w+\s*=\s*\2\[\7\];\s*\$\w+\s*\.=\s*\2\[\+\+\7\]\s*\^\s*\$\w+;\s*\}\s*return\s*\$\w+;\s*\}\s*if\(preg_match\(\'[^\']+\',\$_SERVER\[\'HTTP_USER_AGENT\'\],(\$\w+)\)\)\{\s*\3\s*=\s*\9\[\d+\];\s*\3\s*\.=\s*"(\d+)";\s*\3\s*=\s*str_replace\([^\)]+\);\s*\}else\{\s*die\(\);\s*\}\s*\2\s*=\s*\'([^\']+)\';\s*eval\(\1\(\2,\3\)\);~msi',
            'id' => 'decryptWithUserAgent',
        ],
        [
            'full' => '~(\$\w+\s*=\s*\'[bs64_dcogzinflate\.\'\s]+;\s*)+(\$\w+)\s*=\s*\'([^\']+)\';\s*eval\((?:\$\w+\()+\2\)+;~msi',
            'id' => 'evalVarB64',
        ],
        [
            'full' => '~(function\s*(\w+)\(\$\w+\)\s*\{\s*\$\w+\s*=\s*\'\';\s*[^}]+\}\s*return\s*\$\w+;\s*\}\s*)?(?:\$\w+=\w+\(\'[^\']+\'\);)+(\$\w+)=\$\w+\(\'\',\s*\$\w+\(\'([^\']+)\'\)\);\3\(\);~msi',
            'id' => 'createFuncHex2Bin',
        ],
        [
            'full' => '~(define\(\'([^\']+)\', \'[^\']+\'\);\$GLOBALS\[\2\]\s*=\s*explode\(\'([^\']+)\',\s*gzinflate\(substr\(\'(.*?)\',([0-9a-fx]+),\s*([\-0-9a-f]+)\)+;.*?)(?:if\(!function_exists\(\$GLOBALS[\{\[]\2[\}\]][\[\{]\d+[\}\]]\)+\{function\s*hex2bin\(\$\w+\)\s*(?:[^}\]]+[\]\}])+\}function\s*(\w+)\((\$\w+)\)\s*\{(?:\8=substr\(\8,\(int\)\(hex2bin\(\$GLOBALS[\{\[]\2[\}\]]\s*[\{\[][0-9a-fx]+[\}\]]\)+[;,]\s*)+\(int\)\(hex2bin\(\$GLOBALS[\{\[]\2[\}\]][\{\[][0-9a-fx]+[\}\]]\)+;return\s*\8;\}(?:\$\w+=\$GLOBALS[\{\[]\2[\}\]][\{\[][0-9a-fx]+[\}\]];)+function\s*(\w+)\((\$\w+)\)\{(?:global\s*\$\w+;)+\s*return\s*strrev\(gzinflate\(\$\w+\(\7\(\10\)+;\s*\}(?:eval\()+\9\(\$GLOBALS[\{\[]\2[\}\]][\{\[][0-9a-fx]+[\}\]]\)+;|((\$\w+)=urldecode\(\$GLOBALS[\{\[]\2[\}\]][\{\[][0-9a-fx]+[\}\]]\);((?:\$\w+\.?=(?:\$\w+[\[\{][0-9a-fx]+[\]\}]\.?)+;)+)eval\(\$\w+\(\$GLOBALS[\{\[]\2[\}\]][\{\[][0-9a-fx]+[\}\]]\)+;))~msi',
            'id' => 'explodeGzinflateSubstr',
        ],
        [
            'full' => '~eval\(\'\?>\'\.base64_decode\(strtr\(substr\("([^"]+)",(\d+)\*2\),substr\("\1",\2,\2\),\s*substr\("\1",0,\2\)+~msi',
            'id' => 'evalStrtr',
        ],
        [
            'full' => '~(?:eval\(base64_decode\("[^"]+"\)+;\s*)+eval\(base64_decode\((\w+)\((\$\w+)\[\d\],\d+\)+;eval\((\w+)\(\1\(\2\[\d+\],\d+\),\1\(\2\[\d+\],\d+\),\2\)\);__halt_compiler\(\);([\w\+/=]+)~msi',
            'id' => 'evalB64Chunks',
        ],
        [
            'full' => '~function\s{0,50}(\w+)\(\$\w+,\s{0,50}\$\w+\s?\)\s{0,50}\{\s{0,50}(?:\$\w+\s{0,50}=\s{0,50}[\'"]([^\'"]+)[\'"];\s{0,50})?(\$\w+\s{0,50}=\s{0,50}base64_encode\s{0,50}\(\$\w+\);\s{0,50})?(?:\$\w+\s{0,50}=\s{0,50}(?:strlen|base64_decode)\(\$\w+\);\s{0,50})+(?:if\s{0,50}\(\$\w+\s{0,50}<=\s{0,50}\$\w+\)\s{0,50}\{\s{0,50}return\s{0,50}\$\w+\s{0,50}\^\s{0,50}\$\w+;\s{0,50}\}|(?:\$\w+\s{0,50}=\s{0,50}(?:""|0);\s{0,50})+while\s{0,50}\(\$\w+\s{0,50}<\s{0,50}strlen\(\$\w+\)+\s{0,50}\{)\s{0,50}for\s{0,50}\(\$\w+\s{0,50}=\s{0,50}0;\s{0,50}\$\w+\s{0,50}<\s{0,50}(?:strlen\s{0,50}\()?\$\w+\)?;\s{0,50}(?:\+\+\$\w+|\$\w+\+\+)\)\s{0,50}\{\s{0,50}[^\^]+\^\s{0,50}[^}]+[\}\s]+return\s{0,50}(base64_decode\(|gzuncompress\(base64_decode\s*\()?\$\w+\)?\)?;\s{0,50}\};?\s{0,50}(\$\w+)\s{0,50}=\s{0,50}"([^"]+)";\s{0,50}(\$\w+)\s{0,50}=\s{0,50}(?|"([^"]+)"|\'([^\']+)\');\s{0,50}(\$\w+)\s{0,50}=\s{0,50}\1\((?:base64_decode\()?(?:\5|\7)\)?,\s{0,50}(?:\5|\7)\);\s{0,50}eval\s{0,50}\(\9\);~msi',
            'id' => 'b64FuncEval',
        ],
        [
            'full' => '~(\$\w+)=create_function\(((?:base64_decode\(\'[^\']+\'\)|chr\([0-9a-fx\-/]+\)|str_rot13\(\'[^\']+\'\))\.?,?)+\);\1\(base64_decode\(((?:base64_decode\(\'[^\']+\'\)|chr\([0-9a-fx\-/]+\)|str_rot13\(\'[^\']+\'\)|\'[^\']*\')\.?,?)+\)\);~msi',
            'id' => 'createFuncB64StrRotChr',
        ],
        [
            'full' => '~error_reporting\(0\);\s*(\$\w+)\s*=\s*fopen\(__FILE__,\s*\'\w\'\);\s*fseek\(\1,\s*\d+\);\s*(\$\w+)\s*=\s*stream_get_contents\(\1\);\s*fclose\(\1\);\s*(\$\w+)\s*=\s*create_function\(\'\',\s*gzuncompress\(strrev\(\2\)\)\);\s*\3\(\);\s*__halt_compiler\(\);\s*(.*)~msi',
            'id' => 'gzuncompressStrrev',
        ],
        [
            'full' => '~@?(?:eval|assert)\(str_rot13\(\s*(["\'])(riny\((?:pbaireg_hhqrpbqr|fgeeri|tmvasyngr)\((?:[^;]+;)+)\1\s*\)\);~msi',
            'id' => 'strRot13ConvertUUDecode',
        ],
        [
            'full' => '~(\$\w+)="([^"]+)";\s*(\$\w+)=@?\1\(\'([^\']+)\',"([^"]+)"\);\s*@?\3\("([^"]+)"\);~msi',
            'id' => 'createFuncHex',
        ],
        [
            'full' => '~(\$\w+)\s*=\s*"([^"]+)";\s*function\s*(\w+)\(\$\w+\)\s*\{\s*\$\w+\s*=\s*strrev\("\(lave"\);\s*(\$\w+)\s*=\s*\$\w+\s*\.\s*"base64_decode\("\s*\.\s*base64_decode\(strrev\(\$\w+\)\)\s*\.\s*"\)\);";\s*eval\(strrev\(strrev\(\4\)\)\);\s*}\s*\$\w+\s*=\s*strrev\("\("\);\s*\$\w+\s*=\s*strrev\(""\{\$\w+\}""\);\s*\$\w+\s*=\s*strrev\("\)"\);\s*\$\w+\s*=\s*strrev\("\)"\);\s*(\$\w+)\s*=(?:\s*\$\w+\s*\.?)+;\s*\3\(strrev\(base64_encode\(\5\)\)\);~msi',
            'id' => 'evalStrrev',
        ],
        [
            'full' => '~(\$\w+)\s*=\s*"([^"]+)";\s*eval\(base64_decode\(substr\(strrev\(\1\),\s*(\d+),(\-\d+)\)\)\);~msi',
            'id' => 'evalSubstr',
        ],
        [
            'full' => '~((?:\$\w+\.?=\'[^\']+\';\s*)+)\$\w+=\$\w+;function\s*(\w+)\((\$\w+),(\$\w+)\)\s*\{(\$\w+)=\'\';for\((\$\w+)=0;\6<strlen\(\3\);\)for\(\5=0;\5<strlen\(\4\);\5\+\+,\6\+\+\)(\$\w+)\.=\3\{\6\}\^\4\{\5\};return\s*\7;\};(\$\w+)=base64_decode\(\8\);@?(\$\w+)=\2\(\8,\'([^\']+)\'\);@?eval\(@?gzuncompress\(\9\)\);~msi',
            'id' => 'XorGzUncompress',
        ],
        [
            'full' => '~(\$\w+)="([^"]+)";\s*(\$\w+)\s*=\s*str_replace\("([^"]+)","","([^"]+)"\);\s*(\$\w+)=\'([base64_dco\.\']+)\';\s*@?eval\(\6\(\3\("([^"]+)",\s*"",\s*\1\)\)\);~msi',
            'id' => 'evalStrReplace',
        ],
        [
            'full' => '~(\$\w+)\s*=\s*"([^"]+)";(\$\w+)\s*=\s*base64_decode\("([^"]+)"\);eval\(base64_decode\(\3\)\);(?:\s*\$\w+\s*=\s*"[^"]+";)?~msi',
            'id'   => 'sistemitComEnc',
        ],
        [
            'full' => '~(function\s*(\w+)\((\$\w+)\){\s*return\s*(base64_decode|gzinflate|eval)\(\$\w+(,\d+)?\);}\s*)+(\$\w+)="([^"]+)";(preg_replace\(\'/\.\*/e\',"([\\\\x0-9a-f]+)",\'\.\'\);)~msi',
            'id'   => 'funcs',
        ],
        [
            'full' => '~if\(!defined\(\'(\w+)\'\)\)define\(\'\1\',__FILE__\);(?:\s*@eval\(base64_decode\(\'([^\']+)\'\)\);)+\s*@chop\(base64_decode\(\'([^\']+)\'\)~msi',
            'id'   => 'fakeChop',
        ],
        [
            'full' => '~(?:\$\w+\s*=\s*"[^"]*"(?:\.\$\w+)?;\s*)+(\$\w+)=(?:\$\w+\.?)+;\s*eval\(str_rot13\(gzinflate\(str_rot13\(base64_decode\(\(\1\)\)\)\)\)\);~msi',
            'id' => 'R4C',
        ],
        [
            'full' => '~((?:\$GLOBALS\["[^"]+"\]=base64_decode\("[^"]*"\);)+).{0,10}((?:\$GLOBALS\[\$GLOBALS\["[^"]+"\]\]=base64_decode\(\$GLOBALS\["[^"]+"\]\);)+).{0,10}(?:((?:\$GLOBALS\[\$GLOBALS\[\$GLOBALS\["[^"]+"\]\]\]=base64_decode\(\$GLOBALS\[\$GLOBALS\["[^"]+"\]\]\);)+).{0,10}(\$\w+)=\$_POST\[\$GLOBALS\[\$GLOBALS\[\$GLOBALS\["[^"]+"\]\]\]\];if\(\4\!=\$GLOBALS\[\$GLOBALS\[\$GLOBALS\["[^"]+"\]\]\]\)\s*\{(\$\w+)=base64_decode\(\$_POST\[\$GLOBALS\[\$GLOBALS\[\$GLOBALS\["[^"]+"\]\]\]\]\);)?@?eval\((?:"\\\\\$\w+=\5;"\);\}|(?:\w+\()+\$GLOBALS\[\$GLOBALS\["([^"]+)"\]\]\)\)\)\);)~msi',
            'id' => 'manyGlobals',
        ],
        [
            'full' => '~((?:\$GLOBALS\["[^"]+"\]=base64_decode\("[^"]*"\);)+).*?if\(md5\(\$_GET\[\$GLOBALS\["[^"]+"\]\]\).*?echo\s?\$GLOBALS\["[^"]+"\];}+\s?\?>~msi',
            'id' => 'manyGlobals',
        ],
        [
            'full' => '~eval\(\'\$(\w+)\s*=\s*"([^"]+)";\$(\w+)\s*=\s*"([^"]+)";(eval\((?:\w+\()+)(\$\{"\3"\}\s*\.\s*\$\{"\1"})(\)+;)\'\);~msi',
            'id' => 'blackshadow',
        ],
        [
            'full' => '~if\(\!\s?defined\(\s?\'([^\']+)\'\)\)\s?define\(\s?\'\1\',\s?\'[^\']+\'\)?;\s?call_user_func_array\([\'"\w\s]+,\s?array\(\d\)\);[^\$]+(\$[GET_LOBALS]+\[\s?[\'"]?\1[\'"]?\]\s?=\s?explode\(\s?\'([^\']+)\',\s?gzinflate\(\s?substr\(\s?\'((?:[^\']+\')+),(\dx\w{1,50}),\s?(\-?[\w]{1,50})\)+;\$[GET_LOBALS]+\[\s?[\'"]?\1[\'"]?\]\s?=\s*call_user_func_array\([^,]+,\s?array\(\s?\'([^\']+)\',\s?\$[GET_LOBALS]+\[\s?[\'"]?\1[\'"]?\]\[(0x\d+)\]\)+;)(?:.*?\$[GET_LOBALS]+{\s?[\'"]?\1[\'"]?})+[^;]+;~msi',
            'id'   => 'callUserFuncsPackDefinedVar',
        ],
        [
            'full' => '~((\$\w+)=chr\(72\)\s*\.\s*chr\(42\);\$\w+=.*?pack\(\2,"[^"]+"\))(?>.*?(?1))+(?|.*?goto\s*(\w+);\s*.*?\3:\s*goto\s*(\w+);(?>[^\\\\]+[^;]+;\s*)+\w+:|=>pack\(\$\w+,"[^"]+"\),pack\(\$\w+,"[^"]+"\)=>\$\w+\];\$\w+=\$\w+;\w+:[^;]+;goto\s*(\w+);.*?\3:)~msi',
            'id' => 'SDCMS'
        ],
        [
            'full' => '~goto\s[^;]+;\s?(?:\w{1,50}:\s?)?.*?(?:isset\(\$_SERVER\[)?.*?if\s?\(!@preg_match\("\\\\\w{1,50}.*?\w{1,50}:[\s}]+\?>~msi',
            'id' => 'goto',
        ],
        [
            'full' => '~(?:function\s*\w+\(\)\s*\{\s*)?(?:\$[^;\s]+\s*=\s*\d;\s*[^;\s]+:\s*if\s*\([^\)]+\)+\s*\{\s*goto\s*[^;\s]+;\s*\}\s*\$[^;\s]+[^:]+:\s*[^;]+;\s*)?goto [^;\s]+;\s*([^;\s]+:\s*([^;\s]+:\s*)?.*?goto\s*[^;\s]+;\s*(}\s*goto\s*[^;\s]+;)?(goto\s*[^;\s]+;)?\s*)+(?:\s*/\*[^\*]+\*/\s*)?[^;\s]+:\s*(?|}|[^;>]+;)(\s*goto\s*[^;\s]+;\s*[^;\s]+:\s*[^;\s]+:\s*|(?:\s*die;\s*}\s*)?\s*goto\s*[^;\s]+;\s*[^;\s]+:\s*\}?)?(?:(?:.*?goto\s*\w{1,50};)?(?:\s*\w{1,50}:\s?)+)?(?:(?:[^;]+;\s*goto\s*\w+;\s*)+\w+:\s*include\s*[^;]+;)?(foreach\s*\([^{]+(\{(?>[^{}]|(?7))*\}))?~msi',
            'fast' => '~goto [^;\s]+;\s*([^;\s]+:\s*([^;\s]+:\s*)?.*?goto\s*[^;\s]+;\s*(}\s*goto\s*[^;\s]+;)?(goto\s*[^;\s]+;)?\s*)+[^;\s]+:\s*[^;]+(?:;|\?>)~msi',
            'id' => 'goto',
        ],
        [
            'full' => '~goto\s*(\w+);\s*.*?\1:\s*goto\s*(\w+);(?:[^\\\\]+[^;]+;\s*)+\w+:\s*(?:;|\?>)~msi',
            'id' => 'goto',
        ],
        [
            'full' => '~\$\w+\s=\sfile_get_contents\(base64_decode\(["\'][^"\']+["\']\)\s\.\sbase64_decode\(["\'][^"\']+[\'"]\)\s\.\s\$\w+\s\.\s["\'][^\'"]+["\']\s\.\s\$_SERVER\[["\'][^\'"]+[\'"]\]\s\.\s["\'][^"\']+["\']\s\.\s\$_SERVER\[["\'][^"\']+["\']\]\);.*?\s\$\w+\s=\sbase64_decode\(["\'][^"\']+["\']\);\s.*?\s@unlink\(\$_SERVER\[["\'][^"\']+["\']\]\);~msi',
            'id' => 'gotoBase64Decode',
        ],
        [
            'full' => '~(?:\$\w{1,50}\s?=\s?(?:str_rot13\(\$\w{1,50}\)|[\'"][^"\']+[\'"]|base64_decode\("(?:{\$\w{1,50}})+"\));\s*)+(\$\w{1,50})\s?=\s?base64_decode\("((?:{\$\w{1,50}})+)"\);\s?eval\(\1\);~msi',
            'id' => 'gotoStrRot13Vars',
        ],
        [
            'full' => '~(\$\{"GLOBALS"\}\["\w+"\])\s*=\s*"\w+";\s*(?:\$\{"GLOBALS"\}\["(\w+)"\]\s*=\s*"\w+";\s*)+.*?;\s*\$\{\1\}\s*=\s*[\"\'][^;]+[\"\'];\s*exec\(\$\w+\);\s*echo\s*"[^"]+";\s*\}\s*\}~msi',
            'id' => 'gotoShell',
        ],
        [
            'full' => '~(?:\$\w+\s*=\s*\'[^\']++\';\s*)*eval\(base64_decode\(substr\("(?:[^"]++)",(?:\d+),(?:-?\d+)\)\.base64_decode\(strrev\("[^"]++"(?:\.(?:substr\("(?:[^"]++)",(?:\d++),(?:-?\d++)\)|"(?:[^"]+)"))++\)\)\)\);(?:\$\w+\s*=\s*\'[^\']++\';\s*)*~msi',
            'id'   => 'substrEmpty',
        ],
        [
            'full' => '~function\s{0,50}(\w+)\((\$\w+)\)\s{0,50}\{\s{0,50}\2\s{0,50}=\s{0,50}substr\(\2,\s{0,50}\(int\)\s{0,50}\(?(?:hex2bin\()?([\'"])([0-9a-f]+)\3\)+;\s{0,50}\2\s{0,50}=\s{0,50}substr\(\2,\s{0,50}\(int\)\s{0,50}\(?(?:hex2bin\()?([\'"])([0-9a-f]+)\5\)*,\s{0,50}\(int\)\s{0,50}\(?(?:hex2bin\()?([\'"])([0-9a-f\-]+)\7\)+;\s{0,50}return\s{0,50}\2;\s{0,50}\}\s{0,50}(\$\w+)\s{0,50}=\s{0,50}([\'"])[^\'"]+\10;\s{0,50}(\$\w+)\s{0,50}=\s{0,50}[\'"]base64_decode[\'"];\s{0,50}function\s{0,50}\w+\((\$\w+)\)\s{0,50}{\s{0,50}global\s{0,50}\9;\s{0,50}global\s{0,50}\11;\s{0,50}return\s{0,50}strrev\(gzinflate\(\11\(\1\(\12\)\)\)\);\s{0,50}\}\s{0,50}(?:(?:eval\()+\w+\(([\'"]))?([^\'"]+)\13\)+;~msi',
            'id'   => 'Obf_20200522_1',
        ],
        [
            'full' => '~(\$auth_pass\s*=\s*"[^"]+";\s*(?:/\*[^\*]+\*/\s*)?)\$__="";((?:\$__=\$__\."[^"]+";\s*)+)\$\w+=\$__;function\s*(\w+)\((\$\w+),\s*(\$\w+)\)\{\s*for\((\$\w+)=0;\6<strlen\(\4\);\)\s*for\((\$\w+)=0;\7<strlen\(\5\);\7\+\+,\s*\6\+\+\)\s*(\$\w+)\s*\.=\s*\4\{\6\}\s*\^\s*\5\{\7\};\s*return\s*\8;\s*\};(\$\w+)=base64_decode\(\9\);\$__=\3\(\9,"([^"]+)"\);\$_=create_function\("",\$__\);\$_\(\);~msi',
            'id' => 'b64xoredkey',
        ],
        [
            'full' => '~(eval\(gzinflate\(base64_decode\("([^"]+)"\)\)\);\s*)((?:eval\((?:\$\w+\()+"[^"]+"\)+;\s*)+)~msi',
            'id' => 'linesCond',
        ],
        [
            'full' => '~(\$\w+)\s*=\s*\'[\'.error_reporting]+;\s*\1\(0\);((?:\s*\$\w+\s*=\s*[\'abcdefgilnorstz64_.]+;)+)((?:\s*\$\w+\s*=\s*\'[^;]+\';)+)((?:\s*\$\w+\()+)(\$\w+)[\s\)]+;\s*die\(\);~mis',
            'id'   => 'blackScorpShell',
        ],
        [
            'full' => '~(?(DEFINE)(?\'c\'(?:/\*\w+\*/)*))(\$\w+)\s*=\s*basename(?&c)\((?&c)trim(?&c)\((?&c)preg_replace(?&c)\((?&c)rawurldecode(?&c)\((?&c)"[%0-9A-F\.]+"(?&c)\)(?&c),\s*\'\',\s*__FILE__(?&c)\)(?&c)\)(?&c)\)(?&c);(\$\w+)\s*=\s*"([%\w\.\-\~]+)";(?:(\$\w+)=[^;]+;\5(?&c)\((?&c)\'\',\s*\'};\'\s*\.\s*(?&c)\()?(?:eval(?&c)\()?(?&c)rawurldecode(?&c)\((?&c)\3(?&c)\)(?&c)\s*\^\s*substr(?&c)\((?&c)str_repeat(?&c)\((?&c)\2,\s*(?&c)\((?&c)strlen(?&c)\((?&c)\3(?&c)\)(?&c)/strlen(?&c)\((?&c)\2(?&c)\)(?&c)\)(?&c)\s*\+\s*1(?&c)\)(?&c),\s*0,(?&c)\s*strlen(?&c)\((?&c)\3(?&c)\)(?&c)\)(?&c)\)(?:(?&c)\s*\.\s*\'{\'(?&c)\))?(?&c);~msi',
            'id'   => 'xorFName',
        ],
        [
            'full' => '~(\$\w{1,40})=base64_decode\(\'[^\']+\'\);(\$\w+)=base64_decode\(\'[^\']+\'\);(\$\w+)=base64_decode\(\'([^\']+)\'\);eval\(\1\(gzuncompress\(\2\(\3\)\)\)\);~msi',
            'id'   => 'phpMess',
        ],
        [
            'full' => '~(\$\w{1,40})\s*=\s*\"([^\"]+)\";\s*\$\w+\s*=\s*\$\w+\(\1,\"[^\"]+\",\"[^\"]+\"\);\s*\$\w+\(\"[^\"]+\",\"[^\"]+\",\"\.\"\);~msi',
            'id'   => 'pregReplaceSample05',
        ],
        [
            'full' => '~(\$\w{1,40})\s*=\s*\w+\(\'[^\)]+\'\);\s*(\$\w+)\s*=\s*\w+\(\'[^\)]+\'\);\s*(\$\w+)\s*=\s*\"([^\"]+)\";\s*(\$\w+)\s*=\s*[^;]+;\s*\2\(\5,\"[^\']+\'\3\'[^\"]+\",\"\.\"\);~msi',
            'id'   => 'pregReplaceB64',
        ],
        [
            'full' => '~preg_replace\([\'"]/\(\.\*\)/e[\'"],[\'"]([^\'"]+)[\'"],\s?NULL\);~msi',
            'id'   => 'pregReplaceStr',
        ],
        [
            'full' => '~(\$\w{1,40})\s*=\s*\'([^\']+)\';\s*\1\s*=\s*gzinflate\s*\(base64_decode\s*\(\1\)\);\s*\1\s*=\s*str_replace\s*\(\"__FILE__\",\"\'\$\w+\'\",\1\);\s*eval\s*\(\1\);~msi',
            'id'   => 'GBE',
        ],
        [
            'full' => '~\$GLOBALS\[\'([_\d]{3,20})\'\]=array\(([^;]*)\);\s*\?><\?\s*function\s*(_\d{1,20})\(\$\w{1,10}\)\s*{\$\w{1,10}=array\(([^;]{10,1000})\);return base64_decode\(\$\w{1,10}\[\$\w{1,10}\]\);}\s*\?><\?php\s*(if\(\3\(\d{1,3}\)==\$_GET\[\3\(\d{1,3}\)\]\)\s*{[^}]{0,100}\}if[^}]{3,500}\})~msi',
            'id' => 'globalsArrayDictFunc'
        ],
        [
            'full' => '~(?:if\s*\(\!isset\(\$\w+\)\)\s*\{\s*\$\w+\s*=\s*\w+;\s*)?(\$GLOBALS\[\s*[\'"]_+\w{1,60}[\'"]\s*\])\s*=\s*\s*array\s*\(\s*(?>base64_decode\s*\([^)]+\)[,\)]|\'\w*\'[,\)])+;\s*(?>\?>\s*\<\?(?>php)?\s*)?(?:function\s*(\w+)\((\$\w+)\)\{(?>static\s*\$\w+=\s*\w+;\s*if\(\$\w+\s*==\s*\w+\)\s*)?(\$\w+)=array\([^\)]+\);return\s*base64_decode\(\4\[\3\]\);\})?\s*(?>\?\>\s*)?(?:\<\?(?>php)?(?:\s*\$GLOBALS\[\2\(\d+\)\]=array\((?:\1\[\d+\]\((?:\2\(\d+\)\s*\.?)+\)+[,;])+)\s*\?\>)?(?>\<\?)?(?>php)?(?:\s*\1\[\d+\].+?\2\(\d+\)\);exit\(\);[\}\s]+|\s*\1\[\d+\]\s*\([^)]+\)[^|]+[^;]+;\s*if\(\1\[\d+\]\([^{]+\{\s*\$\w+=\s*\w+;\s*include\(\$_\d+\);\}|\s*function\s*(\w+)\(\$\w+\)\s*\{[^}]+\}\s*\?\>\<\?\s*\$\w+=\$GLOBALS\[\2\(\d+\)\]\[[^?]+\$GLOBALS\[\2\(\d+\)\]\[[^]]+\]\((?:\$\w+,?)+\);|\s*@?\1\[\d+\]\([^@]+@\1\[\d+\]\("[^"]+"\);|(?:\s*\$\w+\s*\.?=[^;]+;)+foreach\([^)]+\)\1\[\d+\]\((?:\$\w+,?)+\);|\s*@?\1\[\d+\]\([^@]+@\1\[\d+\]\(\2[^}]+\}\}else[^}]+\}\}|\s*\1\[\d+\]\([^?]+\?[^?]+[^>]+>[^}]+}foreach\([^}]+}[^|]+\|\|\s*(?:[^}]+\}){18}if\(isset\(\$\w+\[\2\(\d+\)\]\)\)\{[^}]+}\w+\(\$\w+\);if\(\$\w+\s*==\s*\$\w+\)\w+\(\$\w+\);|\s*@\1\[\d+\]\((?:[^?]+\?)+[^;]+;@\1\[\d+\]\([^}]+}{5}|(?:function[^}]+})+(?:[^}]+})+}[^!]+(?:[^}]+})+else{return\s*\2\(\d+\);\}\}|\s*\1\[\d+\]\(\d+\);(?:[^}]+})+\s*if\([^}]+\}\s*\w+\(\s*\2\(\d+\)[^;]+;\s*\}|\s*if\([^}]+\}\}if\([^}]+\}\1\[\d+\]\(\$\w+\);\}\}|\1\[\d+\]\((?:[^}]+}+)+if\(@?\$\w+\[\2\(\d+\)\]\!=\s*[^{]+\{\$\w+=\w+\(\$\w+\[\2\(\d+\)\]\);if\(\1\[\d+\]\s*\(\2\(\d+\),[^)]+\)\)\{\1\[\d+\]\(\2\(\d+\),\$\w+\);\}\}|(?:\s*[^}]+\})+echo\s*\$\w+;[^;]+;|[^}]+\}else{[^}]+\}\}else\{[^}]+\}echo\s*\1\[\d+\]\([^}]+}\s*}|\$\w+=\2\(\d+\);[^;]+;\1\[\d+\]\((?:\2\(\d+\),?)+\);|[^}]+}else{\s*[^}]+\}\}else\{[^}]+\}if[^}]+}else\s*if[^}]+\}if[^{]+{\1\[\d+\]\([^}]+\}\s*\}|\1\[\d+\]\s*\([^}]+\}if\([^}]+}if\(\1[^}]+\}else\s*if\([^}]+\}\1\[\d+\]\([^}]+\}if\([^)]+\)\]==\s*\2\(\d+\)+eval\(\1\[\d+\]\(\$\w+[^)]+\)+;|(?:[^}]+\})+echo\s*\$\w+;|(?:[^}]+\}+)+;|\1\[\d+\]\((?:[^{]+\{+)+\1\[\d+\]\(\2[^;]+;\}\}|(?:[^{]+\{)+\1\[\d+\]\(\2\(\d+\)+;\}echo\s*\$\w+;|(?:[^{]+\{)+[^}]+}if\(@?\$\w+\[\2\(\d+\)\][^)]+\)+eval\(\1\[\d+\]\(\$\w+[^)]+\)+;|\s*(?:\$_\d{1,3}=\1\[\d{1,3}\]\(\$_POST\[\2\(\d{1,3}\)\]\);){1,10}\$_\d{1,3}=\1\[\d{1,3}\]\([$_\d,]{1,30}\);if\([$_\d,]{2,5}\){echo\s\2\(\d{1,3}\);}else\{echo\s\2\(\d{1,3}\)\s*\.[_\d$]{1,3};}\s*\?\>)~msi',
            'fast' => '~\$GLOBALS\[\s*[\'"]_+\w{1,60}[\'"]\s*\]\s*=\s*\s*array\s*\(\s*base64_decode\s*\(~msi',
            'id'   => 'Bitrix',
        ],
        [
            'full' => '~\$\w{1,50}\s?=\s?__FILE__;\s?(?:\$\w{1,50}\s?=\s?__LINE__;\s?)?\$\w{1,50}\s?=\s?(\d{1,10});\s?eval\(+((?:base64_decode\(|gzuncompress\()+[\'"][^"\']+[\'"]\)+);\s?return;\s*\?>\s*([^\s]+)~msi',
            'id' => 'lockit3',
        ],
        [
            'full' => '~\$\w{1,40}\s*=\s*(__FILE__|__LINE__);\s*\$\w{1,40}\s*=\s*(\d+);\s*eval(\s*\()+\$?\w+\s*\([\'"][^\'"]+[\'"](\s*\))+;\s*return\s*;\s*\?>(.+)~msi',
            'id'   => 'B64inHTML',
        ],
        [
            'full' => '~<\?php\s+(?:/[*/].*?)?(?:\$[O0]*=__FILE__;\s*)?(\$[O0]*)=urldecode\(\'([%a-f0-9]+)\'\);(\$(GLOBALS\[\')?[O0]*(\'\])?=(\d+);)?(.*?)(\$(GLOBALS\[\')?[O0]*(\'\])?\.?=(\$(GLOBALS\[\')?[O0]*(\'\])?([{\[]\d+[}\]])?\.?)+;)+([^\?]+)\?\>[\s\w\~=/+\\\\^{`%|@[\]}]+~msi',
            'fast' => '~(\$[O0]*)=urldecode\(\'([%a-f0-9]+)\'\);(\$(GLOBALS\[\')?[O0]*(\'\])?=(\d+);)?(.*?)(\$(GLOBALS\[\')?[O0]*(\'\])?\.?=(\$(GLOBALS\[\')?[O0]*(\'\])?([{\[]\d+[}\]])?\.?)+;)+([^\?]+)\?\>[\s\w\~=/+\\\\^{`%|@[}]+~msi',
            'id'   => 'LockIt',
        ],
        [
            'full' => '~(\$\w{1,40})\s*=\s*\"(\\\\142|\\\\x62)[0-9a-fx\\\\]+";\s*@?eval\s*\(\1\s*\([^\)]+\)+\s*;~msi',
            'fast' => '~(\$\w{1,40})\s*=\s*\"(\\\\142|\\\\x62)[0-9a-fx\\\\]+";\s*@?eval\s*\(\1\s*\(~msi',
            'id'   => 'FOPO',
        ],
        [
            'full' => '~\$_F=__FILE__;\$_X=\'([^\']+\');eval\([^\)]+\)+;~msi',
            'fast' => '~\$_F=__FILE__;\$_X=\'([^\']+\');eval\(~ms',
            'id'   => 'ByteRun',
        ],
        [
            'full' => '~(\$\w{1,40}=\'[^\']+\';\s*)+(\$[\w{1,40}]+)=(urldecode|base64_decode){0,1}\(?[\'"]([\w+%=-]+)[\'"]\)?;((\$\w+)=[^;]+;)+[^\(]+\(\'Content-Type.*?;\${"[^"]+"}\["[\\\\x0-9a-f]+"\]\(\);~msi',
            'id'   => 'Urldecode',
        ],
        [
            'full' => '~(\$[\w{1,40}]+)\s?=\s?(urldecode|base64_decode)\(?[\'"]([\w+%=\-/\\\\\*]+)[\'"]\);(\s*\$\w+\.?\s?=\s?@?((?:\$\w+\s*\.\s*)?\$\w+[{\[]\d+[}\]]\s*[\.;]?\s*)+)+((\$\w+=["\']([^\'"]+)[\'"];\s*eval\(\'\?>\'\.[\$\w\(\)\*\d,\s]+);|(eval\(\s*\$\w+\([\'"]([^\'"]+)[\'"][)\s]+;)|header\(\'[^\']+\'\);(?:\$\w+=\${[^}]+}\[[^\]]+\]\(\'.*?\'?;}?\'\);)+\${[^}]+}\[[^\]]+\]\(\);)~msi',
            'id'   => 'UrlDecode2',
        ],
        [
            'full' => '~(?:\$\w{1,40}\s?=\s?[\'"]?[\d\w]+[\'"]?;\s*)*()(?|(?:(\$\w{1,40})\s?=\s?[\'"]([^\'"]+)[\'"];\s*)+(?:global\s*\$\w+;\s*)?(\$[\w{1,40}]+)\s?=\s?urldecode\(\2\);|(\$\w{1,40})\s?=\s?urldecode\([\'"]([^\'"]+)[\'"]\);(?:\s*header\(\'Content-Type:[^\)]+\);\s*(?:\$\w+="\d+";\s*)+)?function\s*\w+\([^{]+\{global\s*(\$\w+);)\s*.+?\4(?:.{1,1000}\4[{\[]\d+[}\]]\.?)+?.*?(?:function\s*(\w+)\(\$\w+\s*=\s*\'\'\)\{global\s*\4;@.+\5\(\);|function\s*\w+\(\$\w+,\s*\$\w+,\s*\$\w+\)\s*\{\$\w+\s*[^)]+\)[^}]+;\}|header\((?:\4[\[\{]\d+[\]\}]\s?\.?\s?)+\).?\s?})~msi',
            'id'   => 'UrlDecode3',
        ],
        [
            'full' => '~(?:@?session_start\(\);)?(?:@?(?:set_time_limit|error_reporting)\(\d+\);){1,2}(?:ini_set\(base64_decode\([\'"][^\'"]+[\'"]\)|@\$\w{1,50}=\$_POST\[base64_decode\([\'"][^\'"]+[\'"]\)\];|if\((?:\w{1,50}\(\)\){foreach\(\$_POST\s{0,50}as\s{0,50}\$\w{1,50}=>\$\w{1,50}\)|\$_GET|!empty\(\$_SERVER\[))(?:.*?base64_decode\([\'"][^\'"]+[\'"]\)+\.?){1,200}\]?(?:\)\)|;})?(?:;return\s?\$\w{1,50};})?;?~msi',
            'id' => 'manyBase64DecodeContent',
        ],
        [
            'full' => '~echo\s{0,50}base64_decode\(\'[^\']+\'\);\s{0,50}echo\s{0,50}base64_decode\(\'[^\']+\'\)\.php_uname\(\)\.base64_decode\(\'[^\']+\'\);.*?else\s{0,50}{\s{0,50}echo\s{0,50}base64_decode\(\'[^\']+\'\);\s{0,50}}}}~msi',
            'id' => 'manyBase64DecodeContent',
        ],
        [
            'full' => '~{(\$\w{1,100})\s?=(?:\s?base64_decode\(\'[^\']+\'\)\.?)+;(\$\w{1,100})\s?=\s?\1\(base64_decode\(\'[^\']+\'\),(?:\s?base64_decode\(\'[^\']+\'\)\.?)+\);\2\(base64_decode\(\'([^\']+)\'\)\);exit;}~msi',
            'id' => 'manyBase64DecodeContent',
        ],
        [
            'full' => '~eval\(base64_decode\(\'[^\']+\'\)\.file_get_contents\(base64_decode\(\'[^\']+\'\)\)\);~msi',
            'id' => 'manyBase64DecodeContent',
        ],
        [
            'full' => '~\$\w{1,50}\s?=\s?\$\w{1,50}->get\(base64_decode\([\'"][^\'"]+[\'"]\)(?:.*?base64_decode\([\'"][^\'"]+[\'"]\)){1,200}\)\s?\)\s?{~msi',
            'id' => 'manyBase64DecodeContent',
        ],
        [
            'full' => '~\${base64_decode\(\'[^\']+\'\)}\[base64_decode\(\'[^\']+\'\)]\s?=\s?base64_decode\(\'[^\']+\'\);if\(isset\(\$_GET\[base64_decode\(\'[^\']+\'\)]\).*?\${\${base64_decode\(\'[^\']+\'\)}\[base64_decode\(\'[^\']+\'\)]}\(base64_decode\(\'[^\']+\'\)\);exit;}~msi',
            'id' => 'manyBase64DecodeContent',
        ],
        [
            'full' => '~(?:\$GLOBALS\["[^"]+"\]\s*=\s*base64_decode\s*\((?|"[^"]*"|\'[^\']*\')\);\s*)+function\s*(\w+)\s*\(\$\w+\)\s*\{\s*\$\w+\s*=\s*curl_init\s*\(\$GLOBALS[^}]+\}\s*(\$\w+)\s*=\s*\1\s*\(\$GLOBALS\[[^\)]+\);\s*eval\s*\((?:"[^"]*"\s*\.\s*)?\2\);~msi',
            'id' => 'manyBase64DecodeContent',
        ],
        [
            'full' => '~(?(DEFINE)(?\'s\'(?:base64_decode\(\'[^\']+\'\))))(?:error_reporting\(0\);\s*ignore_user_abort;\s*sleep\(\d+\);)?\$\w+\s*=\s*\(\(\!empty\(\$_SERVER\[(?&s)\s*\]\)+\s*\?\s*(?&s)\s*:[^;]+;\s*\$\w+\s*=\s*str_replace\((?&s),\s*\'\',\s*\$\w+,\s*\$\w+\);\s*(?:if\s*\(\$\w+\s*==\s*\d+\)\s*\$\w+\s*=\s*(?&s);\s*)+\$\w+\s*=\s*rand\(\d+,\s*\d+\);\s*(?:if\s*\(\$\w+\s*==\s*\d+\)\s*\$\w+\s*=\s*base64_decode\((?&s)\);\s*)+.*?\$\w+\s*=\s*array\((?:(?&s),?\s*)+\);\s*for\s*\([^}]+\}\s*(\$\w+)\s*=\s*basename\(__FILE__,\s*(?&s)\)[^;]+;\s*(\$\w+)\s*=\s*file_get_contents\(\2\);\s*(\$\w+)\s*=\s*fopen\([^;]+;\s*fwrite\(\4,\s*\3\);\s*fclose\(\4\);\s*exec\((?&s)[^;]+;~msi',
            'id' => 'manyBase64DecodeContent',
        ],
        [
            'full' => '~if\s?\(isset\(\$_POST\[[\'"][^\'"]+[\'"]\]\)\)\s?{\s?\$\w{1,50}\s?=\s?substr\(\$_POST\[[\'"][^\'"]+[\'"]\],\s?\d+\);(?:[^;]+;\s?){2}\$\w{1,50}\s?=\s?proc_open\(base64_decode\([\'"][^\'"]+[\'"]\),\s?array[^;]+;\s?}~msi',
            'id' => 'manyBase64DecodeContent',
        ],
        [
            'full' => '~error_reporting\(\d{1,5}\);\s?ignore_user_abort\(true\);\s?sleep\(\d{1,5}\);(?:\$\w{1,50}\s?=\s?rand[^;]+;)?(?:(?:if\(\$\w{1,50}==\d+\))?(\$\w{1,100})\s?=\s?base64_decode\(base64_decode\(\'[^\']+\'\)\);)+.*?chmod\((?:base64_decode\()?[\'"]?[^\'"]+[\'"]?\)?,\d+\);.*?base64_decode\((?:base64_decode\()?[\'"][^\'"]+[\'"]\)\);(?:chmod\()?(?:.*?base64_decode\([\'"][^\'"]+[\'"]\))+(?:\.__DIR__\."[^"]+",\$\w+\);@?unlink\("?\$\w+"?\));~msi',
            'id' => 'manyBase64DecodeContent',
        ],
        [
            'full' => '~(?(DEFINE)(?\'s\'(?:base64_decode\((?:\"[^\"]+\"|\'[^\']+\')\))))(?:\$\w+\s*=\s*"\w{32}";|=@?NULL;)(?:\s*(?:(?:\$\{)+(?:(?&s)|\$\w+)\}(?:\[(?&s)\])?\}?|\$\w+)=(?&s);)+\s*eval\(htmlspecialchars_decode\(gzinflate\(base64_decode\(\$\{\$\{(?&s)\}\[(?&s)\]\}\)+;\s*(?:__halt_compiler\(\);)?\s*exit;~msi',
            'id' => 'manyB64WithVarNorm',
        ],
        [
            'full' => '~explode\(\"\*\*\*\",\s*\$\w+\);\s*eval\(eval\(\"return strrev\(base64_decode\([^\)]+\)+;~msi',
            'fast' => '~explode\(\"\*\*\*\",\s*\$\w+\);\s*eval\(eval\(\"return strrev\(base64_decode\(~msi',
            'id'   => 'cobra',
        ],
        [
            'full' => '~\$[O0]+=\(base64_decode\(strtr\(fread\(\$[O0]+,(\d+)\),\'([^\']+)\',\'([^\']+)\'\)\)\);eval\([^\)]+\)+;~msi',
            'fast' => '~\$[O0]+=\(base64_decode\(strtr\(fread\(\$[O0]+,(\d+)\),\'([^\']+)\',\'([^\']+)\'\)\)\);eval\(~msi',
            'id'   => 'strtrFread',
        ],
        [
            'full' => '~if\s*\(\!extension_loaded\(\'IonCube_loader\'\)\).+pack\(\"H\*\",\s*\$__ln\(\"/\[A-Z,\\\\r,\\\\n\]/\",\s*\"\",\s*substr\(\$__lp,\s*([0-9a-fx]+\-[0-9a-fx]+)\)\)\)[^\?]+\?\>\s*[0-9a-z\r\n]+~msi',
            'fast' => '~IonCube_loader~ms',
            'id'   => 'FakeIonCube',
        ],
        [
            'full' => '~(\$\w{1,40})="([\w\]\[\<\&\*\_+=/]{300,})";\$\w+=\$\w+\(\1,"([\w\]\[\<\&\*\_+=/]+)","([\w\]\[\<\&\*\_+=/]+)"\);~msi',
            'id'   => 'strtrBase64',
        ],
        [
            'full' => '~\$\w+\s*=\s*array\((\'[^\']+\',?)+\);\s*.+?(\$_\w{1,40}\[\w+\])\s*=\s*explode\(\'([^\']+)\',\s*\'([^\']+)\'\);.+?(\2\[[a-fx\d]+\])\(\);(.+?\2)+.+}~msi',
            'fast' => '~(\$_\w{1,40}\[\w+\])\s*=\s*explode\(\'([^\']+)\',\s*\'([^\']+)\'\);.+?(\1\[[a-fx\d]+\])\(\);~msi',
            'id'   => 'explodeSubst',
        ],
        [
            'full' => '~(\$[\w{1,40}]+)\s*=\s*\'([\w+%=\-\#\\\\\'\*]+)\';(\$[\w+]+)\s*=\s*Array\(\);(\3\[\]\s*=\s*(\1\[\d+\]\.?)+;+)+(.+\3)[^}]+}~msi',
            'fast' => '~(\$[\w{1,40}]+)\s*=\s*\'([\w+%=\-\#\\\\\'\*]+)\';(\$[\w+]+)\s*=\s*Array\(\);(\3\[\]\s*=\s*(\1\[\d+\]\.?)+;+)+~msi',
            'id'   => 'subst',
        ],
        [
            'full' => '~if\s{0,50}\(!(?:function_exists|\$\W{1,50})\(\"([\w\W]{1,50})\"\)\)\s{0,50}{\s{0,50}function \1\(.+?eval\(\1\(\"([^\"]+)\"\)\);~msi',
            'fast' => '~if\s{0,50}\(!(?:function_exists|\$\W{1,50})\(\"([\w\W]{1,50})\"\)\)\s{0,50}{\s{0,50}function \1\(.+?eval\(\1\(\"[^\"]+\"\)\);~msi',
            'id'   => 'decoder',
        ],
        [
            'full' => '~(\$\w{1,40})\s*=\s*\"riny\(\"\.(\$\w+)\(\"base64_decode\"\);\s*(\$\w+)\s*=\s*\2\(\1\.\'\("([^"]+)"\)\);\'\);\s*\$\w+\(\3\);~msi',
            'id'   => 'GBZ',
        ],
        [
            'full' => '~\$\w+\s*=\s*\d+;\s*\$GLOBALS\[\'[^\']+\'\]\s*=\s*Array\(\);\s*global\s*\$\w+;(\$\w{1,40})\s*=\s*\$GLOBALS;\$\{"\\\\x[a-z0-9\\\\]+"\}\[(\'\w+\')\]\s*=\s*\"(([^\"\\\\]|\\\\.)*)\";\1\[(\1\[\2\]\[\d+\].?).+?exit\(\);\}+~msi',
            'fast' => '~(\$\w{1,40})\s*=\s*\$GLOBALS;\$\{"\\\\x[a-z0-9\\\\]+"\}\[(\'\w+\')\]\s*=\s*\"(([^\"\\\\]|\\\\.)*)\";\1\[(\1\[\2\]\[\d+\].?)~msi',
            'id'   => 'globalsArray',
        ],
        [
            'full' => '~(\${(["\w\\\\]+)}\[["\w\\\\]+\]=["\w\\\\]+;)+((\${\${(["\w\\\\]+)}\[["\w\\\\]+\]}).?=((urldecode\(["%\w]+\);)|(\${\${["\w\\\\]+}\[["\w\\\\]+\]}{\d+}.?)+;))+eval\(\${\${["\w\\\\]+}\[["\w\\\\]+\]}\(["\w+=]+\)\);~msi',
            'id'   => 'xbrangwolf',
        ],
        [
            'full' => '~(\$\w{1,40})\s*=\s*\'(\\\\.|[^\']){0,100}\';\s*\$\w+\s*=\s*\'(\\\\.|[^\']){0,100}\'\^\1;[^)]+\)+;\s*\$\w+\(\);~msi',
            'fast' => '~(\$\w{1,40})\s*=\s*\'(\\\\.|[^\']){0,100}\';\s*\$\w+\s*=\s*\'(\\\\.|[^\']){0,100}\'\^\1;~msi',
            'id'   => 'xoredVar',
        ],
        [
            'full' => '~(?:(?:\$\w+=\'[^\']+\';\s*)+(?:\$\w+=\'[^\']+\'\^\'[^\']+\';\s*)+.{0,50})?\$\w{1,40}=\'[^\']{0,100}(?:\'\^\')?[^\']*\';(?:\$\w{1,40}=\w{1,3};)?(?:\$\w{1,40}=\'[^\']+(?:\'\^\')?[^\']*\';)+(?:.{0,6000}?)if\(\$\w{1,40}==\$\w{1,40}\(\$\w{1,40}\)\){(?:.{0,6000}?)(\$\w+)=\$\w+\(\$\w+,\$\w+\);\1\(\'[^\']+\',\'[^\']+\'\);}.{0,300}\$\w{1,40}(?:\(\'[^\']{0,100}\',\'[^\']{0,100}\'\))?(?:.{0,300}\s*;\s*\'[^\']+\';){0,2}~msi',
            'fast' => '~\$\w{1,40}=\'[^\']{0,100}(?:\'\^\')[^\']*\';(?:\$\w{1,40}=\'[^\']+(?:\'\^\')?[^\']*\';)+~msi',
            'id'   => 'xoredVar',
        ],
        [
            'full' => '~(\$\w+)=fopen\(__FILE__,\'r\'\);(\$\w+)=fread\(\1,filesize\(__FILE__\)\);fclose\(\1\);(\$\w+)=explode\(hex2bin\(\'([^\']+)\'\),\2\)\[(\d)\];(\$\w+)=\[\];for\((\$\w+)=0;\7<strlen\(\3\);\7\+\+\)\6\[\]=ord\(\3\[\7\]\)\s*xor\s*\7;eval\(hex2bin\(base64_decode\(implode\(array_map\(hex2bin\(\'([^\']+)\'\),\6\)\)\)\)\);__halt_compiler\(\);\w+~msi',
            'id' => 'D5',
        ],
        [
            'full' => '~(\$\w{1,40})\s*=\s*\'([^\']*)\';\s*(\$\w{1,40})\s*=\s*explode\s*\((chr\s*\(\s*\(\d+\-\d+\)\)),substr\s*\(\1,\s*\((\d+\-\d+)\),\s*\(\s*(\d+\-\d+)\)\)\);\s*(\$\w{1,40})\s*=\s*\3\[\d+\]\s*\(\3\[\s*\(\d+\-\d+\)\]\);\s*(\$\w{1,40})\s*=\s*\3\[\d+\]\s*\(\3\[\s*\(\d+\-\d+\)\]\);\s*if\s*\(!function_exists\s*\(\'([^\']*)\'\)\)\s*\{\s*function\s*\9\s*\(.+\1\s*=\s*\$\w+[+\-\*]\d+;~msi',
            'fast' => '~(\$\w{1,40})\s=\s\'([^\']*)\';\s(\$\w{1,40})=explode\((chr\(\(\d+\-\d+\)\)),substr\(\1,\((\d+\-\d+)\),\((\d+\-\d+)\)\)\);\s(\$\w{1,40})\s=\s\3\[\d+\]\(\3\[\(\d+\-\d+\)\]\);\s(\$\w{1,40})\s=\s\3\[\d+\]\(\3\[\(\d+\-\d+\)\]\);\sif\s\(!function_exists\(\'([^\']*)\'\)\)\s\{\sfunction\s*\9\(~msi',
            'id'   => 'arrayOffsets',
        ],
        [
            'full' => '~(\$\w+)\s?=\s?(?|\'([^\']+)\'|"([^"]+)");\s?(\$\w+)\s?=\s?explode\(chr\(+(\d+\s?[-+]\s?\d+)\)+,\s?[\'"]((?:\d+,?)+)[\'"]\);\s?(\$\w+)\s?=\s?substr\(\1,\s?\(+(\d+\s?[-+]\s?\d+)\),\s?\(+(\d+\s?[-+]\s?\d+)\)\);\s?if\s?\(!function_exists\([\'"](\w+)[\'"]\)\)\s?{\s?function\s?\9\((\$\w+),\s?(\$\w+)\)\s?{\s?(\$\w+)\s?=\s?NULL;\s?for\s?\((\$\w+)\s?=\s0;\s?\13\s?<\s?\(sizeof\(\10\)\s?/\s?(\d+)\);\s?\13\+\+\)\s?{\s?\12\s?\.=\s?substr\(\11,\s?\10\[\(\13\s?\*\s?(\d+)\)\],\s?\10\[\(\13\s?\*\s?(\d+)\)\s?\+\s?(\d+)\]\);\s?}\s?return\s?\12;\s?}\s;\s?}\s?(\$\w+)\s?=\s?[\'"](.*?eval\(str_replace\(chr\(\(+(\d+\s?[-+]\s?\d+)\)\),\s?chr\(\(+(\d+\s?[-+]\s?\d+)\)\),\s?\9\(\3,\1\)\)\);.*?)[\'"];\s?(\$\w+)\s?=\s?substr\(\1,\s?\(+(\d+\s?[-+]\s?\d+)\),\s?\(+(\d+\s?[-+]\s?\d+)\)\);\s?\22\(\6,\s?\18,\s?NULL\);\s?\22\s?=\s?\18;\s?\22\s?=\s?\(+(\d+\s?[-+]\s?\d+)\);\s?\$\w+\s?=\s?\$\w+\s?\-\s?\d+;~msi',
            'fast' => '~(\$\w+)\s?=\s?(?|\'([^\']+)\'|"([^"]+)");\s?(\$\w+)\s?=\s?explode\(chr\(+(\d+\s?[-+]\s?\d+)\)+,\s?[\'"]((?:\d+,?)+)[\'"]\);\s?(\$\w+)\s?=\s?substr\(\1,\s?\(+(\d+\s?[-+]\s?\d+)\),\s?\(+(\d+\s?[-+]\s?\d+)\)\);\s?if\s?\(!function_exists\([\'"](\w+)[\'"]\)\)\s?{\s?function\s?\9\((\$\w+),\s?(\$\w+)\)\s?{\s?(\$\w+)\s?=\s?NULL;\s?for\s?\((\$\w+)\s?=\s0;\s?\13\s?<\s?\(sizeof\(\10\)\s?/\s?(\d+)\);\s?\13\+\+\)\s?{\s?\12\s?\.=\s?substr\(\11,\s?\10\[\(\13\s?\*\s?(\d+)\)\],\s?\10\[\(\13\s?\*\s?(\d+)\)\s?\+\s?(\d+)\]\);\s?}\s?return\s?\12;\s?}\s;\s?}\s?(\$\w+)\s?=\s?[\'"]([^\'"]+)[\'"];\s?(\$\w+)\s?=\s?substr\(\1,\s?\(+(\d+\s?[-+]\s?\d+)\),\s?\(+(\d+\s?[-+]\s?\d+)\)\);\s?\20\(\6,\s?\18,\s?NULL\);\s?\20\s?=\s?\18;\s?\20\s?=\s?\(+(\d+\s?[-+]\s?\d+)\);\s?\$\w+\s?=\s?\$\w+\s?\-\s?\d+;~msi',
            'id'   => 'arrayOffsetsEval',
        ],
        [
            'full' => '~(\$\w{1,50}\s*=\s*array\((\'\d+\',?)+\);)+\$\w{1,40}=\"([^\"]+)\";if\s*\(!function_exists\(\"\w{1,50}\"\)\)\s*\{\s*function\s*[^\}]+\}\s*return\s*\$\w+;\}[^}]+}~msi',
            'fast' => '~(\$\w{1,50}=\s*array\((\'\d+\',?)+\);)+\$\w{1,40}=\"[^\"]+\";if\s*\(!function_exists\(\"\w{1,50}\"\)\)\{\s*function ~msi',
            'id'   => 'obfB64',
        ],
        [
            'full' => '~if\(\!function_exists\(\'findsysfolder\'\)\){function findsysfolder\(\$fld\).+\$REXISTHEDOG4FBI=\'([^\']+)\';\$\w+=\'[^\']+\';\s*eval\(\w+\(\'([^\']+)\',\$REXISTHEDOG4FBI\)\);~msi',
            'fast' => '~if\(!function_exists\(\'findsysfolder\'\)\){function findsysfolder\(\$fld\)\{\$fld1=dirname\(\$fld\);\$fld=\$fld1\.\'/scopbin\';clearstatcache\(\);if\(!is_dir\(\$fld\)\)return findsysfolder\(\$fld1\);else return \$fld;\}\}require_once\(findsysfolder\(__FILE__\)\.\'/911006\.php\'\);~msi',
            'id'   => 'sourceCop',
        ],
        [
            'full' => '~function\s*(\w{1,40})\s*\(\s*(\$\w{1,40})\s*,\s*(\$\w{1,40})\s*\)\s*\{\s*(\$\w{1,40})\s*=\s*str_rot13\s*\(\s*gzinflate\s*\(\s*str_rot13\s*\(\s*base64_decode\s*\(\s*[\'"][^\'"]*[\'"]\s*\)\s*\)\s*\)\s*\)\s*;\s*(if\s*\(\s*\$\w+\s*==[\'"][^\'"]*[\'"]\s*\)\s*\{\s*(\$\w{1,40})\s*=(\$\w+[\{\[]\d+[\}\]]\.?)+;return\s*(\$\w+)\(\3\);\s*\}\s*else\s*)+\s*if\s*\(\s*\$\w+\s*==[\'"][^\'"]*[\'"]\s*\)\s*\{\s*return\s*eval\(\3\);\s*\}\s*\};\s*(\$\w{1,40})\s*=\s*[\'"][^\'"]*[\'"];(\s*\9\([\'"][^\'"]*[\'"],)+\s*[\'"][^\'"]*[\'"]\s*\)+;~msi',
            'id'   => 'webshellObf',

        ],
        [
            'full' => '~(\$\w{1,40})=\'([^\'\\\\]|.*?)\';\s*((\$\w{1,40})=(\1\[\d+].?)+;\s*)+(\$\w{1,40})=\'\';\s*(\$\w{1,40})\(\6,\$\w{1,40}\.\"([^\"]+)\"\.\$\w{1,40}\.\4\);~msi',
            'fast' => '~(\$\w{1,40})=\'([^\\\\\']|.*?)\';\s*((\$\w{1,40})=(\1\[\d+].?)+;\s*)+(\$\w{1,40})=\'\';~msi',
            'id'   => 'substCreateFunc',
        ],
        [
            'full' => '~@error_reporting\(0\);\s*@ini_set\(\'error_log\',NULL\);\s*@ini_set\(\'log_errors\',0\);\s*@ini_set\(\'display_errors\',\s*0\);\s*@(\$\w+)="[create_function"\.]+;\s*(\$\w+)=\1\("([^"]+)","[eval\."]+\(\'\?>\'\.[base64_decode"\.]+\(\3\)\);"\);\s*\2\("([^"]+)"\);exit;~msi',
            'id'   => 'Obf_20200507_2',
        ],
        [
            'full' => '~\$\w+=([create_function"\'.]+);\s?\$\w+=\$\w+\([\'"]\\\\?\$\w+[\'"],((?:[\'"][eval]{0,4}[\'"]\.?)+)\.([\'"](\([\'"]\?>[\'"]\.)\w+[\'"]\.[^)\\\\]+)\\\\?\$\w+\)+;[\'"]\);\s?\$\w+\([\'"]([\w\+=\\\\\'"%/]+)[\'"]\);~msi',
            'id'   => 'createFunc',
        ],
        [
            'full' => '~(?(DEFINE)(?\'foreach\'(?:/\*\w+\*/)?\s*foreach\(\[[\d,]+\]\s*as\s*\$\w+\)\s*\{\s*\$\w+\s*\.=\s*\$\w+\[\$\w+\];\s*\}\s*(?:/\*\w+\*/)?\s*))(\$\w+)\s*=\s*"([^"]+)";\s*\$\w+\s*=\s*"";(?P>foreach)if\(isset\(\$_REQUEST\s*(?:/\*\w+\*/)?\["\$\w+"\]\)+\{\s*\$\w+\s*=\s*\$_REQUEST\s*(?:/\*\w+\*/)?\["\$\w+"\];(?:\s*\$\w+\s*=\s*"";\s*)+(?P>foreach)+\$\w+\s*=\s*\$\w+\([create_function\'\.]+\);\s*\$\w+\s*=\s*\$\w+\("",\s*\$\w+\(\$\w+\)\);\s*\$\w+\(\);\s*(?:exit\(\);)?\s*}~msi',
            'fast' => '~(?(DEFINE)(?\'foreach\'(?:/\*\w+\*/)?\s*foreach\(\[[\d,]+\]\s*as\s*\$\w+\)\s*\{\s*\$\w+\s*\.=\s*\$\w+\[\$\w+\];\s*\}\s*(?:/\*\w+\*/)?\s*))(\$\w+)\s*=\s*"([^"]+)";\s*\$\w+\s*=\s*"";(?P>foreach)if\(isset\(\$_REQUEST\s*(?:/\*\w+\*/)?\["\$\w+"\]\)+\{\s*\$\w+\s*=\s*\$_REQUEST\s*(?:/\*\w+\*/)?\["\$\w+"\];(?:\s*\$\w+\s*=\s*"";\s*)+(?P>foreach)+\$\w+\s*=\s*\$\w+\([create_function\'\.]+\);\s*\$\w+\s*=\s*\$\w+\("",\s*\$\w+\(\$\w+\)\);\s*\$\w+\(\);~msi',
            'id'   => 'forEach',
        ],
        [
            'full' => '~\$\w+\s*=\s*base64_decode\s*\([\'"][^\'"]+[\'"]\);\s*if\s*\(!function_exists\s*\("rotencode"\)\).{0,1000}eval\s*\(\$\w+\s*\(base64_decode\s*\([\'"][^"\']+[\'"]\)+;~msi',
            'id'   => 'PHPMyLicense',
        ],
        [
            'full' => '~(\$\w{1,40})\s*=\s*file\(__FILE__\);\s*if\(!function_exists\(\"([^\"]*)\"\)\)\{function\s*\2\((\$\w{1,40}),(\$\w{1,40})=\d+\)\{(\$\w{1,40})=implode\(\"[^\"]*\",\3\);(\$\w{1,40})=array\((\d+),(\d+),(\d+)\);if\(\4==0\)\s*(\$\w{1,40})=substr\(\5,\6\[\d+\],\6\[\d+\]\);elseif\(\4==1\)\s*\10=substr\(\5,\6\[\d+\]\+\6\[\d+\],\6\[\d+\]\);else\s*\10=trim\(substr\(\5,\6\[\d+\]\+\6\[\d+\]\+\6\[\d+\]\)\);return\s*\(\10\);\}\}\s*eval\(base64_decode\(\2\(\1\)\)\);\s*eval\(\w{1,40}\(\2\(\1\s*,\s*2\)\s*,\s*\2\(\1\s*,\s*1\)\)\);\s*__halt_compiler\(\);\s*[\w\+\=/]+~msi',
            'fast' => '~(\$\w{1,40})\s*=\s*file\(__FILE__\);\s*if\(!function_exists\(\"([^\"]*)\"\)\)\{function\s*\2\((\$\w{1,40}),(\$\w{1,40})=\d+\)\{(\$\w{1,40})=implode\(\"[^\"]*\",\3\);(\$\w{1,40})=array\((\d+),(\d+),(\d+)\);if\(\4==0\)\s*(\$\w{1,40})=substr\(\5,\6\[\d+\],\6\[\d+\]\);elseif\(\4==1\)\s*\10=substr\(\5,\6\[\d+\]\+\6\[\d+\],\6\[\d+\]\);else\s*\10=trim\(substr\(\5,\6\[\d+\]\+\6\[\d+\]\+\6\[\d+\]\)\);return\s*\(\10\);\}\}\s*eval\(base64_decode\(\2\(\1\)\)\);\s*eval\(\w{1,40}\(\2\(\1\s*,\s*2\)\s*,\s*\2\(\1\s*,\s*1\)\)\);\s*__halt_compiler\(\);~msi',
            'id'   => 'zeura',
        ],
        [
            'full' => '~<\?php(?:\s*/\*.*?\*/)?\s*(\$\w{1,40})\s*=\s*file\(__FILE__\);\s*function\s(\w{1,50})\((\$\w{1,50}),(\$\w{1,50})\){(\$\w{1,50})=array\(\d+,\d+,\d+,(\d+)\);if\(\4==\d+\){(\$\w{1,50})=substr\(\3,\5\[0\]\+\5\[1\],\5\[2\]\);}elseif\(\4==\d+\){\7=substr\(\3,\5\[0\],\5\[1\]\);}elseif\(\4==\d+\){\7=trim\(substr\(\3,\5\[0\]\+\5\[1\]\+\5\[2\]\)\);}return\7;}eval\(base64_decode\(\2\(\1\[0\],\d+\)\)\);eval\(\w{1,50}\(\2\(\1\[0\],\d+\),\2\(\1\[0\],\d+\),\1\)\);__halt_compiler\(\);[\w+=/]+~msi',
            'fast' => '~<\?php(?:\s*/\*.*?\*/)?\s*(\$\w{1,40})\s*=\s*file\(__FILE__\);\s*function\s(\w{1,50})\((\$\w{1,50}),(\$\w{1,50})\){(\$\w{1,50})=array\(\d+,\d+,\d+,(\d+)\);if\(\4==\d+\){(\$\w{1,50})=substr\(\3,\5\[0\]\+\5\[1\],\5\[2\]\);}elseif\(\4==\d+\){\7=substr\(\3,\5\[0\],\5\[1\]\);}elseif\(\4==\d+\){\7=trim\(substr\(\3,\5\[0\]\+\5\[1\]\+\5\[2\]\)\);}return\7;}eval\(base64_decode\(\2\(\1\[0\],\d+\)\)\);eval\(\w{1,50}\(\2\(\1\[0\],\d+\),\2\(\1\[0\],\d+\),\1\)\);__halt_compiler\(\);~msi',
            'id'   => 'zeuraFourArgs',
        ],
        [
            'full' => '~(<\?php\s*/\* This file is protected by copyright law and provided under.*?\*/(?:\s*/\*.*?\*/\s*)+\$_[0O]+="(\w+)";.*?\$_[0O]+=__FILE__;.*?\$\w+=str_replace\("\\\\n","",\$\w+\);\$\w+=str_replace\("\\\\r","",\$\w+\);.*?function\s\w+\(\$\w+,\$\w+\){\$\w+=md5\(\$\w+\)\.md5\(\$\w+\.\$\w+\);.*?\$\w+=strlen\(\$\w+\);for\(\$\w+=0;\$\w+<strlen\(\$\w+\);\$\w+\+\+\){\$\w+\.=\s?chr\(ord\(\$\w+\[\$\w+\]\)\^ord\(\$\w+\[\$\w+%\$\w+\]\)\);}return\s\$\w+;}eval\(\w+\(\w+\("([^"]+)"\),\$\w+\)\);eval\(\w+\(\$\w+\)\);exit\(\);\?)>[^"\']+~msi',
            'id'   => 'evalFileContentBySize',
        ],
        [
            'full' => '~<\?php\s*(eval(?:\(\w+)+\((substr\(file_get_contents\(__FILE__\),\s?(\d+)\))\)+;)\s*__halt_compiler\(\);\s*[\w+/]+~msi',
            'id' => 'evalFileContentOffset',
        ],
        [
            'full' => '~(\$\w+)\s*=\s*base64_decode\(((?:(?|[\'"][\w=]+[\'"]|chr\(\d+\))\.?)+)\);(\$\w+)\s*=\s*base64_decode\(((?:(?|[\'"][\w=]+[\'"]|chr\(\d+\))\.?)+)\);(\$\w+)\s*=\s*base64_decode\(((?:(?|[\'"][\w=]+[\'"]|chr\(\d+\))\.)[^;]+)\);(\1\((\(-(\d+)-\(-\9\)\))\);@set_time_limit\((\(-(\d+)-\(-\11\)\))\);)eval\(base64_decode\(((?:(?|[\'"]\d+[\'"]|chr\(\d+\))\.?)+)\)\.gzinflate\(str_rot13\(\3\(\5\){4};~msi',
            'fast' => '~@set_time_limit\((\(-(\d+)-\(-\2\)\))\);eval\(base64_decode\(((?:(?|[\'"]\d+[\'"]|chr\(\d+\))\.?)+)\)\.gzinflate\(str_rot13\(\$\w+\(\$\w+\){4};~msi',
            'id'   => 'evalConcatedVars',
        ],
        [
            'full' => '~(?:\$\{"[\\\\x47c2153fGLOBALS]+"\}\["[\w\\\\]+"\]="[\w\\\\]+";)*(?:\$\w+="[\w\\\\]+";)*(\$\{"[\\\\x47c2153fGLOBALS]+"\}\["[\w\\\\]+"\]="[\w\\\\]+";(\$\w+="[\w\\\\]+";)?){5,}.+\$\{"[\\\\x47c2153fGLOBALS]+"\}\["[\w\\\\]+"\].+?(?:};?(?!\[))+(?:exit;}+if\(@?file_exists\("[^"]+"\)+{include\("[^"]+"\);\}|==\(string\)\$\{\$\w+\}\)\s*\{\$\w+="[^"]+";\$\w+="[^"]+";\$\{\$\w+\}\.=\$\{\$\w+\};break;\}+eval\("[^"]+"\.gzinflate\(base64_decode\(\$\{\$\{"[^"]+"\}\["[^"]+"\]\}\)+;|\["[^"]+"\]\}\);|\)\)\{[^;]+;ob_clean\(\);[^\.]+\.urlencode\(\$\{\$\w+\}\)+;\}+|else\{wp_redirect\(get_bloginfo\("[^"]+"\)\."[^"]+"\);\}exit;\}+)?~msi',
            'id'   => 'Obf_20200618_1',
        ],
        [
            'full' => '~(\$\w+\s?=\s?(\w+)\(\'\d+\'\);\s*)+\$\w+\s?=\s?new\s?\$\w+\(\2\(\'(\d+)\'\)+;\s?error_reporting\(0\);\s?eval\(\$\w+\(\$\w+->\$\w+\("([^"]+)"\)+;.+?function \2.+?return\s\$\w+;\s}~msi',
            'id'   => 'aanKFM',
        ],
        [
            'full' => '~(?:\$\w{1,500}\s*=\s*[\'"][^\'"]+[\'"];)+(?:\$\w{1,500}\s*=\s*\$\w{1,500}\s?\.\s?[\'"]{2}\s?\.\s?\$\w{1,500};)+(?:\$\w{1,500}\s?=\s?(?:str_rot13|base64_decode|gzinflate)\(\$\w{1,500}\);)+\s*eval\(\$\w{1,500}\);~msi',
            'id' => 'longVarConcatStrRot13B64Gz',
        ],
        [
            'full' => '~error_reporting\(\d\);@?set_time_limit\(\d\);(\$\w{1,50})\s?=\s?[\'"]([^\'"]+)[\'"];(\$\w{1,50})\s?=\s?[\'"]([^\'"]+)[\'"];(\$\w{1,50})\s?=\s?[\'"]([^\'"]{0,100})[\'"];(\$\w{1,50}\s?=\s?[\'"][^\'"]{0,500}[\'"];)eval\(gzinflate\(base64_decode\(\3\)\)\);rebirth\(\);eval\(gzinflate\(base64_decode\(hate\(\1,\5\){4};~msi',
            'fast' => '~error_reporting\(\d\);@?set_time_limit\(\d\);(\$\w{1,50})\s?=\s?[\'"]([^\'"]+)[\'"];(\$\w{1,50})\s?=\s?[\'"]([^\'"]+)[\'"];(\$\w{1,50})\s?=\s?[\'"]([^\'"]{0,100})[\'"];(\$\w{1,50}\s?=\s?[\'"][^\'"]{0,500}[\'"];)eval\(gzinflate\(base64_decode\(\$\w{1,50}\)\)\);rebirth\(\);eval\(gzinflate\(base64_decode\(hate\(\$\w{1,50},\$\w{1,50}\){4};~msi',
            'id' => 'evalLoveHateFuncs',
        ],
        [
            'full' => '~function\s?(\w+)\(\){\s?(\$\w+)\s?=\s?[\'"]([^\'"]+)[\'"];\s?\2\s?=\s?str_rot13\(\2\);\s?(\w+)\(\2\);\s?}\s?function\s?\4\((\$\w+)\){\s?(?:global\s?\$\w+;\s?)?\5\s?=\s?pack\([\'"]H\*[\'"],\5\);\s?(\$\w+)\s?=\s?[\'"]{2};\s?eval\(((?:\6|\5)\.?)+\);\s?}\s?\1\(\);~msi',
            'id'   => 'evalPackStrrot',
        ],
        [
            'full' => '~error_reporting\(\d\);(?:\$\w+=[\'"]\w+[\'"];)?ini_set\([\'"]\w+[\'"],\d\);(?:(\$\w+=\[(?:"[^"]+"=>"[^"]+",?\s*)+\];)|eval\(base64_decode\([\'"]([\w\+=]+)[\'"]\)\);)\$\w+=str_split\([\'"]([}\w|,[=\'\.;\]&]+)[\'"]\);\$\w+=[\'"]{2};foreach\(\$\w+\s{0,50}as\s{0,50}\$\w+\){foreach\((\$\w+)\s{0,50}as\s{0,50}\$\w+\s{0,50}=>\s{0,50}\$\w+\){(?:\$\w+=[\'"]\w+[\'"];\$\w+=[\'"]\w+[\'"];)?if\(\$\w+\s{0,50}==\s{0,50}\(string\)\$\w+\){(?:\$\w+=[\'"]\w+[\'"];\$\w+=[\'"]\w+[\'"];)?\$\w+\s{0,50}\.=\s{0,50}\$\w+;break;}}}(?:eval\([\'"]\?>[\'"]\.gzinflate\(base64_decode\(\$\w+\)\)\);)?~msi',
            'id'   => 'evalArrayVar',
        ],
        [
            'full' => '~(?>(?>\$\w+)\s*\.?=\s*"[^;]+;?";\s*)+\beval\((?>\$\w+\s*\.?\s*)+\)~msi',
            'id'   => 'evalVarConcat',
        ],
        [
            'full' => '~(?:\${"[^"]+"}\["[^"]+"\]="[^"]+";)+(?:\${\${"[^"]+"}\["[^"]+"\]}="[^"]+";)+(eval\(htmlspecialchars_decode\(urldecode\(base64_decode\(\${\${"[^"]+"}\["[^"]+"\]}\)\)\)\);)~msi',
            'id' => 'evalVarSpecific',
        ],
        [
            'full' => '~(?:(?:\$\w+=(?:chr\(\d+\)[;.])+)+\$\w+="[^"]+";(\$\w+)=(?:\$\w+[.;])+\s*)?(\$\w+)=\'([^\']+)\';((?:\s*\2=str_replace\(\'[^\']+\',\s*\'\w\',\s*\2\);\s*)+)(?(1)\s*\1\s*=\s*str_replace\(\'[^+]\',\s*\'[^\']+\',\s*\1\);\s*(\$\w+)\s*=\s*[^;]+;";\s*@?\1\(\s*str_replace\((?:\s*array\(\'[^\']+\',\s*\'[^\']+\'\),){2}\s*\5\)\s*\);|\s*\2=base64_decode\(\2\);\s*eval\(\2\);)~msi',
            'id'   => 'evalVarReplace',
        ],
        [
            'full' => '~(?:\$\w{1,50}\s*=\s*base64_decode\((?:[\'"][^\'"]+[\'"]\.?)+\);)+\s*(?:\$\w{1,50}\s*=\s*[\'"][^\'"]+[\'"];)+\s*(eval\(htmlspecialchars_decode\((?:\$\w{1,50}\(?)+\)+;)~msi',
            'id' => 'evalVarsB64Concated',
        ],
        [
            'full' => '~((\$[^\s=.;]+)\s*=\s*\(?[\'"]([^\'"]+)[\'"]\)?\s*;?\s*)+\s*.{0,10}?(?:error_reporting\(\d\);|@set_time_limit\(\d\);|@|ini_set\([\'"]\w{1,99}[\'"],\s?\d\);\s?){0,5}(?:eval\s*\(|assert\s*\(|echo)\s*([\'"?>.\s]+)?\(?(base64_decode\s*\(|gzinflate\s*\(|strrev\s*\(|str_rot13\s*\(|gzuncompress\s*\(|urldecode\s*\(|rawurldecode\s*\(|htmlspecialchars_decode\s*\(|convert_uudecode\s*\()+(\({0,1}[\s"\']?(\$[^\s=\'")]+)?(?:str_replace\((?:.+?,){3}\2?)?[\s"\']?\){0,1})(?:[\'"]?\)+;?)+~msi',
            'id'   => 'evalVar',
        ],
        [
            'full' => '~((?:(?:\$\w+=[\'"]\\\\[^\'"]+)[\'"];)+)@(eval\((?:"\?>"\.)?(?:\$\w+\()+[\'"]([^\'"]+)[\'"]\)+;)~msi',
            'id'   => 'evalVarSlashed',
        ],
        [
            'full' => '~function\s*(\w{1,40})\((\$\w{1,40})\)\{(\$\w{1,40})=\'base64_decode\';(\$\w{1,40})=\'gzinflate\';return\s*\4\(\3\(\2\)\);\}\$\w{1,40}=\'[^\']*\';\$\w{1,40}=\'[^\']*\';eval\(\1\(\'([^\']*)\'\)\);~msi',
            'id'   => 'evalFunc',
        ],
        [
            'full' => '~function\s*(\w{1,40})\s*\((\$\w{1,40})\)\s*\{\s*(\$\w{1,40})\s*=\s*"\\\\x62\\\\x61\\\\x73\\\\x65\\\\x36\\\\x34\\\\x5f\\\\x64\\\\x65\\\\x63\\\\x6f\\\\x64\\\\x65";\s*(\$\w{1,40})\s*=\s*"\\\\x67\\\\x7a\\\\x69\\\\x6e\\\\x66\\\\x6c\\\\x61\\\\x74\\\\x65";\s*return\s*\4\s*\(\3\s*\(\2\)\);\s*\}\s*\$\w{1,40}\s*=\s*\"[^\"]*\";\s*\$\w{1,40}\s*=\s*\"[^\"]*\";\s*eval\s*\(\1\s*\(\"([^\"]*)\"\)\);~msi',
            'id'   => 'evalFunc',
        ],
        [
            'full' => '~(\$\w+)\s?=\s?[\'"]@?(([\w."]+\()+[\'"]([\w\/+]+)[\'"])\)+;[\'"]\s?;\s?(\$\w+)\s?=\s?([\w@."]+)\s?;\s?@?(\$\w+)\s?=\s\5\([\'"]+,\s?"\1;"\s?\);\7\([\'"]{2}\);~msi',
            'id'   => 'evalConcatFunc',
        ],
        [
            'full' => '~function\sT_\((\$\w+)\)\s{\s(\$\w+)\s=\s256;\s(\$w2)\s=\s8;\s(\$\w+)\s=\sarray\(\);\s(\$\w+)\s=\s0;\s(\$\w+)\s=\s0;\sfor\s\((\$\w+)\s=\s0;\s\7\s<\sstrlen\(\1\);\s\7\+\+\)\s{\s\5\s=\s\(\5\s<<\s8\)\s\+\sord\(\1\[\7\]\);\s\6\s\+=\s8;\sif\s\(\6\s>=\s\3\)\s{\s\6\s-=\s\3;\s(\$\w+)\[\]\s=\s\5\s>>\s\6;\s\5\s&=\s\(1\s<<\s\6\)\s-\s1;\s\2\+\+;\sif\s\(\2\s>>\s\3\)\s{\s\3\+\+;\s}\s}\s}\s(\$\w+)\s=\srange\("\\\\x0",\s"\\\\377"\);\s(\$\w+)\s=\s\'\';\sforeach\s\(\4\sas\s\7\s=>\s(\$\w+)\)\s{\sif\s\(!isset\(\9\[\11\]\)\)\s{\s(\$\w+)\s=\s(\$\w+)\s\.\s\13\[0\];\s}\selse\s{\s\12\s=\s\9\[\11\];\s}\s\10\s\.=\s\12;\sif\s\(\7\)\s{\s\9\[\]\s=\s\13\s\.\s\12\[0\];\s}\s\13\s=\s\12;\s}\sreturn\s\10;\s}\s(\$_\w+)="[\w\\\\]+";eval\(T_\(\14\("(.*)"\)\)\);~mis',
            'fast' => '~function\sT_\((\$\w+)\)\s{\s(\$\w+)\s=\s256;\s(\$w2)\s=\s8;\s(\$\w+)\s=\sarray\(\);\s(\$\w+)\s=\s0;\s(\$\w+)\s=\s0;\sfor\s\((\$\w+)\s=\s0;\s\7\s<\sstrlen\(\1\);\s\7\+\+\)\s{\s\5\s=\s\(\5\s<<\s8\)\s\+\sord\(\1\[\7\]\);\s\6\s\+=\s8;\sif\s\(\6\s>=\s\3\)\s{\s\6\s-=\s\3;\s(\$\w+)\[\]\s=\s\5\s>>\s\6;\s\5\s&=\s\(1\s<<\s\6\)\s-\s1;\s\2\+\+;\sif\s\(\2\s>>\s\3\)\s{\s\3\+\+;\s}\s}\s}\s(\$\w+)\s=\srange\("\\\\x0",\s"\\\\377"\);\s(\$\w+)\s=\s\'\';\sforeach\s\(\4\sas\s\7\s=>\s(\$\w+)\)\s{\sif\s\(!isset\(\9\[\11\]\)\)\s{\s(\$\w+)\s=\s(\$\w+)\s\.\s\13\[0\];\s}\selse\s{\s\12\s=\s\9\[\11\];\s}\s\10\s\.=\s\12;\sif\s\(\7\)\s{\s\9\[\]\s=\s\13\s\.\s\12\[0\];\s}\s\13\s=\s\12;\s}\sreturn\s\10;\s}\s(\$_\w+)="[\w\\\\]+";eval\(T_\(\14\("(.*)"\)\)\);~mis',
            'id'   => 'evalFuncFunc',
        ],
        [
            'full' => '~(\$\w+)\s?=\s?[\'"]([^\'"]+)[\'"];\s?(\$\w+)\s?=\s?[\'"]([^\'"]+)[\'"];\s?(\$\w+)\s?=\s?[\'"]([^\'"]+)[\'"];\s?(\$\w+)\s?=\s?bin2hex\(\5\);\s?(\$\w+)\s?=\s?hex2bin\(\7\);\s*(?:eval\()+[\'"]\?>[\'"]\.\1\(\3\(\8\)+;~msi',
            'id'   => 'evalBinHexVar',
        ],
        [
            'full' => '~((?:(?:\${"(?:\w{0,10}?\\\\x\w{1,10}){1,100}"}\["\w{0,10}?(?:\\\\x\w{1,10}){1,100}"\]|\$\w+)\s*=\s*[\'"][^\'"]+["\'];)+.*?define.*?)(?:\${)?\$\w{1,50}}?\s*=\s*array\(array\(([\'"][^\)]+[\'"])\)\);(.*?create_function\(.*?array_walk\((?:\${\${"(?:\\\\x\w{1,10}){1,10}"}\["(?:\\\\x\w{1,10}){1,10}"\]}|(?:\${)?\$\w+}?),\s*(?:\${\${"\w?(?:\\\\x\w{1,10}){1,10}"}\["(?:\w?\\\\x\w{1,10}){1,20}"\]}|\$\w+)\);)~msi',
            'fast' => '~create_function\([\'"][^"\']+[\'"],\s*(?:[\'"][^"\']+[\'"]\.?)+.*?\);\s*\$[^=]+=\s*array_walk\((?:\${\${"(?:\\\\x\w{1,10}){1,10}"}\["(?:\\\\x\w{1,10}){1,10}"\]}|(?:\${)?\$\w+}?),\s*(?:\${\${"\w?(?:\\\\x\w{1,10}){1,10}"}\["(?:\w?\\\\x\w{1,10}){1,20}"\]}|\$\w+)\);~msi',
            'id' => 'evalArrayWalkFunc'
        ],
        [
            'full' => '~(\$\w+)\s?=\s?[\'"]([^\'"]+)[\'"];\s*eval\([\'"]\?>[\'"]\s?\.\s?base64_decode\(strtr\(substr\(\1\s?,(\d+)\*(\d+)\)\s?,\s?substr\(\1\s?,(\d+)\s?,\s?(\d+)\)\s?,\s*substr\(\s?\1\s?,\s?(\d+)\s?,\s?(\d+)(?:\s?\))+;~msi',
            'id' => 'evalSubstrVal'
        ],
        [
            'full' => '~(\$\w{1,50})=[\'"]([^\'"]+)[\'"];\s?\1\s?=\s?base64_decode\(\1\);\s?eval\(gzinflate\(str_rot13\(\1\)+;~msi',
            'id' => 'evalGzStrRotB64',
        ],
        [
            'full' => '~(\$\w{1,50})\s*=\s*([\'"][^\'"]+[\'"]);\s*eval\(urldecode\(hex2bin\([\'"]([^\'"]+)[\'"]\)\)\);\s*eval\(hex2bin\([\'"]([^\'"]+)[\'"]\)\s*\.\s*((?:\$\w{1,50}\()+\1)\)+;~msi',
            'id' => 'twoEvalVarsReplace',
        ],
        [
            'full' => '~global\s?(\$\w{1,50});\s?if\(!\1\)\s?{\s?function\sob_start_flush\((\$\w{1,50})\)\s?{\s?(\$\w{1,50})\s?=\s?array\(((?:\d{1,5}[,\s]*)+)\);\s?(\$\w{1,50})\s?=\s?array\(((?:\d{1,5}[,\s]*)+)\);\s?(\$\w{1,50})\s?=\s?[\'"]{2};\s?foreach\(\5\sas\s(\$\w{1,50})\)\s?{\s?\7\s?\.=\s?chr\(\3\[\8\]\+(\d{1,5})\);\s?}.*?\7\.substr\(.*?[\'"]ob_start_flush[\'"]\);\s?}\s?\?>~msi',
            'id' => 'obStartFlushVar',
        ],
        [
            'full' => '~((?:\$GLOBALS\[[\'"][^\'"]+[\'"]\]\s?=\s?base64_decode\([\'"][^\'"]*[\'"]\);){10,})(?:.*?\$GLOBALS\[[\'"][^\'"]+[\'"]\])+[);]*~msi',
            'id' => 'b64GlobalVarsReplace',
        ],
        [
            'full' => '~\${"\\\\x[^"]+"}\["(\\\\x[^"]+)"\]\s?=\s?"(\\\\x[^"]+)";\s?\${\${"\\\\x[^"]+"}\["(\\\\x[^"]+)"\]}\s?=\s?"(\w?\\\\x[^"]+)";\s?eval\(htmlspecialchars_decode\(gzinflate\(base64_decode\("(\\\\x[^"]+)"\)+;~msi',
            'id' => 'evalGlobalVarFuncWrapped',
        ],
        [
            'full' => '~(\$\w{1,50})\s?=\s?[chr\'.\s]+;\s?((?:\$\w{1,50}\s?=\s?(?:\1\s?\(\d+[-+*//\s]+\d+\)[\s.]*)+;\s*)+)(\$\w{1,50})\s?=\s?(\$\w{1,50}\(\$\w{1,50}\([\'"][^\'"]+[\'"]\)+;)\s?(\$\w{1,50})\s?=\s?\$\w{1,50}\([\'"]{2}\s?,\s?\3\);\s?\5\(\);~msi',
            'id' => 'createFuncChrVarsMany',
        ],
        [
            'full' => '~(?:\$\w{1,50}\s?=\s?[\'"][^\'"]+[\'"];)?\s?(\$\w{1,50})\s?=\s?[chr\'.\s]+;\s?((?:\$\w{1,50}\s?=\s?(?:\1\s?\(\d+[-+*//\s]+\d+\)[\s.]*)+;\s?)+)\s?(eval\s{0,10}\((?:\s{0,10}\$?\w{1,50}\s{0,10}\()+[\'"][^\'"]+[\'"]\)+;)~msi',
            'id' => 'evalChrVarsMany',
        ],
        [
            'full' => '~(preg_replace\(["\'](?:/\.\*?/[^"\']+|[\\\\x0-9a-f]+)["\']\s*,\s*)[^\),]+(?:[\)\\\\0-5]+;[\'"])?(,\s*["\'][^"\']*["\'])\)+;~msi',
            'id'   => 'eval',
        ],
        [
            'full' => '~(\$\w{1,40})\s*=\s*[\'"]([^\'"]*)[\'"]\s*;\s*(\$\w{1,40}\s*=\s*(strtolower|strtoupper)\s*\((\s*\1[\[\{]\s*\d+\s*[\]\}]\s*\.?\s*)+\);\s*)+\s*if\s*\(\s*isset\s*\(\s*\$\{\s*\$\w{1,40}\s*\}\s*\[\s*[\'"][^\'"]*[\'"]\s*\]\s*\)\s*\)\s*\{\s*eval\s*\(\s*\$\w{1,40}\s*\(\s*\$\s*\{\s*\$\w{1,40}\s*\}\s*\[\s*[\'"][^\'"]*[\'"]\s*\]\s*\)\s*\)\s*;\s*\}\s*~msi',
            'id'   => 'evalInject',

        ],
        [
            'full' => '~((\$\w+)\s*=\s*(([base64_decode\'\.\s]+)|([eval\'\.\s]+)|([create_function\'\.\s]+)|([stripslashes\'\.\s]+)|([gzinflate\'\.\s]+)|([strrev\'\.\s]+)|([str_rot13\'\.\s]+)|([gzuncompress\'\.\s]+)|([urldecode\'\.\s]+)([rawurldecode\'\.\s]+));\s*)+\$\w+\s*=\s*\$\w+\(\'\',(\s*\$\w+\s*\(\s*)+\'[^\']+\'\)+;\s*\$\w+\(\);~msi',
            'fast' => '~\$\w+\s*=\s*\$\w+\(\'\',(\s*\$\w+\s*\(\s*)+\'[^\']+\'\)+;\s*\$\w+\(\);~msi',
            'id'   => 'createFuncConcat',

        ],
        [
            'full' => '~(\$\w+)\s*=\s*base64_decode\("([^"]+)"\);(\1\s*=\s*ereg_replace\("([^"]+)","([^"]+)",\1\);)+\1=base64_decode\(\1\);eval\(\1\);~msi',
            'id'   => 'evalEregReplace',

        ],
        [
            'full' => '~((\$\w+)\s*=\s*(([base64_decode"\'\.\s]+)|([eval"\'\.\s]+)|([create_function"\'\.\s]+)|([stripslashes"\'\.\s]+)|([gzinflate"\'\.\s]+)|([strrev"\'\.\s]+)|([str_rot13"\'\.\s]+)|([gzuncompress"\'\.\s]+)|([urldecode"\'\.\s]+)([rawurldecode"\'\.\s]+));\s*)+\s*(error_reporting[^;]+;\s?ini_set[^;]+;\s?)?\s*@?eval\(\$[^)]+\)+;~msi',
            'id'   => 'evalWrapVar',

        ],
        [
            'full' => '~(?:\$\{"[^"]+"\}\["[^"]+"\]="[^"]+";)+(?:\$\{\$\{"[^"]+"\}\["[^"]+"\]\}="[^"]+";)+@?eval\s*\(\s*([\'"?>.]+)?@?\s*(base64_decode\s*\(|gzinflate\s*\(|strrev\s*\(|str_rot13\s*\(|gzuncompress\s*\(|urldecode\s*\(|rawurldecode\s*\(|eval\s*\()+\(?\$\{\$\{"[^\)]+\)+;~msi',
            'id'   => 'escapes',
        ],
        [
            'full' => '~(\$\w+)\s*=(?:\s*(?:(?:["\'][a-z0-9][\'"])|(?:chr\s*\(\d+\))|(?:[\'"]\\\\x[0-9a-f]+[\'"]))\s*?\.?)+;\s*(\$\w+)\s*=(?:\s*(?:(?:["\'][a-z0-9][\'"])|(?:chr\s*\(\d+\))|(?:[\'"]\\\\x[0-9a-f]+[\'"]))\s*?\.?)+;\s*@?\1\s*\(@?\2\s*\([\'"]([^\'"]+)[\'"]\)+;~msi',
            'id'   => 'assert',
        ],
        [
            'full' => '~eval\s*\(str_rot13\s*\([\'"]+\s*(?:.+(?=\\\\\')\\\\\'[^\'"]+)+[\'"]+\)+;~msi',
            'id'   => 'evalCodeFunc',
        ],
        [
            'full' => '~\$\{"GLOBALS"\}\[[\'"](\w+)[\'"]\]=["\'](\w+)[\'"];\$\{"GLOBALS"\}\[[\'"](\w+)[\'"]\]=["\']\2[\'"];\${\$\{"GLOBALS"\}\[[\'"]\3[\'"]\]}=[\'"]([^\'"]+)[\'"];eval.{10,50}?\$\{\$\{"GLOBALS"\}\[[\'"]\1[\'"]\]\}\)+;~msi',
            'id'   => 'evalVarVar',
        ],
       [
            'full' => '~function\s*(\w+)\(\$\w+,\s*\$\w+\)\s*\{(?:[^}]+\}\s*){4}\s*\}\s*function\s*(\w+)\(\$\w+,\s*\$\w+\)\s*\{(?:[^}]+\}\s*){3}function\s*(\w+)\(\$\w+,\s*\$\w+\)\s*\{(?:[^}]+\}\s*){5}return\s*\1\(\$\w+,\s*false\);\s*\}\s*function\s*(\w+)\(\$\w+,\s*\$\w+\)\s*\{(?:[^}]+\}\s*){5}return\s*\1\(\$\w+,\s*true\);\s*\}\s*(\$\w+)\s*=\s*"([^"]+)";\s*eval\(\4\(base64_decode\(\5\),\s*"([^"]+)"\)\);~msi',
            'id'   => 'xxteaDecrypt',
        ],
        [
            'full' => '~(\$\w+)=[\'"][^"\']+[\'"];(\$\w+)=strrev\(\'edoced_46esab\'\);eval\(\2\([\'"][^\'"]+[\'"]\)+;~msi',
            'id'   => 'edoced_46esab',
        ],
        [
            'full' => '~(\$\w+)\s?=\s?strrev\([\'"][base64_dco\'"\.]+[\'"]\);\s*(\$\w+)\s?=\s?strrev\([\'"][gzinflate\'"\.]+[\'"]\);\s*@?eval\(\2\(\1\([\'"]([\w\/\+=]+)[\'"]\)\)\);~msi',
            'id'   => 'edoced_46esab_etalfnizg',
        ],
        [
            'full' => '~(\$\w+)\s*=\s*"((?:[^"]|(?<=\\\\)")*)";(\$\w+)\s*=\s*(\1\[\d+\]\.?)+;(\$\w+)\s*=\s*[^;]+;(\$\w+)\s*=\s*"[^"]+";\$\w+\s*=\s*\5\."[^"]+"\.\6;\3\((\1\[\d+\]\.?)+,\s*\$\w+\s*,"\d+"\);~smi',
            'fast' => '~(\$\w+)\s*=\s*"((?:[^"]|(?<=\\\\)"){0,1000})";(\$\w+)\s*=\s*(\1\[\d+\]\.?)+;(\$\w+)\s*=\s*[^;]+;(\$\w+)\s*=\s*"[^"]+";\$\w+\s*=\s*\5\."[^"]+"\.\6;\3\((\1\[\d+\]\.?)+,\s*\$\w+\s*,"\d+"\);~smi',
            'id'   => 'eval2',
        ],
        [
            'full' => '~(?:\${"\\\\x[\\\\\w]+"}\["\\\\x[\\\\\w]+"\]\s?=\s?"[\w\\\\]+";){1,10}\${\${"\\\\x[\\\\\w]+"}\["[\\\\\w]+"\]}\s?=\s?"\w{1,100}";\${\${\${"\\\\x[\\\\\w]+"}\["[\\\\\w]+"\]}\s?}="(\\\\x[^"]+)";eval\(((?|str_rot13\(|gzinflate\(|base64_decode\(){1,10})\(\${\${"\\\\x[\\\\\w]+"}\["[\\\\\w]+"\]}\){1,5};~msi',
            'id'   => 'evalEscapedCharsContent',
        ],
        [
            'full' => '~eval\(strrev\(\s?\'([^\']+)\'\s?\)\);~msi',
            'id' => 'evalStrrevCode',
        ],
        [
            'full' => '~eval\(convert_uudecode\(\s?\'((?:.*?\\\\\')*[^\']+)\'\)\);~msi',
            'id' => 'evalConvertUudecodeWithSlashedQuote',
        ],
        [
            'full' => '~@?(eval|echo|(\$\w+)\s*=\s*create_function)(?:\/\*+\/)?\s*\((\'\',)?\s*([\'"][?>\s]+[\'".\s]+)?\s*\(?\s*@?\s*(?:base64_decode\s*\(|pack\s*\(["\']H\*[\'"],|convert_uudecode\s*\(|htmlspecialchars_decode\s*\(|gzdecode\s*\(|stripslashes\s*\(|gzinflate\s*\(|strrev\s*\(|str_rot13\s*\(|gzuncompress\s*\(|urldecode\s*\(|rawurldecode\s*\(|unserialize\s*\(|eval\s*\(|hex2bin\()+.*?[^\'");]+((\s*\.?[\'"]([^\'";]+[\'"]*\s*)+|,\s*true)?\s*[\'"\)]+)+\s*;?(\s*\2\(\);)?~msi',
            'id'   => 'eval',
        ],
        [
            'full' => '~eval\s*/\*[\w\s\.:,]+\*/\s*\([^\)]+\)+;~msi',
            'fast' => '~eval\s*/\*[\w\s\.:,]+\*/\s*\(~msi',
            'id'   => 'eval',
        ],
        [
            'full' => '~((\$\w+)="";\$\w+\s*\.=\s*"[^;]+;\s*)+(?:(?:\$\w+)?="";)?eval\((\s*\$\w+\s*\.)+\s*"[^"]+(?:"\);)+~msi',
            'id'   => 'evalConcatVars',
        ],
        [
            'full' => '~(\$ssl\w{1,20})\s{0,10}=\s{0,10}["\'][\w*/._]{1,500}["\'];\s{1,10}\$\w{1,20}\s{0,10}=\s{0,10}\1\[\d{1,4}\]\s{1,10}\.\s{1,10}\1\[\d{1,4}\][^;]{1,300};\s{1,10}\$ssl\w{1,20}\s{0,10}=\s{0,10}\1\[\d{1,4}\][^;]{1,400};\s{1,10}\$ssl\w{1,20}\s{0,10}=\s{0,10}\1\[\d{1,4}\][^;]{1,400};\s{1,10}(\$\w{1,20})\s{0,10}=\s{0,10}["\']([\w*/._\\\\]{1,500})["\'];\s{1,10}(\$\w{1,20})\s{0,10}=\s{0,10}["\']([\w*/._\\\\]{1,500})["\'];\s{1,10}@?(eval\([^;]{1,100};)~msi',
            'id'   => 'varsEvalFuncs',
        ],
        [
            'full' => '~((?:\$\w+\s*=\s*("[\w=+/\\\\ ".\n]+");\s*)+)(\$\w+\s*=\s*((?:\$\w+\()+\$\w+\)+);\s*)?((?:eval\((?(3)\$\w+|(?:\$\w+\(+)+\$\w+)\)+;\s*)+)~msi',
            'id'   => 'evalVarsFuncs',
        ],
        [
            'full' => '~((?:\$\w+\s?\.?=\s?(?:[base_decode\."\'\d /\*\+\-]+|str_rot13)(?:\(?[\'"][^\'"]+[\'"]\)?)?;\s*)+)\s*(\s*@?eval\((?:[\'"\)]\?>[\'"\)]\s*\.\s*)*(?:(?:\w+\()*\$\w+\(?)+(?:.*?)?\)+;)+~msi',
            'id'   => 'evalFuncVars',
        ],
        [
            'full' => '~eval\("\\\\145\\\\166\\\\141\\\\154\\\\050\\\\142\\\\141\\\\163[^\)]+\)+;~msi',
            'fast' => '~eval\("\\\\145\\\\166\\\\141\\\\154\\\\050\\\\142\\\\141\\\\163~msi',
            'id'   => 'evalHex',
        ],
        [
            'full' => '~eval\s*\("\\\\x?\d+[^\)]+\)+;(?:[\'"]\)+;)?~msi',
            'fast' => '~eval\s*\("\\\\x?\d+~msi',
            'id'   => 'evalHex',
        ],
        [
            'full' => '~(\$\w+)\s=\s(["\']?[\w\/\+]+["\']?);\s(\$\w+)\s=\s((?:str_rot13\(|rawurldecode\(|convert_uudecode\(|gzinflate\(|str_rot13\(|base64_decode\(|rawurldecode\(|)+\1\)\)+);\secho\s(eval\(\3\);)~msi',
            'id'   => 'echoEval',
        ],
        [
            'full' => '~if\(!function_exists\([\'"](\w+)[\'"]\)\){function\s?\1\((\$\w+)\){(\$\w+)=array\((?:\'(\d+)\',)?\'([^\']+)\',\'([^\']+)\',\2\);for\((\$\w+)=0;\7<[34];\7\+\+\){for\((\$\w+)=0;\8<strlen\(\3\[\7\]\);\8\+\+\)\s?\3\[\7\]\[\8\]\s?=\s?chr\(ord\(\3\[\7\]\[\8\]\)-(?:\(\7\?\3\[\8\s?xor\s?\8\]:1\)|1)\);if\(\7==[21]\)\s?\3\[[32]\]=\3\[[01]\]\(\3\[[21]\]\(\3\[[32]\]\)\);}\s?return\s?\3\[[32]\];}(\$\w+)=["\']([\w\+\/=]+)["\'];(\$\w+)=[\'"]\1[\'"];(\$\w+)=\11\([\'"]([^\'"]+)[\'"]\);\$\w+=@?\12\(\'\',\11\(\9\)\);\$\w+\(\);}~msi',
            'id'   => 'evalCreateFunc',
        ],
        [
            'full' => '~(\$\w{1,1000})=[\'"]([\'"\w/\+=]+)[\'"];(\$\w{1,3000}=(?:base64_decode|gzinflate|convert_uudecode|str_rot13)\(\$\w{1,3000}\);){1,100}eval\((\$\w{1,3000})\);~msi',
            'id'   => 'evalAssignedVars',
        ],
        [
            'full' => '~(?:\$_{1,50}\s*=\s*[^;]{2,200}\s*;\s*)+(?:\$_{1,50}\s*=\s*\$_{1,50}\([^\)]+\);\s*|(?:if\(!function_exists\(\'[^\']+\'\)\){function\s\w{1,50}\(\$\w{1,50},\$\w{1,50}\){return\s?eval\("return function\(\$\w{1,50}\){{\$\w{1,50}}};"\);}}\s*)?)+(?:\$_{1,50}\s*=\s*\'[^\']+\';\s*)?(?:\s*(\$_{1,50}\s*=\s*)?\$_+\([^)]*\)+;\s*)+(?:echo\s*\$_{1,50};)?~msi',
            'id'   => 'seolyzer',
        ],
        [
            'full' => '~(\$\w+)="((?:[^"]|(?<=\\\\)")*)";(\s*\$GLOBALS\[\'\w+\'\]\s*=\s*(?:\${)?(\1\[\d+\]}?\.?)+;\s*)+(.{0,400}\s*\1\[\d+\]\.?)+;\s*}~msi',
            'fast' => '~(\$\w+)="((?:[^"]|(?<=\\\\)"){0,1000})";(\s*\$GLOBALS\[\'\w+\'\]\s*=\s*(?:\${)?(\1\[\d+\]}?\.?)+;\s*)+(.{0,400}\s*\1\[\d+\]\.?)+;\s*}~msi',
            'id'   => 'subst2',
        ],
        [
            'full' => '~(\$\w{1,50}\s*=\s*"[^"]{1,1000}";\s*)+(\$\w{1,50}\s*=\s*\$?\w{1,50}\("\w{1,50}"\s*,\s*""\s*,\s*"\w{1,50}"\);\s*)+\$\w{1,50}\s*=\s*\$\w{1,50}\("",\s*\$\w{1,50}\(\$\w{1,50}\("\w{1,50}",\s*"",(\s*\$\w{1,50}\.?)+\)+;\$\w{1,50}\(\);~msi',
            'id'   => 'strreplace',
        ],
        [
            'full' => '~\$\w{1,50}\s?=\s?(?:\'[^\']{1,500}\'|"[^}]{1,500}}");\s?\$\w{1,50}\s?=\s?str_replace\([\'"]\w{1,50}[\'"],\s?[\'"][\'"],\s?["\']\w{1,100}[\'"]\);\s?(?:\$\w{1,50}\s?=\s?(?:\'[^\']{1,500}\'|"[^\s]{1,500}?");\s){1,15}.*?\$\w{1,50}\s?=\s?str_replace\((?:\'[^\']{1,100}\'|"[^"]{1,100}?"),\s?\'\',\s?(?:\$\w{1,50}\s?\.?\s?){1,50}\);\s?\$\w{1,50}\s?=\s?\$\w{1,50}\(\'\',\s?\$\w{1,50}\);\s?\$\w{1,50}\(\);~msi',
            'id'   => 'strreplace',
        ],
        [
            'full' => '~function\s(\w{1,50})\((\$\w{1,50}),\$\w{1,50}\)\s?{if\(file_exists[^}]+}(\$\w{1,50})\s?=\s?str_replace\(array\(base64_decode\(\'([^\']+)\'\),base64_decode\(\'([^\']+)\'\)\),array\(base64_decode\(\'([^\']+)\'\),base64_decode\(\'([^\']+)\'\)\),\2\);(\$\w{1,50})\s?=\s?strrev[^;]+;(\$\w{1,50})\s?=\s?\8\(\3\);(\$\w{1,50})\s?=\s?strrev[^;]+;return@?\10\(\9\);}if.*?exit;}\s?((\$\w{1,50})\s?=\s?base64_decode\(\'([^\']+)\'\);preg_match\(base64_decode\(\'[^\']+\'\),\12,(\$\w{1,50})\);(\$\w{1,50})\s?=\s?\14\[1\];(\$\w{1,50})\s?=\s?\1\(\15,\$\w{1,50}\);if\(isset\(\16\)\){eval\(\16\);})~msi',
            'id' => 'pregB64FuncImgStr',
        ],
        [
            'full' => '~@?echo\s*([\'"?>.\s]+)?@?\s*(base64_decode\s*\(|stripslashes\s*\(|gzinflate\s*\(|strrev\s*\(|str_rot13\s*\(|gzuncompress\s*\(|urldecode\s*\(|rawurldecode\s*\(|eval\s*\()+[\s\/\'"].*?[^\'")]+((\s*\.?[\'"]([^\'";\$]+\s*)+)?\s*[\'"\);]+)+~msi',
            'id'   => 'echo',
        ],
        [
            'full' => '~(\$\w+)="([^"]+)";\s*(\$\w+)=strtoupper\s*\((\1\[\d+\]\s*\.?\s*)+\)\s*;\s*if\(\s*isset\s*\(\${\s*\3\s*}\[\d*\s*\'\w+\'\s*\]\s*\)\s*\)\s*{eval\(\${\3\s*}\[\'\w+\']\s*\)\s*;}~smi',
            'fast' => '~(\$\w+)="([^"]+)";\s*(\$\w+)=strtoupper\s*\((\1\[\d+\]\s*\.?\s*)+\)\s*;\s*if\(\s*isset\s*\(\${\s*\3\s*}\[\d*\s*\'\w+\'\s*\]\s*\)\s*\)\s*{eval\(\${\3\s*}\[\'\w+\']\s*\)\s*;}~smi',
            'id'   => 'strtoupper',
        ],
        [
            'full' => '~(\$\w+)="[^"]+";\s*(\$\w+)=str_ireplace\("[^"]+","",\1\);(\$\w+)\s*=\s*"[^"]+";\s*function\s*(\w+)\((\$\w+,?)+\){\s*(\$\w+)=\s*create_function\(\'\',\$\w+\);\s*array_map\(\6,array\(\'\'\)+;\s*}\s*set_error_handler\(\'\4\'\);(\$\w+)=\2\(\3\);user_error\(\7,E_USER_ERROR\);\s*if\s*.+?}~msi',
            'id'   => 'errorHandler',
        ],
        [
            'full' => '~(\$\w+)=strrev\(str_ireplace\("[^"]+","","[^"]+"\)\);(\$\w+)="([^"]+)";eval\(\1\(\2\)+;}~msi',
            'id'   => 'evalIReplace',
        ],
        [
            'full' => '~error_reporting\((?:0|E_ALL\^E_NOTICE)\);ini_set\("display_errors",\s*[01]\);if\(!defined\(\'(\w+)\'\)\){define\(\'\1\',__FILE__\);if\(!function_exists\("([^"]+)"\)\){function [^(]+\([^\)]+\).+?eval\(""\);.+?;}?eval\(\$[^\)]+\)\);[^\)]+\)+.*?;return\s*\$[^;]+;\s*\?>([^;]+);~msi',
            'id'   => 'PHPJiaMi',
        ],
        [
            'full' => '~\$\w+=0;(\$GLOBALS\[\'\w+\'\])\s*=\s*\'([^\']+)\';\s*(\$\w+)=pack\(\'H\*\',substr\(\1,\s*([-\d]+)\)\);if\s*\(!function_exists\(\'(\w+)\'\)\){function\s*\5\(\$\w+,\s*\$\w+\){\$\w+=\1;\s*\$d=pack\(\'H\*\',substr\(\1,\s*\4\)\);\s*return\s*\$\w+\(substr\(\$\w+,\s*\$\w+,\s*\$\w+\)\);}};eval\(\3\(\'[^\']+\'\)\);~msi',
            'id'   => 'substr',
        ],
        [
            'full' => '~(?:\$\{\'GLOBALS\'\}\[\'\w+\'\]=\'_F\';)?\$(?:_F|\{\$\{\'GLOBALS\'\}\[\'\w+\'\]\})=_{1,2}(?:FILE|hex)_{1,2};(?:\$\{\'GLOBALS\'\}\[\'\w+\'\]=\'_X\';)?\$(?:_X|\{\$\{\'GLOBALS\'\}\[\'\w+\'\]\})=["\']([^\'"]+)[\'"];\s*(?:\$[_\w]+\.=[\'"][\w\+\/=]+[\'"];){0,30}\$_\w+=base64_decode\(\$_X\);\$_X=strtr\(\$_X,\'([^\']+)\',\'([^\']+)\'\);\$_R=@?(?:(str_replace)|(ereg_replace)|(preg_replace))\(\'\~?__FILE__\~?\',"\'".\$_F."\'",\$_X\);eval\(\$_R\);\$_R=0;\$_X=0;~msi',
            'fast' => '~\$_\w+=base64_decode\(\$_X\);\$_X=strtr\(\$_X,\'([^\']+)\',\'([^\']+)\'\);\$_R=@?(?:(str_replace)|(ereg_replace)|(preg_replace))\(\'\~?__FILE__\~?\',"\'".\$_F."\'",\$_X\);eval\(\$_R\);\$_R=0;\$_X=0;~msi',
            'id'   => 'LockIt2',
        ],
        [
            'full' => '~(?:@error_reporting\(\d+\);\s{0,10}@set_time_limit\(\d+\);)?\s{0,10}(\$\w+)=([\s\'\w\/+=]+);\s{0,10}(\$\w+)=(__FILE__);\s*\1=gzinflate\(str_rot13\(base64_decode\(\$tr\)\)\);\1=strtr\(\1,\'([^\']+)\'\s*,\'([^\']+)\'\);(\$_R)=@?ereg_replace\(\'\~?\4\~?\',"\'".\3."\'",\1\);eval\(\7\);\7=0;\1=0;~msi',
            'fast' => '~(\$\w+)=([\s\'\w\/+=]+);\s*(\$\w+)=(__FILE__);\s*\1=\w+\(\w+\(\w+\(\$tr\)\)\);\1=\w+\(\1,\'([^\']+)\'\s*,\'([^\']+)\'\);(\$_R)=@?\w+\(\'\~?\4\~?\',"\'".\3."\'",\1\);\w+\(\7\);\7=0;\1=0;~msi',
            'id'   => 'anaski',
        ],
        [
            'full' => '~\$\w+="([^"]+)";(?:\$l+=0;\$l+=\'base64_decode\';\$l+=0;eval\(\$l+\("[^"]+"\)+;|\$l+=\'ord\';)[^\^]+\^[\dx]+\);}eval\(\$l+\("[^"]+"\)+;eval\(\$l+\);return;~msi',
            'id'   => 'custom1',
        ],
        [
            'full' => '~(\$\w+)\s*=\s*"(\w{32})";\s*(\$\w+)\s*=\s*array\s*\(\);\s*(\3\[\d+\]\s*=\s*"[^"]+";\s*)+\s*(\$\w+)\s*=\s*"base64_decode";\s*\$\w+\s*=\s*(\w+)\s*\(\3,\1\);function\s*\6\(\s*.{200,500}return\s*\$\w+;\s*}\s*eval\s*\(\5\s*\(\$\w+\)\);~msi',
            'id'   => 'custom2',
        ],
        [
            'full' => '~\$\w+=\'=+\s*Obfuscation provided by Unknowndevice64 - Free Online PHP Obfuscator\s*(?:http://www\.ud64\.com/)?\s*=+\';\s*(\$ud64_c[o0]m="[\\\\0-9a-z\."]+;)+\$\w+=(\$ud64_c[o0]m\()+"([^"]+)"\)+;@eval\(\$ud64_c[o0]m\(\'[^\']+\'\)+;~msi',
            'id'   => 'ud64',
        ],
        [
            'full' => '~(\$[\w_]+=("[\\\\\\\\\w]+"\.?)+;)+\$\w+=(?:\$\w+\()+"([\w\/\+=]+)"\)+;@eval\(\$\w+\(\'.*?\'\)+;~msi',
            'id'   => 'ud64',
        ],
        [
            'full' => '~\$\w+=__FILE__;\$\w+=fopen\(\$\w+,\'rb\'\);fread\(\$\w+,(\d+)\);\$\w+=explode\("\\\\t",base64_decode\(fread\(\$\w+,(\d+)\)+;\$\w+=\$\w+\[[\d+]\];[\$l1=\d{}\.;\(\)\[\]]+eval\(\$\w+\(\'[^\']+\'\)+;\s*return\s*;\?>[\w=\+]+~msi',
            'id'   => 'qibosoft',
        ],
        [
            'full' => '~(\$\w+)=base64_decode\("([^"]+)"\);\s*eval\("return\s*eval\(\\\\"\1\\\\"\);"\)~msi',
            'id'   => 'evalReturn',
        ],
        [
            'full' => '~(?:\$[0O]+\[[\'"](\w+)[\'"]\]\.?="[\\\\\w]+";)+(?:\$[0O]+\[[\'"]\w+[\'"]\]\.?=\$[0O]+\[[\'"]\w+[\'"]\]\([\'"][\d\(]+[\'"](,__FILE__)?\);)+@eval\((?:\$[0O]+\[[\'"]\w+[\'"]\]\()+"([^"]+)"\)+;~mis',
            'fast' => '~(?:\$[0O]+\[[\'"](\w+)[\'"]\]\.?="[\\\\\w]+";)+(?:\$[0O]+\[[\'"]\w+[\'"]\]\.?=\$[0O]+\[[\'"]\w+[\'"]\]\([\'"][\d\(]+[\'"](,__FILE__)?\);)+@eval\((?:\$[0O]+\[[\'"]\w+[\'"]\]\()+"([^"]+)"\)+;~mis',
            'id'   => 'evalChars',
        ],
        [
            'full' => '~<\?php\s+((\$GLOBALS\[\s*[\'"]\w+[\'"]\s*\])\s*=\s*base64_decode\("([^"]*)"\);)+\s*\?><\?php\s.+\2.+exit;\s}\sfunction\s\w+\(\)\s{\sreturn\sarray\(\s\'favicon\'\s=>\s\'[^\']+\',\s+\'sprites\'\s=>\s\'[^\']+\',\s\);\s}~msi',
            'id'   => 'globalsBase64',
        ],
        [
            'full' => '~(\$\w+=strrev\("[^"]+"\);)+eval\((\$\w+\()+"[^"]+"\)+;~mis',
            'fast' => '~(\$\w+=strrev\("[^"]+"\);)+eval\((\$\w+\()+"[^"]+"\)+;~mis',
            'id'   => 'strrevVarEval',
        ],
        [
            'full' => '~\$\w+=basename/\*\w+\*/\(/\*\w+\*/trim/\*\w+\*/\(.+?(\$\w+)=.+\1.+?;~msi',
            'id'   => 'comments',
        ],
        [
            'full' => '~(\$\w+)\s*=\s*(base64_decode\s*\(+|gzinflate\s*\(+|strrev\s*\(+|str_rot13\s*\(+|gzuncompress\s*\(+|convert_uudecode\s*\(+|urldecode\s*\(+|rawurldecode\s*\(+|htmlspecialchars_decode\s*\(+)+"([^"]+)"\)+;\s*@?eval\(([\'"?>.\s]+)?\1\);~',
            'fast' => '~(\$\w+)\s*=\s*(base64_decode\s*\(+|gzinflate\s*\(+|strrev\s*\(+|str_rot13\s*\(+|gzuncompress\s*\(+|convert_uudecode\s*\(+|urldecode\s*\(+|rawurldecode\s*\(+|htmlspecialchars_decode\s*\(+)+"([^"]+)"\)+;\s*@?eval\(([\'"?>.\s]+)?\1\);~',
            'id'   => 'varFuncsEval',
        ],
        [
            'full' => '~<\?php\s*defined\(\'[^\']+\'\)\s*\|\|\s*define\(\'[^\']+\',__FILE__\);(global\s*\$[^;]+;)+\s*(if\(!function_exists\(\'([^\']+)\'\)\){\s*function\s*[^\)]+\(\$[^,]+,\$[^=]+=\'\'\){\s*if\(empty\(\$[^\)]+\)\)\s*return\s*\'\';\s*\$[^=]+=base64_decode\(\$[^\)]+\);\s*if\(\$[^=]+==\'\'\)\s*return\s*\~\$[^;]+;\s*if\(\$[^=]+==\'-1\'\)\s*@[^\(]+\(\);\s*\$[^=]+=\$GLOBALS\[\'[^\']+\'\]\[\'[^\']+\'\]\(\$[^\)]+\);\s*\$[^=]+=\$GLOBALS\[\'[^\']+\'\]\[\'[^\']+\'\]\(\$[^,]+,\$[^,]+,\$[^\)]+\);\s*return\s*\$[^^]+\^\$[^;]+;\s*}}\s*)+(\$[^\[]+\["[^"]+"]=[^\(]+\(\'[^\']+\',\'[^\']*\'\);\s*)+(\$[^\[]+\[\'[^\']+\'\]=\$GLOBALS\[\'[^\']+\'\]\[\'[^\']+\'\]\([^\)]*\)+;\s*)+return\(eval\(\$[^\[]+\[\'[^\']+\'\]\)+;\s*\?>\s*#!/usr/bin/php\s*-q\s*(\s*[^\s]+)+~msi',
            'fast' => '~<\?php\s*defined\(\'[^\']{10,30}\'\)\s*\|\|\s*define\(\'[^\']{10,30}\',__FILE__\);(global\s*\$[^;]{10,30};)+\s*if\(!function_exists\(\'([^\']+)\'\)\){\s*function\s*[^\)]+\(\$[^,]{10,30},\$[^=]{10,30}=\'\'\){\s*if\(empty\(\$[^\)]+\)\)\s*return\s*\'\';\s*\$[^=]{10,30}=base64_decode~msi',
            'id'   => 'OELove',
        ],
        [
            'full' => '~(?:\$\w+\s*=(\s*(\d+)\+)*\d+;\s*)?(\$\w+="[^"]+";\s*)+\s*(?:\$\w+\s*=(?:\s*(?:\d+)\+)*\s*\d+;\s*)?(\$\w+)\s*=\s*\w+\(\'[^\']+\',\s*\$\w+,\s*\'[^\']+\'\);.+?\4\("[^"]+"\);\s*\$\w+\s*=\s*\4;\s*(\$\w+="[^"]+";\s*)+.+?\$\w+\(\$\w+,\$\w+\("",\s*\$\w+\(\$\w+\(\$\w+\(\$\w+\(\$\w+,\s*"(\d+)"\)+,\$\w+\);.+function \w+\((\$\w+),\s*\$\w+,\s(\$\w+)\)\s{\8\s=\s\8\s\.\s\8;.+return \7;\s*}~msi',
            'fast' => '~(\$\w+)\s*=\s*\w+\(\'[^\']+\',\s*\$\w+,\s*\'[^\']+\'\);.+?\1\("[^"]+"\);\s*\$\w+\s*=\s*\1;\s*(\$\w+="[^"]+";\s*)+~msi',
            'id'   => 'Obf_20200402_1',
        ],
        [
            'full' => '~(?:\$\w+\s*=\s*"[^"]+";\s*)?(?:((?:\$\w+\s*=\s*\'[^\']+\';\s*)+)(\$\w+=(?:\$\w+\.?)+);)?function\s(\w+)\((\$\w+),\s*(\$\w+),\s*(\$\w+)\)\s*{\s*return\s*([\'\. ]*(\4|\5|\6)[\'\. ]*)+;\s*}\s*(?:\$\w+\s*=\s*"[^"]+";)?(\s*\$\w+\s*=\s*\3\((((\'\')|(\$\w+)|(\$\w+[\[\{]\d+[\]\}](\.\'\')?)|(\$\w+[\[\{]\d+[\]\}]\.\$\w+[\[\{]\d+[\]\}]))\s*,?\s*)+\);\s*)+\s*\$\w+\s*=\s*\3[^"]+[^\']+\'([^\']+)\'"[^/]+\'//\'\)+;~msi',
            'fast' => '~function\s(\w+)\((\$\w+),\s*(\$\w+),\s*(\$\w+)\)\s*{\s*return\s*([\'\. ]*(\2|\3|\4)[\'\. ]*)+;\s*}\s*(?:\$\w+\s*=\s*"[^"]+";)?(\s*\$\w+\s*=\s*\1\((((\'\')|(\$\w+)|(\$\w+[\[\{]\d+[\]\}](\.\'\')?)|(\$\w+[\[\{]\d+[\]\}]\.\$\w+[\[\{]\d+[\]\}]))\s*,?\s*)+\);\s*)+\s*\$\w+\s*=\s*\1[^"]+[^\']+\'([^\']+)\'"[^/]+\'//\'\)+;~msi',
            'id'   => 'Obf_20200402_2',
        ],
        [
            'full' => '~(?:function\s*\w{1,50}\(\$\w{1,50},\s*\$\w{1,50}\)\s*\{(?:\s*\$\w{1,50}\s*=\s*(?:md5\(\$\w{1,50}\)|\d+|base64_decode\(\$\w{1,50}\)|strlen\(\$\w{1,50}\)|\'\');\s*)+\s*for\s*\(\$\w{1,50}\s*=\s\d+;\s*\$\w{1,50}\s*<\s*\$len;\s*\$\w{1,50}\+\+\)\s*\{\s*if\s*\(\$\w{1,50}\s*==\s*\$\w{1,50}\)\s*\{\s*\$\w{1,50}\s*=\s*\d+;\s*}\s*\$\w{1,50}\s*\.=\s*substr\(\$\w{1,50},\s*\$\w{1,50},\s*\d+\);\s*\$\w{1,50}\+\+;\s*\}(?:\s*\$\w{1,50}\s*=\s*\'\';)?\s*for\s*\(\$\w{1,50}\s*=\s*\d+;\s*\$\w{1,50}\s*<\s*\$\w{1,50};\s*\$\w{1,50}\+\+\)\s*{\s*if\s*\(ord\(substr\(\$\w{1,50},\s*\$\w{1,50},\s*\d+\)\)\s*<\s*ord\(substr\(\$\w{1,50},\s*\$\w{1,50},\s*\d+\)\)\)\s*\{\s*\$\w{1,50}\s*\.=\s*chr\(\(ord\(substr\(\$\w{1,50},\s*\$\w{1,50},\s*\d+\)\)\s*\+\s*\d+\)\s*-\s*ord\(substr\(\$\w{1,50},\s*\$\w{1,50},\s*\d+\)\)\);\s*}\s*else\s*{\s*\$\w{1,50}\s*\.=\s*chr\(ord\(substr\(\$\w{1,50},\s*\$\w{1,50},\s*\d+\)\)\s*-\s*ord\(substr\(\$\w{1,50},\s*\$\w{1,50},\s*\d+\)\)\);\s*}\s*}\s*return\s*\$\w{1,50};\s*\}\s*|\$\w{1,50}\s*=\s*"([^"]+)";\s*){2}\s*\$\w{1,50}\s*=\s*"([^"]+)";\s*\$\w{1,50}\s*=\s*\w{1,50}\(\$\w{1,50},\s*\$\w{1,50}\);\s*eval\(\$\w{1,50}\);~msi',
            'id'   => 'Obf_20200414_1',
        ],
        [
            'full' => '~(?:\$\w+\s{0,10}=\s{0,10}\'\w+\';)?\s{0,10}(\$\w+)\s*=\s*urldecode\(\'[%0-9a-f]+\'\);(\s*(\$\w+)\s*=(\s*\1\{\d+\}\.?)+;)+\s*(\$\w+)\s*=\s*"[^"]+"\.\3\("[^"]+"\);\s*eval\(\5\);~msi',
            'fast' => '~(\$\w+)\s*=\s*urldecode\(\'[%0-9a-f]+\'\);(\s*(\$\w+)\s*=(\s*\1\{\d+\}\.?)+;)+\s*(\$\w+)\s*=\s*"[^"]+"\.\3\("[^"]+"\);\s*eval\(\5\);~msi',
            'id'   => 'Obf_20200421_1',
        ],
        [
            'full' => '~(\$\w+)=\'([^\']+)\';(\$\w+)=str_rot13\(gzinflate\(str_rot13\(base64_decode\(\1\)\)\)\);eval\(\3\);~msi',
            'id'   => 'SmartToolsShop',
        ],
        [
            'full' => '~(\$\w+)\s*=\s*\("\?>"\.gzuncompress\(base64_decode\("[^"]+"\)\)\);\s*@?eval\(\1\);~msi',
            'id'   => 'Obf_20200504_1',
        ],
        [
            'full' => '~(\$\w+)=base64_decode\(\'[^\']+\'\);\s*eval\(\1\);~mis',
            'fast' => '~(\$\w+)=base64_decode\(\'[^\']+\'\);\s*eval\(\1\);~mis',
            'id'   => 'Obf_20200507_1',
        ],
        [
            'full' => '~(?:error_reporting\(0\);\s*ini_set\("max_execution_time",0\);\s*(?:/\*.*?\*/)?\s*)?(\$\w+)=\s*\[(("."=>".",?\s*)+)];\s*(\$\w+)=str_split\("([^"]+)"\);\s*(?:\$\w+="";)?\s*foreach\(\4\s*as\s*(\$\w+)\)\s*{\s*foreach\(\s*\1\s*as\s*(\$\w+)=>(\$\w+)\)\s*{\s*if\(\6==\(string\)\8\)\s*\{\s*\$\w+\.=\7;\s*break;\s*}\s*}\s*}~msi',
            'fast' => '~(\$\w+)=\s*\[(("."=>".",?\s*)+)];\s*(\$\w+)=str_split\("([^"]+)"\);\s*(?:\$\w+="";)?\s*foreach\(\4\s*as\s*(\$\w+)\)\s*{\s*foreach\(\s*\1\s*as\s*(\$\w+)=>(\$\w+)\)\s*{\s*if\(\6==\(string\)\8\)\s*\{\s*\$\w+\.=\7;\s*break;\s*}\s*}\s*}~msi',
            'id'   => 'Obf_20200507_4',
        ],
        [
            'full' => '~assert\("[eval"\.]+\([base64_decode\."]+\(\'([^\']+)\'\)\)"\);~msi',
            'id'   => 'Obf_20200507_5',
        ],
        [
            'full' => '~parse_str\s*\(\s*((?:[\'"][^\'"]+["\']\s*\.?\s*)+)\s*,\s*(\$\w+)\s*\)\s*;\s*@?\s*(\2\s*\[\s*\d+\s*\]\s*\(\s*)+(?:\'[^\']+\'|\2\[\d+\])\s*\)?,\s*array\s*\(\s*\)\s*,\s*array\s*\(\s*["\'][^\'"]+[\'"]\s*\.\s*(\2\[\s*\d+\s*\]\s*\(\s*)+[\'"]([^\'"]+)[\'"]\s*[\)\s]+\.[\'"]//[\'"][\s\)]+;~msi',
            'id'   => 'Obf_20200513_1',
        ],
        [
            'full' => '~(\$\w+)=strrev\("[base64_decode"\.]+\);eval\(\1\(\'([^\']+)\'\)\);~msi',
            'id'   => 'Obf_20200526_1',
        ],
        [
            'full' => '~error_reporting\(0\);define\(\'\w+\',\s*__FILE__\);define\(\'\w+\',\s*fopen\(__FILE__,\s*\'r\'\)\);fseek\(\w+,\s*__COMPILER_HALT_OFFSET__\);((\$\w+="\\\\x[0-9a-f]+";)+(\$\w+="[^"]+";)+eval\("\?>"\.(\$\w+\()+"([^"]+)"\)+;)+(?:/\*\w+\*/)?__halt_compiler\(\);[\w#|>^%\[\.\]\\\\/=]+~msi',
            'id'   => 'Obf_20200527_1',
        ],
        [
            'full' => '~(\$\w+)=strrev\("[base64_decode]+"\)\.str_replace\(\'(\w+)\',\'\',\'\w+\'\);\s*eval\(\1\(\$\w+\)\);~msi',
            'id'   => 'Obf_20200602_1',
        ],
        [
            'full' => '~(\$\w+)\s*=\s*"([^"]+)";\s*(\$\w+)\s*=\s*base64_decode\(\1\);\s*eval\(\3\);~msi',
            'id'   => 'Obf_20200720_1',
        ],
        [
            'full' => '~[\'".]+(\$\w+\s*=\s*[\'"]\w+[\'"];)+(\$\w+=\$\w+[\'.]+\$\w+;)+(\$\w+=(str_rot13|base64_decode|gzinflate)\(\$\w+\);)+eval\(\$\w+\);~msi',
            'id'   => 'flamux',
        ],
        [
            'full' => '~function\s*(\w+)\(\)\{\s*return\s*"([^"]+)";\s*\}\s*eval\("([^"]+)"\.\1\(\)\."([^"]+)"\);~msi',
            'id'   => 'bypass',
        ],
        [
            'full' => '~(?:\${"[^"]+"}\["[^"]+"\]="[^"]+";)+(echo)\s*"(?:[<\w\\\\>\/\s={:}#]+);(?:[\\\\\w\-:]+;)+(?:[\\\\\w}:{\s#]+;)+(?:[\\\\\w}:{#\-\s]+;)+[\\\\\w}<\/]+";\$\w+=["\\\\\w]+;(?:\${"[^"]+"}\["[^"]+"\]="[^"]+";)+\$\w+=["\\\\\w]+;\${"[^"]+"}\["[^"]+"\]="[^"]+";error_reporting\(\d\);\$\w+=["\\\\\w]+;\${"[^"]+"}\["[^"]+"\]="[^"]+";\$\w+=["\\\\\w]+;set_time_limit\(\d\);\$\w+=["\\\\\w]+;(?:\${"[^"]+"}\["[^"]+"\]="[^"]+";)+if\(empty\([\$_\w\["\\\\\]]+\)\){\${\${"[^"]+"}\["[^"]+"\]}=[\w()]+;}else{\${\${"[^"]+"}\["[^"]+"\]}=[\$_\w\["\\\\\]]+;}chdir\(\${\$\w+}\);\${\${"[^"]+"}\["[^"]+"\]}=htmlentities.*?\1"[^"]+"\.\${\${"[^"]+"}\["[^"]+"\]}[."<\w>\\\\=&]+\${\$\w+}[.">\w\\\\\/<]+;(?:\1["\\\\\w\s=.\${}\[\]&\':\/<>]+;)+}else{(?:\$\w+=["\\\\\w]+;){2}\${\${"[^"]+"}\["[^"]+"\]}=scandir\(\${\$\w+}\);(?:\${"[^"]+"}\["[^"]+"\]="[^"]+";){2}\${\${"[^"]+"}\["[^"]+"\]}=count\(\${\${"[^"]+"}\["[^"]+"\]}\)\-\d;\1"[^"]+"\.\${\${"[^"]+"}\["[^"]+"\]}[."<\w>\\\\=&]+\/\w+>";\${"[^"]+"}\["[^"]+"\]="[^"]+";\1["<\\\\\w>.\s=]+\${\${"[^"]+"}\["[^"]+"\]}[."\\\\\w\s=<\/]+;(?:\1["\\\\\w\s=.\${}\[\]&\':\/<>]+;){3}}}\1["\\\\\w:\s.\$\[\]>()_\'<\/%]+;~msi',
            'id'   => 'darkShell',
        ],
        [
            'full' => '~((\$\w+)=\'(\d+)\';)?(\$\w+)=\'([\w\(;\$\)=\s\[\/\]."*,{}]+)\';(\$\w+)=(?:\4\[[-+\(\d*\/\)]+\]\.?)+;(\$\w+)=(?:\4\[[-+\(\d*\/\)]+\]\.?)+;(\$\w+)=(?:\4\[[-+\(\d*\/\)]+\]\.?(?(2)\2\.|)?)+;(\$\w+)=\s*"([\'\w\/+=]+)";(?:\$\w+=\'\';)?(\$\w+)\.=\7;\11\.=\9;\11\.=\8;@(\$\w+)=\6\(\(\'+\),\s+\(\11\)\);@\12\(\);~msi',
            'id'   => 'wso',
        ],
        [
            'full' => '~(?:(?:@?\s{0,10}error_reporting|@?\s{0,10}set_time_limit)\s*\(\s*\d+\s*\);\s*(?:header\s*\(\s*"[^"]+"\s*\)\s*;\s*)?){1,2}function\s*\w+\s*\(\s*(\$\w{1,50})\s*\)\s*{\s*(\$\w{1,50})\s*=\s*strlen\s*\(\s*trim\s*\(\s*\1\s*\)\s*\)\s*;\s*(\$\w{1,50})\s*=\s*\'\'\s*;\s*(?|for\s*\(\s*(\$\w{1,50})\s*=\s*0\s*;\s*\4\s*<\s*\2\s*;\s*\4\s*\+=\s*2\s*\)|(\$\w+)\s*=\s*0;\s*while\s*\(+\4\s*<\s*\2\)+)\s*{\s*\3\s*\.=\s*pack\s*\(\s*"C"\s*,\s*hexdec\s*\(\s*substr\s*\(\s*\1\s*,\s*\4\s*,\s*2\)\)\);\s*(?:\4\s*\+=\s*2;)?\s*}\s*return\s*\3\s*;\s*}\s*(?:header\("\w+-(?:\w+:)?\s\w+\/\w+;\s*charset=(\w+)"\);\s*)?(\$\w{1,50})\s*=\s*(?:(?|\w+\s*\(\s*"(\w+)"\s*\)|\$\w{1,50}|\w+\s*\(\s*((?:\s*\'\w*\'\s*\.\s*\(\d+[\-\+\*\/]\d+\)\.?)+))\s*\.?\s*)+(?:\.?\'\'\s*\))*\s*\.\s*\'([\w\/\+=\\\\]+\'\)\)\);)\'\s*;\s*(?:(\$\w{1,50})\s*=\w+\((?:\s*\'\w*\'\.\s*\(\d+[\+\-\*\/]\d+\)\.?)+\'\w*\'\);\s*)*\s*(?:(\$\w+)\s*=\s*(?:\s*create_function|@?\$\w+)\(\'\',\s*\6\);\s*(?:\9|\10)\(\);|\$\w+\s*=\s*@?eval\s*\(\s*\6\s*\)\s*;)~msi',
            'id'   => 'anonymousFox',
        ],
        [
            'full' => '~(\$my_sucuri_encoding)\s{0,10}=\s{0,10}[\'"]([^\'"]+)[\'"];\s{0,10}(\$tempb64)\s{0,10}=\s{0,10}base64_decode\(\s{0,10}\1\);\s{0,10}eval\(\s{0,10}\3\s{0,10}\);~msi',
            'id'   => 'wsoEval',
        ],
        [
            'full' => '~(?:(?:(\$\w+)\s*\.?=\s*["\'][assert]+["\'];)+\s*(if\s*\(\!\@\$\w+\)\s*\{\$\w+=1;)?\s*@?\1)(\((?:\w+\()+\'[^;]+;\'\)+;(?(2)}))~msi',
            'id'   => 'assertStr',
        ],
        [
            'full' => '~(function\s\w+\(\$\w+,\$\w+,\$\w+\){return\sstr_replace\(\$\w+,\$\w+,\$\w+\);}\s?){3}(\$\w+)\s=\s\'(\w+)\';\s\2\s=\s(\w+)\(\'(\w+)\',\'\',\2\);\s(\$\w+)\s=\s\'(\w+)\';\s\6\s=\s\4\(\'(\w+)\',\'\',\6\);\s(\$\w+)\s=\s\'(\w+)\';\s\9\s=\s\4\(\'(\w+)\',\'\',\9\);\s(\$\w+)\s=\s\'(\$\w+)\';\s(\$\w+)\s=\s\6\(\12,\9\.\'\(\'\.\2\.\'\(\'\.\12\.\'\)\);\'\);\s\14\(\'(\w+)\'\);~msi',
            'id'   => 'funcVar',
        ],
        [
            'full' => '~(\$\w+)=[\'"]([\w</,\s()\$\+}\\\\\'"?\[\]{;%=^&-]+)[\'"];(\$\w+=(?:\s?\1\[\d+\](?:\s?\.?))+;)+((?:\$\w+\(\d+\);)?(\$\w+=(\$\w+)\(["\']{2},(\$\w+\(\$\w+\(["\'][=\w\+\/]+[\'"]\)\))\);\$\w+\(\);|.*?if\s?\(isset\(\${(?:\$\w+\[\d+\]\.?)+}.*?function\s\w+.*?include\s\${(?:\$\w+\[\d+\]\.?)+}\[(?:\$\w+\[\d+\]\.?)+\];\s?}))~msi',
            'id'   => 'dictionaryVars',
        ],
        [
            'full' => '~(?:(?<concatVar>\$\w+)\s?=\s?""\s?;((?:\s?(?P=concatVar)\s?\.=\s?"[\w]+"\s?;\s?)+))?(\$\w+)\s?=\s?(?:(?P=concatVar)|"(?<strVal>[\w]+)")\s?;\s?if\s?\(\s?!function_exists\s?\(\s?"(\w+)"\)\){\s?function\s\5\(\s?(\$\w+)\){\s?(?:\$\w+\s?=\s?""\s?;)?\s?(\$\w+)\s?=\s?strlen\s?\(\s?\6\s?\)\s?\/\s?2\s?;\s?for\s?\(\s?(\$\w+)\s?=0\s?;\s?\8\s?<\s?\7\s?;\s?\8\+\+\s?\)\s?{\s?\$\w+\s?\.=\s?chr\s?\(\s?base_convert\s?\(\s?substr\s?\(\s?\6\s?,\s?\8\s?\*\s?2\s?,\s?2\s?\)\s?,\s?16\s?,\s?10\s?\)\s?\)\s?;\s?}\s?return\s?\$\w+;\s?}\s?}\s?\$\w+\s?=\s?create_function\s?\(\s?null\s?,\s?\5\(\s?\3\)\)\s?;\s?\3\(\)\s?;~msi',
            'id'   => 'concatVarFunc',
        ],
        [
            'full' => '~function\s?(\w+)\(\){(((\$\w+)\.?="\w+";)+)return\seval\(\4\(\w+\(\)\)\);}function\s(\w+)\((\$\w+)\){((?:(\$\w+)\.?="\w+";)+)return\s\8\(\6\);}function\s?(\w+)\(\){((\$\w+)\.?="([\w\/+=]+)";)return\s(\w+)\(\11\);}function\s\13\((\$\w+)\){(\$\w+)=(\w+)\((\w+)\((\w+)\(\14\)\)\);return\s\15;}function\s\17\(\14\){(((\$\w+)\.?="\w+";)+)return\s\21\(\14\);}\1\(\);function\s\16\(\14\){(((\$\w+)\.?="\w+";)+)return\s\24\(\14\);}~msi',
            'id'   => 'concatVarFuncFunc',
        ],
        [
            'full' => '~(?:(?:\s?\$\w+\s?=\s?strrev\([\'"][^\'"]+[\'"]\);\s?)|(?:\s?\$\w+\s?=\s?strrev\([\'"][^\'"]+[\'"]\);\s?)|(?:\s?eval\((?:\$\w+)?\([\'"][^\'"]+[\'"]\)\);\s?)|(?:\s?eval\(\$\w+\(\$\w+\([\'"][^\'"]+[\'"]\)\)\);\s?)){3,4}~msi',
            'id'   => 'evalVarDoubled',
        ],
        [
            'full' => '~(\$\w+)\s?=\s?(\w+)\("([\w+\/=]+)"\);\s?echo\s?\1;~msi',
            'id'   => 'varFuncsEcho',
        ],
        [
            'full' => '~(\$\w+)="";\s*(?:do\s?{[^}]+}\s?while\s?\(\d+>\d+\);\s*\1=\1\."[^"]+";)?.*?\s?.*?(\$\w+)=(\'[^\']+\'\s?\.\s?(?:\'[^\']+\'\s?\.?\s?)+);\s?.*?(?:\s(\$\w+)=((?:\4\[?{?\d+\]?}?\.?)+);\s?|\$\w{1,50}->\w{1,50}\(\);)?\s*(?:function\s\w+\(\){(?:.*?);\s}\s?\1=\w+\(\1,"\w+"\);\s?|\$\w+=array\((?:\'\w+\',?)+\);\s?|\1=\w+\(\1,\sjoin\(\'\',\s\$\w+\)\s?\);\s?|\s?\$\w+\+=\d+;\s?|\1=\w+\(\1,\w+\(\)\);\s?|function\s\w+\(\){\s?|do{\s?if\s?\(\d+<\d+\)\s?{\s?)*.*?(?:\$\w+\s?=\s?\$\w+\([\'"]{2},\s?\$\w+\(\$\w+(?:\(\1\),\s?(?:\$\w+\[\'\w+\'\]\)\s?)?|\)\s?)\);\s?\$\w+\(\);)(?:\s?function\s\w+\((?:\$\w+,\s?\$\w+)?\)(?:.*?);\s}|\s?class\s\w+\s?{(?:.*?);(?:\s}){1,2})+~msi',
            'fast' => '~function\s+\w+\(\)\{\s*global\s*(\$\w+);\s*return\s*(\1[\[{]\d+[\]}]\.?){15};\s*}~msi',
            'id'   => 'varFuncsMany',
        ],
        [
            'full' => '~((\$(?:GLOBALS|{"[\\\\\w]+"})\[[\'"]\w+["\']\])\s?=\s?[\'"]+([\\\\\w]+)["\'];)\s?(?:(\$GLOBALS\[?(\s?(?:\2|\$GLOBALS\[\'\w+\'\])\[\d+\]\.?)+\])\s?=\s?\g<5>+;\s?)+(?:\g<4>\s?=\s[\$_\w]+;\s)+(?:@\g<4>\(\g<5>+\s?,\s?\w+\s?\);\s?)+@\g<4>\(\d+\);\s{0,50}(?:if\s?\(!\g<4>\s?\(\g<5>+\)\)\s{\s{0,50}\g<4>\(\g<5>+,\s\g<5>*\d*\);\s{0,50}}?\s{0,50})*(?:\$\w+\s?=\s?\w+;\s?)*\g<4>\s?=\s\g<5>+;\s?global\s?\$\w+;\s?function\s\w+\(\$\w+,\s\$\w+\)\s{\s?\$\w+\s?=\s?["\']{2};\s?for\s?\(\$\w+\s?=\d+;\s?\$\w+\s?<\s?\g<4>\(\$\w+\)\s?;\s?\)\s?{\s?for\s?\(\s?\$\w+=\d+;\s?\$\w+\s?<\s?\g<4>\(\$\w+\)\s?&&\s?\$\w+\s?<\g<4>\(\$\w+\);\s?\$\w+\+{2},\s?\$\w+\+{2}\)\s?{\s?\$\w+\s?\.=\s?\g<4>\(\g<4>\(\$\w+\[\$\w+\]\)\s?\^\s?\g<4>\(\$\w+\[\$\w+\]\)\);\s?}\s?}\s?return\s\$\w+;\s?}\s?function\s?\w+\(\$\w+,\s?\$\w+\)\s?{\s?global\s?\$\w+;\s?return\s\g<4>\(\g<4>\(\$\w+,\s?\$\w+\),\s?\$\w+\)\s?;\s?}\s?foreach\s?\(\g<4>\sas\s\$\w+=>\$\w+\)\s?{\s?\$\w+\s?=\s?\$\w+;\s?\$\w+\s?=\s?\$\w+;\s?}\s?if\s?\(!\$\w+\)\s?{\s?foreach\s?\(\g<4>\sas\s\$\w+\s?=>\s?\$\w+\)\s?{\s?\$\w+\s?=\s?\$\w+;\s?\$\w+\s?=\s?\$\w+;\s?}\s?}\s?\$\w+\s?=\s?@\g<4>\(\g<4>\(@?\g<4>\(\$\w+\),\s?\$\w+\)\);\s?if\s?\(isset\(\$\w+\[\g<5>+\]\)\s?&&\s?\$\w+==\$\w+\[\g<5>+\]\)\s?{\s?if\s?\(\$\w+\[\g<5>\]\s?==\s?\g<5>\)\s?{\s?\$\w+\s?=\s?array\(\s?\g<5>+\s?=>\s?@\g<4>\(\),\s?\g<5>+\s?=>\s?\g<5>+,\s?\);\s?echo\s?@\g<4>\(\$\w+\);\s?}\s?elseif\s?\(\$\w+\[\g<5>\]\s?==\s?\g<5>\)\s?{\s?eval\(\$\w+\[\g<5>\]\);\s?}\s?(?:exit\(\);)?\s?}\s?}?~msi',
            'id'   => 'globalArrayEval',
        ],
        [
            'full' => '~<\?php\s{0,30}(\$\w+)\s{0,30}=\s{0,30}"(.+?)";\s{0,30}((?:\$\w+\s{0,30}=\s{0,30}(?:\1\[\'\w\s{0,30}\'\s{0,30}\+\s{0,30}\d+\s{0,30}\+\s{0,30}\'\s{0,30}\w\'\]\s{0,30}\.?\s{0,30})+;\s{0,30})+)(\$\w+)\s{0,30}=\s{0,30}"(\d+)";\s{0,30}(?:\$\w+\s{0,30}=\s{0,30}\$\w+\(\s{0,30}\$\w+\s{0,30},\s{0,30}\$\w+\(\s{0,30}"\s{0,30}"\)\s{0,30},\s{0,30}"[\w\+]+"\)\s{0,30};\s{0,30})+(?:\$\w+\s{0,30}=\s{0,30}\$\w+\(\s{0,30}\$\w+\(\s{0,30}\$\w+\)\s{0,30},\s{0,30}\$\w+\(\s{0,30}?\$\w+\)\s{0,30}\)\s{0,30};\s{0,30})+\$\w+\((?:\s{0,30}\$\w+\(\s{0,30}"\s{0,20}\w\s{0,20}"\)\s{0,30}\.?\s{0,30})+"\(\\\\"\w+\\\\"\s{0,30},\s{0,30}"\s{0,30}\.\s{0,30}\$\w+\(\s{0,30}\$\w+\(\s{0,30}"\d+"\s{0,30},\s{0,30}\$\w+\(\s{0,30}"\s{0,20}"\)\s{0,30},\s{0,30}"[\d\w=]+"\)\s{0,30}\)\s{0,30}\.\s{0,30}"\s{0,30}\)\s{0,30};"\)\s{0,30};\s{0,30}\$\w+\s{0,30}=\s{0,30}\$\w+\(\w+\)\s{0,30};\s{0,30}\$\w+\(\s{0,30}(?:\$\w+\(\s{0,30}"\s{0,30}[?>]\s{0,30}"\)\s{0,30}\.\s{0,30})+(\$\w+)\(\s{0,30}(\$\w+)\(\s{0,30}(\$\w+),\s{0,30}(\$\w+)\(\s{0,30}"\s{0,30}"\)\s{0,30},\s{0,30}(\$\w+)\(\s{0,30}"([()\w@|*#\[\]&\/\+=]+)"\s{0,30},\s{0,30}(\$\w+),\s{0,30}(\$\w+)\)\s{0,30}\)\)\s{0,30}\)\s{0,30};\s{0,30}\$\w+\s?=\s?\d+\s?;\s{0,30}\?>~msi',
            'id'   => 'tinkleShell',
        ],
        [
            'full' => '~(?:\$\w+="\w+";)+(\$\w+)="([\w_)(;\/\.*]+)";\$\w+="\w+";function\s(\w+)\((?:\$\w+,?){3}\){return\s?""(?:\.\$\w+\.""){3};}(?:\$\w+=(?:(?:"\w+")|(?:\3\((?:\1\[\d+\],?\.?)+\))|(?:(?:\3\()+(?:\$\w+\,?(?:\)\,)?)+)(?:(?:(?:\3\()+)*(?:(?:\$\w+,?)+)*(?:\),)*(?:\)*))+);)+\$\w+=\3\((?:\1\[\d+\]\.?)+(?:,"")+\);(?:\$\w+=\3\(\3\(\$\w+,\$\w+,\$\w+\),\3\((?:\$\w+,?)+\),\3\(\$\w+,\3\(\$\w+,\$\w+,""\),\$\w+\)\)\."\'(?<str>[\w\/\+]+)\'")\.\3\((?:\1\[\d+\],?\.?)+\);\$\w+\(\$\w+,array\("","}"\.\$\w+\."\/+"\)\);~msi',
            'id'   => 'wsoFunc',
        ],
        [
            'full' => '~\$\w+\[\'\w+\'\]\s?=\s?"[\w;\/\.*)(]+";\s?\$\w+\[\'\w+\'\]\s?=\s?(?:\$\w+\[\'\w+\'\]\[\d+\]\.?)+;\s?\$\w+\s?=\s?(?:"[\w()]*"\.chr\([\d-]+\)\.?)+"\(";\s?\$\w+\s?=\s?"[)\\\\\w;]+";\s?\$\w+\s?=\s?\$\w+\."\'(?<str>[\w\/\+]+)\'"\.\$\w+;\s?\$\w+\[\'\w+\'\]\((?:\$\w+\[\'\w+\'\]\[\d+\]\.?)+,\s?\$\w+\s?,"\d+"\);~msi',
            'id'   => 'wsoFunc',
        ],
        [
            'full' => '~function\s(\w+)\((\$\w+)\)\s{0,50}{\s{0,50}\2\s?=\s?gzinflate\(base64_decode\(\2\)\);\s{0,50}for\s?\(\s?(\$\w+)\s?=\s?\d+\s?;\s?\3\s?<\s?strlen\(\2\);\s?\3\+\+\)\s{0,50}{\s{0,50}\2\[\3\]\s?=\s?chr\(ord\(\2\[\3\]\)\s?-\s?(\d+)\);\s{0,50}}\s{0,50}return\s?\2;\s{0,50}}\s{0,50}(?:\$\w+\s?=\s?[\'"]\w+[\'"];\s?){0,}eval\(\1\([\'"]([^\'"]+)[\'"]\)\);~msi',
            'id'   => 'evalWanFunc',
        ],
        [
            'full' => '~(\$(?:GLOBALS\[\')?\w+(?:\'\])?\s{0,100}=\s{0,100}array\(\s{0,100}(?:\s{0,100}\'[^\']+\'\s{0,100}=>\s{0,100}\'?[^\']+\'?,\s{0,100})+\s{0,100}\);\s{0,100}((?:\$\w+=(?:[\'"][^\'"]*[\'"]\.?)+;)+)?(?:if\(!\$?\w+\((?:\'\w*\'\.?|\$\w+)+\)\){function\s{0,100}\w+\(\$\w+\){.*?else{function\s{0,100}\w+\(\$\w+\){.*?return\s{0,100}\$\w+\(\$\w+\);\s?}}){2})\$\w+=(?:\'\w*\'\.?)+;\s?(\$\w+)\s{0,100}=\s{0,100}@?\$\w+\(\'\$\w+\',(?:\$\w+\.\'\(.\.\$\w+\.(?:\'[\w(\$);]*\'\.?)+\)|(?:\'[^\']+\'\.?)+\));.*?\3\([\'"]([^"\']+)[\'"]\);~msi',
            'id'   => 'gulf',
        ],
        [
            'full' => '~(\$\w+)=(\w+);\$\w+="(.+?)";(?:\$\w+=\$\w+;)?(\$\w+)=strlen\(\$\w+\);(\$\w+)=[\'"]{2};for\((\$\w+)=\d+;\6<\4;\6\+\+\)\s?\5\s?\.=\s?chr\(ord\(\$\w+\[\6\]\)\s?\^\s?\1\);eval\("\?>"\.\5\."<\?"\);~msi',
            'id'   => 'evalConcatAsciiChars',
        ],
        [
            'full' => '~(?:\$\w+="[\w=]+";\s?)+(\$\w+)\s?=\s?str_replace\((?:"\w*",?)+\);\s?(\$\w+)\s?=\s?\1\((?:"\w*",?\s?)+\);\s?(\$\w+)\s?=\s?\1\((?:"\w*",?)+\);\s?(\$\w+)\s?=\s?\3\("",\s?(\2\(\2\((\1\("([#;*,\.]+)",\s?"",\s?((?:\$\w+\.?)+)\))\)\))\);\s?\4\(\);~msi',
            'id'   => 'evalPost',
        ],
        [
            'full' => '~\$\w+\s?=\s?"e\/\*\.\/";\spreg_replace\(strrev\(\$\w+\),"([\\\\\w]+)\'([\w\/\+=]+)\'([\\\\\w]+)","\."\);~msi',
            'id'   => 'evalPregStr',
        ],
        [
            'full' => '~\$GLOBALS\[\'\w+\'\]=array\(\'preg_re\'\s?\.\'place\'\);\s?function\s\w+\(\$\w+\)\s?{\$\w+=array\("\/\.\*\/e","([\\\\\w]+)\'([\w\/\+]+)\'([\\\\\w]+)","{2}\);\s?return\s\$\w+\[\$\w+\];}\s?\$GLOBALS\[\'\w+\'\]\[\d+\]\(\w+\(\d+\),\w+\(\d+\),\w+\(\d+\)\);~msi',
            'id'   => 'evalPregStr',
        ],
        [
            'full' => '~class\s?\w+{\s?function\s?__destruct\(\){\s?\$this->\w+\(\'([\w&]+)\'\^"([\\\\\w]+)",array\(\(\'([#\w]+)\'\^"([\\\\\w]+)"\)\."\(base64_decode\(\'([\w\+\/=]+)\'\)\);"\)\);\s?}\s?function\s?\w+\(\$\w+,\$\w+\){\s?@array_map\(\$\w+,\$\w+\);\s?}\s?}\s?\$\w+\s?=\s?new\s?\w+\(\);~msi',
            'id'   => 'classDestructFunc',
        ],
        [
            'full' => '~\$\w+="([\\\\\w]+)";\s?\$\w+=\$\w+\(\'([\w\+\/=]+)\'\);\s?\$\w+\s?=\s?"([\\\\\w]+)";\s?\$\w+\s?=\s?\$\w+\([\'"]{2}.\s?eval\(\$\w+\)\);\s?\$\w+\([\'"]{2}\);~msi',
            'id'   => 'createFuncEval',
        ],
        [
            'full' => '~((\$\w+)=((?:base64_decode\(|urldecode\()?[\'"][^\'"]+[\'"](?:\)?));\s*(?:\$\w+=\'\d+\';\s*)*\s*((?:\$\w+=(?:\2[[{]\d+[}\]]\.?)+\s?;\s?)+)+)(?:header[^\)]+\);)?(?:\$\w+=)?(?:if\(\!function_exists\([^}]+}};)?(?:\$\w{1,50}\s?=\s?)?.*?\$\w{1,50}\s?=\s?\$\{"[GLOBALSx0-9a-f\\\\\\\\]+"}(\["[^"]+"\])(?:(?:.*?\5.+\(\);))+?(?:}}\w+\(\$\w+,\$\w+\);)?~msi',
            'id'   => 'dictionaryCreateFuncs',
        ],
        [
            'full' => '~((?:\$\w+=\'\d+\';\s{0,10})*\s{0,10}(?:\$\w+="(?:\\\\x[0-9a-f]+)+"\s?;\s?)+)(?:header[^\)]+\);)?(?:\$\w+=)?(?:if\(\!function_exists\([^}]+}};)?(?:\$\w{1,50}\s?=\s?)?.*?\$\w{1,50}\s?=\s?\$\{"[GLOBALSx0-9a-f\\\\]+"}(\["[^"]+"\])(?:(?:.*?\2.+\(\);))+?(?:}}\w+\(\$\w+,\$\w+\);)?~msi',
            'id'   => 'nonDictionaryCreateFuncs',
        ],
        [
            'full' => '~error_reporting\(\d\);header\([^\)]+\);\$\w+\s*=\s*\d+;(\$\w+)="([^"]+)";(\1=str_replace\("([^"]+)","",\1\);(\$\w+)=base64_decode\(\1\));((?:.{1,150}?\5\{\d+\})+\)\s*or\s*die\(\'[^\']+\'\);fwrite\(\$\w+,\s*\$\w+\);fclose\(\$\w+\);\})~msi',
            'id'   => 'dictionaryStrReplace',
        ],
        [
            'full' => '~(\$\w+)\s?=\s?"([\w\s=]+)";\s?(\$\w+)\s?=\s?array\(((?:\d+,?\s?)+)\);\s?(\$\w+)\s?=\s?array\(((?:"[\w\d\s\/\.]+",?\s?)+)\);\s?(\$\w+)\s?=\s?\'\';\s?(?:\$\w+\s=(?:\s?\5\[\d+\]\s?\.?)+;\s?)+(\$\w+)\s?=\s?\$\w+\("\\\\r\\\\n",\s?\1\);\s?for\((\$\w+)=0;\9\s?<\s?sizeof\(\8\);\9\+\+\){\s?\7\s\.=\s?\$\w+\(\8\[\9\]\);\s?}\s?\1\s?=\s?\7;\s?(\$\w+)\s?=\s?\3;\s?(\$\w+)\s?=\s?"";\s?for\((\$\w+)=0;\s?\12<sizeof\(\10\);\s?\12\+=2\){\s?if\(\12\s?%\s?4\){\s?\11\.=\s?substr\(\1,\10\[\12\],\10\[\12\+1\]\);\s?}else{\s?\11\.=strrev\(substr\(\1,\10\[\12\],\10\[\12\+1\]\)\);\s?}\s?};\s?\1\s?=\s?\$\w+\(\11\);\s(\$\w+)\s?=\s?array\(\);\s?(\$\w+)\s?=\s?(?:\5\[\d+\]\s?\.?\s?;?)+;\s?(\$\w+)\s?=\s?(?:\5\[\d+\]\s?\.?\s?)+;\s?(\$\w+)\s?=\s?\'\';\s?for\((\$\w+)=0;\s?\17<strlen\(\1\);\s?\17\+=32\){\s?\13\[\]\s?=\s?substr\(\1,\s?\17,\s?32\);\s?}\s?(?:\$\w+\s?=\s?(?:\5\[\d+\]\s?\.?\s?)+;\s)+\$\w+\s?=\s?\'\';\s?\$\w+\s?=\s?\(\$\w+\(\$\w+\(\$\w+\)\)\)\s?%\s?sizeof\(\$\w+\);\s?\$\w+\s?=\s?\$\w+\[\$\w+\];\s?(\$\w+)\s?=\s?(?:\5\[\d+\]\s?\.?\s?)+;(\s?\18\s?=\s?\$_POST\[\18\];\s?(\14\s?=\s?\15\(\$_COOKIE\[\14\]\);)\s?\$\w+\s?=\s?\5\[\d+\]\s?\.\s?\5\[\d+\];\s?(eval\(\$\w+\(\18\)\);)\s?if\(!\16\){\s?((?:\$\w+\s?=\s?(?:\5\[\d+\]\s?\.?\s?)+;\s)+)(\$\w+\(\$\w+\);\s?echo\(\$\w+\);)\s?})~msi',
            'fast' => '~(\s?(\$\w+)\s?=\s?\$_POST\[\2\];\s?((\$\w+)\s?=\s?\$\w+\(\$_COOKIE\[\4\]\);)\s?(\$\w+)\s?=\s?(\$\w+)\[\d+\]\s?\.\s?\6\[\d+\];\s?(eval\(\$\w+\(\2\)\);)\s?if\(!\5\){\s?((?:\$\w+\s?=\s?(?:\6\[\d+\]\s?\.?\s?)+;\s)+)(\$\w+\(\$\w+\);\s?echo\(\$\w+\);)\s?})~msi',
            'id'   => 'evalPostDictionary',
        ],
        [
            'full' => '~(\$\w)\s?=\s?str_rot13\("([^"]+)"\);preg_replace\("//e","\1",""\);~msi',
            'id'   => 'strrotPregReplaceEval',
        ],
        [
            'full' => '~(\$\w+)\s*=\s*(?:\$\w+\.)?(?|[^\']+\'([^\']+)\'|[^"]+"([^"]+)");\s*(?:if\s*\(\!file_exists\(\1\)+\{\s*)?\s*(\$\w+)\s*=\s*(?|\'([^\']+)\'|"([^"]+)");\s*(?|@chmod\(\1,\s*\d+\);\s*|if\s*\(\!file_exists\(\1\)+\{\s*)@file_put_contents\(\1,\s*(?:base64_decode\()+\3\)+;\s*(?:@?chmod\(\1,\s*\d+\);)?\s*}\s*(?:(\$\w+)\s*=\s*\$\w+\."[^"]+";\s*(\$\w+)\s*=\s*@?file_get_contents\(\$\w+\);\s*\$\w+\s*=\s*base64_decode\("[^"]+"\);\s*\$\w+\s*=\s*preg_match\("[^"]+",\6\)\?true:false;\s*if\s*\(!\$\w+\){\s*\$\w+\s*=\s*"[^"]+";\s*preg_match_all\("/"\.base64_decode\(\$\w+\)\."/i",\$\w+,\$\w+\);\s*(\$\w+)\s*=\s*"[^"]+"\s*\.\s*substr\(chunk_split\(bin2hex\(\$\w+\),\s*2,\s*"\\\\x"\),\s*0,\s*-2\);\s*(\$\w+)\s*=\s*str_replace\(\$\w+\[\d\]\[\d\],\$\w+\[\d\]\[\d\]\.PHP_EOL.PHP_EOL.")?\s*@?include\s*(?|\\\\"\7\\\\";",\$\w+\);\s*@?file_put_contents\(\5,\8\);\s*\}|\1;)~msi',
            'id'   => 'dropInclude',
        ],
        [
            'full' => '~(?(DEFINE)(?\'c\'(?:/\*[^/]*/?\*/)*))(?&c)@?(eval|echo|(\$\w+)\s*=\s*create_function)(?:\/\*+\/)?\s*(?&c)\((?&c)(\'\',)?\s*([\'"?>.\s]+)?\s*\(?\s*@?\s*((?&c)base64_decode(?&c)\s*\((?&c)|(?&c)pack(?&c)\s*\(\'H\*\',|(?&c)convert_uudecode(?&c)\s*\(|(?&c)htmlspecialchars_decode(?&c)\s*\(|(?&c)stripslashes(?&c)\s*\(|(?&c)gzinflate(?&c)\s*\(|(?&c)strrev(?&c)\s*\(|(?&c)str_rot13(?&c)\s*\(|(?&c)gzuncompress(?&c)\s*\(|(?&c)urldecode(?&c)\s*\(|(?&c)rawurldecode(?&c)\s*\(|(?&c)eval(?&c)\s*\()+.*?[^\'")]+(?&c)(((?&c)\s*(?&c)\.?(?&c)[\'"]((?&c)[^\'";]+(?&c)[\'"](?&c)*\s*)+(?&c))?(?&c)\s*[\'"\);]+(?&c))+(?&c)(\s*\2\(\);(?&c))?~msi',
            'id'   => 'evalComments',
        ],
        [
            'full' => '~\@?error_reporting\(0\);\@?set_time_limit\(0\);(?:\s*rename\([^;]+;)?\s*(\$\w+)="([^"]+)";\s*\1=\@?urldecode\(\1\);\1=\@?strrev\(\1\);\@?eval\(\1\);~msi',
            'id'   => 'strrevUrldecodeEval',
        ],
        [
            'full' => '~(\$\w+\s*=\s*"\w+";\s*\@?error_reporting\(E_ERROR\);\s*\@?ini_set\(\'display_errors\',\'Off\'\);\s*\@?ini_set\(\'max_execution_time\',\d+\);\s*header\("[^"]+"\);\s*)?(\$\w+)\s*=\s*"([^"]+)";\s*(\$\w+)\s*=\s*pack\("H\*",str_rot13\(\2\)+;\s*(?:eval\(\4\);|(\$\w+)=\$\w+\(\'\',\4\);\s*\5\(\);)~msi',
            'id'   => 'evalPackStrrot',
        ],
        [
            'full' => '~\$\w+\s*=\s*\d+;\s*function\s*(\w+)\(\$\w+,\s*\$\w+\)\{\$\w+\s*=\s*\'\';\s*for[^{]+\{([^}]+\}){2}\s*\$\w{1,40}\s*=\s*((\'[^\']+\'\s*\.?\s*)+);\s*\$\w+\s*=\s*Array\(((\'\w\'=>\'\w\',?\s*)+)\);\s*eval(?:/\*[^/]\*/)*\(\1\(\$\w+,\s*\$\w+\)+;~msi',
            'id'   => 'urlDecodeTable',
        ],
        [
            'full' => '~((?:\$\w+=[\'"][^\'"]+[\'"];\s?)+)((?:\$\w+=(?:\$\w+\.?)+;)+)\s{0,50}(eval\((?:\$\w+\()+\'[^\']+\'\)+;)~msi',
            'id'   => 'evalVarChar',
        ],
        [
            'full' => '~(\$\w+\s*=\s*(base64_decode\s*\(|gzinflate\s*\(|strrev\s*\(|str_rot13\s*\(|gzuncompress\s*\(|urldecode\s*\(|rawurldecode\s*\(|htmlspecialchars_decode\s*\(|pack\(\'H\*\',\s*)+(?|"([^"]+)"|\'([^\']+)\')\);)\s*eval\("?(\$\w+)"?\);~msi',
            'id'   => 'evalVarFunc',
        ],
        [
            'full' => '~(?:/\*[^=\$\{\}/]{10,499}[^\*\$\(;\}\{=]{1,99}\*/\s*)?(\$[^\w=(,${)}]{0,50})=\'(\w{0,50})\';((?:\$[^\w=(,${)}]{0,50}=(?:\1{\d+}\.?){0,50};){1,20})(\$[^=]{0,50}=\$[^\w=(,${)}]{1,50}\(\$[^\w=(,${)}]{1,50}\(\'\\\\{2}\',\'/\',__FILE__\)\);(?:\$[^\w=(,${)}]{0,50}=\$[^\w=(,${)}]{0,50}\(\$[^\w=(,${)}]{0,50}\);){2}\$[^\w=(,${)}]{0,50}=\$[^\w=(,${)}]{0,50}\(\'\',\$[^\w=(,${)}]{0,50}\)\.\$[^\(]{0,50}\(\$[^\w=(,${)}]{0,50},\d+,\$[^\w=(,${)}]{0,50}\(\$[^\w=(,${)}]{0,50},\'@ev\'\)\);\$[^\w=(,${)}]{0,50}=\$[^\(]{0,50}\(\$[^\w=(,${)}]{0,50}\);\$[^\w=(,${)}]{0,50}=\$[^\w=(,${)}=]{0,50}=\$[^\w=(,${)}]{0,50}=NULL;@eval\(\$[^\w=(,${)}]{0,50}\(\$[^\w=(,${)}(]{0,50}\(\$[^\w=(,${)}]{0,50},\'\',\$[^\w=(,${)}]{0,50}\(\'([^\']{0,500})\',\'([^\']{0,500})\',\'([^\']{0,500})\'\){4};)unset\((?:\$[^,]{0,50},?){0,20};return;\?>.+~msi',
            'id'   => 'evalFileContent',
        ],
        [
            'full' => '~echo\s{0,50}"(\\\\\${\\\\x\d{2}(?:[^"]+(?:\\\\")*)*[^"]+)";~msi',
            'id'   => 'echoEscapedStr',
        ],
        [
            'full' => '~file_put_contents\((?:\$\w+\[[\'"]\w+[\'"]\]\.)?[\'"][/\w]+\.php[\'"],\s*(base64_decode\([\'"]([\w=/]+)[\'"]\))\)~msi',
            'id'   => 'filePutDecodedContents',
        ],
        [
            'full' => '~eval\(implode\(array_map\([\'"](\w+)[\'"],str_split\([\'"]([^\'"]+)[\'"]\)\)\)\);~msi',
            'id'   => 'evalImplodedArrStr',
        ],
        [
            'full' => '~(\$\w+)\s?=\s?\'(.*?NULL\);)\';\s*(\$\w+)\s?=\s?[\'"]([\w\\\\]+)[\'"];\s?\3\([\'"]/\(\.\*\)/e[\'"],\s?[\'"]([\w\\\\]+)[\'"],\s?NULL\);~msi',
            'id'   => 'pregReplaceCodeContent',
        ],
        [
            'full' => '~((?:\$\w+\s*\.?=\s*"[^"]*";\s*)+)(\$\w+)\s*=\s*str_replace\(\s*"([^"]+)",\s*"",\s*\$\w+\s*\);\s*(\$\w+)\s*=\s*str_replace\(\s*"([^"]+)",\s*"",\s*"([^"]+)"\s*\);\s*(\$\w+)\s*=\s*\4\(\s*\2\s*\);\s*\7\s*=\s*"[^"]+\7";\s*eval\(\s*\7\s*\);~msi',
            'id'   => 'concatVarsReplaceEval',
        ],
        [
            'full' => '~(\$\w{1,50})\s?=\s?file_get_contents\(__FILE__\);\s?\1\s?=\s?base64_decode\(substr\(\1,\s?([+-]\d+)\)\);\s*\1\s?=\s?gzuncompress\(\1\);\s*eval\(\1\);\s*die\(\);\?>\s*([^"\']+)~msi',
            'fast' => '~\$\w{1,50}\s?=\s?file_get_contents\(__FILE__\);\s?\$\w{1,50}\s?=\s?base64_decode\(substr\(\$\w{1,50},\s?([+-]\d+)\)\);\s*\$\w{1,50}\s?=\s?gzuncompress\(\$\w{1,50}\);\s*eval\(\$\w{1,50}\);\s*die\(\);\?>\s*([^"\']+)~msi',
            'id' => 'decodeFileContent',
        ],
        [
            'full' => '~((\$\w+\s*=\s*\(?(base64_decode\s*\(|gzinflate\s*\(|strrev\s*\(|str_rot13\s*\(|gzuncompress\s*\(|urldecode\s*\(|rawurldecode\s*\(|htmlspecialchars_decode\s*\()*((?:"([^"]+)";\s*)|(?:\$\w+)\)*;\s*))+)(eval\("?(\$\w+)"?\);)~msi',
            'id'   => 'evalVarFunc2',
        ],
        [
            'full' => '~((\$\w+)\s*=\s*"([^"]+)";)\s*((\$\w+)\s*=\s*array\(((\s*\d+,?)+)\);)\s*((\$\w+)\s*=\s*array\(((\s*"[^"]+",?)+)\);)\s*(\$\w+)\s*=\s*\'\';(\s*\$\w+\s*=\s*(?:\9\[\d+\]\s*\.?\s*)+;)+(.+?(\s*\$\w+\s*=\s*\w+\((?:\9\[\d+\]\s*\.?\s*)+)\);\s*eval\(\$\w+\);\s*\})~msi',
            'fast' => '~((\s*(\$\w+)\s*=\s*\w+\((\$\w+)\[\d+\]\s*\.\s*(?:\4\[\d+\]\s*\.?\s*)+)\);\s*eval\(\3\);\s*\})~msi',
            'id'   => 'evalArrays',
        ],
        [
            'full' => '~\$\w+\s?=\s?preg_replace\([\'"]/([^\'"/]+)/\w{0,2}[\'"],[\'"]([^\'"]+)[\'"],[\'"]{2}\);~msi',
            'id'   => 'pregReplaceVar',
        ],
        [
            'full' => '~function\s(\w+)\((\$\w+),\s?(\$\w+)\){\s?(\$\w+)=[\'"]{2};\s?for\(\$\w+=0;\$\w+<strlen\(\2\);\)\s?for\(\$\w+=0;\$\w+<strlen\(\3\);\$\w+\+\+,\s?\$\w+\+\+\)\s?\4\s?\.=\s?\2{\$\w+}\s?\^\s?\3{\$\w+};\s?return\s?\4;\s?};eval\(\1\(base64_decode\([\'"]([^\'"]+)[\'"]\),[\'"]([^\'"]+)[\'"]\)\);~msi',
            'id'   => 'evalFuncTwoArgs',
        ],
        [
            'full' => '~function\s(\w+)\(\$\w+\)\s?{\s?\$\w+\s?=\s?[\'"]{2};\s?unset\(\$\w+\);\s?\$\w+\s?=\s?[\'"]([^\'"]+)[\'"];\s?\$\w+\s?=\s?preg_replace\("/([^"]+)/",\s?[\'"]{2},\s?\$\w+\);\s?\$\w+\s?=\s?(?:(?:[\'"]\w+[\'"]|\$\w+)\.?)+;\s?\$\w+\s?=\s?\$\w+\([\'"]\$\w+[\'"],\s?\$\w+\);\s?@?\$\w+\(\$\w+\);\s?}\s?function\s?(\w+)\(\$\w+\)\s?{\s?\$\w+\s?=\s?[\'"](.*?)[\'"];\s?\$\w+\s?=\s?preg_replace\("/([^\'"]+)/",\s?[\'"]{2},\s?\$\w+\);\s?return\s?\$\w+\(\$\w+\);\s?}\s?\1\(\4\(\s?join\([\'"]([^\'"]+)[\'"],\s?array\(((?:[\'"][^\'"]+[\'"][,\s]*)+)\)+;~msi',
            'id'   => 'evalPregReplaceFuncs',
        ],
        [
            'full' => '~error_reporting\(0\);((?:\$\w+=\'[^;]+;)+)error_reporting\(0\);((?:\$\w+=\$\w+\(\$\w+\(\'([^\']+)\'\)\);)+\$\w+=(?:\$\w+\()+\'([^\']+)\'\)+\.(?:\$\w+\()+\'([^\']+)\'\)+;\$\w+=(?:\$\w+\()+\'([^\']+)\'\)+;\$\w+=(?:\$\w+\()+"\\\\n",\s*\'\',\s*\'([^\']+)\'\)+;(?:[^}]+\})+}\s*echo\s*(?:\$\w+\()+\'([^\']+)\'\)+);exit;~msi',
            'id'   => 'urlMd5Passwd',
        ],
        [
            'full' => '~((?:\$\w+\s?=\s?\'(?:[^\']+)\';\s?)+)((?:\$\w+\s?=\s?(?:\$\w+(?:\[[\'"]?\d+[\'"]?\])?\s?\.?\s?)+;)+\$\w+\s?=\s?\$\w+\s?\(\$\w+,(?:\$\w+(?:\[[\'"]?\d+[\'"]?\])?\s?\.?\s?)+\);\s*\$\w+\(\$\w+,(?:\$\w+(?:\[[\'"]?\d+[\'"]?\])?\s?[.,]?\s?)+\);)~msi',
            'fast' => '~((?:\$\w+\s?=\s?(?:\$\w+(?:\[[\'"]?\d+[\'"]?\])?\s?\.?\s?)+;)+\$\w+\s?=\s?\$\w+\s?\(\$\w+,(?:\$\w+(?:\[[\'"]?\d+[\'"]?\])?\s?\.?\s?)+\);\s*\$\w+\(\$\w+,(?:\$\w+(?:\[[\'"]?\d+[\'"]?\])?\s?[.,]?\s?)+\);)~msi',
            'id'   => 'ManyDictionaryVars',
        ],
        [
            'full' => '~(?:\$\w+\s?=\s{0,10}(?:[\'"][\\\\\w]+[\'"]\(\d+\s?[-+]\s?\d+\)\s?\.?\s?|[\'\. strev]+)+;)*\s?(?:\s{0,10}\$\w+\s?=\s?\$\w+\([\'"](?:edoced_46esab|etalfnizg|ecalper_rts)[\'"]\);\s{0,10})*function\s(\w+)\((?:\$\w+\s*,?\s*){1,4}\)\s?{\s?(?:\$\w+\s?=\s?(?:[\'"][\\\\\w]+[\'"]\(\d+\s?[-+]\s?\d+\)\s?\.?\s?)+;)*\s?(?:\$\w+\s?=\s?\$\w+\([\'"](?:edoced_46esab|etalfnizg|ecalper_rts)[\'"]\);\s?)*\s*\$\w+\s?=\s?\$\w+\(array\(((?:\s?"[^"]+",?)+)\),\s?[\'"]{2},\s?\$\w+\);\s*return\s?(?:\$\w+\(){2}\$\w+\)\);\s*}\s*(\$\w+\s?=\s?[\'"]\w*[\'"];)?\s?ob_start\(\);\s?\?>(.*?)<\?php\s*\$\w+\s?=\s?ob_get_clean\(\);\s?eval\(\1\((?:\$\w+\s*,?\s*){1,4}\)\);\s?\?>~msi',
            'id'   => 'evalBuffer',
        ],
        [
            'full' => '~((?:\$\w+\s?=\s?[\'"]\w*[\'"];\s?){0,50}(\$\w+)\s?=\s?[\'"]([^\'"]+)[\'"];(?:\$\w+\s?\.?=\s?(?:\$\w+{\d+}\.?)+;)+)\s?(eval\((\$\w+)\([\'"]([^\'"]+)[\'"]\)\);)~msi',
            'id' => 'evalDictionaryVars',
        ],
        [
            'full' => '~\$\w+\s?=\s?[\'"]([^\'"]+)[\'"];(?:\$\w+\s?=\s?base64_decode\([\'"][^\'"]+[\'"]\);)+\$\w+\s?=\s?\$\w+\(\$\w+\(\$\w+\)\);\$\w+\s?=\s?\$\w+\(\$\w+\);(\$\w+)\s?=\s?[\'"]{2};for\(\$\w+\s?=\s?0\s?;\s?\$\w+\s?<\s?\$\w+\s?;\s?\$\w+\+\+\){\2\s?\.=\s?\$\w+\(\(\$\w+\(\$\w+\[\$\w+\]\)\^(\d+)\)\);}eval\(\2\);return;~msi',
            'id' => 'evalFuncXored',
        ],
        [
            'full' => '~[\'"]-;-[\'"];(.*?\(\'\\\\\\\\\',\'/\',__FILE__\)\);.*?,[\'"];[\'"]\),[\'"]"[\'"]\);.*?)[\'"]-;-[\'"];((\$\w+)=[\'"]([^\'"]+)[\'"];.*?\$\w+\s?\.\s?\3,\s?[\'"]([^\'"]+)[\'"],\s?[\'"]([^\'"]+)[\'"]\)\)\).*?)[\'"]-;-[\'"];(.*?)[\'"]-;-[\'"];~msi',
            'id' => 'evalFuncExplodedContent',
        ],
        [
            'full' => '~(\$\w{0,100}\s?=\s?(?:chr\(\w{1,10}\)\s?\.?\s?){1,100};\s?(?:\$\w{0,100}\s?=\s?(?:\s?(?:[\'"][\\\\\w]{1,10}[\'"]|[\d\.]{1,5}\s[*\+\-\.]\s\d{1,5})\s?\.?)+?;\s?){1,10}(?:\$\w{0,100}\s?=\s?(?:chr\(\w{1,10}\)\s?\.?){1,100};)?\s?\$\w{1,50}\s?=\s?\$\w{1,50}\(\$\w{1,50}\((?:[\'"][^\'"]{1,500}[\'"]\s?\.?\s?)+\),\s?(?:[\'"][^\'"]{1,500}[\'"]\s?\.?\s?)+,\s?substr\(hash\([\'"]SHA256[\'"],(?:\s?[\'"]\d{1,15}[\'"]\s?\.?){2},\s?true\),\s?(\d{1,10}),\s?(\d{1,10})\),\s?OPENSSL_RAW_DATA,\s?\$\w{1,50}\);.*?)(\$\w{1,50})\s?=\s?\$\w{1,50}\([\'"]([^\'"]+)[\'"],\s*[\'"]{2},\s*[\'"]([^\'"]+)[\'"]\);\s?return\s?@eval\(((?:\$\w{1,50}\s?\()+\$\w{1,50}(?:\)\s?)+);\s?exit;~msi',
            'id' => 'evalEncryptedVars',
        ],
        [
            'full' => '~function\s(\w+)\((\$\w+),\s*(\$\w+)[^)]+\)\s*\{\s*\$\w+\s*=\s*\2;\s*\$\w+\s*=\s*\'\';\s*for\s*\(\$\w+\s*=\s*0;\s*\$\w+\s*<\s*strlen\(\$\w+\);\)\s*{\s*for\s*\(\$\w+\s*=\s*0;\s*\$\w+\s*<\s*strlen\(\3\)\s*&&\s*\$\w+\s*<\s*strlen\(\$\w+\);\s*\$\w+\+\+,\s*\$\w+\+\+\)\s*{\s*\$\w+\s*\.=\s*\$\w+\[\$\w+\]\s*\^\s*\3\[\$\w+\];\s*}\s*}\s*return \$\w+;\s*}\s*\$\w+\s*=\s*["\'][^"\']+[\'"];\s*\$\w+\s*=\s*[\'"]([^\'"]+)["\'];\s*(?:\$\w+\s*=\s*["\']+;\s*)+(?:foreach[^{]+{[^}]+}\s*)+(\$\w+)\s*=\s*\$\w+\([create_funion\'. "]+\);\s*(\$\w+)\s*=\s*\5\(["\'][^"\']*[\'"],\s*\$\w+\(\1\(\$\w+\(\$\w+\),\s*["\']([^\'"]+)["\']\)+;\s*\6\(\);~msi',
            'id' => 'xoredKey',
        ],
        [
            'full' => '~(\$\w+)=str_rot13\(\'[^\']+\'\);(\$\w+)=str_rot13\(strrev\(\'[^\']+\'\)\);(\s*eval\(\1\(\2\(\'([^\']+)\'\)+;)+~msi',
            'id' => 'evalGzB64',
        ],
        [
            'full' => '~(function\s*(_\d+)\((\$\w+)\)\s*{(\$\w+)=Array\(\'[^)]+\'\);return\s*base64_decode\(\4\[\3\]\);\})(.+?\2\(\d+\))+[^;]+;exit;~msi',
            'id' => 'evalArrayB64',
        ],
        [
            'full' => '~http_response_code\(\d{1,3}\);function\s?(\w{1,100})\(\$\w{1,50}\){if\s?\(empty\(\$\w{1,50}\)\)\s?return;\$\w{1,50}\s?=\s?"[^"]{1,500}";(?:(?:\$\w{1,50}\s?=\s?[\'"]{0,2}){1,4};){1,2}\$\w{1,50}\s?=\s?0;\$\w{1,50}\s?=\s?"";\$\w{1,50}\s?=\s?preg_replace\("[^"]{1,50}",\s?"",\s?\$\w{1,50}\);do{.*?while\s?\(\$\w{1,50}\s?<\s?strlen\(\$\w{1,50}\)\);return\s?\$\w{1,50};}eval\(\1\(hex2bin\("(\w{1,30000})"\)\)\);~msi',
            'id' => 'evalFuncBinary',
        ],
        [
            'full' => '~(\$\w{1,50}\s?=\s?\'\w{1,500}\';){1,5}\$\w{1,50}\s?=\s?(?:\$\w{1,50}\.?){1,10};\$\w{1,50}=\$\w{1,50}\([\'"]H\*[\'"],[\'"](\w{1,200})[\'"]\);\s?\$\w{1,50}\("[^"]{1,100}","(\\\\x[^\']{1,500})(\'[^\']{1,50000}\')\\\\x[^"]{1,50}",[\'"]{2}\);~msi',
            'id' => 'evalPackFuncs',
        ],
        [
            'full' => '~parse_str\s*\(((?:\s?[\'"][^\,]+[\'"]\s?\.?\s?){1,500}),\s?(\$\w{1,50})\s?\)\s?;\s?@?\s?((?:eval\s?\()?\s?\2\s?\[\s?\d{1,5}\s?\]\s?\(\s?\2\s?\[\s?\d{1,5}\s?\]\s?(?:,\s?array\s?\(\s?\)\s?,\s?array\s?\(\s?[\'"]([^\']{1,10})[\'"]\s?\.(\s?\$\w{1,50}\s?\[\s?\d+\s?\]\s?\(\s?\$\w{1,50}\s?\[\s?\d\s?\]\s?\(\s?\$\w{1,50}\s?\[\s?\d{1,2}\s?\]\s?\(\s?)|\(\s?\2\s?\[\s?\d{1,5}\s?\]\s?\())\s?([\'"][^\']+[\'"]\s?)(\)\s*)?\)\s*\)\s*\.\s?[\'"]([^\'"]{1,10})[\'"]\s?\)\s?\)\s?;~msi',
            'id' => 'parseStrFunc',
        ],
        [
            'full' => '~eval\("\\\\(\$\w+)=(gz[^\)]+\)\);)"\);eval\("\?>"\.\1\);~msi',
            'id' => 'evalGzinflate',
        ],
        [
            'full' => '~function\s?(\w{1,50})\(\$\w{1,50}\)\s?{\s?(\$\w{1,50})\s?=\s?\("([^"]{1,500})"\);\s?(?:\$\w{1,50}\s?=\s?(?:"[^"]+"|\$\w{1,50}|[\'"]{2});\s?)+for\(\$\w{1,50}\s?=\s?0;\s?\$\w{1,50}<strlen\(\$\w{1,50}\);\s?\)\s?{\s?for\(\$\w{1,50}\s?=\s?0;\s?\(\$\w{1,50}<strlen\(\2\)\s?&&\s?\$\w{1,50}<strlen\(\$\w{1,50}\)\);\s?\$\w{1,50}\+\+,\$\w{1,50}\+\+\){\s?(?:\$\w{1,50}\s?=\s?"[^"]+";\s?){1,2}\$\w{1,50}\s?\.=\s?\$\w{1,50}{\$\w{1,50}}\s?\^\s?\$\w{1,50}{\$\w{1,50}};\s?\$\w{1,50}\s?=\s?"[^"]+";\s?}\s?}\s?return\s?\$\w{1,50};\s?}\s?(\$\w{1,50})\s?=\s?preg_replace\("([^"]+)",\s?"",\s?"([^"]+)"\);\s?(?:\s?\$\w{1,50}\s?=\s?(?:"[^"]+"|\w{1,50}\(\$\w{1,50}\("[^"]+"\)\)|\$\w{1,50}\(\)\.\s?\w{1,50}\(\$\w{1,50}\("[^"]+"\)\)|"[^"]+"\s*\.\s*\w+\(\$\w+\("[^"]+"\)\));\s?){1,50}(\$\w{1,50}\(\$\w{1,50},(?:\$\w{1,50}\.?)+\);)\s?(?:\$\w{1,50}\s?=\s?"[^"]+";\s?|include\s?\$\w{1,50};\s){1,50}~msi',
            'id' => 'funcVars',
        ],
        [
            'full' => '~(\$\w+)\s*=\s*"([^"]+)";(?:\$\w+\s*=\s*(?:\1\[\d+\][\.;])+)+@?(?:\$\w+[\(,])+((?:\1\[\d+\][\.;\)])+)\)\),\$\w+\[\d+\],\$\w+\[\d+\]\);~msi',
            'id' => 'dictVars',
        ],
        [
            'full' => '~\$\w{1,50}\s?=\s?(?:\'\'|\.|chr\(\d+\)|\'\w+\')+\s?;\$\w{1,50}\s?=\s?\$\w{1,50}\(\'\',array\(((?:"[^"]+",?)+)\)\);(?:\$\w{1,50}\s?=\s?(?:\'\'|\.|chr\(\d+\)|\'\w+\')+\s?;)+\$\w{1,50}\s?=\s?\$\w{1,50}\(\'\',\$\w{1,50}\(((?:\'[^\']+\'\s?\.?)+)\)\);\$\w{1,50}\(\);\$\w{1,50}\(\$\w{1,50}\(\$\w{1,50}\)\);~msi',
            'id' => 'decodedDoubleStrSet',
        ],
        [
            'full' => '~(\$\w{1,100})=[\'"]([^"\']+)[\'"];(\$\w{1,100}=(?:(?:strrev\("[^"]+"\)|"[^"]+")\.?)+;(\$\w{1,100})\s?=\s?\$\w{1,100}\([\'"]([^"\']+)[\'"]\);\$\w{1,100}=(?:(?:strrev\("[^"]+"\)|"[^"]+")\.?)+;(\$\w{1,100})\s?=\s?\$\w{1,100}\(\'\1\',\$\w{1,100}\);\$\w{1,100}\(\1\);)~msi',
            'fast' => '~(\$\w{1,100})=[\'"]([^"\']+)[\'"];(\$\w{1,100}=(?:(?:strrev\("[^"]+"\)|"[^"]+")\.?)+;(\$\w{1,100})\s?=\s?\$\w{1,100}\([\'"]([^"\']+)[\'"]\);\$\w{1,100}=(?:(?:strrev\("[^"]+"\)|"[^"]+")\.?)+;(\$\w{1,100})\s?=\s?\$\w{1,100}\(\'\$\w{1,100}\',\$\w{1,100}\);\$\w{1,100}\(\$\w{1,100}\);)~msi',
            'id' => 'createFuncStrrev',
        ],
        [
            'full' => '~(\$\w+)\s*=\s*create_function\(\'\$\w+\',strrev\(\'[^\']+\'\)\);\s*\1\(strrev\(\'([^\']+)\'\)\);~msi',
            'id' => 'strrevBase64',
        ],
        [
            'full' => '~(\$\w+)\s*=\s*"([^"]+)";if\(!function_exists\("([^"]+)"\)\){function\s*\3\(\$\w+\)\{\$\w+=(\d+);foreach\(array\(((?:"[0-9a-f]+",?)+)\)as\$\w+=>\$\w+\)[^}]+\}\}\3\(\1\."([^"]+)"\);~msi',
            'id' => 'customDecode',
        ],
        [
            'full' => '~((?:\$\w+\s*=\s*[abcdehnoprstux\._64\'"]+;\s*)+)(\$\w+="?\w+["\(\)]*;\s*)+\$\w+="[^"]+";\s*\$\w+=(\$\w+\("([^"]+)"\);)[^/]+/pre>\';~msi',
            'id' => 'expDoorCode',
        ],
        [
            'full' => '~include\((base64_decode\(\'([^\']+)\'\))\);~msi',
            'id' => 'includeB64',
        ],
        [
            'full' => '~(\$\w+)=strrev\(\'nib2xeh\'\);(\$\w+)=array\(((?:\'[^\']+\',?)+)\);(\$\w+)\s*=\s*\'\';for\s*\(\$\w+\s*=\s*0;\s*\$\w+\s*<\s*\d+;\s*\$\w+\+\+\)\s*\{\4\s*\.=\s*str_replace\(array\(((?:\'([^\']*)\',?)+)\),\s*array\(((?:\'[^\']*\',?)+)\),\s*\2\[\$\w+\]\);\}(?:(?:\$\w+=)+(?:true;|hex2bin))?(?:eval\(\1\(\4\)\);)*~msi',
            'id' => 'nib2xeh',
        ],
        [
            'full' => '~error_reporting\(0\);\s*\$\w+\s*=\s*"[0-9a-f]{32}";\s*((\$\w+)\s*=\s*((?:\w+\()+)\'([^\']+)\'\)+;\$\w+\s*=\s*"";for\s*\(\$\w+\s*=\s*0;\s*\$\w+\s*<\s*120;\s*\$\w+\+\+\)[^}]+}\$\w+\s*=\s*strlen\(\2\);\$\w+\s*=\s*strlen\(sha1\(hash\(str_rot13\("fun256"\),\s*md5\(\$\w+\)+;for[^}]+}[^}]+}eval\(\$\w+\);)~msi',
            'id' => 'fun256',
        ],
        [
            'full' => '~(\$\w+)\s*=\s*((?:\$?\w+\()+)\'([^\']+)\'\)+;\s*if\s*\(\s*\'\w{40,40}\'\s*==\s*sha1\(\s*\1\s*\)\s*\)\s*{\s*\1\s*=\s*gzinflate\s*\(\s*gzinflate\s*\((?:\s*base64_decode|\$\w+)\(\s*\1\s*\)\s*\)\s*\)\s*;\s*\$\w{1,10}\s*=\s*""\s*;for\s*\([^)]+\)\s*{[^}]+}\s*(?:\s*\$[^;]+;\s*)+for\s*\([^)]+\)\s*{\s*\$[^;]+;\s*if\s*\([^)]+\)\s*{[^}]+}(?:\s*\$[^;]+;\s*)+}\s*eval\s*\(\s*\$\w+\s*\)\s*;[^}]*}\s*else\s*{[^}]+}~msi',
            'id' => 'fun256',
        ],
        [
            'full' => '~(\$\w+)\s?=\s?\'([^\']+)\';\s?(\$\w+\s?=\s?(?:\1\[\d+\]\.?)+;\s?(?:(?:\$\w+\s?=\s?(?:\$\w+\()+(?:(?:\1\[\d+\])\.?|"[^"]+"\.?)+)\)+;\s?)+)(\$\w+\s?=\s?\$\w+\(\'H\*\',\s?\$\w+\(\'/\[([^]]+)\]\+/\w\',\'\',\s?(\$\w+)\(\1\)\)\);\s?eval\(\$\w+\);)~msi',
            'id' => 'evalPackPreg',
        ],
        [
            'full' => '~((?:\$_\w{1,50}\s?=\s?"[^"]{1,100}";)+)@eval\("\?>"\.(\$_\w{1,50}\((/\*.*?\*\/)\$\w{1,50}\("[^"]+"\)\))\);~msi',
            'id' => 'evalVarWithComment',
        ],
        [
            'full' => '~(?(DEFINE)(?\'s\'((?:chr\([0-9a-fx]+([/\-+\*][0-9a-fx]+)?\)|str_rot13\(\'[^\']+\'\)|base64_decode\(\'[^\']+\'\)|\'[^\']*\')[\.]?)+))(\$\w+)=create_function\(((?P>s)),((?P>s))\);\4\(base64_decode\(((?P>s))\)\);~msi',
            'id' => 'createFuncObf',
        ],
        [
            'full' => '~(\$[\w_]{1,50})\s*=\s*\[\s*base64_decode\s*\(\s*[\'"]([\w=]+)[\'"]\s*\)\s*,\s*([^;]{2,200})\]\s*;\s*(if\s*[^}]+}\s*else\s*{[^}]+}\s*function\s\w+[^}]+})~mis',
            'fast' => '~(\$[\w_]{1,50})\s*=\s*\[\s*base64_decode\s*\(\s*[\'"]([\w=]+)[\'"]\s*\)\s*,\s*([^;]{2,200})\]\s*;\s*(if\s*[^}]+}\s*else\s*{[^}]+}\s*function\s\w+[^}]+})~mis',
            'id' => 'base64Array',
        ],
        [
            'full' => '~((?:\$[\w]{1,34}\s*=\s*[\'"](?:[\\\\\w]{1,32}\\\\[\\\\\w]{1,32})[\'"]\s*;\s*){1,2}\s*(?:\$[\w]{1,34}\s*=\s*[\'"][^\'"]+[\'"];){1,3})\s*@?eval\s*\(\s*([^;]{0,100})\);~msi',
            'id' => 'simpleVarsAndEval',
        ],
        [
            'full' => '~(if\(defined\(\'PHP_MAJOR_VERSION\'\)[^{]{1,30}{\s*if[^}]+}\s*}\s*.*?if\s*\(\s*!\s*function_exists\s*\(\s*\'nel\'\s*\)\s*\)\s*{\s*)(function\s*nel\s*\(\s*\$i\s*\)\s*{\s*\$[\w]+\s*=\s*array\(([^)]+)\);[^}]+})(.*}\s*exit\s*;\s*}\s*})~mis',
            'id' => 'replaceFuncWithBase64DecodeArray',
        ],
        [
            'full' => '~\$\w{1,50}\s?=\s?(?:\'[^\']+\'\.?)+;\$\w{1,50}\s?=\s?create_function\(\'\$\w{1,50}\',\$\w{1,50}\);((?:\$\w{1,50}\s?=\s?(?:\'[^\']+\'\.?)+;)+)\$\w{1,50}\(((?:\$\w{1,50}\()+"[^"]+"\)+;)~msi',
            'id' => 'createFuncVars',
        ],
        [
            'full' => '~\$\w{1,50}\s?=\s?json_decode\((base64_decode\([\'"][^\'"]+[\'"]\))\);~msi',
            'id' => 'jsonDecodedVar',
        ],
        [
            'full' => '~if\s?\(file_put_contents\(\$\w{1,50}\.[\'"][^\'"]+[\'"],(base64_Decode\([\'"][^\'"]+[\'"]\))\)\)echo\s?[\'"][^\'"]+[\'"];~msi',
            'id' => 'filePutPureEncodedContents',
        ],
        [
            'full' => '~function\s?(\w{1,50})\((\$\w{1,50})\){for\s?\((\$\w{1,50})\s?=\s?0;\s?\3\s?<=\s?strlen\(\2\)-1;\s?\3\+\+\s?\){(\$\w{1,50})\s?\.=\s?\2{strlen\(\2\)-\3-1};}return\(\4\);}((?:eval\(\1\(\'[^\']+\'\)\);)+)~msi',
            'id' => 'evalFuncReverse',
        ],
        [
            'full' => '~function\s?(\w{1,50})\(\$\w{1,50}\)\s?{return\s?base64_decode\(\$\w{1,50}\);}(?:.*?\1\("[^"]+"\))+~msi',
            'fast' => '~function\s?\w{1,50}\(\$\w{1,50}\)\s?{return\s?base64_decode\(\$\w{1,50}\);}(?:.*?\w{1,50}\("[^"]+"\))+~msi',
            'id' => 'base64decodeFuncs',
        ],
        [
            'full' => '~error_reporting\(\s?0\s?\);\s?(\$\w{1,50})\s?=\s?[\'"]([^\'"]+)[\'"];\s?(\$\w{1,50})\s?=\s?(?:\1\[\d+\]\.?)+;\s?(\$\w{1,50})\s?=\s?eval\s?\(\3\s?\("((?:\\\\x\w{1,50})+)"\s?\([\'"]{1,2}([^"\']+)[\'"]{1,2}\)\)\);\s?create_function\(\'\',\s?\'}\'\.\4\.\'//\'\);~msi',
            'fast' => '~error_reporting\(\s?0\s?\);\s?(\$\w{1,50})\s?=\s?[\'"]([^\'"]+)[\'"];\s?\$\w{1,50}\s?=\s?(?:\$\w{1,50}\[\d+\]\.?)+;\s?(\$\w{1,50})\s?=\s?eval\s?\(\$\w{1,50}\s?\("((?:\\\\x\w{1,5})+)"\s?\([\'"]{1,2}([^"\']+)[\'"]{1,2}\)\)\);\s?create_function\(\'\',\s?\'}\'\.\$\w{1,50}\.\'//\'\);~msi',
            'id' => 'evalCreateFuncWithDictionaryVar',
        ],
        [
            'full' => '~error_reporting\(\s?0\s?\);\s?(\$\w+)\s?=\s?"([^"]+)";(?:\$\w+\s?=\s?(?:\$\w+\[\d+\]\.?)+;)+function\s\w+\((?:\$\w+,?){5}\){\s*return\s?(?:\$\w+\.?){5};}(?:\$\w+\s?=\s?(?:[\'"][^\'"]*[\'"]\.?)+;)+\$\w+\s?=\s?\w+\((?:\$\w+,?){5}\);(?:\$\w+\s?=\s?(?:[\'"][^\'"]*[\'"]\.?)+;)+function\s(\w+)\((?:\$\w+,?){3}\){\s*return\s?(?:\$\w+\.?){3};}\$\w+\s?=\s?((?:\3\((?:(?:\$\w+|\.?[\'"][^"\']*[\'"]\.?)+,?){3}\)\.)+["\']{1,2}([^"\']+)[\'"]{1,2}\.\$\w+);\$\w+\(\'\',\s?\'}\'\.\$\w+\.\'//\'\);~msi',
            'id' => 'evalCreateFuncWithVars',
        ],
        [
            'full' => '~(?(DEFINE)(?\'v\'(?:\$(?:_GET|GLOBALS)\{\2\}[\{\[][a-fx\d]+[\}\]])))error_reporting\([^)]+\);define\(\'([^\']+)\',\s*\'[^\']+\'\);\$(?:_GET|GLOBALS)\[\2\]\s*=\s*explode\(\'([^\']+)\',\s*gzinflate\(substr\(\'(.*)\',([0-9a-fx]+),\s*([0-9\-]+)\)\)\);(?:.{1,250}(?:(?&v)|curl|\\\\[0-9a-fx]+))+[^;]+;(?:\s*(\$\w+\((?:\$\w+\.?)+\);|eval\(\$\w+\);\s*\}\s*function\s*\w+[^1]+!1\);\s*return\s*curl_exec\(\$\w+\);)?[^;]+;)~msi',
            'id' => 'explodeSubstrGzinflate',
        ],
        [
            'full' => '~error_reporting\([^)]+\);header\([^)]+\);ini_set\([^)]+\);ini_set\([^)]+\);define\(\'PASSWD\',\'[^)]+\);define\(\'VERSION\',\'Bypass[^)]+\);define\(\'THISFILE\'[^;]+;define\(\'THISDIR\',[^;]+;define\(\'ROOTDIR\',[^;]+;(((?:\$\w+=\'[^\']+\';)+)((?:\$\w+=str_replace\(\'[^\']+\',\'\',\'[^\']+\'\);)+)(\$\w+)=\$\w+\(\$\w+\(\'[^\']+\'\),\$\w+\(\'[^\']+\'\)\);\4\(((?:\$\w+\.?)+)\);)~msi',
            'id' => 'base64Vars',
        ],
        [
            'full' => '~function\s*(\w+)\(\$\w+,\$\w+\)\s*\{\$\w+=array\(\);for\(\$\w+=0;\$\w+<256;\$\w+\+\+\)(?:[^}]+}){2}return\s*\$res;\s*}\s*function\s*(\w+)\(\)\s*{(?:[^}]+}){12}(?:\$\w+=(?:chr\([0-9b]+\)\.?)+;)+\2\(\);@?eval\(\$\w+\(\1\(\$\{\'[^\']+\'\.(?:\(\'.\'\^\'.\'\)\.?)+}\[\(\'.\'\^\'.\'\)\.\(\'.\'\^\'.\'\)\],\$\w+\("([^"]+)"\)\)\)\);exit;~msi',
            'id' => 'chr0b',
        ],
        [
            'full' => '~@?error_reporting\(0\);\s*@?ini_set\(\'error_log\',NULL\);\s*@?ini_set\(\'log_errors\',0\);\s*(\$\w+)=strrev\([base64_decode\'\.]+\);(\$\w+)=gzinflate\(\1\(\'([^\']+)\'\)\);\s*create_function\("","}\2//"\);~msi',
            'id' => 'createFuncPlugin',
        ],
        [
            'full' => '~((?:(\$\w+)\s*=\s*(?:str_replace\((?:"[^"]+"|\'[^\']+\'),\s*(?:""|\'\'),\s*(?:"[^"]+"|\'[^\']+\')\);\s*|\'([^\']+)\';))+)\s*(eval\s*\((?:\$\w+\()+(?:\'([^\']+)\'|\$\w+)\)+;)~msi',
            'id' => 'strreplaceEval',
        ],
        [
            'full' => '~(\$\w+)\s*\s*=\s*"[a-f0-9]{32,40}";\s*(\$\w+)\s*=\s*"[create_fution".]+;\s*(\$\w+)=@?\2\(\'(\$\w+),(\$\w+)\',\'[eval\'\.]+\("\\\\\1=\\\\"\5\\\\";\?>"[gzinflate\.\']+\(\s*[base64_decode\'\.]+\(\4\)+;\'\);\s*@?\$\w+\("([^"]+)",\1\);~msi',
            'id' => 'hackM19',
        ],
        [
            'full' => '~(\$\w+)\s*=\s*strrev\("[create_funtio"\.\s]+\);\s*(\$\w+)\s*=\s*\1\(\'(\$\w+)\',\s*strrev\(\';\)+\w+\$\([bas64_dcode\'\.\s]+\([bzdecompres\'\.\s]+">\?"\([eval\.\'\s]+\)\);\s*\2\("([^"]+)"\);~msi',
            'id' => 'ev404',
        ],
        [
            'full' => '~class\s+(_\w+)\s*{\s*private\s+static\s*\$\w{1,5}\s*;\s*public\s*static\s*function\s*(\w+)[^}]{1,1000}\s*}\s*private\s*static\s*function\s*\w{1,10}\s*\(\s*\)\s*{self::\$\w{1,5}\s*=\s*array\s*\(\s*([^)]+)\s*\);\s*}\s*}\s*class\s+(_\w+)\s*{\s*private\s+static\s*\$\w{1,5}\s*;\s*public\s*static\s*function\s*(\w+)[^}]{1,1000}\s*}\s*private\s*static\s*function\s*\w{1,10}\s*\(\s*\)\s*{self::\$\w{1,5}\s*=\s*array\s*\(\s*([^)]+)\s*\);\s*}\s*}\s*(.{1,5000}exit\s*;\s*})~mis',
            'id' => 'twoHashFunc',
        ],
        [
            'full' => '~(\s*function\s*(\w+)\((\$\w+)\)\s*\{\s*(?:\$\w+\s*=\s*[gzinflatebs64_dco\'\.]+;\s*)+\3\s*=\s*(?:\$\w+\()+\3\)+;\s*return\s*\3;}(\$\w+)\s*=\s*\'([^\']+)\';\s*(\$\w+)\s*=\s*\'\2\';\s*\3\s*=\s*\6\(\'[^)]+\);\s*(\$\w+)\s*=\s*\3\(\'\',\6\(\4\)+;\7\(\);)\s*\w+\(\d+(,\'[^\']+\',\'[^\']+\')?\);~msi',
            'id' => 'setVars',
        ],
        [
            'full' => '~(?:\$\w+=\'[gzuncompresbae64_dtfi\.\']+;\s*)+\$\w+=\$\w+\(\'(\$\w+)\',\'[eval\'\.]+\(\1\);\'\);\s*(\$\w+)=\'([^\']+)\';\s*\$\w+\("\?>"\.(\$\w+\()+\2\)+;~msi',
            'id' => 'createFuncGzB64',
        ],
        [
            'full' => '~(\$\w{1,50})=(?:[\'"][create_funcion]+[\'"]\.?)+;\$\w{1,50}=\1\([\'"](\$\w{1,50})[\'"],(?:[\'"][eval(gzuncomprsb64_d]+[\'"]\.?)+[\'"][decode(]+\2\)+;[\'"]\);\$\w{1,50}\([\'"]([^\'"]+)[\'"]\);~msi',
            'id' => 'createFuncGzB64',
        ],
        [
            'full' => '~(\$\w+)=strrev\(\'[base64_dco]+\'\);\s?(\$\w+)=gzinflate\(\1\(\'([^\']+)\'\)\);\s?create_function\("","}\2//"\);~msi',
            'id' => 'createFuncGzInflateB64',
        ],
        [
            'full' => '~(\$\w+)\s*=\s*(\(?\s*gzinflate\s*\(\s*base64_decode\s*)\(\s*\'([^\']+)\'\s*\)\s*\)\s*\)?\s*;\s*\$\w+\s*=\s*@?create_function\(\'([^\']*)\',\s*(?:\1|\'@?eval\(\4\)[^\']+\')\)\s*;\s*@?\$\w+(?:\(\)|\(\1\));~msi',
            'id' => 'createFuncGzInflateB64',
        ],
        [
            'full' => '~(\$\w+)="((?:\\\\\w+)+)";((\$\w+)=\1\("[^"]+"\);)@(eval\(\1\("[^"]+"\)\);)(\$\w+=(?:\$\w+\[\d+\]\.?)+;)((\$\w+)=(\$\w+)\(\1\("([^"]+)"\),-1\);)((?:\$\w+=(?:\$\w+\[\d+\]\.?)+;)+)@(eval\(\$\w+\(\1\("[^"]+"\)\)\));~msi',
            'id' => 'wsoShellDictVars',
        ],
        [
            'full' => '~error_reporting\(\d+\);(\$\w+)="([^"]+)";(\$\w+)=explode\("([^"]+)","([^"]+)"\);foreach\(\3\sas\s\$\w+=>\$\w+\){\$\w+=preg_split\("//",\$\w+,-1,[^)]+\);\3\[\$\w+\]=implode\("",array_reverse\(\$\w+\)\);}(\$\w+)=explode\("([^"]+)","([^"]+)"\);foreach\(\6\sas\s\$\w+=>\$\w+\){\${\$\w+}=\3\[\$\w+\];}function\s(\w+)\(\$\w+,\$\w+\){\$\w+=\${"[^"]+"}\["([^"]+)"\]\("//",\$\w+,-1,[^)]+\);foreach\(\$\w+\sas\s\$\w+=>\$\w+\){\$\w+\[\$\w+\]=\${"[^"]+"}\["([^"]+)"\]\(\${"[^"]+"}\["([^"]+)"\]\(\$\w+\)\+\$\w+\);}\$\w=\${"[^"]+"}\["([^"]+)"\]\("",\$\w+\);return\s\$\w+;}(\$\w+)=\9\(\14,-2\);@ini_set\(\'[^\']+\',\'[^\']+\'\);((?:\$\w+=(?:\$\w+\[\d+\]\.?)+;)(\$\w+)=(?:\$\w+\[\d+\]\.?)+;)function\s(\w+)\(\$\w+\){\$\w+=\9\(\$\w+,1\);\$\w+=strtr\(\$\w+,"([^"]+)","([^"]+)"\);return\s\$\w+;}((?:\$\w+\.?=(?:\$\w+\[\d+\]\.?)+;)+)(\$\w+)=\${"[^"]+"}\["[^"]+"\]\(\'(?:\$\w+,?)+\',(\$\w+)\(\17\("([^"]+)"\)\)\);@\${"[^"]+"}\["[^"]+"\]\((?:@\$\w+,?)+\);~msi',
            'id' => 'funcDictVars',
        ],
        [
            'full' => '~((\$\w{1,10})\s*=\s*\(\s*[\'"]([^\'"]{40,50000})[\'"]\s*\)\s*;\s*(\$\w{1,10})\s*=\s*base64_decode\s*\(\s*\2\s*\)\s*;)\s*(\$\w{1,10}\s*=\s*fopen\s*[^;]+;\s*echo\s*fwrite[^;]+;\s*fclose[^;]+;)~msi',
            'id' => 'funcFile2',
        ],
        [
            'full' => '~function\s*(\w+)\((\$\w+)\)\s*\{\s*\2=((?:\w+\()+)\2(\)+);\s*for\(\$\w=0;\$\w+<strlen\(\2\);\$\w+\+\+\)\s*\{\s*\2\[\$\w+\]\s*=\s*chr\(ord\(\2\[\$\w+\]\)-(\d+)\);\s*\}\s*return\s*\2;\s*\}eval\(\1\(("[^"]+")\)\);~msi',
            'id' => 'sec7or',
        ],
        [
            'full' => '~error_reporting\(0\);\s*class\s*(\w+)\{\s*private\s*\$\w+=\s*array\(\s*((?:"[^"]+"=>"[^"]+",?\s*)+)\)\s*;\s*public\s*function\s*(\w+)\s*\(\s*\$\w+,\s*\$\w+\s*\)\s*{[^}]+}\s*public\s*function\s*(\w+)\s*\(\$\w+,\$\w+\)\s*{[^}]+}\s*private\s*function\s*\w+\((?:\$\w+,?){7}\)\s*{[^}]+}return\s*array\((?:\$\w+,?){3}\);}}\s*(\$\w+)=new\s*\1;\s*(\$\w+)=\5->\3\(\'tmhapbzcerff\',array\(\'onfr\',\'_qrpbqr\',\'fgeeri\'\)\);\5->\4\(\6,\'\'\);\s*die\(\);~msi',
            'id' => 'classWithArrays',
        ],
        [
            'full' => '~error_reporting\(0\);(\s*(\$\w+)="[asert\."]+;\s*\$(\w+)=\2\(strrev\("([^"]+)"\)\);\s*\$\{\'\3\'\};)~msi',
            'id' => 'assertStrrev',
        ],
        [
            'full' => '~error_reporting\(0\);\$\w+\="[^"]+";\$\w+\=explode\("[^"]+","[^"]+"\);foreach\(\$\w+ as \$\w+\=\>\$\w+\)\{\$\w+\=preg_split\("//",\$\w+,\-1,PREG_SPLIT_NO_EMPTY\);\$\w+\[\$\w+\]\=implode\("",array_reverse\(\$\w+\)\);\}\$\w+\=explode\("[^"]+","[^"]+"\);foreach\(\$\w+ as \$\w+\=\>\$\w+\)\{\$\{\$\w+\}\=\$\w+\[\$\w+\];\}function \w+\(\$\w+,\$\w+\)\{\$\w+\=\$\{"[^"]+"\}\["\w+"\]\("//",\$\w+,\-1,PREG_SPLIT_NO_EMPTY\);foreach\(\$\w+ as \$\w+\=\>\$\w+\)\{\$\w+\[\$\w+\]\=\$\{"[^"]+"\}\["[^"]+"\]\(\$\{"[^"]+"\}\["\w+"\]\(\$\w+\)\+\$\w+\);\}\$\w+\=\$\{"[^"]+"\}\["\w+"\]\("",\$\w+\);return \$\w+;\}\$\w+\=\w+\(\$\w+,\-2\);@ini_set\(\'memory_limit\',\'1024M\'\);(?:\$\w+\=(?:\$\w+\{\d+\}\.?)+;)+function \w+\(\$\w+\)\{\$\w+\=\w+\(\$\w+,(\d+)\);\$\w+\=strtr\(\$\w+,"([^"]+)","([^"]+)"\);return \$\w+;\}(?:\$\w+\.?=(?:\$\w+\{\d+\}\.?)+;)+\$\w+\=\$\{"[^"]+"\}\["\w+"\]\(\'\$\w+,\$\w+,\$\w+,\$\w+\',\$\w+\(\w+\("([^"]+)"\)\)\);@\$\{"[^"]+"\}\["\w+"\]\(@\$\w+,@\$\w+,@\$\w+,@\$\w+,@\$\w+,@\$\w+\);~msi',
            'id' => 'b64strtr',
        ],
        [
            'full' => '~error_reporting\(\d\);function\s(\w{1,50})\(\$\w{1,50},\$\w{1,50}\){if\(file_exists\("[^"]+"\)\){touch\(__FILE__,filemtime\("[^"]+"\)\);}\$\w{1,50}=str_replace\(array\(\'([^\']+)\',\'([^\']+)\'\),array\(\'([^\']+)\',\'([^\']+)\'\),\$\w{1,50}\);\$\w{1,50}=strrev\(\'[base64]+\'\)\."_"\.strrev\(\'[decode]+\'\);\$\w{1,50}=\$\w{1,50}\(\$\w{1,50}\);\$\w{1,50}=strrev\(\'[gzinflate]+\'\);return@\$\w{1,50}\(\$\w{1,50}\);}\s?\$\w{1,50}=\'([^;]+;)([^\']+)">\';preg_match\(\'#\6\(\.\*\)">#\',\$\w{1,50},\$\w{1,50}\);\$\w{1,50}=\$\w{1,50}\[1\];\$\w{1,50}=\1\(\$\w{1,50},\$\w{1,50}\);if\(isset\(\$\w{1,50}\)\){eval\(\$\w{1,50}\);}~msi',
            'id' => 'gzB64strReplaceDataImage',
        ],
        [
            'full' => '~(\$\w{1,50})=array\((?:base64_decode\([\'"][^\'"]+[\'"]\),?){2}base64_Decode\(strrev\(str_rot13\(explode\(base64_decode\([\'"][^\'"]+[\'"]\),file_get_contents\(__FILE__\)\)\[1\]\){4};preg_replace\(\1\[0\],serialize\(eval\(\1\[2\]\)\),\1\[1\]\);exit\(\);\s?\?>\s*([^\s]{1,})~msi',
            'id' => 'serializeFileContent',
        ],
        [
            'full' => '~(function\s\w{1,50}\(\$\w{1,50}\)\s?{\s?global\s(?:\$\w{1,50},?\s*)+;\s*\$\w{1,50}\(\$\w{1,50},\s?\$\w{1,50},\s?\$\w{1,50}\(\)\s?\+\s?\w{1,50}\(\$\w{1,50}\),\s?(?:\$\w{1,50}\s?,?\.?\s*)+\);\s*}\s*global\s?(?:\$\w{1,50},?\s*)+;\s*(?:\$\w{1,50}\s?=\s?\'[^\']+\';\s*)+function\s?\w{1,50}\(\$\w{1,50}\)\s{\s*global\s?(?:\$\w{1,50},?\s*)+;.*?return\s\$\w{1,50}\(\$\w{1,50}\);\s}\s*(?:\$\w{1,50}\s?=\s?\'[^\']*\';\s*)+(?:function\s\w{1,50}\(.*?(?:\$\w{1,50}\s?=\s?\'[^\']*\';\s*)+)+(?:\$\w{1,50}\s\.?=\s\$\w{1,50};\s*)+.*?extract\(\w{1,50}\(get_defined_vars\(\)\)\);)\s*(\$\w{1,50}\(\d\);\s*\$\w{1,50}\(\$\w{1,50},\s?0\);\s*\$\w{1,50}\s=\s\$\w{1,50}\(\$_REQUEST,\s?\$_COOKIE,\s?\$_SERVER\);.*?\$\w{1,50}\(\$\w{1,50}\);\s*echo\s?\$\w{1,50};)~msi',
            'id' => 'globalVarsManyReplace',
        ],
        [
            'full' => '~\$\w{1,50}\s{0,100}=\s{0,100}"([^"]{1,50000})";\s?(\$\w{1,50}\s?=\s?(?:["][^"]{1,5}["]\.?)+;\s?\s?(?:\s?\$\w{1,50}\s?\.?=(?:\s?(?:\s?"[^"]+"|\$\w{1,50})\s?\.?)+;\s?)+)\$\w{1,50}\s?\(\s?\$\w{1,50},((?:\$\w{1,50}\()+\$\w{1,50}\)+),"[^"]{1,100}"\);~msi',
            'id' => 'concatVarsPregReplace',
        ],
        [
            'full' => '~(?:\$\w{1,50}\s?=\s?(?:"[^"]+"\.?)+;)+\s?echo\sjson_encode\(array\([\'"][^"\']+[\'"]=>@\$\w{1,50}\(__FILE__,(\$\w{1,50}\([\'"][^"\']+[\'"]\)\))>0,[\'"][^"\']+[\'"]=>__FILE__\)\);exit;~msi',
            'id' => 'filePutContentsB64Decoded',
        ],
        [
            'full' => '~(\$\w{1,50})\s?=\s?base64_decode\([\'"][^\'"]+[\'"]\);\s?\$\w{1,50}\s?=\s?\$_POST\[[\'"][^\'"]+[\'"]\]\.[\'"][^\'"]+[\'"];\s?\$\w{1,50}\s?=\s?fopen\([\'"][^\'"]+[\'"]\.\$\w{1,50},\s?[\'"]w[\'"]\);\s?fwrite\(\$\w{1,50},\1\);~msi',
            'id' => 'fwriteB64DecodedStr',
        ],
        [
            'full' => '~file_put_contents\(\$_SERVER\[\'[^\']+\'\]\.\'[^\']+\',base64_decode\(\'[^\']+\'\)\);~msi',
            'id' => 'filePutContentsB64Content',
        ],
        [
            'full' => '~((\$\w{1,50})\s?=\s?((?:chr\(\d{1,5}\)\.?)+);)(\$\w{1,50})\s?=\s?(?:\2\[\d{1,5}\]\.?)+;(\$\w{1,50})\s?=\s?(?:\2\[\d{1,5}\]\.?)+;\4\(\5\(null,\s?((?:\2\[\d{1,5}\]\.?)+)\)\);~msi',
            'id' => 'chrDictCreateFunc',
        ],
        [
            'full' => '~(?:function\s\w{1,50}\((?:\$\w{1,50}\,?)+\){return\sstr_replace\((?:\$\w{1,50}\,?)+\);}\s?){3}(\$\w{1,50})\s?=\s?[\'"]([^\'"]+)[\'"];\s?\$\w{1,50}\s?=\s?\w{1,50}\([\'"]([^\'"]+)[\'"],\'\',\1\);\s?(?:\$\w{1,50}\s?=\s?[\'"][^\'"]+[\'"];\s?\$\w{1,50}\s?=\s?\w{1,50}\([\'"][^\'"]+[\'"],\'\',\$\w{1,50}\);\s?){2}\$\w{1,50}\s?=\s?[\'"][^\'"]+[\'"];\s?\$\w{1,50}\s?=\s?\$\w{1,50}\(\$\w{1,50},\$\w{1,50}\.\'\(\'\.\1\.\'\(\'\.\$\w{1,50}\.\'\)\);\'\);\s?\$\w{1,50}\([\'"]([^\'"]+)[\'"]\);~msi',
            'id' => 'strReplaceFuncsEvalVar',
        ],
        [
            'full' => '~\$\w{1,50}\s?=\s?"\\\\x[^"]+";\${\$\w{1,50}}\s?=\s?base64_decode\("(.*?\\\\x[^"]+")\);\s?eval\(".*?\\\\x[^\$]+\$\w{1,50}\\\\"\);"\);~msi',
            'id' => 'B64SlashedStr',
        ],
        [
            'full' => '~(\$\w{1,50})\s?=\s?array\((?:[\'"][base64_dco]+[\'"],?\s?)+\);\s?array_splice\(\1,\s?4,\s?0,\s?8\*8\);\s?(\$\w{1,50})\s?=\s?implode\(\'\',\s?array_reverse\(\1\)\);\s?(\$\w{1,50})\s?=\s?\2\([\'"]([^\'"]+)[\'"]\);\s?eval\(\3\);~msi',
            'id' => 'B64ArrayStrEval',
        ],
        [
            'full' => '~(\$\w{1,50})\s?=\s?[\'"]([^\'"]+)[\'"];\s?\$\w{1,50}\s?=\s?(?:\1\[\d+\]\.?)+;\s?@\$\w{1,50}\((?:\1\[\d+\]\.?)+,(?:\1\[\d+\]\.?)+"\("\.(?:\1\[\d+\]\.?)+\'\([\'"]([^\'"]+)[\'"]\)\);\',"\."\);~msi',
            'id' => 'DictVarsPregReplaceB64',
        ],
        [
            'full' => '~(if\s*\(\!function_exists\s*\("([^"]+)"\)\)\s*\{\s*function\s*\2\s*\((\$\w+)\)\s*\{\s*(\$\w+)\s*=\s*"";\s*(\$\w+)\s*=\s*0;\s*\$\w+\s*=\s*strlen\s*\(\3\);\s*while\s*\(\$\w+\s*<\s*\$\w+\)\s*\{\s*if\s*\(\3\[\5\]\s*==\s*\'\s\'\)\s*\{\s*\4\s*\.=\s*"\s";\s*\}\s*else\sif\s*\(\3\[\5\]\s*==\s*\'!\'\)\s*\{\s*\4\s*\.=\s*chr\s*\(\s*\(ord\s*\(\3\[\5\+\d\]\)-ord\s*\(\'A\'\)\)\*16\+\s*\(ord\s*\(\3\[\5\+\d\]\)-ord\s*\(\'a\'\)\)\);\s*\5\s*\+=\s*2;\s*\}\s*else\s*\{\s*\4\s*\.=\s*chr\s*\(ord\s*\(\3\[\5\]\)\+1\);\s*\}\s*\5\+\+;\s*\}\s*return\s*\4;\s*\}\s*\}\s*)eval\s*\(\2\s*\(\'([^\']+)\'\)\);~msi',
            'id' => 'decodeAChar',
        ],
        [
            'full' => '~(\$\w+)="([^"]+)";(\$\w+)="[str_eplac"\.]+";((?:\$\w+\s*=\s*\3\("([^"]+)","","[^"]+"\);)+)(\$\w+)\s*=\s*\$\w+\(\'\',\s*((?:\$\w+\()+\1\)\))\);\6\(\);~msi',
            'id' => 'strReplaceCreateFunc',
        ],
        [
            'full' => '~function\s*(\w+)\((\$\w+)\)\s*\{\s*\$\w+\s*=\s*strlen\(trim\(\2\)+;\s*\$\w+\s*=\s*\'\';(?:\s*for\s*\()?\s*(\$\w+)\s*=\s*0;\s*(?:while\s*\(\(\()?(?:if\s*\()?\$\w+\s*<\s*\$\w+(?:\)+)?(?:;\s*\3\s*\+=\s*[0x]*2\))?\s*\{\s*(\$\w+)\s*\.=\s*pack\([\'"]C[\'"],\s*hexdec\(substr\(\2,\s*\3,\s*[0x]*2\)\)\);(?:\s*\3\s*\+=\s*2;)?\s*\}\s*(?:else\s*\{\s*\}\s*)?return\s*\4;\s*\}\s*eval\(\1\([\'"]([0-9a-f]+)[\'"]\)\s*\.\s*(?|\'([^\']+\'\)+;)|\"([^\"]+\"\)+;))(?:\s*\'\);)?~msi',
            'id' => 'evalbin2hex',
        ],
        [
            'full' => '~function\s\w{1,50}\(\$\w{1,50},\s?\$\w{1,50}\)\s?{\s?return;\s?}\s?function\s\w{1,50}\((?:\$\w{1,50}\s?=\s?"",?\s?){2}\)\s?{.*?(?:function\s\w{1,50}\((?:\$\w{1,50},?\s?)+\)\s?{\s?return\s\$\w{1,50};\s?}\s?)+function\s\w{1,50}\(\).*?(?:function\s\w{1,50}\((?:\$\w{1,50},?\s?)+\)\s?{\s?return\s\$\w{1,50};\s?}\s?)+function\s\w{1,50}\(\).*?(?:function\s\w{1,50}\((?:\$\w{1,50},?\s?)+\)\s?{\s?return\s\$\w{1,50};\s?}\s?)+(?:header\(\w{1,50}\([\'"][^\'"]+[\'"]\)\);\s?)+define.*?PDO\(.*?\$\w{1,50}\s?=\s?0;\s?function\s?\w{1,50}\(\$\w{1,50}\)\s?{\s?global.*?function\s(\w{1,50})\(\$\w{1,50}\)\s?{\s?\$\w{1,50}\s?=\s?"";\s?for\s?\(\$\w{1,50}\s?=\s?0;\s?\$\w{1,50}\s?<\s?strlen\(\$\w{1,50}\)\s?-\s?1;\s?\$\w{1,50}\s?\+=2\)\s?{\s?\$\w{1,50}\s?\.=\s?chr\(hexdec\(\$\w{1,50}\[\$\w{1,50}\]\s?\.\s?\$\w{1,50}\[\$\w{1,50}\s?\+\s?1\]\)\s?\^0x66\);\s?}\s?return\s\$\w{1,50};\}(?:.*?(?:function\s\w{1,50}\((?:\$\w{1,50},?\s?)+\)\s?{\s?return\s\$\w{1,50};\s?}\s?)+)+~msi',
            'id' => 'manyFuncsWithCode',
        ],
        [
            'full' => '~(\$[0o]+)="([\\\\x0-9a-f]+)";(\$[0o]+)=@?\1\(\'([^\']+)\',"([\\\\x0-9a-f]+)"\);@?\3\("([^"]+)"\);~msi',
            'id' => 'gzB64Func',
        ],
        [
            'full' => '~(?:(?:session_start|error_reporting|set_time_limit)\(\d*\);\s?)+(?:@?ini_set\([\'"][^\'"]+[\'"],[\'"][^\'"]+[\'"]\);\s?)+((\$\w{1,50})\s?=\s?(?:[\'"][base64_dco]+[\'"]\.?)+;\s(\$\w{1,50})\s?=\s?\2\(((?:[\'"][^\'"]+[\'"]\.?)+)\);)\s?(\$\w{1,50})\s?=\s?array\(((?:(?:\s?\3\((?:[\'"][^\'"]+[\'"]\.?)+\)(?:\.?)?|\3|\2|(?:chr\(\d+\)\.?))+,\s?)+\${(?:chr\(\d+\)\.?)+}\[(?:chr\(\d+\)\.?)+\])\);\s?(?:.*?\5\[\d+\])+~msi',
            'id' => 'dictArrayFuncVars',
        ],
        [
            'full' => '~function\s(\w{1,50})\(\){\$\w{1,50}\s?=\s?[\'"]([^\'"]+)[\'"];\$\w{1,50}\s?=\s?str_rot13\(\$\w{1,50}\);\$\w{1,50}\s?=\s?base64_decode\([\'"]([^\'"]+)[\'"]\);(\$\w{1,50})\s?=\s?@\$\w{1,50}\(\'\',\s?pack\(\'H\*\',\s?\$\w{1,50}\)\);\s?\4\(\);\s?}\1\(\);~msi',
            'id' => 'createFuncPackStrRot13',
        ],
        [
            'full' => '~error_reporting\(0\);\s?(?:\s?function\s(\w{1,50})\((?:\$\w{1,50}\,?\s?){3}\)\s?{\s?return\s?[\'"]{2}\s?\.\s?(?:\$\w{1,50}\s?\.\s?[\'"]{2}\s?\.?\s?)+;\s*}|\s?(?:\w{1,50}:)?(\$\w{1,50})\s?=\s?"([^"]+)";){2}\s?(?:\s?(?:\w{1,50}:)?\$\w{1,50}\s?=\s?\1\((?:\2\[0\d{1,5}\][,.\s\'"]*)+\);\s?)+\s?(?:print_r\(\2\[0\d{1,5}\]\);\s?echo\s?"[^"]+";)?\s*(\$\w{1,50})=\1\((?:\1\((?:(?:\$\w{1,50}|""),?)+\),?\.?)+\)\."\'([^\'"]+)\'"\.\1\((?:\2\[0\d{1,5}\],?)+\."",\2\[0\d{1,5}\]\);\s?print_r\(\$\w{1,50}\);\s?(?:\$\w{1,50}=\1\((?:\2\[0\d{1,5}\][.,]?)+\);\s?)+\$\w{1,50}=\1\(\1\((?:\$\w{1,50},?)+\),\$\w{1,50},\1\((?:\$\w{1,50},?)+\)\);\s?\$\w{1,50}\(create_function,array\("","}"\.\4\."//"\)\);~msi',
            'id' => 'dictVarsCreateFunc',
        ],
        [
            'full' => '~(?:function\s(\w{1,50})\((?:\$\w{1,50}\,?\s?){3}\)\s?{\s?return\s?[\'"]{2}\s?\.\s?(?:\$\w{1,50}\s?\.\s?[\'"]{2}\s?\.?\s?)+;\s*}\s?|(?:\w{1,50}:)?(\$\w{1,50})\s?=\s?"([^"]+)";\s?){2}(?:\s?\$\w{1,50}\s?=\s?\1\((?:(?:(?:\2\[\d+\])?[,.\s\'"]*)+|(?:\s?\1\((?:\$\w{1,50}[,.\s\'"]*)+\),?)+)\);)+\s?(\$\w{1,50})\s?=\s?\1\((?:\s?\1\((?:\$\w{1,50}[,.\s\'"]*)+\),?)+\)\s?\.\s?"\'([^"]+)\'"\s?\.\s?\1\((?:(?:\2\[\d+\])?[,.\s\'"]*)+\);\s?\$\w{1,50}\(\$\w{1,50},\s?array\(\'\',\s?"}"\s?\.\s?\4\s?\.\s?"//"\)\);~msi',
            'id' => 'dictVarsCreateFunc',
        ],
        [
            'full' => '~function\s(\w{1,50})\((\$\w{1,50})\)\s?{.*?\$\w+\s?=\s?"[^"]+";\$\w{1,50}\s?=\s?str_split\(\$\w{1,50}\);\$\w{1,50}\s?=\s?array_flip\(\$\w{1,50}\);\$\w{1,50}\s?=\s?0;\$\w{1,50}\s?=\s?"";\$\w{1,50}\s?=\s?preg_replace\("[^"]+",\s?"",\s?\$\w{1,50}\);do\s?{(?:\$\w{1,50}\s?=\s?\$\w{1,50}\[\$\w{1,50}\[\$\w{1,50}\+\+\]\];){4}\$\w{1,50}\s?=\s?\(\$\w{1,50}\s?<<\s?2\)\s?\|\s?\(\$\w{1,50}\s?>>\s?4\);\$\w{1,50}\s?=\s?\(\(\$\w{1,50}\s?&\s?15\)\s?<<\s?4\)\s?\|\s?\(\$\w{1,50}\s?>>\s?2\);\$\w{1,50}\s?=\s?\(\(\$\w{1,50}\s?&\s?3\)\s?<<\s?6\)\s?\|\s?\$\w{1,50};\$\w{1,50}\s?=\s?\$\w{1,50}\s?\.\s?chr\(\$\w{1,50}\);if\s?\(\$\w{1,50}\s?!=\s?64\)\s?{\$\w{1,50}\s?=\s?\$\w{1,50}\s?\.\s?chr\(\$\w{1,50}\);}if\s?\(\$\w{1,50}\s?!=\s?64\)\s?{\$\w{1,50}\s?=\s?\$\w{1,50}\s?\.\s?chr\(\$\w{1,50}\);}}\s?while\s?\(\$\w{1,50}\s?<\s?strlen\(\$\w{1,50}\)\);return\s?\$\w{1,50};}\s?.*?function\s(\w{1,50})\(\){\$\w{1,50}\s?=\s?@file_get_contents\(\w{1,50}\(\)\);.*?(\$\w{1,50})\s?=\s?"([^"]{1,20000})";.*?\4\s?=\s?@unserialize\(\1\(\4\)\);.*?(function\s(\w{1,50})\(\$\w{1,50}=NULL\){foreach\s?\(\3\(\)\s?as.*?eval\(\$\w{1,50}\);}}}).*?(\7\(\);)~msi',
            'id' => 'decodedFileGetContentsWithFunc',
        ],
        [
            'full' => '~((?:\$\w{1,50}\s?\.?=\s?"\\\\[^"]+";)+)((?:\$\w{1,50}=\$\w{1,50}\(\$\w{1,50}\);){3})(\$\w{1,50})=[\'"]([^\'"]+)[\'"];(\$\w{1,50})=[\'"]([^\'"]+)[\'"];if\(function_exists\(\$\w{1,50}\)\){\$\w{1,50}=@\$\w{1,50}\(\'\3,\$\w{1,50}\',(\$\w{1,50}\(\$\w{1,50}\()\5\)\)\);if\(\$\w{1,50}\)\3=@\$\w{1,50}\(\3,\$\w{1,50}\);\s?}else{.*?};if\(function_exists\(\$\w{1,50}\)\)\s?{\$\w{1,50}=@\$\w{1,50}\("",\7\3\)\)\);if\(\$\w{1,50}\)@\$\w{1,50}\(\);}else{.*?};~msi',
            'id' => 'createFuncVarsCode',
        ],
        [
            'full' => '~(\$\w+)=\'[preg_lac.\']+\';\1\(\'[#\~\\\\1\'.e]+\',\'([^,]+)\',\'1\'\);~msi',
            'id' => 'pregConcat',
        ],
        [
            'full' => '~(?(DEFINE)(?\'c\'\s*/\*[^\*]+\*/\s*))(?:\$\{"[^"]+"(?&c)?\^(?&c)?"[^"]+"\}\s*=\s*"[^"]+"\s*(?&c)?\^(?&c)?\s*"[^"]+";\s*)+\$\{"[^"]+"(?&c)?\^(?&c)?"[^"]+"\}\s*=\s*\(\s*\$\{"[^"]+"(?&c)?\^(?&c)?"[^"]+"\}\(\s*\$\{"[^"]+"(?&c)?\^(?&c)?"[^"]+"\}\s*\(\s*\'([^\']+)\'\)\s*\)\s*\)\s*;\s*\$\{"[^"]+"(?&c)?\^(?&c)?"[^"]+"\}="[^"]+"\s*(?&c)?\^(?&c)?\s*"[^"]+";\s*\$\{"[^"]+"(?&c)?\^(?&c)?"[^"]+"\}\s*=\s*@?\$\{"[^"]+"(?&c)?\^(?&c)?"[^"]+"\}\(\'[^\']+\',\s*"[^"]+"\s*(?&c)?\^(?&c)?\s*"[^"]+"\)\s*;@?\${"[^"]+"(?&c)?\^(?&c)?"[^"]+"\}\(\$\{"[^"]+"(?&c)?\^(?&c)?"[^"]+"\}\);~msi',
            'id' => 'xoredStrings',
        ],
        [
            'full' => '~\$\w+\s*=\s*\'([^\']+)\';\s*//base64 - gzinflate - str_rot13 - convert_uu - gzinflate - base64~msi',
            'id' => 'commentWithAlgo',
        ],
        [
            'full' => '~error_reporting\(0\);\s*set_time_limit\(0\);\s*ini_set\(\'memory_limit\',\s*\'-1\'\);\s*if\(isset\(\$_POST\[\'pass\']\)\)\s*{\s*function\s*[^}]+}\s*file_put_contents\((\$\w+)\."[^"]+",\s*gzdeflate\(file_get_contents\(\1\),\s*\d\)\);\s*unlink\(\1\);\s*copy\(\'\.htaccess\',\'[^\']+\'\);\s*(\$\w+)\s*=\s*base64_decode\("[^"]+"\);\s*(?:\$\w+\s*=\s*str_replace\(\'[^\']+\',\s*[^;]+;\s*)+\$\w+\s*=\s*\$\w+;\s*(\$\w+)\s*=\s*"<\?php[^;]+;\s*\?>";\s*(\$\w+)\s*=\s*fopen\(\'[^\']+\',\'w\'\);\s*fwrite\(\4,\s*\3\);\s*fclose\(\4\);\s*(\$\w+)\s*=\s*base64_decode\("[^"]+"\);\s*(\$\w+)\s*=\s*fopen\(\'[^\']+\',\s*\'w\'\);\s*fwrite\(\6,\s*\5\);\s*fclose\(\6\);\s*echo\s*"[^"]+";\s*}\s*function\s*(\w+)[^}]+}[^}]+[\s}]+[^!]+!+\';[^!]+!+\';\s*}\s*exit\(\);\s*}\s*function\s*\w+\(\){~msi',
            'id' => 'manyBase64DecodeContent',
        ],
        [
            'full' => '~function\s?\w{1,50}\(\$\w{1,50}\)\s*{(\$\w{1,50}=true;)?((?:\$\w{1,50}\s?=\s?[\'"](?:base64_(?:de|en)code|[\\\\xa-f0-9]+)[\'"];)+).*?exit;}}\w{1,50}\([\'"][^\'"]+[\'"]\);~msi',
            'id' => 'base64decodedFuncContents',
        ],
        [
            'full' => '~((?:if\(!function_exists\(base64_[end]+code\)\)\{function\s*(\w+)[^{]+({([^{}]*+(?:(?3)[^{}]*)*+)})\}\s*else\s*\{function\s*\2\((\$\w+)\)\s*\{\s*global\s*base64_[end]+code;return\s*base64_[end]+code\(\5\);\}\})+).*?((?:function\s*(\w+)\(\$\w+\)\{return\s*\w+\(\$\w+\);\s*\}\s*)+).*?(eval\(gzinflate\(\7\(\'([^\']+)\'\)\)\);)~msi',
            'id' => 'definedB64',
        ],
        [
            'full' => '~(?(DEFINE)(?\'v\'(?:(?:\$\{)*"GLOBALS"\}\["\w+"\]\}?|\$\w+|"\w+")))(?:(?&v)\s*=\s*"\w+";\s*)*(?:if\s*\(isset\(\$_GET\["[^"]+"\]\)\)\s*\{\s*echo\s*(?:"[^"]+"|\$_GET\["[^"]+"\]);\s*die;\s*\}\s*)*(?:(?&v)\s*=\s*"\w+";\s*)*function\s*(\w+)\(\$\w+,\s*\$\w+\s*=\s*\'\'\)\s*\{\s*(?:(?&v)\s*=\s*(?&v);\s*)+[^\^]+\^\s*(?&v)\[(?&v)\];\s*\}\s*\}\s*return\s*(?&v);\s*\}\s*(?:/\*[^\*]+\*/\s*)?(?:\$\w+\s*=\s*"[^"]+";)?\s*(?&v)\s*=\s*"[^"]+";\s*(?:(?&v)\s*=\s*"[^"]+";)?\s*(?:\$\w+ = "D";)?\s*((?&v))\s*=\s*"([^"]+)";(?:\s*(?&v)\s*=\s*[\'"][^\'"]*[\'"];\s*)+(?:foreach\s*\((?:array\(|\[)([\d\s,]+)[\)\]]\s*as\s*(?&v)\)\s*\{\s*(?:(?&v)\s*=\s*"\w+";\s*)*\s*(?&v)\s*\.=\s*(?&v)\[(?&v)\];\s*\}\s*(?:\s*(?&v)\s*=\s*[\'"][^\'"]*[\'"];\s*)?)+(?:/\*[^\*]+\*/\s*)?\s*(?&v)\s*=\s*(?&v)\([creat_fuion"\'\s\.]+\);\s*(?&v)\s*=\s*(?&v)\("[^"]*",\s*(?&v)\s*\(\s*\2\((?&v)\((?&v)\),\s*"([^"]+)"\)\)\);\s*(?&v)\(\);~msi',
            'id' => 'B64Xored',
        ],
        [
            'full' => '~(\$\w{1,50})\s?=\s?<<<FILE\s*([\w\s+/=]+)FILE;\s*(\$\w{1,50}\s?=\s?(base64_decode\(\1\));)~msi',
            'id' => 'B64AssignedVarContent',
        ],
        [
            'full' => '~(\$\w{1,50})\s?=\s?\'([^\']+)\';((?:\$\w{1,50}\s?=\s?(?:\1\[[()\d/+*-]+\]\.?)+;)+)\$\w{1,50}\s?=\s?"[^"]+";(?:\$\w{1,50}\s?\.?=\s?\$\w{1,50};)+@?\$\w{1,50}\s?=\s?\$\w{1,50}\(\(\'\'\),\s?\((\$\w{1,50})\)\);@?\$\w{1,50}\(\);~msi',
            'id' => 'dictVarsWithMath',
        ],
        [
            'full' => '~(\$\w{1,50})\s?=\s?"([^"]+)";\s*class\s?(\w+){\s*var\s?\$\w{1,50};\s*function\s__construct\(\)\s?{\s?\$this->\w{1,50}\(\d+\);\s*}\s*function\s?(\w{1,50})\(\$\w{1,50}\)\s?{\s?\$\w{1,50}\s?=\s?\$_SERVER\[\'HTTP_USER_AGENT\'\];\s?if\s?\(\s?preg_match\(\'/\s?Apple\(\.\*\)\s?\\\\\(/is\',.*?str_replace.*?explode.*?\'0+\';(?:.*?function\s\w{1,50}\([^)]+\){.*?(?:unpack|pack|\$this->|fmod|chr))+.*?return\s\$\w{1,50};[\s}]+(\$\w{1,50})\s?=\s?hex2bin\(\1\);\s?\$\w{1,50}\s?=\s?new\s?\3\(\d+\);\s?(\$\w{1,50})\s?=\s?\$\w{1,50}->\4\(\5\);\s?eval\(\6\);~msi',
            'id' => 'classDecryptedWithKey',
        ],
        [
            'full' => '~((\$\w+)\s*=\s*str_rot13\(base64_decode\(\'([^\']+)\'\)\);\s*(\$\w+)\s*=\s*str_rot13\(base64_decode\([\'"]([^\'"]+)[\'"]\)\);\s*\$\w+\s*=\s*[\'"][^\'"]+[\'"];)(?:\s*\$\w{1,50}\s?=\s?base64_decode\([\'"][^\'"]+[\'"]\);)?\s*preg_match\(\$\w+\(\$\w+\([\'"][^\'"]+[\'"]\)\),\s*file_get_contents\(__FILE__\),\s*\$\w+\);\s*(eval\(\$\w+\(\$\w+\([\'"]([^\'"]+)[\'"]\)\)\);)\s*eval\(\$\w+\(\$\w+\([\'"]([^\'"]+)[\'"]\)\)\);\s*unset\((?:\$\w{1,50},?\s*)+\);\s*__halt_compiler\(\);\s*\?>\s*(?:\[PHPkoru_Info\]\s*[^\]]+\]\s*)?\[PHPkoru_Code\]\s*([^\[]+)\[/PHPkoru_Code\]~msi',
            'id' => 'PHPkoru',
        ],
        [
            'full' => '~(\$\w+)\s*=\s*"([^"]+)";\s*(\$\w+)\s*=\s*\$this->(\w+)\("([^"]+)"\);\s*(\$\w+)\s*=\s*\3\(\'\',\s*\$this->\4\(\1\)\);\s*\6\(\);~msi',
            'id' => 'JoomlaInject',
        ],
        [
            'full' => '~((\$\w{1,50})\s*=\s*[\'"]([^"\']+)[\'"];\s*)(?>\$\w{1,50}\s*=\s*fopen\([^)]+\);\s*\$\w{1,50}\s*=\s*fwrite\s?\(\$\w{1,50}\s*|fwrite\(fopen\([^)]+\)),\s*(base64_decode\(\2\))\);~msi',
            'id' => 'fwriteB64Content',
        ],
        [
            'full' => '~(\$\w{1,50})\s*=\s*"([^"]+)";\s*(\$\w{1,50})\s*=\s*base64_decode\(\1\);\s*(\$\w{1,50})\s*=\s*base64_decode\("([^"]+)"\);\s*(\$\w{1,50}\s*=(\s*\3\s*\.\s*\4);)~msi',
            'id' => 'B64concatedVars',
        ],
        [
            'full' => '~(\$\w{1,50})\s*=\s*"(\\\\[\w\\\\]+)";\s*(\$\w{1,50})\s*=\s*@\1\([\'"](\$\w{1,50})[\'"]\s*,\s*"(\\\\[\w\\\\]+)"\);\s*@\3\(([\'"][^\'"]+[\'"])\);~msi',
            'id' => 'slashedCreateFunc',
        ],
        [
            'full' => '~(\$\w{1,50})\s*=\s*"([^"]+)";((?:\$\w{1,50}\s*=\s*(?:\$\w{1,50}\[\d+\]\.?)+;)+@?(?:\$\w{1,50}(?:\[\d+\]\.?)?[,()]*)+;)~msi',
            'id' => 'varDictCreateFunc',
        ],
        [
            'full' => '~@call_user_func\(create_function\([\'"]\s*[\'"],gzinflate\(base64_decode\([\'"\\\\]{1,3}([^\'"\\\\]+)[\'"\\\\]{1,3}\)\)\),[^)]+\);~msi',
            'id' => 'callFuncGzB64',
        ],
        [
            'full' => '~@?(\$\w{1,50})\s*=\s*"([^"]+)";@?(\$\w{1,50})\s*=\s*array\((\d+),(\d+),(\d+),(\d+),(\d+),(\d+)\);@?(\$\w{1,50})\s*=\s*"([^"]+)";@?(\$\w{1,50})\s*=\s*[\'"]{2};for\s*\(\$\w{1,50}\s?=\s?0;\s?\$\w{1,50}\s?<\s?6;\s?\$\w{1,50}\+\+\)\s*{@?\$\w{1,50}\s?=\s?@?\3\[@?\$\w{1,50}\]\s*;@?\12\.=\s?@?\1\[@?\$\w{1,50}\]\s?;\s*}@?\12\(((?:"\\\\x[^"]+"\.?)+)\);~msi',
            'id' => 'assertDictVarEval',
        ],
        [
            'full' => '~function\s+(\w{1,50})\((\$\w{1,50})\)\s*{\s*\$\w{1,50}\s?=\s?"[^"]+";\s?(?:(?:\$\w{1,50}\s?=\s?)+"";)+.*?<<\s?2.*?<<\s?6.*?!=\s?64.*return\s?\$\w{1,50};}\s?function\s+(\w{1,50})\(\$\w{1,50}\){\s*return\s\1\(\$\w{1,50}\);}\s*eval\(\3\(gzinflate\(\3\("([^"]+)"\),0\)+~msi',
            'id' => 'B64FuncEvalGz',
        ],
        [
            'full' => '~(\$\w{1,50})\s*=\s*"([^"]+)";\s*(\$\w{1,50})\s?=\s?(?:[\d\-+*])+;\s*\$\w{1,50}\s?=\s?[\'"]base[\'"]\s?\.\s?\3\.\s?[\'"]_decode[\'"];\s*\$\w{1,50}\s?=\s?\$\w{1,50}\(\$\w{1,50}\);(\$\w{1,50})\s?=\s?@?gzinflate\(\$\w{1,50}\);@?eval\(("\?>"\.?)?\4\);~msi',
            'id' => 'B64Gz',
        ],
        [
            'full' => '~function\s*(\w+)\((\$\w+)\)\s*\{\s*(?:\2=gzinflate\(base64_decode\(\2\)\);|\$\w+\s*=\s*base64_decode\(\2\);\s*\2\s*=\s*gzinflate\(\$\w+\);|(\$\w+)\s*=\s*\'\';)\s*for\s*\(\$\w+\s*=\s*0;\$\w+\s*<\s*strlen\s*\(\2\);\$\w+(?:\+\+|\s*\+=\s*1)\)\s*\{?\s*(?:\2|\3)(?:\[\$\w+\]|\s*\.)\s*=\s*chr\(ord\((?:\2|\3)\[\$\w+\]\)\s*(-?\s*\d+)\);\s*\}?\s*return\s*(?:\2|\3);\s*\}\s*(?:define\("[^"]+",\s*"\w{32}"\);)?(?:eval\(|(\$\w+)\s*=\s*)\1\s*((?:\(\w+)*)\((?|"([^"]+)"|\'([^\']+)\')\)+;(?:\s*call_user_func\(create_function\(\'\',\s*\5\)+;)?~msi',
            'id' => 'deltaOrd',
        ],
        [
            'full' => '~(?(DEFINE)(?\'g\'(?:\$\{)?\$\{"(?:G|\\\\x47)(?:L|\\\\x4c)(?:O|\\\\x4f)(?:B|\\\\x42)(?:A|\\\\x41)(?:L|\\\\x4c)(?:S|\\\\x53)"\}\["[^"]+"\](?:\})?))(?:(?&g)="[^"]+";)+function\s*(\w+)\(\$\w+\)\s*\{(?&g)="[^"]+";(?&g)=gzinflate\(base64_decode\((?&g)\)\);\$\w+="[^"]+";for\((?&g)=0;(?&g)<strlen\((?&g)\);(?&g)\+\+\)\s*\{\$\w+="[^"]+";(?&g)="[^"]+";(?&g)\[\$\{\$\w+\}\]=chr()\(ord\((?&g)\[(?&g)\]\)([\-\+]\d+)\);\}return\$\{\$\w+\};\}()()eval\(\2\("([^"]+)"\)\);~msi',
            'id' => 'deltaOrd',
        ],
        [
            'fast' => '~<\?php\s(?:eval\(")?ob_start\(\);(?:"\))?\s\?>(.*?)<\?php\s(eval\(")?if\(!function_exists\("([^"]+)"\)\)\{function\s\3\(\)\{(\$[^=]+)=str_replace\(array\(([^)]+)\),array\(([^)]+)\),ob_get_clean\(\)\);for\((\$[^=]+)=1,(\$[^=]+)=ord\(\4\[0\]\);\7<strlen\(\4\);\7\+\+\)\4\[\7\]=chr\(ord\(\4\[\7\]\)-\8-\7\);\4\[0\]=\'\s\';return\s\4;\}\}(?:"\))?\s\?>(.*?)<\?php\s(\$[^=]+)=\3\(\);\s*eval\(\10\s*\)\s*(\?>\s*)+~msi',
            'full' => '~(?:<\?php\s*\$\w+\s*=\s*"[^"]+";\s*\?>\s*)?<\?php\s(?:eval\(")?ob_start\(\);(?:"\))?\s\?>(.*?)<\?php\s(eval\(")?if\(!function_exists\("([^"]+)"\)\)\{function\s\3\(\)\{(\$[^=]+)=str_replace\(array\(([^)]+)\),array\(([^)]+)\),ob_get_clean\(\)\);for\((\$[^=]+)=1,(\$[^=]+)=ord\(\4\[0\]\);\7<strlen\(\4\);\7\+\+\)\4\[\7\]=chr\(ord\(\4\[\7\]\)-\8-\7\);\4\[0\]=\'\s\';return\s\4;\}\}(?:"\))?\s\?>(.*?)<\?php\s(\$[^=]+)=\3\(\);\s*eval\(\10\s*\)\s*(\?>\s*)+~msi',
            'id' => 'outputBuffer',
        ],
        [
            'fast' => '~\s*(\$\w+)\s*=\s*[base64_decode"\./\-\*]+;.*?\1(?:.{0,300}?\1\((?:\$\w+|"[^"]+")\))+[^\}]+\}~msi',
            'full' => '~(?:\$\w+\s*=\s*\$_SERVER\["DOCUMENT_ROOT"\]\."/";)?\$\w+\s*=\s*"[^"]+";(?:\$\w+\s*=\s*\$_SERVER\["DOCUMENT_ROOT"\]\."/";)?\s*(\$\w+)\s*=\s*[base64_decode"\./\-\*]+;.*?\1(?:.{0,300}?\1\((?:\$\w+|"[^"]+")\))+[^\}]+\}~msi',
            'id' => 'doorwayInstaller',
        ],
        [
            'full' => '~(\$\w+)\s*=\s*"([^"]+)";\s*(\$\w+)\s*=\s*str_replace\((\w),"","[^"]+"\);\s*\3\(\'[eval\'.]+\(\'[base64_dcod\'.]+\(\'[gzinflate.\']+\(\'[base64_dcod\'.]+\(\'[^\)]+\)[^;]+;~msi',
            'id' => 'strReplaceAssert',
        ],
        [
            'full' => '~(?:(\$\{\'GLOBALS\'\}\[\'[^\']+\'\])=\'\w+\';\s*)+.*\1\};\}~msi',
            'id' => 'anaLTEAMShell',
        ],
        [
            'full' => '~(\$\w+)=\'[function_exis\'\.]+;\$\w+=\'[charodet\'\.]+;(\$\w+)=\'[eval\'\.]+;(\$\w+)=\'[gzinflate\'\.]+;(if\(!\1\(\'[base64_dcon\'\.]+\)\)({([^{}]*+(?:(?5)[^{}]*)*+)})else{function\s*[^}]+\}\})+(\$\w+)=\'[create_funion\'\.]+;(\$\w+)\s*=\s*\7\(\'([^\']+)\',\2\.\'\(\'\.\3\.\'\(\'\.\'[^(]+\(\9\)\'\.\'\)\'\.\'\)\'\.\';\'\);\8\("([^"]+)"\);~msi',
            'id' => 'zeuraB64Gzinflate',
        ],
        [
            'full' => '~function\s*(\w+)\((\$\w+)\)\{((?:(\$\w+)\s*=\s*str_replace\(\'[^\']+\',\'[^\']+\',\'[^\']+\'\);\s*)+)return\s*(\$\w+\(\'\',\$\w+\(\2\)\);)\}(\$\w+)\s*=\'([^\']+)\';(\$\w+)=\1\(\6\);\8\(\);~msi',
            'id' => 'strReplaceFunc',
        ],
        [
            'full' => '~(\$\w+)=array\(array\(((?:\'[^\']+\',?)+)\)\);\s*(?:/\*[^\*]+\*/)?(\$\w+)(?:/\*[^\*]+\*/)?[^\?]+\?>\s*\.\s*base64_decode\s*\(\s*str_rot13\s*\(\s*join\s*\(\s*\'\'\s*,\s*\3\s*\)\s*\)\s*\)\s*\.\s*\'[^\']+\'\s*\);(?:/\*[^\*]+\*/)?\s*(\$\w+)=array_walk\s*\(\1,\$\w+\);~msi',
            'id' => 'arrayMapB64',
        ],
        [
            'full' => '~preg_replace\(\'/\.\+\/e\',str_replace\("([^"]+)","([^"])*","([^"]+)"\),\'\.\'\);~msi',
            'id' => 'pregReplaceStrReplace',
        ],
        [
            'full' => '~(\$\w+)\s*=\s*(base64_decode\("([^"]+)"\));\s*(\$\w+)\s*=\s*(base64_decode\("([^"]+)"\));\s*echo\s*"[^"]+";\s*if\s*\(\$\w+\s*==\s*"[^"]+"\)\s*\$\w+\s*=\s*"[^"]+"\.\4\."[^"]+"\.\1;~msi',
            'id' => 'echoB64',
        ],
        [
            'full' => '~(\$\w+\s*=\s*"[^"]+"\^"[^"]+";)+\$\w+\s*=\s*\(?(?:@?\$\w+\()+\'([^\']+)\'\)+;(\$\w+\s*=\s*"[^"]+"\^"[^;]+";)+(\$\w+)\s*=\s*\(?(?:@?\$\w+\()+\'\$\w+\',"[^"]+"\^"[^"]+"\);@?\4\(\$\w+\);~msi',
            'id' => 'createFuncXored',
        ],
        [
            'full' => '~(\$\w{1,50})\s?=\s?array\(((?:\'[^\']\',?)+)\);\s?(?:\$\w{1,50}\s?=\s?(?:\1\[\d+\]\.?)+;\s?)+(\$\w{1,50})\s?=\s?((?:\$\w{1,50}\.?)+)\'(\$\w{1,50})\'\.(?:\1\[\d+\]\.?)+;\5\s?=\s?"([^"]+)";\s?@?eval\(\3\);~msi',
            'id' => 'evalDictArrayConcat',
        ],
        [
            'full' => '~(?:(?:\$\w+="[^"]+"|\$\w+="[a-f0-9\\\\x]+"\^"[a-f0-9\\\\x]+"|\$\w+=(?:"[^"]+"\.?)+);)+\$\w+=(?:\$\w+\.?)+;\s*(\$\w+)\("/(\w+)/e",(\$\w+),"\2"\);(?:\s*\1\("/(\w+)/e",(\$\w+),"\4"\);)?~msi',
            'id' => 'pregReplaceXored',
        ],
        [
            'full' => '~\$\w{1,5}=\'([a-z0-9+/=]{1,100}\s[a-z0-9+/=\s]+)\';(\$\w)=["\']_COOK[\\\\x0-9]{1,10}";\s*if\(!empty\(\${\2}\[["\']key["\']\]\)\){(?:\$\w=[^;]{1,30};\s*){1,5}for\([^)]{1,40}\)(?:\$\w\[?\]?=[^;]{1,30};\s*){1,5}for\([^)]{1,40}\){[^}]{1,150}}if[^;]{1,50};\s*if\(\(\$\w=@?gzinflate\(\$\w\)\)&&\(md5\(substr\(\$\w,\d,\$\w\)\)===\'([a-f0-9]{32})\'\)\){\$\w{1,5}=[^;]{1,100};if\(PHP_VERSION<\'5\'\){[^}]{1,1000}}@create_function\(\'\',"[^"]{1,100}"\.\$\w{1,5}\.\'{\'\);}}\s*DIE\(.{1,500}>"\);~msi',
            'id' => 'base64EncryptedGz',
        ],
        [
            'full' => '~error_reporting\(0\);function\s*(\w+)\((\$\w+)\)\s*\{\s*return\s*strtr\(\2,\s*\'((?:(?=(?:\\\\)*)\\\\.|.)*?)\',\s*\'((?:(?=(?:\\\\)*)\\\\.|.)*?)\'\s*\);\s*\s*\}eval\(\1\(\'([^\']+)\'\)\);(\$\w+)\s*=\s*((?:\$\w+\[\d+\]\()+\'[^\']+\'\)+;)\$\w+\[\d+\]\(\6\);~msi',
            'id' => 'Bloos3rpent',
        ],
        [
            'full' => '~(@?eval\(@?gzinflate\(base64_decode\(preg_replace\(\'([^\']+)\',\s*\'([^\']*)\',\s*\'([^\']+)\'\)+;)\s*(preg_replace\("/(\w+)/e".\s*\'\')@?eval\(@?gzinflate\(\w+\(base64_decode\((preg_replace\(\'([^\']+)\',\s*\'([^\']*)\',\s*)\'([^\']+)\'\)+;(\'\',"\6"\);)~msi',
            'id' => 'doublePregReplace',
        ],
        [
            'full' => '~(\$\w+)="([^"]+)";(\$\w+)=array\(((?:\d+,?)+)\);(\$\w+)="([^"]+)";(\$\w+)="";for\s*\((\$\w+)=0;\8<\d+;\8\+\+\)\{(\$\w+)=\3\[\8\]\s*;\s*\7\.=\s*\1\[\9\]\s*;\s*\}\7\("eval\(base64_decode\(gzinflate\(base64_decode\(\5\),0\)\)\)"\);~msi',
            'id' => 'zeura2',
        ],
        [
            'full' => '~(\$\w+)="([\\\\a-fx0-9])+";(\$\w+)="([\\\\a-fx0-9])+";(\$\w+)=\1\("",\3\("([^"]+)"\)\);\5\(\);~msi',
            'id' => 'createFuncEscaped',
        ],
        [
            'full' => '~error_reporting\s*\(0\);\s*function\s*([^\(]+)\(\)\s*\{\s*\$[^= ]+\s*=\s*[0-9a-fx]+;\s*\$[^= ]+\s*=\s*func_get_args\s*\(\);\s*if\s*\(+\$[^}]+}\s*if\s*\(+[^{]+\{\s*return\(+parse_str\("[^=]+=([^"]+)",[^}]+\}\s*\}\s*function\s*([^(]+)\(\)\{\s*\$[^=]+=func_get_args\(\);\s*\$[^=]+=[0-9a-fx]+;(\s*if\s*\([^}]+\})+\s*\}\s*function\s*([^(]+)\(\$[^)]+\)\s*{[^}]+\}\s*return\s*\$[^;]+;\s*\}\s*eval\(\5\(\1\([0-9a-fx]+,[0-9a-fx]+\)+;~msi',
            'id' => 'maskedDeltaOrd',
        ],
        [
            'full' => '~(\$\w{1,50})\s?=\s?(?:chr\(-?\d{1,5}[+\-*^/]-?\d{1,5}\)\s?\.?)+;\s?(\$\w{1,50})\s?=\s?"((?:[^-]-m\s+){10}[^"]+)";\s?\$\w{1,50}\s?=\s?\w{1,50}\(\s?\1\s?\(\s?array\("-m\s",\s?PHP_EOL\),\s?"",\s?\2\)\);\s?function\s?\w{1,50}\s?\((\$\w{1,50})\s?\){\s?.*?\$\w{1,50}\(\4\);}\s?\$\w{1,50}\s?=\s?(?:chr\(-?\d{1,5}[+\-*^/]-?\d{1,5}\)\s?\.?)+;\s?(\$\w{1,50})\s?=\s?"([^"]+)";\s?(\$\w{1,50})\s?=\s?array\(\);\s?for\s?\((\$\w+)\s?=0;\s?\8\s?<\s?256;\s?\+\+\8\)\s?{\s?\7\s?\[\8\]\s?=\s?\8;\s?}\s?\$\w{1,50}\s?=\s?0;\s?for\s?\(\8\s?=0;\s?\8\s?<\s?256;\s?\+\+\8\)\s?{.*?ord\(\$\w{1,50}\s?\[\$\w{1,50}\s?%\s?(\d+)\]\)\)\s?%\s?256;.*?for\s?\(.*?<(\d+);\s?\+\+\$\w{1,50}\).*?}\s?\$\w{1,50}\s?=\s?\4;\s?\$\w{1,50}\s?=\s?(?:chr\(-?\d{1,5}[+\-*^/]-?\d{1,5}\)\s?\.?)+;\s?\$\w{1,50}\("/\w+/e",\s?(?:chr\(-?\d{1,5}[+\-*^/]-?\d{1,5}\)\s?\.?)+,"\w+"\);~msi',
            'id' => 'decodeStrMultiForDict',
        ],
        [
            'full' => '~(?:\$\w{1,50}\s?=\s?\'[^\']+\';\s?)+(?:\$\w{1,50}\s?=\s?str_replace\([\'"][^\'"]+[\'"],\s?["\']{2},\s?[\'"][^\'"]+[\'"]\);\s?){2}(\$\w{1,50})\s?=\s?\$\w{1,50}\(\$\w{1,50}\([\'"][^\'"]+[\'"]\),\s?\$\w{1,50}\([\'"]([^\'"]+)[\'"]\)\);\s?\1\(((?:\$\w{1,50}\s?\.?)+)\);~msi',
            'id' => 'B64ConcatedStrVars',
        ],
        [
            'full' => '~\$\w{1,50}\s?=\s?(\w{1,50})\s?\(array\((?:\d+,?)+\)\);\s?\$\w{1,50}\s?=\s?\1\(array\((?:\d+,?)+\)\);\s?\$\w{1,50}\s?=\s?fopen\(\$\w{1,50},\s?\1\(array\((?:\d+,?)+\)\)\);\s?\$\w{1,50}\s?=\s?fputs\(\$\w{1,50},\s?\$\w{1,50}\);\s?fclose\(\$\w{1,50}\);\s?function\s?\1\(\s?array\s?(\$\w{1,50})\)\s?{\s?if\(\2\)\s?{\s?foreach\s?\(\2\s?as\s?\$\w{1,50}\)\s?{\s?\$\w{1,50}\s?\.=\s?chr\(\$\w{1,50}\);\s?}\s?}\s?return\s?\$\w{1,50};\s?}~msi',
            'id' => 'chrFuncVars',
        ],
        [
            'full' => '~((?:\$\w{1,50}\s?=\s?(?:"[^"]+"\.?)+;)+)\$\w{1,50}\((?:"[^"]+"\.?)+,((?:\$\w{1,50}\()+(?:"[^"]+"\.?)+\)\))\s?,\s?(?:"[^"]+"\.?)+\);~msi',
            'id' => 'concatVarsFuncs',
        ],
        [
            'full' => '~\$GLOBALS\[\'(\w+)\'\];\s*global\s*\$\1;\s*\$\1=\$GLOBALS;(\$\1\[\'(\w+)\']="([^"]+)";)\s*(?:@?\$\1\[(\$\1\[\'\3\'\]\[\d+\]\.?)+\]\s*=(?:\s*(?:\$\1\[\'\3\'\]\[\d+\]\.?)+|\$_POST|\$_COOKIE);\s*)+(?:.{1,120}\$\1\[\'\3\'\])+[^}]+\}exit\(\);\}~msi',
            'id' => 'globalDictVar',
        ],
        [
            'full' => '~\$\w+\s*=\s*\'(\w+)\'\^[^;\']+;\s*(\$\w+)\s*=\s*\w+\&\'[^\';]+\';\s*.*?\2\&\s*[^;]+;\s*\$\w+\s*=\s*\$\w+\&\$\w+;\s*\$\w+\s*=\s*[^;]+;\s*(?:\$\w+\s*=\s*\$\w+\&\$\w+;\s*)+if\s*\(\!(?:\$\w+\s*\()+[^;]+;\s*\'[^\']+\';~msi',
            'id' => 'garbageVars',
        ],
        [
            'full' => '~\$\w+\s*=(?:\s*chr\(-?\d+\^-?\d+\)\s*\.?\s*)+;\s*\$\w+\s*=\s*(?:<<<\'(\w+)\'\s*(.*?)\1|"([^"]+)");\s*\$\w+\s*=\s*(\w+)\((?:\s*\$\w+\s*\(\s*array\("([^"]+)"\),"",\$\w+\)|\s*\$\w+\s*\(\$\w+\))\);\s*function\s*\4\s*\(\$\w+\)\s*\{\s*(?:\$\w+=(?:chr\(-?\d+\^-?\d+\)\s*\.?)+;\s*)+\$\w+=\&\$\w+;\s*\$\w+\.=\$\w+;return\s*\$\w+\(\$\w+\);\}\s*\$\w+\s*=(?:\s*chr\(-?\d+\^-?\d+\)\s*\.?)+;\s*\$\w+\s*=\s*"([^"]+)";\s*(?:\s*\$\w+\s*=\s*array\(\);)?(?:(?:\s*for\s*\(\$\w+=0;\s*\$\w+<\d+;\s*\+\+\$\w+\)\s*\{\s*[^}]+\}(?:\s*\$\w+\s*=\s*(?:0;|\$\w+;))+)+|for\(\$\w+\s*=\s*0;\$\w+<\d+;\+\+\$\w+\)\{\s*\$\w+\{\s*\$\w+\}=\$\w+\{\s*\$\w+\}\^\$\w+\{\s*\$\w+%\d+\};\}\s*\$\w+\s*=\s*\$\w+;)\s*\$\w+\s*=\s*(?:chr\(-?\d+\^-?\d+\)\s*\.?\s*)+;\s*\$\w+\("/(\w+)/e",\s*(?:chr\(-?\d+\^-?\d+\)\s*\.?\s*)+,"\7"\);~msi',
            'id' => 'chrMinXor',
        ],
        [
            'full' => '~(\$\w+)\s*=\s*"([^;]+;)";\s*@assert\(\1\);~msi',
            'id' => 'assertUrlDecode',
        ],
        [
            'full' => '~(\$\w+)\s*=\s*array\(\'([^\)]+)\'\);\$\w+\s*=\s*array\(\'[base64_dco\'\.,]+\)\s*;\s*\$\w+\s*=\s*array\([gzuncompres\'\.,]+\)\s*;\s*(?:\$\w+\s*=\s*\$\w+\[\d\]\.\$\w+\[\d\];\s*)+eval\((?:\$\w+\()+implode\(\'\',\s*\1\)+;~msi',
            'id' => 'implodeB64Gz',
        ],
        [
            'full' => '~((?:\$\w+\s*=\s*"\w";\s*)+)((?:\$\w+\s*=(?:\s*\$\w+\s*\.?)+;\s*)+)(eval\((?:\$\w+\()+"[^"]+"\)+;)~msi',
            'id' => 'X12',
        ],
        [
            'full' => '~(\$\w+)\s*=\s*function\((\$\w+)\)\s*\{\s*return\s*strtr\(\2,\s*"([^"]+)",\s*"([^"]+)"\);\s*\};\$\w\s+=\s*\$\w+\("([^"]+)"\);\$\w+\s*=\s*\$\w+\(\);\$\w+\s*=\s*\$\w+\[\1\("([^"]+)"\)\];foreach\s*\(\$\w+\s*as\s*\$\w+\s*=>\s*\$\w+\)\s*\{[^}]+\}(?:if\s*\([^}]+})+\}(\$\w+)\s*=\s*\$\w+\("",\s*(?:\$\w+\()+"([^"]+)"\)+;\7\(\);~msi',
            'id' => 'WpNightmare',
        ],
        [
            'full' => '~preg_replace\(\'/(\w+)/e\',strrev\(\'\)\)\\\\\'([^\']+)\'\([base64_dco(val]+\'\),\'\1\'\);~msi',
            'id' => 'pregB64Strrev',
        ],
        [
            'full' => '~global\s(\$[^;]+);if\(!defined\([\'"][^\'"]+[\'"]\)\){define\([\'"][^\'"]+[\'"],__FILE__\);function\s?([^(]+)\((\$[^,]+),(\$[^=]+)=[\'"]{2}\){global\s?\1;\3=base64_decode\(\3\);if\(empty\(\3\)\)\s?return\s?[\'"]{2};if\(\4==[\'"]{2}\){return\s?\~\3;}else{(\$[^=]+)=\1\[\'([^\']+)\'\]\(\3\);\4=\1\[\'([^\']+)\'\]\(\4,\5,\4\);return\s?\3\^\4;}}}((?:(?:\1\[\'[^\']+\'\]=\2\(\'[^\']+\',\'[^\']*\')\);)+)(?:\1\[\'[^\']+\'\]=isset[^;]+;)+(eval\(\1\[\'([^\']+)\'\]\(\'([^\']+)\'\)\);)return;\?>~msi',
            'id' => 'utfCharVarsFuncEval',
        ],
        [
            'full' => '~(?:\$\w{1,50}\s?=\s?[\'"][^\'"]+[\'"];\s?)+(\$\w{1,50})\s?=\s?(?:\d+[\+]*)+;.*?\$\w{1,50}\s?=\s?(\w+)\([\'"][^\'"]+[\'"],\s?\1,\s?[\'"][^\'"]+[\'"]\);(?:\$\w{1,50}\s?=\s?(?|[\'"][^\'"]+[\'"]|\$\w{1,50}\([\'"][^\'"]+[\'"]\)|\$\w{1,50});\s?)+(\$\w{1,50})\s?=\s?(\$\w{1,50})\(\'\$\w{1,50}\',\s?(\$\w{1,50})\((\$\w{1,50})\((\$\w{1,50}),\s?[\'"](\d+)[\'"]\)\)\);(?:\$\w{1,50}\s?=\s?[\'"][^\'"]+[\'"];\s?)+\$\w{1,50}\(\$\w{1,50},\$\w{1,50}\([\'"]{2},\s?\3\(\$\w{1,50}\(\5\(\6\(\7,\s?[\'"](\d+)[\'"]\)\)\)\)\),\$\w{1,50}\);(?:\$\w{1,50}\s?=\s?[\'"][^\'"]+[\'"];\s?)+\s?function\s\2\(.*return\s\$\w{1,50};}(?:\$\w{1,50}\s?=\s?[\'"][^\'"]+[\'"];\s?)+~msi',
            'id' => 'manyVarFuncCreateFuncWrap',
        ],
        [
            'full' => '~class\s*(_\w{1,20})\s*{\s*private\sstatic\s*\$_\w{1,10};\s*static\s*function\s*(\w{1,3})\s*\(\$_\w{1,20}\)\s*{\s*if\s*\([^)]{1,20}\)\s*:\s*self::\w{1,2}\(\);\s*endif;\s*return\s*self::\$_\w{1,10}\[\$_\w{1,10}\];\s*}\s*private\s*static\s*function\s*\w{1,2}\(\)\s*{\s*self::\$_\w{1,10}=array\(([^\)]{1,500})\);\s*}\s*}\s*\$GLOBALS\[["\']([^\]]{32,120})["\']\]=array\(([^)]{1,500})\);((?:\s*\$GLOBALS\["[_\w\d\\\]{1,120}"\]=base64_decode\([^)]{1,140}\)\s*;\s*)+)\s*class\s*(_\w{1,10})\s*{\s*private\s*static\s*\$_\w{1,10};\s*static\s*function\s*(\w{1,10})\([^)]{1,30}\)\s*{[^}]{1,900}\s*}private\s*static\s*function\s*\w{1,10}\(\)\s*{\s*self::\$_\w{1,10}=array\(([^)]{1,2300})\);\s*}\s*}\s*(.*;\s*;)~msi',
            'id' => 'twoCalcClasses',
        ],
        [
            'full' => '~(\$\w+)\s*=\s*array\(((?:[\'"][\w\$\)\;\(][\'"],?)+)\);\s*(\$\w+)\s*=\s*create_function\(\'([\$\w\'\.]+)\',((?:\1\[\d+\]\.?)+)\);\s*\3\(\'([^\']+)\'\);~msi',
            'id' => 'createFuncArray',
        ],
        [
            'full' => '~(\$\w+)\s*=\s*"([^"]+)";\s*function\s*(\w+)\(\)\s*\{\s*return\s*str_ireplace\("([^"]+)",\s*"([^"]+)",\s*"([^"]+)"\);\s*\}\s*(\$\w+)=strtr\("([^"]+)",\s*"([^"]+)",\s*"([^"]+)"\);\s*(\$\w+)\s*=\s*\3\(\);\s*(\$\w+)\s*=\s*\11\(\'\',\s*\7\(\1\)\);\s*\12\(\);~msi',
            'id' => 'createFuncReplaceB64',
        ],
        [
            'full' => '~((?:\$\w+\s*=\s*([lr]?trim)\(\'[^\']+\',\'[^\']+\'\);\s*)+)(\$\w+)\s*=\s*((?:\$\w+\s*\.?\s*)+);\s*(\$\w+)\s*=\s*\3\(\'([^\']+)\'\);\s*eval\((\$\w+=\&?)?\5\);~msi',
            'id' => 'evalTrim',
        ],
        [
            'full' => '~function\s*(\w+)\(\)\s{\s*(\$\w+\s*=\s*\'[^\']{32}\';\s*)(\$\w+)\s*=\s*\'([^\']+)\';\s*(((\$\w+)\s*=\s*(?:\3\[\d+\]\.?)+;\s*)+)\$\w+\(\7,\3\[\d+\]\."([^,]+)",\'\'\);\}\s*@?\1\(\);~msi',
            'id' => 'funcDictB64',
        ],
        [
            'full' => '~(\$\w{1,50})\s?=\s?[base64dco_"\'.]+;\s?(\$\w{1,50})\s?=\s?["\'gzinflate.]+;\s?(\$GLOBALS\[\'[^\']+\'\]\s?=\s?\$\w{1,50}\s?=\s?)unserialize\(\2\(\1\(join\(\'(\w+)\',array\(((?:\'[^\']*\',?\s?)+)\)+;~msi',
            'id' => 'unserializeB64GzJoinArr',
        ],
        [
            'full' => '~(\$\w{1,50})=\(?[\'"]([^\'"]+)[\'"]\);\s?((?:\$\w{1,50}=[\'"][^\'"]+[\'"];\s?)*(?:\$\w{1,50}=(?:\1{\d{1,5}}\.?)+;)+)\$\{"[^"]+"}\["[^"]+"\]\(\d\);{1,2}(?:.*?echo\s?.*?unset.*?exit\(\);)+[^;]+;\${"[^"]+"}\["[^"]+"]\(\);~msi',
            'id' => 'dictVarsContent',
        ],
        [
            'full' => '~(\${[\'"]GLOBALS[\'"]}\[[\'"](\w{1,50})[\'"]\])=[\'"](\w{1,50})[\'"];if\(isset\(\$_GET\[[\'"]\w{1,50}[\'"]\]\)&&\$_GET\[[\'"]\w{1,50}[\'"]\]==[\'"]\w{1,50}[\'"]\){((\${[\'"]GLOBALS[\'"]}\[[\'"]\w{1,50}[\'"]\])=[\'"]\w{1,50}[\'"];(\${[\'"]GLOBALS[\'"]}\[[\'"]\w{1,50}[\'"]\])=[\'"]\w{1,50}[\'"];(?:\$\w{1,50}=[\'"]\w{1,50}[\'"];)\${\1}=[\'".creat_funio]+;\${\5}=\$\3\(\'(\$\w{1,50})\',[\'".eval]+\(\\\\?\'\?>\\\\?\'\.[\'".base64_dco]+\(\7\)\);\'\);\${\6}\([\'"]([^\'"]+)[\'"]\);)exit;}~msi',
            'id' => 'globalsCreateFuncEvalB64',
        ],
        [
            'full' => '~(\$\w{1,50})\s?=\s?["\']([^"\']+)[\'"];\s?\$\w{1,50}\s?=\s?[\'"]{2};\s?foreach\s?\(\[[^]]+\]\s?as\s?\$\w{1,50}\)\s?{\s?\$\w{1,50}\s?\.=\s?\$\w{1,50}\[\$\w{1,50}\];\s?}\s?if\s?\(isset\(\$_REQUEST\["{\$\w{1,50}}"\]\)\)\s?{\s?\$\w{1,50}\s?=\s?\$_REQUEST\["{\$\w{1,50}}"\];\s?(?:\$\w{1,50}\s?=\s?["\']{2};\s?)+(?:foreach\s?\(\[[^]]+\]\s?as\s?\$\w{1,50}\)\s?{\s?\$\w{1,50}\s?\.=\s?\$\w{1,50}\[\$\w{1,50}\];\s?}\s?)+\$\w{1,50}\s?=\s?\$\w{1,50}\((?:[^)]+)\);\s?\$\w{1,50}\s?=\s?\$\w{1,50}\([\'"]{2},\s?\$\w{1,50}\(\$\w{1,50}\)\);\s?\$\w{1,50}\(\);\s?exit;\s?}~msi',
            'id' => 'dictForeachVars',
        ],
        [
            'full' => '~(\$\w{1,50})\s?=\s?[\'".\sgzinflate\dxa-fhr\(\)\\\\]+;\s?(\$\w{1,50})\s?=[\'".\sbase64_dcod\dxa-fhr\(\)\\\\]+;\s?(\$\w{1,50})\s?=\s?\1\(\2\((?:str_replace\("[^"]+",\s?"",\s?)?[\'"]([^\'"]+)[\'"]\)\)\)?;\s?echo\s?(?:"{\${)?\s?eval\(\3\)\s?(?:}}")?;~msi',
            'id' => 'echoEvalGzB64Var',
        ],
        [
            'full' => '~eval\(((?:str_rot13|strrev))\(\s*\'((?:.*?\\\\\')+[^\']+)\'\s?\)\);~msi',
            'id' => 'evalFuncCode',
        ],
        [
            'full' => '~eval\(openssl_decrypt\(\s?base64_decode\([\'"]([^\'"]+)[\'"]\),\s?[\'"]([^\'"]+)[\'"],\s?base64_decode\([\'"]([^\'"]+)[\'"]\),\s?OPENSSL_RAW_DATA,\s?base64_decode\([\'"]([^\'"]+)[\'"][^;]+;~msi',
            'id' => 'evalOpenSslDecrypt',
        ],
        [
            'full' => '~(\$\w{1,50})\s?=\s?urldecode\(\'([^\']+)\'\);function\s\w{1,50}(?:.*?(?:\1{\d+}\.?)+)+;~msi',
            'id' => 'urldecodedDictVarReplace',
        ],
        [
            'full' => '~global\s*\$(\w+);((?:\$\1\[\'[^\']+\'\]=base64_decode\(\'[^\']+\'\);)+)[\s\?\>\<ph]{0,10}((?:.+?\$GLOBALS\[\'\1\'\]\[\'[^\']+\'\][^;]+;)+}?(?:(?:if\s*\([^}]+})+return\s*[^}]+\}+|(?:.{1,250}?base64_decode\(\'[^\']+\'\))+[^}]+\}+)?)~msi',
            'id' => 'zymdecrypt',
        ],
        [
            'full' => '~function\s*(\w+)\((\$\w+)\)\s*\{\s*(?:(\$\w+)=strrev\(\2\);\s*\2=base64_decode\(\3\);\s*)+return\s*\((?:"\?\>"\s*\.\s*)?\2\);\s*\}\s*(eval\(\1\("[^"]+"\)\);)~msi',
            'id' => 'funcRevB64',
        ],
        [
            'full' => '~error_reporting\(\d\);\s?(\$\w{1,50})=create_function\(null,gzinflate\(convert_uudecode\("([^"]+)"\)\)\);\1\(\);~msi',
            'id' => 'createFuncGzConvertUudecode',
        ],
        [
            'full' => '~\$GLOBALS\["[^"]+"\]=Array\(\);\s?\?><\?php\sif\s?\(\!function_exists\("(\w{1,50})"\)\)\s?{function\s?\1\(\$\w{1,50}\){\$\w{1,50}=Array\(((?:[\'"][^"\']+[\'"]\s?\.?)+)\);return\sbase64_decode\(\$\w{1,50}\[\$\w{1,50}\]\);}}\s?\?><\?php\s?if\(isset\(\$GLOBALS\[\1\(0\)\]\)\)return;\s?\?><\?php\sfunction\s(\w{1,50})\(\$\w{1,50}\)\s?{\$\w{1,50}=Array\(((?:(?:[\'"][^"\']*[\'"]\s?\.?)+,?)+)\);return\sbase64_decode\(\$\w{1,50}\[\$\w{1,50}\]\);}\s?(?:.*?\3\(\d{1,5}\))+.*?\?>~msi',
            'id' => 'globalsArrayFuncs',
        ],
        [
            'full' => '~ini_set\([\'"][^\'"]+[\'"],\s?[\'"][^\'"]+[\'"]\);(\$\w{1,50})\s?=\s?array\(((?:[\'"][^\'"]+[\'"]\s?=>(?:\s?(\w{1,50})\(\d{1,5}\)\.?|\s?\$\w{1,50})+,?)+)\);.*?function\s\3\(\$\w{1,50}\){return\schr\(\$\w{1,50}\);}(?:.*?\1\[[\'"][^\'"]+[\'"]\])+.*?return\s\$\w{1,50};}\s?\w{1,50}\(\);~msi',
            'id' => 'varArrayChrFunc',
        ],
        [
            'full' => '~error_reporting\(\d{1,5}\);\s?function\s(\w{1,50})\(\$\w{1,50}\)\s?{\s?\$\w{1,50}\s?=\s?base64_decode\(\$\w{1,50}\);\s?\$\w{1,50}\s?=\s?openssl_decrypt\("\$\w{1,50}",\s?[\'"]AES-256-CBC[\'"],\s?[\'"]([^\'"]+)[\'"],\s?0,\s?[\'"]([^\'"]+)[\'"]\);return\s\$\w{1,50};\s?}(\$\w{1,50})\s?=\s?([\'"][^\'"]+[\'"]);.*?(\$\w{1,50})\s?=\s?[\'"]([^\'"]+)[\'"];\s?eval\(\1\(\6\)\);~msi',
            'id' => 'evalOpensslDecryptStr',
        ],
        [
            'full' => '~error_reporting\(\d{1,5}\);\s?function\s(\w{1,50})\(\)\s?{\s?(\$\w{1,50})\s?=\s?[\'"]([^\'"]+)[\'"];\s?\$\w{1,50}\s?=\s?((?:(?:\2\[\d{1,5}\]|[\'"][(_\\\\\'"]+[\'"])\s?\.?\s?)+);\sreturn\s\$\w{1,50};\s?}\s?eval\(\1\(\)\s?\.\s?([\'"][^\'"]+[\'"]\)+;)[\'"]\);~msi',
            'id' => 'evalDictionaryFuncVar',
        ],
        [
            'full' => '~(?:\$\w+\s?=\s?base64_decode\((?:(?:chr\(\d+\)|"[\w=]"|\'[\w=]\')[\s.]*)+\);\s?)+(?:(?:update_option\(|\$\w+=)\$\w+\([^;]+;|(?:eval\(\$\w{1,50}\(\$_POST\[base64_decode\((?:.*?base64_decode\((?:(?:chr\(\d+\)|"[\w=]"|\'[\w=]\')[\s.]*)+\)\s?)+[^;}]+[;}\s]*))+~msi',
            'id' => 'manyBase64DecodeChr',
        ],
        [
            'full' => '~define\((?:base64_decode\()+[\'"][^\'"]+[\'"]\)+,\s?__FILE__\);\s?\${(?:base64_decode\()+[\'"][^\'"]+[\'"]\)+}\s?=\s?(?:base64_decode\([\'"][^\'"]+[\'"]\));\s?(?:\${(?:base64_decode\()+[\'"][^\'"]+[\'"]\)+}\s?\.?=\s?(?:\${(?:base64_decode\()+[\'"][^\'"]+[\'"]\)+}\[[\d\-\+\s(\)]+\]\s?\.?\s?)+;\s?)+eval\(\${(?:base64_decode\()+[\'"][^\'"]+[\'"]\)+}\([\'"][^\'"]+[\'"]\)+;~msi',
            'id' => 'manyB64CalcEval',
        ],
        [
            'full' => '~(\$[^ =]+)\s{0,10}=\s{0,10}\'([^\']+)\';\s{0,10}([^(]+)\(\1\);\s*function\s*\3\((\$[^\)]+)\)\{\s*(\$[^= ]+)\s*=\s*\'[base64_dco.\']+;\s*(\$[^= ]+)\s*=\s*array\(((?:(?:\'[\w+@\)#%\(\$\*;]\'|\5\(\'[^\']+\'\)),?)+)\);\s*((?:(\$[^= ]+)\s*=\s*(?:\6\[\d+\]\.?)+;\s*)+)(\$[^= ]+)\s*=\s*([^;]+);return\s*eval\(\10\);\s*\}~msi',
            'id' => 'da7Q9RnPjm',
        ],
        [
            'full' => '~(?:\$\w{1,50}\s?=\s?(?:[\'"][^\'"]+[\'"]|(?:str_replace|\$\w{1,50})\([\'"][^\'"]+[\'"],\s*[\'"][^\'"]*[\'"],\s*[\'"][^\'"]+[\'"]\));\s*)+(\$\w{1,50}\s?=\s?\$\w{1,50}\([\'"]{2},\s*((?:\$\w{1,50}\()+)[\'"]([^\'"]+)[\'"],\s?[\'"]{2},\s?((?:\$\w{1,50}\.?)+)\)+;)~msi',
            'id' => 'strReplaceVarsCreateFunc',
        ],
        [
            'full' => '~(?:\$\w+\s*=\s*\'[^\']+\';\s*)+\$\w+=(?:\$\w+(?:\[\'?\d+\'?\])?\s*\.?\s*)+;\s*(\$\w+)\s*=\s*\$\w+;\s*(\$\w+)\s*=\s*\$\w+\(\1,(?:\$\w+(?:\[\'?\d+\'?\])?\s*\.?\s*)+\);\s*\2\s*\((?:\$\w+(?:\[\'?\d+\'?\])?\s*\.?,?\s*)+\);~msi',
            'id' => 'createFuncDict',
        ],
        [
            'full' => '~(\$\w+)=\'create_function\';(\$\w+)=\'\s*\';(\$\w+)=\1\(\2,\'eval\(array_pop\(func_get_args\(\)+;\'\);\3\((?:(\'[^\']+\',?)+)\);~msi',
            'id' => 'createFuncArrayPop',
        ],
        [
            'full' => '~error_reporting\(\d\);\s*(\$\w{1,50})\s?=\s?[\'"]([^\'"]+)[\'"];\s*(?:\$\w{1,50}\s?=\s?base64_decode\([\'"][^\'"]+[\'"]\);\s?)+(?:\$\w{1,50}\s?=\s?\$\w{1,50}\(\1\);\s?)+(\$\w{1,50})\s?=\s?[\'"]{2};\s?for\(\$\w{1,50}\s?=\s?0\s?;\s?\$\w{1,50}\s?\<\s?\$\w{1,50}\s?;\s?\$\w{1,50}\+\+\s?\){\3\s?\.=\s?(\$\w{1,50})\({1,5}(\$\w{1,50})\(\$\w{1,50}\[\$\w{1,50}\]\)\s?\^\s?(\d{1,20})\)+\s?;\s?}\s?eval\s?\(\3\);\s?return;~msi',
            'id' => 'chrOrdB64FuncVars',
        ],
        [
            'full' => '~class\s(\w{1,50})\s{0,10}{\s{0,10}private\sstatic\s(\$\w{1,50});\s{0,10}static\sfunction\s(\w{1,50})\((\$\w{1,50}),\s?(\$\w{1,50})\)\s?{\s?if\s?\(!self::(\$\w{1,50})\):\s?self::(\w{1,50})\(\);\s?endif;\s?(\$\w{1,50})\s?=\s?strlen\(\5\);\s?(\$\w{1,50})\s?=\s?base64_decode\(self::\2\[\4\]\);\s?for\s?\((\$\w{1,50})\s?=\s?0\s?,\s?(\$\w{1,50})\s?=\s?strlen\(\9\);\s?\10\s?!==\s?\11;\s?\+\+\10\):\s?\9\[\10\]\s?=\s?chr\(ord\(\9\[\10\]\)\s?\^\s?ord\(\5\[\10\s?%\s?\8\]\)\);\s?endfor;\s?return\s\9;\s?\}\s?private\sstatic\sfunction\s\7\(\)\s?{\s?self::\6\s?=\s?array\(((?:[^=]+=>[^,]+)+)\);\s?}\s?}((?:.*?\1::\3\([^)]+\))+[;}\s]+)~msi',
            'id' => 'classArrayDictFunc',
        ],
        [
            'full' => '~(\$\w{1,50})\s?=\s?[\'"]{2};\s?(\$\w{1,50})\s?=\s?[\'"]{2};\s?((?:\2\s?\.=\s?"[^"]+";\s?)+)(\$\w{1,50})\s?=\s?"((?:[^";]+;?"?)+)"\s?;\s?(\$\w{1,50})\s?=\s?"((?:[^";]+;?"?)+)"\s?;\s?foreach\(str_split\(\2\)\s?as\s?(\$\w{1,50})\)\s?{\s?\1\s?\.=\s?\(strpos\(\6,\s?\8\)\s?===\s?false\)\s?\?\s?\8\s?:\s?\4\[strpos\(\6,\s?\8\)\];\s?}\s?\1\s?=\s?"\?>\1"\s?;\s?eval\(\s?\1\s?\);~msi',
            'id' => 'concatVarsIterDict',
        ],
        [
            'full' => '~function\s(\w{1,50})\((\$\w{1,50}),\s?(\$\w{1,50})\)\s?{\s?(\$\w{1,50})\s?=\s?[\'"]{2};\s?for\((\$\w{1,50})\s?=\s?0;\s?\5\s?<\s?strlen\(\s?\2\s?\)\s?;\s?\)\s?for\((\$\w{1,50})\s?=\s?0\s?;\s?\6\s?<\s?strlen\(\s?\3\s?\);\s?\6\+\+,\s?\5\+\+\s?\)\s?\4\s?\.=\s?\2{\5}\s?\^\s?\3{\6}\s?;\s?return\s\4;\s?}\s?;\s?(?:\$\w{1,50}\s?=\s?[\'"][^\'"]+[\'"];\s?)*eval\(\1\(base64_decode\([\'"]([^\'"]+)[\'"]\)\s?,\s?[\'"]([^\'"]+)[\'"]\)\);\s?(?:\$\w{1,50}\s?=\s?[\'"][^\'"]+[\'"];\s?)*~msi',
            'id' => 'funcB64TwoArgs',
        ],
        [
            'full' => '~(?:\$\w+=base64_decode\(\'[^\']+\'\);)+(?:(\$\w+)=str_replace\(base64_decode\(\'[^\']+\'\),\'\',(?:base64_decode\(\'[^\']+\'\)|(?:\$\w+\.?)+)\);)+(\$\w+)=\$\w+\(\'\',\1\);\2\(\);~msi',
            'id' => 'strReplaceB64',
        ],
        [
            'full' => '~(\$\w+)=str_replace\(\'([^\']+)\',\'\',\'([^\']+)\'\);(\$\w+)=create_function\(\'\',\1\);\4\(\);~msi',
            'id' => 'createFuncStrReplace',
        ],
        [
            'full' => '~(\$\w+)\s?=\s?base64_decode\(\'([^\']+)\'\);\s?(\$\w+)\s?=\s?\'[\w\.]+\';\s?(\$\w+)\s?=\s?\(file_exists\(\3\)\)\s?\?\s?fopen\(\3,\s?"a\+"\)\s?:\s?fopen\(\3,\s?"w\+"\);\s?fwrite\(\4,\s?\1\);\s?fclose\(\4\);~msi',
            'id' => 'manyBase64DecodeContent',
        ],
        [
            'full' => '~((\$\w{1,50})\s*=\s*"(\\\\[\w\\\\]+)?";\s*)+(?:error_reporting\(0\);\s*)?(\$\w{1,50})\s*=\s*\$\w+\(([\'"][^\'"]+[\'"])\);\s*\4\s*=\s*\2\(\4\);\s*\$\w+\s*=\s*\$\w+\(\'[^\']+\',\4\);~msi',
            'id' => 'createFuncGzuncompressB64',
        ],
        [
            'full' => '~(?:\$\{"[\\\\x0-9a-fGLOBALS]+"}\["[^"]+"\]="[^"]+";)+echo\s*"[^"]+";if\(isset\(\$_POST\["[^"]+"\]\)\)\{date_default_timezone_set\("[^"]+"\);(?:(?:(?:\$\{)+"[\\\\x0-9a-fGLOBALS]+"}\["[^"]+"\]\}?|\$\w+|\$\{\$\w+\})=[^;]+;)+move_uploaded_file\([^\)]+\);}if\(isset\(\$_GET\["[^"]+"\]\)\)\{echo\s*"[^;]+";exit\(0\);\}~msi',
            'id' => 'globalsSlashed',
        ],
        [
            'full' => '~(\$\w{1,50})\s?=\s?[\'"]([^\'"]+)[\'"];\s{0,10}((?:\$\w{1,50}\s?=\s?base64_decode\([\'"][^\'"]+[\'"]\);\s?)+)\s?\1\s?=\s?(\$\w{1,50})\((\$\w{1,50})\(\1\)\);\s?(\$\w{1,50})\s?=\s?(\$\w{1,50})\(\1\);\s?(\$\w{1,50})\s?=\s?[\'"]{2};\s?for\((\$\w{1,50})\s?=\s?0;\s?\9\s?<\s?\6;\s?\9\+\+\s?\)\s?{\8\s?\.=\s?(\$\w{1,50})\(\((\$\w{1,50})\(\1\[\9\]\)\s?\^\s?(\d{1,10})\)\);}\s?eval\(\8\);\s?return;~msi',
            'id' => 'b64VarsFuncEval',
        ],
        [
            'full' => '~(?:\@null;\s*echo\@null;\s*)?((?:\$\w+=\'\w+\';\s*)+)((?:\$\w+=(?:\$\w+\.?)+;\s*)+)(eval\((?:\$\w+\()+(?:\'[^\']+\'|"[^"]+")\)+;)(?:\s*\@null;)?(exit;)?~msi',
            'id' => 'nullEcho',
        ],
        [
            'full' => '~(\$\w{1,40})\s?=\s?\(\"(.+)\"\);.*\@header\(\$\w{1,40}\);.*exit\(\);~msi',
            'id' => 'arrayReplacing',
        ],
        [
            'full' => '~((?:(?:\$\w{1,50}\s?=\s?[\'"]\w+[\'"];)+\s*\$\w{1,50}\s?=\s?(?:\$\w{1,50}\.?)+;\s*)+)eval\((?:\$\w{1,50}\(?)+[\'"][^\'"]+[\'"]\)+;~msi',
            'id' => 'varConcatedReplaceEval',
        ],
        [
            'full' => '~(\$\w{1,50}+)\s?=\s?[\'"]{2};(?:(?:\$\w{1,50}\s?=\s?[\'"][^\'"]+[\'"];)+\$\w{1,50}\s?\.=\s?\$\w{1,50};\s?)+((?:(?:\$\w{1,50}\s?=\s?[\'"]\w+[\'"];\s?)+\s*\$\w{1,50}\s?=\s?(?:\$\w{1,50}\.?)+;\s*)+)\s?function\s(\w{1,50})\((\$\w{1,50}+),\s?(\$\w{1,50}+)\)\s?{\s?return\sstr_replace\(\5,\s?[\'"]([^\'"]+)[\'"],\s?\4\);\s?}\s*eval\(((?:\$\w{1,50}\()+)\3\(\1,\s?[\'"]([^\'"]+)[\'"]\)+;~msi',
            'id' => 'varsConcatedFuncStrReplaceEval',
        ],
        [
            'full' => '~error_reporting\(E_ALL\)\;\s?\$\w{1,50}\s?=\s?[\'"](.*)[\'"]\;\s?file_put_contents\(\$_SERVER\[[\'"]DOCUMENT_ROOT[\'"]\].+base64_decode.+~msi',
            'id' => 'b64putContents',
        ],
        [
            'full' => '~(?:\$\w+=base64_decode\(\'[^\']+\'\);)+\s*(?:\$\w+=\$_SERVER\[base64_decode\(\'[^\']+\'\)\];)+\$\w+="[^"]+";(?:\$\w+\.?=(?:base64_decode\(\'[^\']+\'\)\.?)+;)+mail\(base64_decode\(\'[^\']+\'\),\$\w+,\$\w+,\$\w+\);\s*eval(?:\(\$\w+)+\(+\$\w+\)+;~msi',
            'id' => 'b64WSO',
        ],
        [
            'full' => '~function\s*(\w+)\(\)\s*\{\s*(\$\w+)\s*=\s*\'([^\')]+)\';\s*(\$\w+)\s*=((?:\s*(?:\2\[\d+\]|\'[^\';]+\'+)\s*\.?)+);\s*return\s*\4;\s*\}\s*eval\(\1\(\)\s*\.\s*\'([^\']+)\'\)+;\s*\'\);~msi',
            'id' => 'evalFuncDict',
        ],
        [
            'full' => '~((\$\w+)=(?|urldecode\(\'([^\']+)\'\);|"([^"]+)";))((?:\$\w+\.?=(?:\$\w+[\[\{][0-9a-fx]+[\]\}]\.?)+;)+)(?|eval\(\$\w+\(\'([^\']+)\'\)\);|\$\w+=\$\w+\("",\$\w+\("([^"]+)")(?:\)\);\$\w+\(\);)?~msi',
            'id' => 'urldecodeEval',
        ],
        [
            'full' => '~((?:\$\w+=\'[^\']+\';)+)(\$\w+)="([^"]+)";\s*(eval\(\'\?>\'\.(?:\$\w+\()+\$\w+,\$\w+\*\d+\),\$\w+\(\$\w+,\$\w+,\$\w+\),\s*\$\w+\(\$\w+,\d+,\$\w+\)+);~msi',
            'id' => 'strtrEval',
        ],
        [
            'full' => '~(\$\w+)\s*=\s*"[^"]+";(?:\s*\$\w+\s*=\s*base64_decode\("[^"]+\s*"\);\s*)+\$\w+\s*=\s*fopen\([^\)]+\)\s*or\s*die\([^\)]+\);\s*\$\w+\s*=\s*\$\w+;\s*fwrite\(\$\w+,\s*\$\w+\);\s*fclose\(\$\w+\);\s*\$\w+\s*=\s*[^;]+;\s*\$\w+\s*=\s*fopen\(\$\w+,\s*"w"\)\s*or\s*die\([^\)]+\);\s*\$\w+\s*=\s*base64_decode\("[^"]+\s*"\);\s*fwrite\(\$\w+,\s*\$\w+\);\s*fclose\(\$\w+\);\s*\$\w+\s*=\s*"[^"]+";\s*.*?\1;\s*(\$\w+)\s*=\s*"[^"]+";\s*[^\)]+\);\s*\$\w+\s*=\s*"https://api\.telegram\.org/bot\2/sendmessage";\s*.*?curl_close\(\$\w+\);~msi',
            'id' => 'manyBase64DecodeContent',
        ],
        [
            'full' => '~(?:(?:if\s?\(file_exists\("\w+"\)\)\s?{\s?}\s?else\s?{\s?)?\$\w+\s?=\s?fopen\([\'"][^\'"]+\.php[\'"],\s?[\'"]w[\'"]\);)?\s?(\$\w+)\s?=\s?(?:base64_decode\()?[\'"]([^\'"]+)[\'"]\)?;\s?(?:\$\w{1,50}\s?=\s?fopen\([\'"][^\'"]+[\'"],\s?[\'"]\w[\'"]\);\s?)?(?:echo\s?)?fwrite\(\$\w{1,50}\s?,\s?(?:base64_decode\()?\$\w{1,50}\)?\);\s?fclose\(\$\w{1,50}\);\s?}?~msi',
            'id'   => 'funcFile',
        ],
        [
            'full' => '~(?:\$\w+=\'[^\']+\';)*(\$\w+)=create_function\("",base64_decode\("([^\']+)"\)\);\1\(\);~msi',
            'id' => 'createFuncB64',
        ],
        [
            'full' => '~(\$\w+)=(\d+);(\$\w+)=explode\("([^"]+)","([^"]+)"\);(\$\w+)="";foreach\(\3\s*as\s*(\$\w+)\)\s*if\s*\(\7!=""\)\s*\6\.=chr\(\7\^\1\);\s*eval\(\6\);~msi',
            'id' => 'chrXor',
        ],
        [
            'full' => '~(\$\w+)\s*=\s*"([^"]+)";\1\s*=((?:\s*\w+\()+\1\)+);(\$\w+)\s*=\s*"[^"]+";\s*file_put_contents\(\4,\s*\1\);include\(\4\);unlink\(\4\);~msi',
            'id' => 'includeFilePutContents',
        ],
        [
            'full' => '~\$\w+\s*=\s*function\(\$\w+\s*,\s*\$\w+\)\s*\{\$\w+="[^"]+";return\s*\$\w+;\s*\};\s*(\$\w+)=(\'([^\']+)\');\$\w+\s*=\s*function\s*\(\)\{\s*\$\w+="[^"]+";return\s*\$\w+;\};\s*function\s*\w+\(\$\w+\s*\)\s*\{\$\w+\s*=\s*"[^"]+";\$\w+=\$\w+\[[\d\s\+\-\/\*\(\)]+\][^;]+;\s*(?:\$\w+\.=[^;]+;)+return\s*\$\w+\(\$\w+\);\}\s*function\s*\w+\s*\(\$\w+\)\s*\{\$\w+\s*=[^}]+\}\s*\1=\w+\(\1\);\1\s*=\s*\w+\(\1\);\s*eval\s*\(\$\w+\);~msi',
            'id' => 'edoced_46esab_etalfnizg',
        ],
        [
            'full' => '~function\s(\w{1,20})\((\$\w{1,100})\)\s?{\s{0,2}\2\s?=\s?gzinflate\(@base64_decode\(\2\)\);\s{0,2}for\(\$\w{1,10}=0;\$\w{1,10}<strlen\(\2\);\$\w{1,10}\+\+\)\s{0,2}{\s?\2\[\$\w\]\s?=\s?chr\(ord\(\2\[\$\w\]\)-1\);}\s{0,2}return \2;\s{0,2}}\s{0,2}define\(["\']\w{1,100}[\'"],\s?[\'"]\w{1,100}[\'"]\);eval\(\1\([\'"]([\d\w+=\/]*)["\']\)\);~mis',
            'id' => 'gzinflateBase64Decode',
        ],
        [
            'full' => '~(?:if\s*\(\!defined\("[^"]+"\)\)\s*define\("[^"]+",\s*"[^"]+"\);\s*\$GLOBALS\[[^\]]+\]=explode\("[^"]+",\s*"[^"]+"\);\s*)+if\(\!defined\(pack\(\$GLOBALS\[[^]]+\]\[\d+\],\s*\$GLOBALS\[[^]]+\]\[\d+\]\)+\s*define\(.*pack\(\$GLOBALS\[[^]]+\]\[[a-fx\d]+\],\s*\$GLOBALS\[[^]]+\]\[[a-fx\d]+\]\)+[^;]+;\s*~msi',
            'id' => 'byteCodeData',
        ],
        [
            'full' => '~(?:if\(!defined\("\w+"\)\)\s*define\("\w+","\w+"\);\$GLOBALS\[\w+\]=explode\("([^"])+",\s*"[^"]+"\);if\(!defined\(pack\(\$GLOBALS\[\w+\][\{\[][0-9a-fx]+[\}\]],\$GLOBALS\[\w+\][\{\[][0-9a-fx]+[\}\]]\)\)\)\s*define\(pack\(\$GLOBALS\[\w+\][\{\[][0-9a-fx]+[\}\]],\$GLOBALS\[\w+\][\{\[][0-9a-fx]+[\}\]]\),\s*(?:ord\(\d+\)|pack\(\$GLOBALS\[\w+\][\{\[][0-9a-fx]+[\}\]],\$GLOBALS\[\w+\][\{\[][0-9a-fx]+[\}\]]\))\);)+\$GLOBALS\[\w+\]=explode\(pack\(\$GLOBALS\[\w+\][\{\[][0-9a-fx]+[\}\]],\$GLOBALS\[\w+\][\{\[][0-9a-fx]+[\}\]]\),pack\(\$GLOBALS\[\w+\][\{\[][0-9a-fx]+[\}\]],\$GLOBALS\[\w+\][\{\[][0-9a-fx]+[\}\]]\)\);if\(!defined\(\'([^\']+)\'\)\)define\(\'\2\',__FILE__\);\s*\$GLOBALS\["(\w+)"\]=array\("([^\)]+)"\);eval\(\$\{"[^"]+"\}\["\3"\]\[\d+\]\("([^"]+)"\)\);if\(!defined\("\w+"\)\)\s*define\("\w+","\w+"\);\$GLOBALS\[\w+\]=explode\("([^"])+",\s*"[^"]+"\);if\(!\$GLOBALS\[\w+\][\{\[][0-9a-fx]+[\}\]]\(pack\(\$GLOBALS\[\w+\][\{\[][0-9a-fx]+[\}\]],\$GLOBALS\[\w+\][\{\[][0-9a-fx]+[\}\]]\)\)\)\s*\{exit\(pack\(\$GLOBALS\[\w+\][\{\[][0-9a-fx]+[\}\]],\$GLOBALS\[\w+\][\{\[][0-9a-fx]+[\}\]]\)\);while\(\$GLOBALS\[\w+\][\{\[][0-9a-fx]+[\}\]]\(pack\(\$GLOBALS\[\w+\][\{\[][0-9a-fx]+[\}\]],\$GLOBALS\[\w+\][\{\[][0-9a-fx]+[\}\]]\)\)\)require\s*\(pack\(\$GLOBALS\[\w+\][\{\[][0-9a-fx]+[\}\]],\$GLOBALS\[\w+\][\{\[][0-9a-fx]+[\}\]]\)\);\}while\(\$GLOBALS\[\w+\][\{\[][0-9a-fx]+[\}\]]\(\)<\([\w\+\-\*\/]+\)\)\s*return;~msi',
            'id' => 'OESNS_cms',
        ],
        [
            'full' => '~(\$\w{1,50})\s?=\s?[\'"]([^\'"]+)[\'"];\s?(\$\w{1,50})\s?=\s?base64_decode\(\1\);\s?if\s?\(file_exists\([\'"][^\'"]+[\'"]\)\)\s?{header\([\'"][^\'"]+[\'"]\);\s?}\s?else\s?{\s?file_put_contents\([\'"][^\'"]+[\'"],\s?\3\);\s?}~msi',
            'id' => 'filePutContentsB64Var'
        ],
        [
            'full' => '~(?|define\([\'"][^\'"]+["\'],[\'"]{2}\);\s?function\s(\w{1,100})\(\$\w{1,50}\)\s?\{\s?\$\w{1,50}\s?=\s?str_rot13\(\$\w{1,50}\);\s?return\s\$\w{1,50};\s?\}\s?function\s(\w{1,100})\(\)\s?\{\s?\$\w{1,50}\s?=\s?[\'"]([^\'"]+)[\'"];\s?\$\w{1,50}\s?=\s?\1\(\$\w{1,50}\);\s?(\w{1,100})\(\$\w{1,50}\);\s?\}\s?function\s(\w{1,100})\(\$\w{1,50}\)\s?\{\s?\$\w{1,50}\s?=\s?\$\w{1,50}\s?\.\s?[\'"]([^\'"]+)[\'"];\sreturn\s\$\w{1,50};\s?\}\s?function\s(\w{1,100})\(\$\w{1,50}\)\s?\{\s?global\s?\$\w{1,50};\s?\$\w{1,50}\s?=\s?[\'"]([^\'"]+)[\'"];\s?\$\w{1,50}\s?=\s?\5\(\$\w{1,50}\);\s?\$\w{1,50}\s?=\s?[\'"]{2};\s?\@?eval\((?:`[^`]+`\s?\.\s?)?\$\w{1,50}\s?\.\s?\$\w{1,50}\([\'"]H\*[\'"],\s?\$\w{1,50}\)\.\$\w{1,50}\);\s?\}\s?\2\(\)|function\s*(\w+)\(\)\{\s*\$\w+=call_user_func\("[^"]+","[^"]+"\);\s*(\$\w+)\s*=\s*"([^"]+)";\s*\$\w+\s*=\s*call_user_func\("\$\w+","\2"\);\s*return\s*\$\w+;\s*\}\s*(\$\w+)=\1\(\);\s*class\s*(\w+)\s*\{\s*public\s*\$(\w+)\s*=\s*\'\';\s*function\s*__destruct\(\)\{\s*\$\w+=&(\$\w+)\."";\s*\7="\$this->\6";\s*eval\([^\)]+\);\s*\}\s*\}\s*(\$\w+)=pack\(\'H\*\',\4\);\s*(\$\w+)\s*=\s*new\s*\5;\s*\9->\6\s*=\s*"\8");~msi',
            'id' => 'strRot13PackFuncs'
        ],
        [
            'full' => '~if\(\!defined\([\'"][^\'"]+[\'"]\)\)\s?define\([\'"][^\'"]+[\'"],[\'"][^\'"]+[\'"]\);\s?\$GLOBALS\[(\w{1,50})\]\s?=\s?explode\([\'"]([^\'"]+)[\'"],\s?[\'"]([^\'"]+)[\'"]\);\s?if\(\!defined\(pack\(\$GLOBALS\[\w{1,50}\]\[\w+\],\s?\$GLOBALS\[\w{1,50}\]{\d+}\)\)\)\s?define\(pack\(\$GLOBALS\[\w{1,50}\]\[\w+\],\s?\$GLOBALS\[\w{1,50}\]{\d+}\),\s?ord\(\d+\)\);\s?if\(\!defined\([\'"][^\'"]+[\'"]\)\)\s?define\([\'"][^\'"]+[\'"]\s?,\s?__FILE__\);\s?\$GLOBALS\[[\'"]([^\'"]+)[\'"]\]\s?=\s?array\(((?:"[^\'"]+"\s?,?\s?)+)\);\s?(eval\(\$GLOBALS\["\4"\]\[(\d+)\]\("(.*)"\)\);)\s?if\(\!defined\([\'"][^\'"]+[\'"]\)\)\s?define\([\'"][^\'"]+[\'"]\s?,\s?[\'"][^\'"]+[\'"]\);\s?\$GLOBALS\[(\w+)\]\s?=\s?explode\([\'"]([^\'"]+)[\'"],\s?[\'"]([^\'"]+)[\'"]\);\s?(?:.*?\$GLOBALS\[\9\][[{]\d+[]}])+\)+;~msi',
            'id' => 'definedGlobalsEval'
        ],
        [
            'full' => '~error_reporting\(0\);\s*(\$[^=]+)=\'([^\']+)\';((?:\$[^=]+=(?:\1\[\d+\]\.?)+;)+)\$[^=]+=(?:\$[^\(]+\()+\'\\\\\\\\\',\'/\',__FILE__\)+;\$[^=]+=\$[^\(]+\(\$[^)]+\);\$[^=]+=\$[^;]+;\$[^=]+=\$[^\(]+\(\'\',\$[^\)]+\)\.\$[^\(]+\(\$[^,]+,0,\$[^\(]+\([^,]+,\'@?ev\'\)\);(\$[^=]+)=\$[^\(]+\([^;]+;(?:\$[^=]+=)+NULL;eval\((\$[^\(]+)\((\$[^\(]+)\(\4,\'\',(\$[^\(]+)\(\'([^\']+)\',\'([^\']+)\',\'([^\']+)\'\)\)\)\);unset\(\$[^\)]+\);return;\?>\s*(.*)~msi',
            'id' => 'evalB64Strtr'
        ],
        [
            'full' => '~function\s*(\w+)\((\$\w+)\)\{\s*return\s*base64_decode\(\2\);\s*\}\s*function\s*(\w+)\((\$\w+),\s*(\$\w+)\)\s*\{\s*\4\s*=\s*\1\(\4\);\s*(\$\w+)\s*=\s*strlen\(\4\);\s*(\$\w+)\s*=\s*strlen\(\$\w+\);\s*if\s*\(\6\s*\<=\s*\7\)\s*\{\s*return\s*\4\s*\^\s*\5;\s*\}\s*for\s*\((\$\w+)\s*=\s*0;\s*\8\s*\<\s*\6;\s*\+\+\8\)\s*\{\s*\4\[\8\]\s*=\s*\4\[\8\]\s*\^\s*\5\[\8\s*\%\s*\7\];\s*\}\s*return\s*\4;\s*\}\s*(\$\w+)\s*=\s*"([^"]+)";\s*(\$\w+)\s*=\s*"([^"]+)";\s*(\$\w+)\s*=\s*\3\(\9,\11\);\s*eval\s*\(\13\);~msi',
            'id' => 'evalXorKey'
        ],
        [
            'full' => '~((?:\$\w+\s*=\s*function\s*\([^\)]+\)\s*\{[^}]+\};\s*|\s{0,10}function\s*\w+\s*\([^\)]*\)\s*\{\s*[^\}]+\})*)(\$\w+)=\'([^\']+)\';\s*(?1)\2\s*=\s*\$?\w+\(\2\);\s*(?1)\s*\2\s*=\s*\$?\w+\(\2\);\s*(?1)\s*eval\s*\(\2\);+\s*(?1);~msi',
            'id' => 'evalB64Gzinflate'
        ],
        [
            'full' => '~(?:\${"[\w\\\\]+"}\["[\w\\\\]+"\]="[\w\\\\]+";)?(?:(\${"([\w\\\\]+)"}\["(?2)"])="(?2)";){2}(\${(?1)})=(?3);(?:\${\${"[\w\\\\]+"}\["[\w\\\\]+"\]}=\w{1,5};)?\(count\((?3)\)==\d+&&in_array\(gettype\((?3)\)\.count\((?3)\),(?3)\)\)\?\(\(((?3)\[\d+\])=(?4)\.(?4)\)\&\&\((?4)=(?4)\((?4)\)\)\&\&\((?3)=(?4)\((?4),(?4)\((?4)\)\)\)\&\&(?3)\(\)\):(?3);~msi',
            'id' => 'onelineBackdoor'
        ],
        [
            'fast' => '~(?:\$\w+\s*=\s*\'[urldeco]+\';)+\s*(?:(\$\w+)=(?:\$\w+\.?)+;)?(\$\w+)\s*=\s*\1\([\'"]([%0-9a-f]+)[\'"]\);\s*(((\$\w+)\s*\.?=(\s*\$\w+\{\d+\}\.?)+;\s*)+)\s*eval\(\6\("([^"]+)"\)\);~msi',
            'full' => '~(?:\=@null;)?(?:\$\w+\s*=\s*\'[urldeco]+\';)+\s*(?:(\$\w+)=(?:\$\w+\.?)+;)?(\$\w+)\s*=\s*\1\([\'"]([%0-9a-f]+)[\'"]\);\s*(((\$\w+)\s*\.?=(\s*\$\w+\{\d+\}\.?)+;\s*)+)\s*(eval\(\6\("([^"]+)"\)\);)~msi',
            'id' => 'urlDecodeDict'
        ],
        [
            'full' => '~class\s*lutucope\s*\{\s*(var\s*\$(\w+)\s*=\s*"([^"]+)";\s*)(var\s*\$(\w+)\s*=\s*array\(([^\)]+)\);\s*)(public\s*\$(\w+)\s*=\s*array\("([^\)]+)"\);\s*)public\s*\$(\w+)\s*=\s*false;\s*public\s*\$(\w+)\s*=\s*false;\s*public\s*\$(\w+)\s*=\s*false;\s*var\s*\$\w+\s*=\s*null;\s*var\s*\$\w+\s*=\s*null;\s*(var\s*\$(\w+)\s*=\s*"([^"]+)";\s*)(var\s*\$\w+\s*=\s*"([^"]+)";).*?\11\s*=\s*\$\w+;\s*return\s*true;.*?\11\)\s*\{\s*@?eval\(\$\w+\-\>\11\);.*?\11\s*\)\s*\{\s*@?eval\(\$\w+\-\>\11\);\s*\}\s*else\s*\{\s*@eval\(\$\w+\-\>\10\);\s*\}\s*\}~msi',
            'id' => 'wpMlwPluginGegelShell'
        ],
        [
            'full' => '~(\$\w{1,50})\s?=\s?range\(\s?chr\(\s?(\d+)\)\s?,\s?chr\(\s?(\d+)\)\s?\);\s?\@include\s?(?:\1\[\d{1,5}\]\.?)+;~msi',
            'id' => 'dictVarRange'
        ],
        [
            'full' => '~(?:if\(!defined\("\w+"\)\)\s*define\("\w+","\w+"\);(\$GLOBALS\[\w+\])=explode\(\'([^"])+\',\s*\'[^\']+\'\);)+if\(!defined\((pack\(((?1)\[[\w]+\]),\s*(?4)\))\)\)(call_user_func\((?3),(?3),(?3)\);).*?call_user_func_array\(\'explode\',.*?call_user_func_array\("pack",.*?call_user_func_array\("is_object",.*?array_merge\(array\(\$\w+\),\$GLOBALS\[[^}]+}[^}]+}~msi',
            'id' => 'thinkPHP_cms'
        ],
        [
            'full' => '~(\$\w{1,50})\s?=\s?function\((\$\w{1,50})\s?\)\s?{\$\w{1,50}\s?=\s?[\'"][base64_decode]{6,}[\'"];.*?return\s\$\w{1,50}\(\2\)\s?;\s?}\s?;.*?(\$\w{1,50})\s?=\s?function\s?\(\s?\$\w{1,50}\s?\)\s?{\s?eval\s?\(\$\w{1,50}\);[^}]+}\s?;\s?.*?function\s(\w{1,50})\s?\((\$\w{1,50})\s?\)\s?{\$\w{1,50}\s?=\s?[\'"][gzinflate]{6,}[\'"];.*?return\s\$\w{1,50}\(\5\);\s?}\s?(\$\w{1,50})\s?=\s?[\'"]([^\'"]+)[\'"];\$\w{1,50}\s?=\s?\1\(\6\);\s?\6\s?=\s?\4\(\6\);\s?\3\s?\(\6\);+~msi',
            'id' => 'varFuncsCallEvalV1'
        ],
        [
            'full' => '~(\$\w{1,50})\s?=\s?[\'"]([^\'"]+)[\'"];\s?(\$\w{1,50})\s?=\s?function\s?\((\$\w{1,50})\s?\)\s?{\$\w{1,50}\s?=\s?[\'"][base64_decode]{6,}[\'"];.*?return\s\$\w{1,50}\(\4\)\s?;\s?}\s?;.*?\1\s?=\s?\3\(\1\);\s?\1\s?=\s?(\w+)\(\1\);\s?(\w+)\s?\(\1\);.*?function\s\6\s?\(\$\w{1,50}\s?\)\s?{\s?eval\s?\(\$\w{1,50}\);\s?return\s?[^;]+;\s?}\s?function\s?\5\((\$\w{1,50})\)\s?{\$\w{1,50}\s?=\s?[\'"][gzinflate]{6,}[\'"];.*?return\s\$\w{1,50}\(\7\);\s?}\s?;~msi',
            'id' => 'varFuncsCallEvalV2'
        ],
        [
            'full' => '~(\$\w{1,50})\s?=\s?"(\\\\[x\d][^"]+)";\s?((?:\$\w{1,50}\s?=(?:\s?\1\[[\d\s/+\-*()]+\]\s?\.?)+;\s?)+)(\$\w{1,50})\s?=\s?"(\\\\[x\d][^"]+)";\s?((?:(\$\w{1,50})\s?\.?=\s?\$\w{1,50};\s)+)\@?\(\$\w{1,50}\s?=\s?\$\w{1,50}\([\'"]{2},\s?\7\)\);\s?\@?\$\w{1,50}\(\);~msi',
            'id' => 'dictStrippedVarsCreateFunc'
        ],
        [
            'full' => '~\$GLOBALS\[\'[^\']+\'\]=\'[^\']+\';((\$\w+)="([^"]+)";(\$\w+)=substr\(\2,\s*\2\[(\d+)\],\s*\2\[(\d+)\]\);(\$\w+)=substr\(\2,\2\[(\d+)\]\+\2\[(\d+)\],\2\[(\d+)\]\);\s*(\$\w+)=substr\(\2,\2\[(\d+)\]\+\2\[(\d+)\]\+\2\[(\d+)\]\);)\s*(define\(\'([^\']+)\',\'[^\']+\'\);\$_SERVER\[\16\]=\4\(\'([^\']+)\',\7\(substr\(\11\(\'([^\']+)\'\),(0x\w+),\s*(\-\d+)\)+;).+?((.+?\$_SERVER\[\16\]\[[0-9a-fx]+\]).+?)+[^}]+\}\}\}[^}]+\}return\s*\$\w+;\}~msi',
            'id' => 'dictFuncsSubstr'
        ],
        [
            'full' => '~error_reporting\(0\);@?set_time_limit\(0\);ini_set\(\'memory_limit\',\s*\'-?\d+\'\);(\$\w+)\s*=\s*\'[^\']+\';(\$\w+)\s*=\s*array\(([^\)])+\);function\s*(\w+)\((\$\w+)\)\{\s*\$\w+\s*=\s*strlen\(trim\(\5\)\);\s*\$\w+\s*=\s*\'\';\s*for\s*\([^{]+\{\s*\$\w+\s*\.=\s*pack\("C",\s*hexdec\(substr\(\5,\s*\$\w+,\s*2\)\)\);\s*\}\s*return\s*\$\w+;\}if\s*\((?:md5\()+\$_SERVER\[\'[^\']+\'\]\)+\s*\!==\s*\1\)\s*\{\s*header\(\'HTTP/1\.1 404 Not Found\'\);\s*header\("status: 404 Not Found"\);\s*exit\(\);\}((\$\w+)\s*=\s*\'\4\';(?:\$\w+\s*=\s*\7\(\'[^\']+\'\);\s*|\$\w+\s*=\s*"";)+if\s*\(!function_exists\(\$\w+\)\)\s*\{\s*function\s*\w+\(\$\w+\)\s*\{\s*global\s*\$\w+,[^}]+\}\s*do\s*\{[^}]+\}\s*while\s*[^}]+\}\}\s*else\s*\{\s*function\s*\w+\(\$\w+\)\s*\{\s*global\s*\$\w+;\s*return\s*\$\w+\(\$\w+\);\s*\}\}if\s*\(!function_exists\(\$\w+\)\)\s*\{\s*function\s*\w+\(\$\w+\)\s*\{\s*global\s*\$\w+,[^}]+\}\s*[^}]+\}[^}]+\}\s*while\s*\([^}]+\}\}\s*else\s*\{\s*function\s*\w+\([^}]+\}\}(\$\w+)\s*=\s*\7\(\'[^\']+\'\);(\$\w+)\s*=\s*@?\8\(\'([^\']+)\',\s*\$\w+\.\'\(\'\.\$\w+\.(?:\'[^\')]*\'\.)+\'\(\10\)\'\.\'\)\'\.\'\)\'\.\';\'\);\9\(\'([^\']+)\'\);)~msi',
            'id' => 'gulf2'
        ],
        [
            'full' => '~(\$\w{1,50})\s?=\s?range\(\s?chr\(\s?(\d+)\)\s?,\s?chr\(\s?(\d+)\)\s?\);\s*(?:(\$\w+)=\$\{(?:\1\[\d+\]\.?)+\};)+(?:if\(in_array\(gettype\(\4\)\."\d+",\4\)\)\{\4\[(\d+)\]=(?:\4\[\d+\]\.?)+;\4\[(\d+)\]=\4\[\5\]\(\4\[\6\]\);@?\4=\4\[\6\]\(\4\[\d+\],\4\[\5\]\(\$\{\4\[\d+\]\}\[\d+\]\)\);\4\(\);\}|@?\(count\(\4\)==\d+&&in_array\(gettype\(\4\)\.count\(\4\),\4\)\)\?\(\(\4\[\d+\]=(?:\4\[\d+\]\.?)+\)&&\(\4\[\d+\]=\4\[\d+\]\(\4\[\d+\]\)\)&&\(@?\4=\4\[\d+\]\(\4\[\d+\],\4\[\d+\]\(\$\{\4\[\d+\]\}\[\d+\]\)\)\)&&\4\(\)\):\4;\s*)\s*(\$\w{1,50})\s?=\s?range\(\s?chr\(\s?(\d+)\)\s?,\s?chr\(\s?(\d+)\)\s?\);(\$\w+)\s*=\s*array\((@?\$\{(?:\7\[\d+\]\.?)+\}\[(?:\7\[\d+\]\.?)+\],\s*(?:(?:\7\[\d+\]\.?)+,?\s*)+@?\$\{(?:\7\[\d+\]\.?)+\}\[(?:\7\[\d+\]\.?)+\]),\);\s*(\$\w+\s*=\s*\10\[\d+\][^}]+\})~msi',
            'id' => 'dictVarRange2'
        ],
        [
            'full' => '~(\$\w{1,50})\s?=\s?range\(\s?chr\(\s?(\d+)\)\s?,\s?chr\(\s?(\d+)\)\s?\);\s*(\$\w+)=(?:\1\[\d+\]\.?)+;\s*(\$\w+)=@?\4\((?:\1\[\d+\]\.?)+,(?:\1\[\d+\]\.?)+\);@?\5\("([^"]+)"\);~msi',
            'id' => 'dictVarRange2'
        ],
        [
            'full' => '~\$\w+\s*=\s*\d+;\s*\$\w+\s*=\s*"\w+";\s*error_reporting\([^\)]+\);\s*set_time_limit\(\d+\);\s*\$\w+\s*=\s*\d+;\s*(\$\w+)\s*=\s*"([^"]+)";\s*(\$\w+)\s*=\s*"([^"]+)";.*?\3,\s*base64_decode\(\1\),\s*\$\w+,\s*\$\w+\);\s*\$\w+\s*=\s*[^}]+}~msi',
            'id' => 'fileInjector'
        ],
        [
            'full' => '~((?:(?:\$\s?\{\s?)?\$\w{1,50}\s?\}?\s?=\s?[\'"][^\'"]+[\'"];\s?|\$\s?{\s?(?:\$\s?\{)?\s?"GLOBALS"\s?}\s?\[[\'"][^\'"]+[\'"]\]\s?}?\s?=\s?[\'"][^\'"]+[\'"];\s?|echo\s?"[^"]*";\s?)+(?:\${\${[\'"]GLOBALS[\'"]}\[[\'"][^\'"]+[\'"]\]}\s?=\s?(?:\$\w{1,50}\s?\.?\s?|\${\${[\'"]GLOBALS[\'"]}\[[\'"][^\'"]+[\'"]\]}\s?\.?\s?)+;\s?)*)eval\((?:(?:(?:\$\s?\{\s?\$\w+\s?\}\s?\()?\$\s?{\s?\$\s?{\s?[\'"]GLOBALS[\'"]\s?}\s?\[\s?[\'"][^\'"]+[\'"]\s?\]\s?}\s?\()+(?:[\'"][^\'"]+[\'"]|\(\$\s?\{\s?\$\s?\{\s?"GLOBALS"\s?\}\s?\["[^"]+"\]\s?\})\)+\));~msi',
            'id' => 'globalsEvalFuncs'
        ],
        [
            'full' => '~(\$[^\s]+)\s?=\s?[\'"]([^\'"]+)[\'"];\s?([\w\W][^\s(]+)\(\1\);\s?function\s\3\((\$[^\s)]+)\)\s?{\s?(\$[^\s)]+)\s?=\s?[\'"base64dco_.]+;\s?(\$[^\s)]+)\s?=\s?array\(((?:(?|[\'"][\w\+@()#_%\$*;][\'"]\s?,?|\5\([\'"][^\'"]+[\'"]\),?)+))\);\s?((?:(?:\$[^\s)]+)\s?=\s?(?:\6\[\d{1,5}\]\.?)+;\s?)+)\s?(\$[^\s)]+)\s?=\s?((?:\$[^.]+\.?)+)\'\4\'\.(?:\6\[\d{1,5}\]\.?)+;\s?return\seval\(\9\);\s?(?:error_reporting\(\d\);\s?ini_set\([\'"][^\'"]+[\'"],\s?NULL\);\s?ini_set\([\'"][^\'"]+[\'"],\s?\d\);\s?})?~msi',
            'id' => 'arrayDictCharsConcatStr'
        ],
        [
            'full' => '~(\$\w{1,50})\s?=\s?"(\\\\[\\\\\w]+)";\s?((?:\$\w{1,50}\s?=\s?substr\(\1,\s?(?:\1\[\d+\]\+?\s?)+(?:,\s?\1\[\d+\])?\);)+)define\([\'"][^\'"]+[\'"],[\'"][^\'"]+[\'"]\);(\$\w{1,50}\[\w{1,50}\])\s?=\s?(\$\w{1,50})\([\'"]([^"\']+)[\'"],\s?(\$\w{1,50})\(substr\((\$\w{1,50})\([\'"]([^\'"]+)[\'"]\)\s?,([\d\w]+)\s?,\s?(-?\d{1,5})\)+;\s*((?:.*?\4\[[\dx]+\])+[^;}]+[;}]*)~msi',
            'id' => 'slashedDictFuncGetVar'
        ],
        [
            'full' => '~((?:\$\w{1,50}\s?=\s?[\'"][^\\\\\'"]+[\'"];\s?)+)(\$\w{1,50})\s?=\s?"([\\\\\w]+)";\s?\2\s?\.?=\s?"([\\\\\w]+)";\s?(\$\w{1,50})\s?=\s?((?:\$\w{1,50}\.?)+);\s?for\((\$\w{1,50})=(\d+);\7<=(\d+);\7\+\+\)\s?\5\s?=\s?\2\(\5\);\s?eval\(\5\);~msi',
            'id' => 'concatVarsInLoopEval'
        ],
        [
            'full' => '~function\s(\w{1,50})\((\$\w{1,50})\)\s?{\s?(\$\w{1,50})[\s=]+[\'"]([^\'"]+)[\'"];\s?(\$\w{1,50})[\s=]+[\'"]{2};\s?foreach\(\2\sas\s(\$\w{1,50})\)\s?{\s?\5[\s.=]+\3\[\6\];\s?}\s?return\s\5;\s?}\s?function\s(\w{1,50})\((\$\w{1,50}),\s?(\$\w{1,50})\)\s?{\s?(\$\w{1,50})[\s=]+array\(((?:\d+,?)+)\);\s?(\$\w{1,50})[\s=]+\1\(\10\);\s?(\$\w{1,50})[\s=]+\12\(\13\);\s?(\$\w{1,50})[\s=]+array\(((?:\d+,?)+)\);\s?(\$\w{1,50})[\s=]+\1\(\14\);\s?(\$\w{1,50})[\s=]+\16\(\13\);\s?(\$\w{1,50})[\s=]+\16\(\9\);\s?if\s?\(\17\s<=\s\18\)\s?{\s?return\s\13\s\^\s\9;\s?}\s?for\s?\((\$\w{1,50})\s?=\s?0;\s?\19\s<\s\17;\s?\+\+\19\)\s?{\s?\13\[\19\]\s?=\s?\13\[\19\]\s?\^\s?\9\[\19\s%\s?\18\];\s?}\s?return\s\13;\s?}\s?(\$\w{1,50})[\s=]+[\'"]([^\'"]+)[\'"];\s?(\$\w{1,50})[\s=]+[\'"]([^\'"]+)[\'"];\s?(\$\w{1,50})[\s=]+\7\(\20,\s?\22\);\s?eval\s?\(\24\);~msi',
            'id' => 'twoFuncStrDecodeVars'
        ],
        [
            'full' => '~(\$\w{1,50})[=\s]+range\([\'"]([^\'"]+)[\'"],\s?[\'"]([^\'"]+)[\'"]\);\s?(\$\w{1,50})[=\s]+\$({(?:\1\[\d+\][\s\.]*)+});\s?(if\s?(?:.*?\4\[\d+\])+[^;]+;})class(\w+){static\s?function(\w+)\((\$\w{1,50}),(\$\w{1,50})\s?=\d+\){\$\w{1,50}[\s=]+range\([\'"]([^\'"]+)[\'"],[\'"]([^\'"]+)[\'"]\);\$\w{1,50}[\s=]+explode\([\'"]([^\'"]+)[\'"],\9\);\s?foreach\(\$\w{1,50}\sas\s\$\w{1,50}=>\$\w{1,50}\)\$\w{1,50}\.=\$\w{1,50}\[\$\w{1,50}-\$\w{1,50}\];\s?return\s\$\w{1,50};}\s?static\s?function\s?(\w+)\(.*?curl_exec\(\$\w{1,50}\);\s?return\s[^;]+;}\s?static\s?function\s?(\w+)\(\){\$\w{1,50}\s?=\s?new\s?self\(\);((\$\w{1,50})\s?=\s?array\(([^)]+)\);foreach\(\17\sas\s\$\w{1,50}\)(\$\w{1,50})\[\]\s?=\s?\$\w{1,50}->\8\(\$\w{1,50}\);)((?:.*?\19\[\d+\])+)[^}]+}+\7::\15\(\);~msi',
            'id' => 'classArrayFuncReplaces'
        ],
        [
            'full' => '~(?:\$\{"GLOBALS"\}\["[^"]+"\]\s*=\s*"[^"]+";\s*)+\$\w+\s*=\s*"[^"]+";\s*\$\w+\s*=\s*file_get_contents\("php://input"\);\s*(?:\$\{"GLOBALS"\}\["[^"]+"\]\s*=\s*"[^"]+";\s*)+if\s*\(substr\([^\)]+\)\s*==\s*"[^"]+"\)\s*\{\s*(?:\$\{"GLOBALS"\}\["[^"]+"\]\s*=\s*"[^"]+";\s*)+\$\{\$\{"GLOBALS"\}\["[^"]+"\]\}\s*=\s*gzinflate\(substr\([^\)]+\)+;\s*@?\(\$\{\$\{"GLOBALS"\}\["[^"]+"\]\}\s=\s*\$\{\$\{"GLOBALS"\}\["[^"]+"\]\}\);\s*try\s*\{\s*eval\([^\)]+\);\s*\}\s*catch[^}]+\}\s*\}~msi',
            'id' => 'onelineBackdoor'
        ],
        [
            'full' => '~(function ([a-z]{1,20})\((\$\w{1,20})\){\s*(\$\w{1,20})\s?=\s?["\'](\w{1,100})["\'];\s*(\$\w{1,20})\s?=\s?["\']["\'];\s*foreach\(\3\s?as\s?(\$\w{1,20})\){\s*\6\s?.=\s?\4\[\7\];\s*}\s*return\s\6;\s*})\s*function \w{1,20}\(\){\s*if\s?\(isset\(\$_GET\[\'\w{1,100}\'\]\)\){\s*[^}]{1,200}}\s*}\s*add_action\([^)]{1,100}\);\s*function \w{1,20}\([^)]{1,50}\){(?:\s*\$\w{1,20}\s?=\s?\$?\w{1,20}\([^)]{1,100}\);\s*){1,20}if\s?\([^)]{1,50}\)\s?{[^}]{1,200}}\s*for\s?\([^)]{1,100}\)\s?{[^}]{1,100}}\s*return \$\w{1,20};\s*}\s*function\s\w{1,20}\(\){\s*\$\w{1,20}\s?=\s?["\']\w{1,20}["\'];\s*(?:\s*\$\w{1,20}\s?=\s?\$?\w{1,20}\([^)]{1,100}\);\s*){1,10}if\s\(isset\([^)]{1,30}\)\){(?:\s*\$\w{1,20}\s?=\s?\$?\w{1,20}\([^)]{1,100}\);\s*){1,20}(?:\s*\$\w{1,20}\s?=\s?\$\w{1,20}\[\d{1,20}\];\s*){1,10}if\([^)]{1,30}\){\s*if\([^)]{1,50}\){\s*[^;]{1,100};\s*}else{\s*[^;]{1,100};\s*}\s*if\(\$\w{1,20}\([^)]{1,30}\)\){\s*[^;]{1,100};\s*}\s*[^;]{1,100};\s*}\s*(?:\$[^;]{1,100};)\s*(?:\s*curl_setopt\([^)]{1,150}\);\s*){1,10}\s*(?:\$[^;]{1,100};){1,10}\s*curl_close\(\$\w{1,20}\);\s*if\s?\([^)]{1,30}\)\s?{\s*if\([^)]{1,50}\){\s*if\(\$\w{1,20}\([^)]{1,50}\)\){[^}]{1,100}}\s*\$[^;]{1,100};\s*}else{\s*if\(\$\w{1,20}\(\$\w{1,20}\)\){\s*\$[^;]{1,100};\s*}\s*\$[^;]{1,100};\s*}\s*if\([^)]{1,50}\){[^}]{1,100}}\s*}\s*}\s*}\s*add_action\(\'init\',\s?\'\w{1,30}\'\);~mis',
            'id' => 'oneFuncStrDecodeVars',
        ],
        [
            'full' => '~(?:\$\w+\s*=\s*\$_SERVER\["DOCUMENT_ROOT"\]\s*\.\s*"[^"]+";\s*)+(?:file_put_contents\(\$\w+,\s*file_get_contents\(\$\w+\)\);\s*)+\$\w+\s*=\s*filemtime\(\$_SERVER\["DOCUMENT_ROOT"\]\s*\.\s*"[^"]+"\);\s*(?:(?:touch\(\$\w+,\s*\$\w+\);\s*)+@?chmod\(\$\w+,\s*\d+\);\s*)+\$\w+\s*=\s*base64_decode\("[^"]+"\);\s*(?:\$\w+\s*=\s*\$_SERVER\["DOCUMENT_ROOT"\]\s*\.\s*"[^"]+";\s*)+(?:file_put_contents\(\$\w+,\s*str_replace\("function[^"]+",\s*\$\w+\s*\.\s*"function[^"]+",\s*file_get_contents\(\$\w+\)+;\s*(?:\$\w+\s*=\s*\$_SERVER\["DOCUMENT_ROOT"\]\s*\.\s*"[^"]+";\s*)?)+(?:touch\(\$\w+,\s*\$\w+\);\s*)+\$\w+\s*=\s*__FILE__;\s*\$\w+\s*=\s*realpath\(dirname\(\$\w+\)+;\s*(?:\$\w+\s*=\s*str_replace\([^\)]+\);\s*)+~mis',
            'id' => 'manyBase64DecodeContent',
        ],
        /*[
            'full' => '~class\s*(\w+)\s*{\s*function\s*__construct\(\)\s*\{\s*(\$\w+)\s*=\s*\$this->(\w+)\(\$this->\w+\);\s*\2\s*=\s*\$this->(\w+)\(\$this->(\w+)\(\2\)\);\s*\2\s*=\s*\$this->(\w+)\(\2\);\s*if\(\2\)\s*\{\s*\$this->(\w+)\s*=\s*\2\[\d\];\s*\$this->(\w+)\s*=\s*\2\[\d\];\s*\$this->\w+\s*=\s*\2\[\d\];\s*\$this->(\w+)\(\2\[\d\],\s*\2\[\d\]\);\s*\}\s*\}\s(?:function\s*\w+\((?:(?:\$\w+),?\s?){0,3}\)\s*\{\s*(?:\$this->\w+\s*=\s*\$\w+;\s*\$this->\w+\s*=\s*\$\w+;\s*\$this->\w+\s*=\s*\$this->\3\(\$this->\w+\);\s*\$this->\w+\s*=\s*\$this->\5\(\$this->\w+\);\s*\$this->\w+\s*=\s*\$this->\w+\(\);\s*if\(strpos[^{]+{[^}]+}\s*\}\s*|\$\w+\s*=\s*(?:\$this->\w+\[\d\]\.?)+;\s*(?:\$\w+\s*=\s*@?\$\w+\((?:\'\',\s*)?(?:(?:\$\w+),?\s?){0,3}\);)?\s*(?:return\s*\$\w+(?:\((?:"[^"]+",\s*"",\s*\$\w+)?\))?;)?\s*\}\s*|\$\w+\s*=\s*strlen\(\$\w+\)\s*\+\s*strlen\(\$\w+\);\s*while\(strlen\(\$\w+\)\s*<\s*\$\w+\)\s*\{\s*\$\w+\s*=\s*ord\(\$\w+\[\$this->\w+\]\)\s*-\s*ord\(\$\w+\[\$this->\w+\]\);\s*\$\w+\[\$this->\w+\]\s*=\s*chr\(\$\w+\s*%\s*\(2048/8\)\);\s*\$\w+\s*\.=\s*\$\w+\[\$this->\w+\];\s*\$this->\w+\+\+;\s*\}\s*return\s*\$\w+;\s*\}\s*|\$this->\w+\s*=\s*\$this->\w+\(\$this->\w+,\s*\$this->\w+,\s*\$this->\w+\);\s*\$this->\w+\s*=\s*\$this->\w+\(\$this->\w+\);\s*return\s*\$this->\w+;\s*\}\s*))+var\s*\$\w+;\s*var\s*\$\w+\s*=\s*0;\s*(?:var\s*\$\w+\s*=\s*array\([\'gzinflatecr_utobs64dtkp, ]+\);\s*)+var\s*\$\w+\s*=\s*\'([^\']+)\';\s*var\s*\$\w+\s*=\s*\'([^\']+)\';\s*\}\s*new\s*\1\(\);~msi',
            'id' => 'classDecoder',
        ],
        [
            'full' => '~if\(isset\(\$_POST\[\'\w+\'\]\)\){echo[\s\'\w]+;\s*exit\(\);}\s*if\(isset\(\$_COOKIE\)\){(\$\w+)=\$_COOKIE;\(count\(\1\)==\d+&&in_array\(gettype\(\1\)\.count\(\1\),\1\)\)\?\(\(\1\[\d+\]=\1\[\d+\]\.\1\[\d+\]\)&&\(\1\[\d+\]=\1\[\d+\]\(\1\[\d+\]\)\)&&\(\1=\1\[\d+\]\(\1\[\d+\],\1\[\d+\]\(\1\[\d+\]\)\)\)&&\1\(\)\):\1;}\s*if\(!isset\(\$_POST\[\'\w+\'\]\)&&!isset\(\$_GET\[\'\w+\'\]\)\){exit\(\);}\s*(?:(\$\w+)\[\d+\]=\'\w+\';)+\s*if\(isset\(\$_POST\[\'\w+\'\]\)\){\$\w+=\$_POST\[\'\w+\'\];}else{\$\w+=\$_GET\[\'\w+\'\];}\s*\$\w+\s*=\s*array_flip\(str_split\(\'(\w+)\'\)\);\$\w+\s*=\s*str_split\(md5\(\$\w+\)\.md5\(\$\w+\)\);\$\w+\s*=\s*array\(\);\$\w+\s*=\s*\'\';\s*foreach\s*\(\$\w+\s*as\s*\$\w+\s*=>\s*\$\w+\)\s*{while\s*\(1\)\s*{if\(isset\(\$\w+\[\$\w+\[\$\w+\]\]\)\){\$\w+\[\$\w+\]\+\+;}else\{\$\w+\[\$\w+\[\$\w+\]\]=\'\';break;}}}\s*foreach\s*\(\$\w+\s*as\s*\$\w+\s*=>\s*\$\w+\)\s*{\$\w+\s*\.=\s*\$\w+\[\$\w+\];}\s*eval\(trim\(base64_decode\(base64_decode\(\$\w+\)\)\)\);~mis',
            'fast' => '~if\(isset\(\$_POST\[\'\w+\'\]\)\){echo[\s\'\w]+;\s*exit\(\);}\s*if\(isset\(\$_COOKIE\)\){(\$\w+)=\$_COOKIE;\(count\(\1\)==\d+&&in_array\(gettype\(\1\)\.count\(\1\),\1\)\)\?\(\(\1\[\d+\]=\1\[\d+\]\.\1\[\d+\]\)&&\(\1\[\d+\]=\1\[\d+\]\(\1\[\d+\]\)\)&&\(\1=\1\[\d+\]\(\1\[\d+\],\1\[\d+\]\(\1\[\d+\]\)\)\)&&\1\(\)\):\1;}\s*if\(!isset\(\$_POST\[\'\w+\'\]\)&&!isset\(\$_GET\[\'\w+\'\]\)\){exit\(\);}\s*(?:(\$\w+)\[\d+\]=\'\w+\';)+\s*if\(isset\(\$_POST\[\'\w+\'\]\)\){\$\w+=\$_POST\[\'\w+\'\];}else{\$\w+=\$_GET\[\'\w+\'\];}\s*\$\w+\s*=\s*array_flip\(str_split\(\'(\w+)\'\)\);\$\w+\s*=\s*str_split\(md5\(\$\w+\)\.md5\(\$\w+\)\);\$\w+\s*=\s*array\(\);\$\w+\s*=\s*\'\';\s*foreach\s*\(\$\w+\s*as\s*\$\w+\s*=>\s*\$\w+\)\s*{while\s*\(1\)\s*{if\(isset\(\$\w+\[\$\w+\[\$\w+\]\]\)\){\$\w+\[\$\w+\]\+\+;}else\{\$\w+\[\$\w+\[\$\w+\]\]=\'\';break;}}}\s*foreach\s*\(\$\w+\s*as\s*\$\w+\s*=>\s*\$\w+\)\s*{\$\w+\s*\.=\s*\$\w+\[\$\w+\];}\s*eval\(trim\(base64_decode\(base64_decode\(\$\w+\)\)\)\);~mis',
            'id' => 'scriptWithPass',
        ],*/

        /*************************************************************************************************************/
        /*                                          JS patterns                                                      */
        /*************************************************************************************************************/

        [
            'full' => '~((<script[^>]*>)\s*.{0,800}?)?(eval\()?String\.fromCharCode\(([\d,\s]+)\)(?(3)\);+|)((?(2)\s*.{0,800}?</script>|))~msi',
            'fast' => '~String\.fromCharCode\([\d,\s]+\)~msi',
            'id'   => 'JS_fromCharCode',
        ],
        [
            'full' => '~(?:eval\()?unescape\(\'([^\']+)\'\)\);\s{0,50}eval\(unescape\(\'([^\']+)\'\)\s{0,50}\+\s{0,50}\'([^\']+)\'\s{0,50}\+\s{0,50}unescape\(\'[^\']+\'\)\);~msi',
            'fast' => '~unescape\(\'([^\']+)\'\)\);\s{0,50}eval\(unescape\(\'([^\']+)\'\)\s{0,50}\+\s{0,50}\'([^\']+)\'\s{0,50}\+\s{0,50}unescape\(\'[^\']+\'\)\);~msi',
            'id'   => 'JS_unescapeContentFuncWrapped',
        ],
        [
            'full' => '~var\s*(\w+)=\s*\[((?:\'[^\']+\',?)+)\];\(function\(\w+,\w+\)\{var\s*\w+=function\(\w+\)\{while\(--\w+\)\{\w+\[\'push\'\]\(\w+\[\'shift\'\]\(\)\);\}\};.*?\(\1,(0x\w+)\)\);var\s*(\w+)=function\s*\((\w+),(\w+)\)\s*\{\5=\5-0x\d+;var\s*\w+=\w+\[\5\];if\(\4\[\'\w+\']===undefined\)\{\(function\(\)\{var\s*(\w+);try\{var\s*(\w+)=Function\(\'[^;]++;\'\);\7=\8\(\);\}catch\(\w+\)\{\7=window;\}var\s*\w+=\'[^\']+\';\7\[\'atob\'\]\|\|\(\7\[\'atob\'\]=function\(\w+\)\{[^}]+\}return\s*\w+;\}\);\}\(\)\);var\s*\w+=function\(\w+,\w+\)\{var\s*\w+=.+?String\[\'fromCharCode\'\].+?return\s*\w+;\};\4\[\'\w+\'\]=\w+;\4\[\'\w+\'\]=\{\};\4\[\'\w+\'\]=!!\[\];\}var\s*\w+=\4\[\'\w+\'\]\[\w+\];.+?((.+?\4\(\'0x\d+\',\'[^\']+\'\)).+?)+[^\s]+~msi',
            'fast' => '~var\s*(\w+)=\s*\[((?:\'[^\']+\',?)+)\];\(function\(\w+,\w+\)\{var\s*\w+=function\(\w+\)\{while\(--\w+\)\{\w+\[\'push\'\]\(\w+\[\'shift\'\]\(\)\);\}\};.*?var\s*(\w+)=function\s*\((\w+),(\w+)\)\s*\{\4=\4-0x\d+;var\s*\w+=\w+\[\4\];if\(\3\[\'\w+\']===undefined\)\{\(function\(\)\{var\s*(\w+);try\{var\s*(\w+)=Function\(\'[^;]++;\'\);\6=\7\(\);\}catch\(\w+\)\{\6=window;\}var\s*\w+=\'[^\']+\';\6\[\'atob\'\]\|\|\(\6\[\'atob\'\]=function\(\w+\)\{[^}]+\}return\s*\w+;\}\);\}\(\)\);var\s*\w+=function\(\w+,\w+\)\{var\s*\w+=.+?String\[\'fromCharCode\'\].+?return\s*\w+;\};\3\[\'\w+\'\]=\w+;\3\[\'\w+\'\]=\{\};\3\[\'\w+\'\]=!!\[\];\}var\s*\w+=\3\[\'\w+\'\]\[\w+\];.+?((.+?\3\(\'0x\d+\',\'[^\']+\'\)).+?)+[^\s]+~msi',
            'id'   => 'JS_ObfuscatorIO',
        ],
        [
            'full' => '~<script\s(?:language|type)=[\'"]?(?:text/)?javascript[\'"]?>\s*(?:(?:<!--.*?-->)?\s?<!--\s*)?document\.write\((unescape|atob)?\(?[\'"]([^\'"]+)[\'"]\)\)?;?(?:\s*//-->)?(?:(\w+)\(\'([^\']+)\'\))?\s*</script>~msi',
            'id'   => 'JS_documentWriteUnescapedStr',
        ],
        [
            'full' => '~eval\(function\(p,a,c,k,e,(?:d|r)\)\{.*?}\(\'(.*)\', *(\d+), *(\d+), *\'(.*?)\'\.split\(\'\|\'\),\d,\{\}\)\);~msi',
            'id'   => 'JS_deanPacker',
        ],
        [
            'full' => '~\(function\s*\(\$,\s*document\)\s*({([^{}]*+(?:(?1)[^{}]*)*+)})\)\(\(function\s*\((\w),\s*(\w)\)\s*\{\s*function\s*(\w)\((\w+)\)\s*\{\s*return\s*Number\(\6\)\.toString\(36\)\.replace\(/\[0\-9\]/g,\s*function\s*\((\w)\)\s*\{\s*return\s*String\.fromCharCode\(parseInt\(\7,\s*10\)\s*\+\s*65\);\s*\}\s*\);\s*\}\s*var\s*\w+\s*=\s*\{\s*\$:\s*function\s*\(\)\s*\{\s*var\s*\w+\s*=\s*\{\};\s*[^}]+\}\s*return\s*\w;\s*\}\s*\};\s*\3\s*=\s*\3\.split\(\'\+\'\);\s*for\s*\(var\s*\w\s*=\s*0;\s*\w\s*<\s*(\d+);\s*\w\+\+\)\s*\{\s*\(function\s*\(\w\)\s*\{\s*Object\.defineProperty\(\w,\s*\5\(\w\),\s*\{\s*get:\s*function\s*\(\)\s*\{\s*return\s*\w\[\w\]\[0\]\s*\!==\s*\';\'\s*\?\s*\4\(\w\[\w\]\)\s*:\s*parseFloat\(\w\[\w\]\.slice\(1\),\s*10\);\s*\}\s*\}\);\s*\}\(\w\)\);\s*\}\s*return\s*\w;\s*\}\(\'([^\']+)\',\s*function\s*\(\w\)\s*\{\s*for\s*\(var\s*(\w)\s*=\s*\'([^\']+)\',\s*(\w)\s*=\s*\[([^\]]+)\],\s*\w\s*=\s*\'\'[^{]+\{\s*var\s*(\w)\s*=\s*\10\.indexOf\(\w\[\w\]\);\s*\12\.indexOf\(\w\[\w\]\)\s*>\s*\-1\s*&&\s*0\s*===\s*\12\.indexOf\(\w\[\w\]\)\s*&&\s*\(\w\s*=\s*0\),\s*\14\s*>\s*-1\s*&&\s*\(\w\s*\+=\s*String\.fromCharCode\(\w\s*\*\s*\10\.length\s*\+\s*\14\),\s*\w\s*=\s*1\);\s*\}\s*return\s*\w;\s*\}\)\),\s*\(function\s*\(\w\)\s*\{\s*var\s*_\s*=\s*{};\s*for\s*\(\w\s*in\s*\w\)\s*\{\s*try\s*\{\s*_\[\w\]\s*=\s*\w\[\w\]\.bind\(\w\);\s*\}\s*catch\s*\(\w\)\s*\{\s*_\[\w\]\s*=\s*\w\[\w\];\s*\}\s*\}\s*return\s*_;\s*\}\)\(document\)\)~msi',
            'id'   => 'JS_objectDecode',
        ],
        [
            'full' => '~<script\s*src="data:text/javascript;base64,([^"]+)"></script>~msi',
            'id'   => 'JS_B64Embedded',
        ],
        [
            'full' => '~(?(DEFINE)(?\'p1\'var\s*(_0x\w+)=(_0x\w+);))(?(DEFINE)(?\'p2\'function\s?(_0x\w+)\(_0x\w+,\s?_0x\w+\)\{var\s?_0x\w+=(_0x\w+)\(\);return\s?_0x\w+=function\(_0x\w+,\s?_0x\w+\)\{_0x\w+=_0x\w+-(?|(0x\w+)|\((-?0x\w+[\+\-\*\/\da-fx]+)\));var\s?_0x\w+=_0x\w+\[_0x\w+\];return\s?_0x\w+;},_0x\w+\(_0x\w+,\s?_0x\w+\);\}))(?(DEFINE)(?\'p3\'function\s*_0x\w+\(\)\{var\s?_0x\w+=\[([^\]]+)\];_0x\w+=function\(\)\{return\s?_0x\w+;\};return\s?_0x\w+\(\);\}))(?(DEFINE)(?\'p4\'\(function\((_0x\w+),\s?_0x\w+\)\{var\s?(_0x\w+)=_0x\w+,_0x\w+=_0x\w+\(\);while\(!!\[\]\)\{try\{var\s?_0x\w+=((?>\-?parseInt\(_0x\w+\(0x\w+\)\)/(?:\([^\)]+\)*|0x\w+)\)*[\+\*]?\(?-?)+);if\(_0x\w+===_0x\w+\)break;else\s?_0x\w+\[\'push\'\]\(_0x\w+\[\'shift\'\]\(\)\);\}catch\(_0x\w+\)\{_0x\w+\[\'push\'\]\(_0x\w+\[\'shift\'\]\(\)\);\}+\s*\((_0x\w+),(-?0x\w+[^\)]+)\),))(?(DEFINE)(?\'p5\'(?:\(function\(\)\{var[^}]+\}\(\)\)+;|document\[_0x\w+\(0x\w+\)\]\(unescape\((?>\(?_0x\w+\(0x\w+\)+\+?)+;)))(?:(?P>p1))?(?:(?P>p2)(?P>p4)|(?P>p2)|(?P>p4))(?:(?P>p3)|(?P>p5))(?:(?P>p2)|(?P>p4))?(?:(?P>p3)|(?P>p5))~msi',
            'id'   => 'JS_parseIntArray',
        ],
        /*************************************************************************************************************/
        /*                                          PYTHON patterns                                                 */
        /*************************************************************************************************************/

        [
            'full' => '~eval\(compile\(zlib\.decompress\(base64\.b64decode\([\'"]([^\'"]+)[\'"]\)\),[\'"]<string>[\'"],[\'"]exec[\'"]\)\)~msi',
            'id'   => 'PY_evalCompileStr',
        ],
    ];

    private $full_source;
    private $text;
    private $cur;
    private $max_level;
    private $max_time;
    private $run_time;
    private $fragments;
    private $grabed_signature_ids;
    private $active_fragment;
    private $excludes;
    private $debugger;
    private $isDebugMode = false;
    private $error = 0;

    /**
     * @param string $text
     * @param string $origin_text
     * @param DebugMode|null $debugger
     * @param int $max_level
     * @param int $max_time
     */
    public function __construct($text, $origin_text = '', $debugger = null, $max_level = 30, $max_time = 5)
    {
        $this->text         = $text;
        $this->full_source  = $text;

        if ($origin_text != '' && $this->defineSpecificObfuscator($text, $origin_text)) {
            $this->text         = $origin_text;
            $this->full_source  = $origin_text;
        }

        $this->max_level            = $max_level;
        $this->max_time             = $max_time;
        $this->fragments            = [];
        $this->grabed_signature_ids = [];
        $this->excludes             = [];
        $this->debugger             = !is_object($debugger) ? new Debugger() : $debugger;
        $this->isDebugMode          = defined('DEBUG_PERFORMANCE') && DEBUG_PERFORMANCE ? true : false;
    }

    public function setIsDebugMode(bool $isEnable)
    {
        $this->isDebugMode = $isEnable;
    }

    public function getError()
    {
        return $this->error;
    }

    private function getPreviouslyDeclaredVars($string, $level = 0)
    {
        $foundVar = false;
        foreach ($this->fragments as $frag => $fragment) {
            if ($foundVar || strpos($frag, '$codelock_lock') !== false) {
                break;
            }

            $subject = '';
            $pos     = strpos($fragment, $string . '=') ?: strpos($fragment, $string . ' ');
            if ($pos !== false && strpos(substr($fragment, $pos + strlen($string)), '$') !== 1) {
                $subject = substr($fragment, $pos);
            } else {
                $pos = strpos($frag, $string . '=') ?: strpos($frag, $string . ' ');
                if ($pos !== false) {
                    $subject = substr($frag, $pos);
                } else {
                    $pos = strpos($this->full_source, $string . '=') ?: strpos($this->full_source, $string . ' ');
                    if ($pos !== false) {
                        $subject = substr($this->full_source, $pos);
                    } else {
                        continue;
                    }
                }
            }

            if (@preg_match_all('~(\$\w{1,40})\s*=\s*((\(*(base64_decode\s*\(|pack\s*\(\'H\*\',|convert_uudecode\s*\(|htmlspecialchars_decode\s*\(|stripslashes\s*\(|gzinflate\s*\(|strrev\s*\(|str_rot13\s*\(|gzuncompress\s*\(|urldecode\s*\(|rawurldecode\s*\(|eval\s*\()+((?:(["\'])((.*?[^\\\\])??((\\\\\\\\)+)?+)\6[^;]+)|(?:\$\w+)\)*;*))|((["\'])((.*?[^\\\\])??((\\\\\\\\)+)?+)\12));~msi', $subject, $matches, PREG_SET_ORDER) > 0) {
                foreach ($matches as $m) {
                    if ($m[1] !== $string) {
                        continue;
                    }
                    if (isset($m[12]) && $m[12] !== '') {
                        $str = substr(@$m[2], 1, -1);
                        $foundVar = true;
                    }
                    if (isset($m[5]) && $m[5] !== '') {
                        $str = $this->unwrapFuncs($m[2], $level + 1);
                        $foundVar = true;
                    }

                    $this->fragments[$this->active_fragment] = str_replace($m[0], '', $this->fragments[$this->active_fragment]);
                    break;
                }
            }
        }
        return $str;
    }

    private function defineSpecificObfuscator($text, $origin_text)
    {
        if (strpos($origin_text, '#!/') === 0                                                                                                       //not a php file
            || strpos($origin_text, '0=__FILE__;')                                             &&
                (strpos($origin_text, ';return;?>') || strpos($origin_text, 'This file is protected by copyright law and provided under'))  //lockit1 || evalFileContentBySize
            || strpos($origin_text, 'The latest version of Encipher can be obtained from')  && strpos($origin_text, '\'@ev\'));')           //EvalFileContent
            || strpos($origin_text, 'substr(file_get_contents(__FILE__),')                  && strpos($origin_text, '__halt_compiler();')   //EvalFileContentOffset
            || strpos($origin_text, 'gzuncompress(strrev($')                  && strpos($origin_text, '__halt_compiler();')                 //GzuncompressStrrev
            || strpos($text, 'base64_decode(@stream_get_contents(')   && strpos($text, '@fopen(__FILE__,')            //wpKey (eval)
            || strpos($origin_text, '//base64 - gzinflate - str_rot13 - convert_uu - gzinflate - base64')                                   //
            || strpos($origin_text, '/* Do not change this code') && strpos($origin_text, '));__halt_compiler();')                          //B64Chunks
        ) {
            return true;
        }

        $text_wo_ws = str_replace(' ', '', $text);
        if (strpos($text_wo_ws, '=file(__FILE__);eval(base64_decode(')      && strpos($text_wo_ws, '));__halt_compiler();') //zeura hack
            || strpos($text_wo_ws, 'define(\'__LOCALFILE__\',__FILE__);')   && strpos($text_wo_ws, '__halt_compiler();')    //obf_20200527_1
            || strpos($text_wo_ws, '");$cvsu=$gg') || strpos($text_wo_ws, '$cyk=$cyd[')                                     //TinkleShell
        ) {
            return true;
        }

        return false;
    }

    private function checkObfuscatorExcludes($str, $type = false, $matches = [])
    {
        switch ($type) {
            case '':
                if(strpos($str, '# Malware list detected by AI-Bolit (http') !== false) {
                    return '';
                }
                if(strpos($str, '#Malware list detected by AI-Bolit(http') !== false) {
                    return '';
                }
                if(strpos($str, '<div class="header">Отчет сканера ') !== false) {
                    return '';
                }
                if (strpos($str, '$default_action="FilesMan"') !== false) {
                    return '';
                }
                break;
            case 'echo':
                if (preg_match('~\$_[GPRC](?:OST|ET|EQUEST|OOKIE)~ms', $matches[0])) {
                    return '';
                }
                if (!isset($matches[5]) || $matches[5] === '') {
                    return '';
                }
                if (preg_match('~attachment;\s*filename=\\\\"\w+\.vbs~', $str)) {
                    return '';
                }
                break;
            case 'eval':
                if (strpos($matches[0], 'file_get_contents') !== false) {
                    return '';
                }
                if (preg_match('~\$_[GPRC](?:OST|ET|EQUEST|OOKIE)~ms', $matches[0])) {
                    return '';
                }
                if (strpos($matches[0], '=> array(\'eval(base64_decode(\')') !== false) {
                    return '';
                }
                if (@$matches[6] === '\'";') {
                    return '';
                }
                break;
            case 'goto':
                if (!preg_match('~\$[^\[\(\)\]=\+\-\"\']{1,20}~msi', $matches[0])) {
                    return '';
                }

                $offset = 0;
                $count = 0;
                while (preg_match('~goto\s*[^;]+;\s*[^:{}]+:\s*[^;]+;~msi', $matches[0], $m, PREG_OFFSET_CAPTURE, $offset)) {
                    $count++;
                    break;
                }
                if ($count === 0) {
                    return '';
                }
                break;
        }
        return $type;
    }

    public function getObfuscateType($str)
    {
        $btlimit = ini_get('pcre.backtrack_limit');
        $reclimit = ini_get('pcre.recursion_limit');
        $str = preg_replace('~\s+~', ' ', $str);
        $l_UnicodeContent = Helpers::detect_utf_encoding($str);
        $ret = '';
        if ($l_UnicodeContent !== false) {
            if (FUNC_ICONV) {
                $str = iconv($l_UnicodeContent, "CP1251//IGNORE", $str);
            }
        }
        if ($this->checkObfuscatorExcludes($str) === '') {
            return '';
        }
        ini_set('pcre.backtrack_limit', self::PCRE_BACKTRACKLIMIT);
        ini_set('pcre.recursion_limit', self::PCRE_RECURSIONLIMIT);
        foreach (self::$signatures as $signature) {
            $fast_regexp = isset($signature['fast']) ? $signature['fast'] : $signature['full'];
            if (isset($this->excludes[$str]) && in_array($signature['id'], $this->excludes[$str])) {
                continue;
            }

            $sig_type = isset($signature['fast']) ? self::TYPE_PREG_FAST : self::TYPE_PREG_FULL;
            $matches = $this->handlePregMatch($sig_type, $signature['id'], $fast_regexp, $str);
            if ($matches) {
                $ret = $this->checkObfuscatorExcludes($str, $signature['id'], $matches);
                break;
            }
        }
        ini_set('pcre.backtrack_limit', $btlimit);
        ini_set('pcre.recursion_limit', $reclimit);
        return $ret;
    }

    private function getObfuscateFragment($str, $type)
    {
        foreach (self::$signatures as $signature) {
            if ($signature['id'] !== $type) {
                continue;
            }
            $matches = $this->handlePregMatch(self::TYPE_PREG_FULL, $signature['id'], $signature['full'], $str);
            if ($matches) {
                return $matches;
            }
        }
        return '';
    }

    public function getFragments()
    {
        if (count($this->fragments) > 0) {
            return $this->fragments;
        }
        return false;
    }

    public function getGrabedSignatureIDs()
    {
        return array_keys($this->grabed_signature_ids);
    }

    private function grabFragments()
    {
        if ($this->cur === null) {
            $this->cur = $this->text;
        }
        $str = $this->cur;
        reset(self::$signatures);
        while ($sign = current(self::$signatures)) {
            $fast = isset($sign[self::TYPE_PREG_FAST]);
            $matches = false;
            if (!$fast
                ||
                ($fast && $this->handlePregMatch(self::TYPE_PREG_FAST, $sign['id'], $sign[self::TYPE_PREG_FAST], $str))
            ) {
                $matches = $this->handlePregMatch(self::TYPE_PREG_FULL, $sign['id'], $sign[self::TYPE_PREG_FULL], $str);
            }

            if ($matches) {
                $this->grabed_signature_ids[$sign['id']] = 1;
                $this->fragments[$matches[0]] = $matches[0];
                $str = str_replace($matches[0], '', $str);
            } else {
                next(self::$signatures);
            }
        }
    }

    private function deobfuscateFragments()
    {
        $prev_step = '';
        if (!count($this->fragments)) {
            return;
        }
        $i = 0;
        foreach ($this->fragments as $frag => $value) {
            if ($frag !== $value) {
                continue;
            }
            $this->active_fragment = $frag;
            $type = $this->getObfuscateType($value);

            while ($type !== '' && $i < 100) {
                $match  = $this->getObfuscateFragment($value, $type);
                if (!is_array($match)) {
                    break;
                }
                $this->grabed_signature_ids[$type] = 1;
                $find   = $match[0] ?? '';
                $func   = 'deobfuscate' . ucfirst($type);
                $temp = $this->handleFunc(self::TYPE_FUNC, ucfirst($type), $func, $find, $match);

                if ($temp !== '' && $temp !== $find) {
                    $value = str_replace($find, $temp, $value);
                } else {
                    $this->excludes[preg_replace('~\s+~', ' ', $value)][] = $type;
                    $this->fragments[$frag] = $value;
                    $type = $this->getObfuscateType($value);
                    continue;
                }

                $this->fragments[$frag] = $value;
                $type = $this->getObfuscateType($value);
                $value_hash = hash('sha256', $value);
                if ($prev_step === $value_hash) {
                    break;
                }
                $prev_step = $value_hash;
                $i++;
            }
            $this->fragments[$frag] = Helpers::postProcess($this->fragments[$frag]);
        }
    }

    public function deobfuscate($hangs = 0, $prev_step = '')
    {
        $btlimit = ini_get('pcre.backtrack_limit');
        $reclimit = ini_get('pcre.recursion_limit');
        ini_set('pcre.backtrack_limit', self::PCRE_BACKTRACKLIMIT);
        ini_set('pcre.recursion_limit', self::PCRE_RECURSIONLIMIT);
        $deobfuscated   = '';
        $this->run_time = Helpers::currentTime();
        $this->cur      = $this->text;

        $this->grabFragments();
        $this->deobfuscateFragments();

        $deobfuscated = $this->cur;

        if (count($this->fragments) > 0 ) {
            foreach ($this->fragments as $fragment => $text) {
                $deobfuscated = str_replace($fragment, $text, $deobfuscated);
            }
        }

        $deobfuscated = Helpers::postProcess($deobfuscated);

        if (substr_count(substr($deobfuscated, 0, 400), 'base64_decode(\'') > 3) {
            $deobfuscated = preg_replace_callback('~base64_decode\(\'([^\']+)\'\)~msi', static function ($matches) {
                return "'" . base64_decode($matches[1]) . "'";
            }, $deobfuscated);
        }

        if ($this->getObfuscateType($deobfuscated) !== '' && $hangs < 6) {
            $this->text = $deobfuscated;
            if ($prev_step === hash('sha256', $deobfuscated)) {
                return $deobfuscated;
            }
            $deobfuscated = $this->deobfuscate(++$hangs, hash('sha256', $deobfuscated));
        }
        ini_set('pcre.backtrack_limit', $btlimit);
        ini_set('pcre.recursion_limit', $reclimit);
        return $deobfuscated;
    }

    public static function getSignatures()
    {
        return self::$signatures;
    }

    public function getDebugger() {
        return $this->debugger;
    }

    /**
     * @param string $sigType
     * @param $sigId
     * @param string $regex
     * @param string $content
     * @return false|array
     */
    private function handlePregMatch(string $sigType, $sigId, string $regex, string $content)
    {
        $start_time = Helpers::currentTime();
        $isMatch = preg_match($regex, $content, $match);
        if ($this->error === 0) {
            $this->error = preg_last_error();
        }

        if ($this->isDebugMode) {
            $time_elapsed = Helpers::currentTime() - $start_time;
            $this->debugger->addDeobfuscatorData($sigType, $sigId, $time_elapsed);
        }

        return $isMatch ? $match : false;
    }

    /**
     * @param string $type
     * @param string $funcId
     * @param string $func
     * @param string $find
     * @param array $match
     * @return string
     */
    private function handleFunc(string $type, string $funcId, string $func, string $find, array $match)
    {
        try {
            $start_time = Helpers::currentTime();
            $result = @$this->$func($find, $match);

            if ($this->isDebugMode) {
                $time_elapsed = Helpers::currentTime() - $start_time;
                $this->debugger->addDeobfuscatorData($type, $funcId, $time_elapsed);
            }
        } catch (Exception $e) {
            $result = '';
        }

        return $result;
    }

    public function unwrapFuncs($string, $level = 0)
    {
        $res = '';
        $close_tag = false;

        if (trim($string) == '') {
            return '';
        }
        if ($level > 100) {
            return '';
        }
        if ((($string[0] === '\'') || ($string[0] === '"')) && (substr($string, 1, 2) !== '?>')) {
            if($string[0] === '"' && preg_match('~\\\\x\d+~', $string)) {
                return stripcslashes($string);
            }
            $end = -2;
            if ($string[-3] === '\'') {
                $end = -3;
            }
            return substr($string, 1, $end);
        }

        if ($string[0] === '$') {
            preg_match('~\$\w{1,40}~', $string, $string);
            $string  = $string[0];
            return $this->getPreviouslyDeclaredVars($string, $level);
        }

        $pos      = strpos($string, '(');
        $function = substr($string, 0, $pos);
        $arg      = $this->unwrapFuncs(substr($string, $pos + 1), $level + 1);

        if (strpos($function, '?>') !== false || strpos($function, "'.") !== false) {
            $function = str_replace(["'?>'.", '"?>".', "'?>' .", '"?>" .', "'."], '', $function);
            $close_tag = true;
        }
        $function = str_replace(['@', ' '], '', $function);
        $safe = Helpers::convertToSafeFunc($function);

        if ($safe) {
            if ($function === 'pack') {
                $args = explode(',', $arg);
                $args[0] = substr(trim($args[0]), 0, -1);
                $args[1] = substr(trim($args[1]), 1);
                $res = @Helpers::executeWrapper($function, [$args[0], $args[1]]);
            } elseif ($function === 'unserialize') {
                $res = @Helpers::unserialize($arg);
            } elseif ($function === 'str_replace') {
                $args = explode(',', $arg);
                $args[0] = substr(trim($args[0]), 0, -1 );
                $args[1] = substr(trim($args[1]), 0);
                if (trim($args[1]) === 'null') {
                    $args[1] = null;
                }
                $args[2] = $this->unwrapFuncs(trim($args[2]), $level + 1) ?? $args[2];
                $res = @Helpers::executeWrapper($function, [$args[0], $args[1], $args[2]]);
            } else if ($function === 'chr') {
                $res = @Helpers::executeWrapper($function, [(int)$arg]);
            } else {
                $res = @Helpers::executeWrapper($function, [$arg]);
            }
        } else {
            $res = $arg;
        }
        if ($close_tag) {
            $res = '?> ' . $res;
            $close_tag = false;
        }
        return $res;
    }

    /*************************************************************************************************************/
    /*                                          PHP deobfuscators                                                */
    /*************************************************************************************************************/

    private function deobfuscateStrrotPregReplaceEval($str, $matches)
    {
        $find = $matches[0];
        $res = str_rot13($matches[2]);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateObf_20200618_1($str, $matches)
    {
        return stripcslashes($str);
    }

    private function deobfuscateBypass($str, $matches)
    {
        $find = $matches[0];
        $bypass = stripcslashes($matches[2]);
        $eval = $matches[3] . $bypass . $matches[4];
        $res = str_replace($find, $eval, $str);
        return $res;
    }

    private function deobfuscateObf_20200720_1($str, $matches)
    {
        $find = $matches[0];
        $res = base64_decode($matches[2]);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateGoto($str)
    {
        return Helpers::unwrapGoto($str);
    }

    private function deobfuscateObf_20200527_1($str)
    {
        preg_match('~error_reporting\(0\);define\(\'\w+\',\s*__FILE__\);define\(\'\w+\',\s*fopen\(__FILE__,\s*\'r\'\)\);fseek\(\w+,\s*__COMPILER_HALT_OFFSET__\);((\$\w+="\\\\x[0-9a-f]+";)+(\$\w+="[^"]+";)+eval\("\?>"\.(\$\w+\()+"([^"]+)"\)+;)+(?:/\*\w+\*/)?__halt_compiler\(\);([\w#|>^%\[\.\]\\\\/=]+)~msi', $str, $matches);
        $find = $matches[0];
        $res = $str;
        $encoded = $matches[6];
        $res = preg_replace_callback('~(\$\w+="\\\\x[0-9a-f]+";)+(\$\w+="[^"]+";)+eval\("\?>"\.(\$\w+\()+"([^"]+)"\)+;~msi', static function ($m) use ($str) {
            $layer1 = hex2bin(str_rot13(gzinflate(str_rot13(base64_decode($m[4])))));
            if (preg_match('~(\$\w+="[^"]+";)+eval\(\$\w\.(\$\w+\()+"([^"]+)"\)+;~msi', $layer1, $matches)) {
                $temp = "?>" . hex2bin(str_rot13(gzinflate(str_rot13(base64_decode($matches[3])))));
                while (preg_match('~(\$\w+)=strrev\(\1\);(\1=\s*str_replace\([\'"]([^"\']+)[\'"],"[^"]+",\1\);)+@?eval\("\?\>"\.\$\w+\(\1\)+;~msi', $temp, $matches)) {
                    if (preg_match_all('~(\$\w+)="([^"]+)";~msi', $layer1, $matches1)) {
                        foreach($matches1[1] as $k => $v) {
                            if ($v !== $matches[1]) {
                                continue;
                            }
                            $code = $matches1[2][$k];
                            $code = strrev($code);
                            if (preg_match_all('~str_replace\([\'"]([^"\']+)[\'"],"([^"]+)"~msi', $temp, $m, PREG_SET_ORDER)) {
                                foreach($m as $item) {
                                    $code = str_replace($item[1], $item[2], $code);
                                }
                                $temp = base64_decode($code);
                            }
                            break;
                        }
                    }
                }
                return $temp;
            }
        }, $res);
        if (preg_match_all('~str_replace\([\'"]([^"\']+)[\'"],[\'"]([^"\']+)[\'"]~msi', $res, $m, PREG_SET_ORDER)) {
            foreach($m as $item) {
                $encoded = str_replace($item[1], $item[2], $encoded);
            }
            $res = base64_decode($encoded);
        }

        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateObf_20200602_1($str)
    {
        preg_match('~(\$\w+)=strrev\("[base64_decode]+"\)\.str_replace\(\'(\w+)\',\'\',\'\w+\'\);\s*eval\(\1\((\$\w+)\)\);~msi', $str, $matches);
        $find = $matches[0];
        $res = 'eval(base64_decode(' . $matches[3] . '));';
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateObf_20200526_1($str, $matches)
    {
        $find = $matches[0];
        $res = base64_decode($matches[2]);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateObf_20200522_1($str, $matches)
    {
        if (strpos($str, 'hex2bin(') !== false) {
            $matches[4] = (int)hex2bin($matches[4]);
            $matches[6] = (int)hex2bin($matches[6]);
            $matches[8] = (int)hex2bin($matches[8]);
        }
        $res = strrev(gzinflate(base64_decode(substr($matches[14], (int)$matches[4] + (int)$matches[6], (int)$matches[8]))));
        if (preg_match('~define\(\'([^\']+)\', \'[^\']+\'\);\$GLOBALS\[\1\]\s*=\s*explode\(\'([^\']+)\',\s*gzinflate\(substr\(\'((?:[^\']*\\\\\')+[^\']+)\',([0-9a-fx]+),\s*([\-0-9a-f]+)\)~msi', $res, $m)) {
            $m[3] = stripcslashes($m[3]);
            $strings = explode($m[2], gzinflate(substr($m[3], hexdec($m[4]), (int)$m[5])));
            $res = str_replace($m[0], '', $res);
            $res = preg_replace_callback('~\$GLOBALS[\{\[].{1,3}[\}\]][\[\{]([0-9a-fx]+)[\]\}]~msi', function($m) use ($strings) {
                return '\'' . $strings[hexdec($m[1])] . '\'';
            }, $res);
        }
        return $res;
    }

    private function deobfuscateObf_20200507_5($str, $matches)
    {
        $find = $matches[0];
        $res = base64_decode($matches[1]);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateObf_20200507_4($str, $matches)
    {
        $find = $matches[0];
        $ar = $matches[2];
        $ar = explode(",\n", $ar);
        $array = [];
        foreach ($ar as $v) {
            $array[substr(trim($v),1,1)] = substr(trim($v), -2, 1);
        }
        unset($ar);
        $res = '';
        $split = str_split($matches[5]);
        foreach ($split as $x) {
            foreach ($array as $main => $val) {
                if ($x == (string)$val) {
                    $res .= $main;
                    break;
                }
            }
        }
        $res = gzinflate(base64_decode($res));
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateObf_20200513_1($str, $matches)
    {
        $find = $matches[0];
        $res = gzuncompress(base64_decode(strrev($matches[5])));
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateObf_20200507_2($str, $matches)
    {
        $find = $matches[0];
        $res = base64_decode($matches[4]);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateObf_20200507_1($str)
    {
        preg_match('~(\$\w+)=base64_decode\(\'([^\']+)\'\);\s*eval\(\1\);~mis', $str, $matches);
        $find = $matches[0];
        $res = base64_decode($matches[2]);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateObf_20200504_1($str)
    {
        preg_match('~(\$\w+)\s*=\s*\("\?>"\.gzuncompress\(base64_decode\("([^"]+)"\)\)\);\s*@?eval\(\1\);~msi', $str, $matches);
        $find = $matches[0];
        $res = ' ?>' . gzuncompress(base64_decode($matches[2]));
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateSmartToolsShop($str, $matches)
    {
        $find = $matches[0];
        $res = str_rot13(gzinflate(str_rot13(base64_decode($matches[2]))));
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateObf_20200421_1($str)
    {
        preg_match('~(?:\$\w+\s*=\s*\'\w+\';)?\s*(\$\w+)\s*=\s*urldecode\(\'[%0-9a-f]+\'\);(\s*(\$\w+)\s*=(\s*\1\{\d+\}\.?)+;)+\s*(\$\w+)\s*=\s*"[^"]+"\.\3\("([^"]+)"\);\s*eval\(\5\);~msi', $str, $matches);
        $find = $matches[0];
        $res = ' ?>' . base64_decode($matches[6]);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateObf_20200414_1($str, $matches)
    {
        $data = $matches[1];
        $key = $matches[2];
        $res = Helpers::obf20200414_1_decrypt($data, $key);
        return $res;
    }

    private function deobfuscateObf_20200402_2($str, $matches)
    {
        $find = $matches[0];
        $code = $matches[17];
        if (isset($matches[1]) && !empty($matches[1])) {
            $vars = Helpers::collectVars($matches[1], '\'');
            $code = Helpers::replaceVarsFromArray($vars, $matches[2], false, true);
            $code = Helpers::collectStr($code, '\'');
            $code = substr($code, strpos($code,'\'') + 1);
        }
        $code = preg_replace_callback('~\s*"\s*\.((?:min|max|round)?\(\s*\d+[\.\,\|\s\|+\|\-\|\*\|\/]([\d\s\.\,\+\-\*\/]+)?\))\s*\.\s*"~msi', static function($m) {
            return substr(Helpers::calc($m[1]), 1, -1);
        }, $code);
        $res = gzinflate(base64_decode($code)) ?:base64_decode($code);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateTwoHashFunc($str, $matches)
    {
        $funcs = [
            $matches[1].'::'.$matches[2] => [
                'data' => Helpers::prepareArray($matches[3]),
                'func' => null,
            ],
            $matches[4].'::'.$matches[5] => [
                'data' => Helpers::prepareArray($matches[6]),
                'func' => null,
            ],
        ];

        $code = Helpers::normalize($matches[7]);

        foreach ($funcs as $name => &$params){
            $data = $params['data'];
            if (isset($data[0]) && intval($data[0])) {
                $params['func'] = function ($n, $k) use ($data) {
                    if (!isset($data[$n])) {
                        return false;
                    }
                    return $data[$n];
                };
            }
            else {
                $params['func'] = function ($n, $k) use ($data){
                    $l = strlen($k);
                    if (!isset($data[$n])) {
                        return false;
                    }
                    $r = base64_decode($data[$n]);
                    for ($i = 0, $c = strlen($r); $i !== $c;  ++$i) {
                        $r[$i] = chr(ord($r[$i]) ^ ord($k[$i % $l]));
                    }
                    return '\'' . $r . '\'';
                };
            }
        }
        unset($params);

        $new_code = preg_replace_callback('~(_\w{1,5})::(\w{1,5})\s*\(([^)]+)\)~mis', function ($m) use ($funcs) {
            $original       = $m[0];
            $class_name     = $m[1];
            $method_name    = $m[2];
            $vars           = str_replace(['"', "'"], '', $m[3]);

            list($var1, $var2) = explode(',', $vars);
            $func_name = $class_name . '::' . $method_name;
            if (!isset($funcs[$func_name]['func'])) {
                return $original;
            }
            return $funcs[$func_name]['func']($var1, $var2);
        }, $code);
        return MathCalc::calcRawString($new_code);
    }

    private function deobfuscateObf_20200402_1($str, $matches)
    {
        $find = $matches[0];
        $res = gzinflate(hex2bin(pack('H*',$matches[6])));
        $res = preg_replace('~//.+$~m', '', $res);
        preg_match('~\$\w+\(\$\w+,\$\w+\("",\s*\$\w+\(\$\w+\(\$\w+\(\$\w+\(\$\w+,\s*"(\d+)"\)+,\$\w+\);.+function \w+\((\$\w+),\s*\$\w+,\s(\$\w+)\)\s{\3\s=\s\3\s\.\s\3;.+return \2;}~msi', $res, $matches);
        $res = gzinflate(hex2bin(pack('H*',$matches[1])));
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateOELove($str)
    {
        preg_match('~<\?php\s*defined\(\'[^\']+\'\)\s*\|\|\s*define\(\'[^\']+\',__FILE__\);(global\s*\$[^;]+;)+\s*(if\(!function_exists\(\'([^\']+)\'\)\){\s*function\s*[^\)]+\(\$[^,]+,\$[^=]+=\'\'\){\s*if\(empty\(\$[^\)]+\)\)\s*return\s*\'\';\s*\$[^=]+=base64_decode\(\$[^\)]+\);\s*if\(\$[^=]+==\'\'\)\s*return\s*\~\$[^;]+;\s*if\(\$[^=]+==\'-1\'\)\s*@[^\(]+\(\);\s*\$[^=]+=\$GLOBALS\[\'[^\']+\'\]\[\'[^\']+\'\]\(\$[^\)]+\);\s*\$[^=]+=\$GLOBALS\[\'[^\']+\'\]\[\'[^\']+\'\]\(\$[^,]+,\$[^,]+,\$[^\)]+\);\s*return\s*\$[^^]+\^\$[^;]+;\s*}}\s*)+(\$[^\[]+\["[^"]+"]=[^\(]+\(\'[^\']+\',\'[^\']*\'\);\s*)+(\$[^\[]+\[\'[^\']+\'\]=\$GLOBALS\[\'[^\']+\'\]\[\'[^\']+\'\]\([^\)]*\)+;\s*)+return\(eval\(\$[^\[]+\[\'[^\']+\'\]\)+;\s*\?>\s*#!/usr/bin/php\s*-q\s*((\s*[^\s]+)+)~msi', $str, $matches);
        $find = $matches[0];
        $res = $str;
        $code = $matches[6];
        $res = iconv('UTF-8', 'ASCII//IGNORE', $res);

        preg_match('~\$GLOBALS\[\'[^\']+\'\]\[\'[^\']+\'\]\(\'([\da-f]{32})\'\);~msi', $res, $hash);
        $hash = strrev($hash[1]);
        preg_match_all('~\$GLOBALS\[\'[^\']+\'\]\[\'[^\']+\'\]\(\'([\d]{10})\'\)~msi', $res, $substr_offsets);
        $substr_offsets = $substr_offsets[1];
        $substr_offsets = array_map('strrev', $substr_offsets);
        $substr_offsets = array_map('intval', $substr_offsets);

        preg_match_all('~if\s*\(\!function_exists\(\'([^\']+)\'\)~msi', $res, $decoders);
        $decoders = $decoders[1];
        $var_array = [];
        preg_match_all('~\$([^\[]{3,20})\["([^"]+)"\]=(\w+)\(\'([^\']*)\',\'([^\']*)\'\);~msi', $res, $vars, PREG_SET_ORDER);
        $var_name = $vars[0][1];
        foreach ($vars as $var) {
            if ($var[3] === $decoders[0] || $var[3] === $decoders[1]) {
                $var_array[$var[2]] = Helpers::OELoveDecoder($var[4], $var[5]);
                $res = str_replace($var[0], '', $res);
            }
        }
        $layer1 = substr($code, 0, $substr_offsets[3] + 96);
        $layer1_dec = iconv('UTF-8', 'ASCII//IGNORE', gzuncompress(base64_decode($layer1)));
        $code = str_replace($layer1, $layer1_dec, $code);
        preg_match_all('~\$([^\[]{3,20})\["([^"]+)"\]=(\w+)\(\'([^\']*)\',\'([^\']*)\'\);~msi', $code, $vars, PREG_SET_ORDER);
        foreach ($vars as $var) {
            if ($var[3] === $decoders[0] || $var[3] === $decoders[1]) {
                $var_array[$var[2]] = Helpers::OELoveDecoder($var[4], $var[5]);
                $code = str_replace($var[0], '', $code);
            }
        }
        $layer2_start = strpos($code, '?>') + 2;
        $layer2 = substr($code, $layer2_start + $substr_offsets[2]);
        $layer2_dec = iconv('UTF-8', 'ASCII//IGNORE', gzuncompress(base64_decode(str_rot13($layer2))));
        $res = $layer2_dec;
        foreach($var_array as $k => $v) {
            $res = str_replace('$GLOBALS[\'' . $var_name . '\'][\'' . $k . '\'](', $v . '(', $res);
            $res = str_replace('$GLOBALS[\'' . $var_name . '\'][\'' . $k . '\']', '\'' . $v . '\'', $res);
        }

        $res = preg_replace_callback('~(\w+)\(\'([^\']*)\',\'([^\']*)\'\)~msi', static function ($m) use ($decoders) {
            if ($m[1] !== $decoders[0] && $m[1] !== $decoders[1]) {
                return $m[0];
            }
            return '\'' . Helpers::OELoveDecoder($m[2], $m[3]) . '\'';
        }, $res);

        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateEvalConcatVars($str)
    {
        preg_match('~((\$\w+="";\$\w+\s*\.=\s*"[^;]+;\s*)+)(?:(?:\$\w+)="";)?(eval\((\s*(\$\w+)\s*\.)+\s*"([^"]+)(?:"\);)+)~msi', $str, $matches);
        $find = $matches[0];
        $res = $str;
        $parts = [];
        preg_match_all('~(\$\w+)="";\1\s*\.=\s*"([^"]+)"~msi', $matches[1], $matches1, PREG_SET_ORDER);
        foreach($matches1 as $match) {
            $parts[$match[1]] = stripcslashes(stripcslashes($match[2]));
        }
        $res = stripcslashes(stripcslashes($matches[3]));
        foreach($parts as $k => $v) {
            $res = str_replace($k, "'" . $v . "'", $res);
        }
        $res = preg_replace_callback('/[\'"]\s*?\.+\s*?[\'"]/smi', static function($m) {
            return '';
        }, $res);

        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateEvalAssignedVars($str, $matches)
    {
        $res = $str;

        $vars = [$matches[1] => $matches[2]];

        $res = preg_replace_callback('~(\$\w{1,3000})=(base64_decode|gzinflate|convert_uudecode|str_rot13)\((\$\w{1,3000})\);~msi',
            function ($match) use (&$vars) {
                $func = $match[2];
                if (Helpers::convertToSafeFunc($func) && isset($vars[$match[3]])) {
                    $vars[$match[1]] = @Helpers::executeWrapper($func, [$vars[$match[3]]]);
                    return '';
                }
                return $match[1] . '=' . $match[2] . '(\'' . $match[3] . '\';';
            }, $res);

        $res = $vars[$matches[4]] ?? Helpers::replaceVarsFromArray($vars, $res);

        return $res;
    }

    private function deobfuscateVarFuncsEval($str)
    {
        preg_match('~((\$\w+)\s*=\s*)(base64_decode\s*\(+|gzinflate\s*\(+|strrev\s*\(+|str_rot13\s*\(+|gzuncompress\s*\(+|convert_uudecode\s*\(+|urldecode\s*\(+|rawurldecode\s*\(+|htmlspecialchars_decode\s*\(+)+"([^"]+)"\)+(;\s*@?eval\(([\'"?>.\s]+)?\2\);)~', $str, $matches);
        $find = $matches[0];
        $res = $str;
        $res = str_replace([$matches[5], $matches[1]], [');', 'eval('], $res);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateComments($str, $matches)
    {
        $find = $matches[0];
        $res = preg_replace('~/\*\w+\*/~msi', '', $str);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateStrrevVarEval($str)
    {
        preg_match('~(\$\w+=strrev\("[^"]+"\);)+eval\((\$\w+\()+"([^"]+)"\)+;~mis', $str, $matches);
        $find = $matches[0];
        $res = gzinflate(base64_decode($matches[3]));
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateAanKFM($str, $matches)
    {
        $find = $matches[0];
        $res = $str;
        $key = Helpers::aanKFMDigitsDecode($matches[3]);
        $res = Helpers::Xtea_Decrypt($matches[4], $key);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateEvalChars($str, $matches)
    {
        $find = $matches[0];
        $res = $str;
        while(preg_match_all('~(?:@eval((?:\(\$[0O]+\[[\'"]\w+[\'"]\])+)\("([^"]+)"\)+;)|("\)\?\$[O0]+)~msi', $res, $matches, PREG_SET_ORDER)) {
            $match = $matches[0];
            if (isset($matches[1])) $match = $matches[1];
            $count = ($match[1] !== '') ? substr_count($match[1], '(') : 0;
            if ($count == 2) {
                $res = gzinflate(base64_decode($match[2]));
            } else if ($count == 3) {
                $res = gzinflate(base64_decode(str_rot13($match[2])));
            }
            if (isset($match[3]) && ($match[3] !== '')) {
                $res = preg_replace_callback('~(\$[0O]+\["\w+"\]\()+"([^"]+)"\)+;?~msi', static function($m) {
                    return gzinflate(base64_decode(str_rot13($m[2])));
                }, $res);
            }
        }
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateGlobalsBase64($str)
    {
        preg_match('~<\?php\s+((\$GLOBALS\[\s*[\'"]\w+[\'"]\s*\])\s*=\s*base64_decode\("([^"]*)"\);)+\s*\?>(<\?php\s.+\2.+exit;\s}\sfunction\s\w+\(\)\s{\sreturn\sarray\(\s\'favicon\'\s=>\s\'[^\']+\',\s+\'sprites\'\s=>\s\'[^\']+\',\s\);\s})~msi', $str, $matches);
        $find = $matches[0];
        $vars = [];
        preg_match_all('~(\$GLOBALS\[\s*[\'"]\w+[\'"]\s*\])\s*=\s*base64_decode\("([^"]*)"\);~msi', $matches[0], $matches1, PREG_SET_ORDER);
        foreach($matches1 as $match) {
            $vars[$match[1]] = base64_decode($match[2]);
        }
        $code = $matches[4];
        foreach ($vars as $var => $value) {
            $code = str_replace($var . '(', $value . '(', $code);
            $code = str_replace($var, "'" . $value . "'", $code);
        }
        $res = $code;
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateEvalReturn($str, $matches)
    {
        $find = $matches[0];
        $res = stripcslashes(base64_decode($matches[2]));
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateQibosoft($str)
    {
        preg_match('~\$\w+=__FILE__;\$\w+=fopen\(\$\w+,\'rb\'\);fread\(\$\w+,(\d+)\);\$\w+=explode\("\\\\t",base64_decode\(fread\(\$\w+,(\d+)\)+;\$\w+=\$\w+\[[\d+]\];[\$l1=\d{}\.;\(\)\[\]]+eval\(\$\w+\(\'([^\']+)\'\)+;\s*return\s*;\?>[\w=\+]+~msi', $str, $matches);
        $find = $matches[0];
        $res = $str;
        $hangs = 15;
        $obfPHP = explode('?>', $str);
        $obfPHP = $obfPHP[1];
        preg_match('~eval\(\$\w+\(\'([^\']+)\'\)+;~msi', $res, $temp);
        $res = str_replace($temp[0], base64_decode($temp[1]), $res);
        $offset = $matches[2];
        while (preg_match('~\$\w+\(\$\w+,(\d+)\);\s*eval\(\$\w+\(\$\w+\(\$\w+,(\d+)\)+;~msi', $res, $temp2) && $hangs--) {
            $offset += $temp2[1];
            $decode_loop = base64_decode(substr($obfPHP, $offset, $temp2[2]));
            $offset += $temp2[2];
            if (preg_match('~eval\(\$\w+\(\'([^\']+)\'\)+;~msi', $decode_loop, $temp)) {
                $res = str_replace($temp2[0], base64_decode($temp[1]), $res);
            } else {
                $res = $decode_loop;
            }

        }
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateUd64($str)
    {
        preg_match('~(\$ud64_c[o0]m="[\\\\0-9a-z\."]+;)+\$\w+=(\$ud64_c[o0]m\()+"([^"]+)"\)+;@eval\(\$ud64_c[o0]m\(\'[^\']+\'\)+;~msi', $str, $matches);
        $find = $matches[0];
        $res = gzinflate(convert_uudecode(base64_decode(gzinflate(base64_decode(str_rot13($matches[3]))))));
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateCustom1($str, $matches)
    {
        return Helpers::someDecoder3($matches[1]);
    }

    private function deobfuscateCustom2($str, $matches)
    {
        $find = $matches[0];
        $key = $matches[2];
        $var = $matches[3];
        preg_match_all('~(\$\w+)\[\d+\]\s*=\s*"([^"]+)";~msi', $str, $matches);
        foreach ($matches[1] as $k => &$m) {
            if ($m !== $var) {
                unset($matches[2][$k]);
            }
        }
        $res = base64_decode(Helpers::someDecoder4($matches[2], $key));
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateLockIt2($str, $matches)
    {
        $find = $matches[0];
        $res = $matches[1];

        if(strpos($str, '$_X="') !== false && strpos($res, '\\x') !== false) {
            $res = stripcslashes($res);
        }
        if (preg_match_all('~\$[_\w]+\.=[\'"]([\w\+\/=]+)[\'"];~', $matches[0], $concatVars)) {
            foreach ($concatVars[1] as $concatVar) {
                $res .= $concatVar;
            }
        }
        $res = base64_decode($res);
        $res = strtr($res, $matches[2], $matches[3]);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateVarsEvalFuncs($str, $matches)
    {
        $result = $str;
        $dict_var_name = $matches[1];

        $vars = Helpers::collectConcatedVars($result);

        $calced_vars = Helpers::replaceVarsFromDictionary($dict_var_name, $vars[$dict_var_name], $result);
        $calced_vars = Helpers::collectConcatedVars($calced_vars);

        $unwrapFunctions = function($vars, $str) {
            $str = Helpers::replaceVarsFromArray($vars, $str);
            $str = preg_replace('~\(([^\(\)]{1,500})\)~mis', '("\1")', $str);
            return $this->unwrapFuncs($str);
        };

        $result = $unwrapFunctions($calced_vars, $result);
        $result = $unwrapFunctions($calced_vars, $result);
        return $result;

    }

    private function deobfuscateLockIt3($str, $matches)
    {
        $totalLength = (int)$matches[1];
        $res = $this->unwrapFuncs($matches[2]);
        $encodedStr = $matches[3];

        if (preg_match('~\$\w{1,50}\s?=\s?fopen\(\$\w{1,50}\s?,\s?[\'"]rb[\'"]\);while\(\-\-\$\w{1,50}\)fgets\(\$\w{1,50},\d+\);fgets\(\$\w{1,50},\d+\);\$\w{1,50}\s?=\s?\(?((?:gzuncompress\(|base64_decode\()+)strtr\(fread\(\$\w{1,50},(\d+)\)+,[\'"]([^\'"]+)[\'"],[\'"]([^\'"]+)[\'"](\)+);eval\(\$\w{1,50}\);~msi', $res, $m)) {
            $length = (int)$m[2];
            $res = substr($encodedStr, 0, $length);
            $res = $this->unwrapFuncs($m[1] . "'" . strtr($res, $m[3], $m[4]) . $m[5]);

            if (preg_match('~((?:gzuncompress\(|base64_decode\()+)strtr\(fread\(\$\w{1,50},\$\w{1,50}\),[\'"]([^\'"]+)[\'"],[\'"]([^\'"]+)[\'"](\)+);~msi',
                $res, $m)) {
                $res = substr($encodedStr, $length, $totalLength);
                $res = $this->unwrapFuncs($m[1] . "'" . strtr($res, $m[2], $m[3]) . $m[4]);
                return $res;
            }
        }

        if (preg_match('~\$\w{1,50}\s?=\s?fopen\(\$\w{1,50}\s?,\s?[\'"]rb[\'"]\);\$\w{1,50}=(?:intval\([\'"])?(\d+)\)?(?:[\'"]\))?;fseek\(\$\w{1,50},(?:intval\([\'"])?(\d+)(?:[\'"]\))?\);eval\(base64_decode\(strtr\(fread\(\$\w{1,50},(\d+)\),[\'"]([^\'"]+)[\'"],[\'"]([^\'"]+)[\'"]\)+;return;~msi', $res, $m)) {
            $lengthSeek = (int)$m[1] - (int)$m[2];
            $length = (int)$m[3];
            $res = substr($encodedStr, 0, $length);
            $res = base64_decode(strtr($res, $m[4], $m[5]));

            if (preg_match('~\(base64_decode\(strtr\(gzuncompress\(base64_decode\(fread\(\$\w{1,50},\$\w{1,50}\)+,[\'"]([^\'"]+)[\'"],[\'"]([^\'"]+)[\'"]\)+;~msi', $res, $m)) {
                $res = substr($encodedStr, $lengthSeek, $totalLength);
                $res = base64_decode(
                    strtr(
                        gzuncompress(base64_decode($res)),
                        $m[1],
                        $m[2]
                    )
                );
                return $res;
            }
        }

        return $str;
    }

    private function deobfuscateAnaski($str, $matches)
    {
        $find = $matches[0];

        $res = gzinflate(str_rot13(base64_decode($matches[2])));
        $res = strtr($res, $matches[5], $matches[6]);

        return $res;
    }

    private function deobfuscateFuncs($str, $matches)
    {
        $find = $matches[0];
        $funcs = [];
        $payload = $matches[7];
        $var = $matches[6];
        $res = str_replace($matches[8], stripcslashes($matches[9]), $str);
        $res = preg_replace_callback('~function\s*(\w+)\((\$\w+)\){\s*return\s*(\w+)\(\2(,\d+)?\);}\s*~msi', static function($matches2) use (&$funcs){
            $funcs[$matches2[1]] = $matches2[3];
            return '';
        }, $res);
        foreach ($funcs as $k => $v) {
            $res = str_replace($k . '(', $v . '(', $res);
        }
        $res = str_replace([$var . '="' . $payload . '";', $var], ['', '"' . $payload . '"'], $res);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateSubstr($str)
    {
        preg_match('~\$\w+=0;(\$GLOBALS\[\'\w+\'\])\s*=\s*\'([^\']+)\';\s*(\$\w+)=pack\(\'H\*\',substr\(\1,\s*([-\d]+)\)\);if\s*\(!function_exists\(\'(\w+)\'\)\){function\s*\5\(\$\w+,\s*\$\w+\){\$\w+=\1;\s*\$d=pack\(\'H\*\',substr\(\1,\s*\4\)\);\s*return\s*\$\w+\(substr\(\$\w+,\s*\$\w+,\s*\$\w+\)\);}};eval\(\3\(\'([^\']+)\'\)\);~msi', $str, $matches);
        $find = $matches[0];
        $substr_array = $matches[2];
        $offset = intval($matches[4]);
        $func = $matches[5];
        $eval = pack('H*',substr($substr_array, $offset));
        $res = Helpers::convertToSafeFunc($eval) ? @Helpers::executeWrapper($eval, [$matches[6]]) : $matches[6];
        $res = preg_replace_callback('~(\w+)\(([-\d]+),\s*([-\d]+)\)~mis', static function ($matches) use ($eval, $substr_array, $func) {
            if ($matches[1] !== $func) {
                return $matches[0];
            }
            $res = Helpers::convertToSafeFunc($eval) ? @Helpers::executeWrapper($eval, [substr($substr_array, $matches[2], $matches[3])]) : $matches[0];
            return '\'' . $res . '\'';
        }, $res);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscatePHPJiaMi($str, $matches)
    {
        $find = $matches[0];
        $bin = bin2hex($str);
        preg_match('~6257513127293b24[a-z0-9]{2,30}3d24[a-z0-9]{2,30}2827([a-z0-9]{2,30})27293b~', $bin, $hash);
        preg_match('~2827([a-z0-9]{2})27293a24~', $bin, $rand);
        $hash = hex2bin($hash[1]);
        $rand = hex2bin($rand[1]);
        $res = Helpers::PHPJiaMi_decoder(substr($matches[3], 0, -45), $hash, $rand);
        $res = str_rot13(@gzuncompress($res) ?: $res);

        if (preg_match('~global\s*(\$[^,;]+);((?:\1\[\'[^\']+\'\]=[^(]+\(\'[^\']+\'\);)+)~msi', $str, $tmp))
        {
            $tmp = explode(';', $tmp[2]);
            foreach ($tmp as $entry) {
                if ($entry === '') {
                    continue;
                }
                preg_match('~\$([^\[]+)(\[\'[^\']+\'\])=([^\(]+)\(\'([^\']+)\'\)~', $entry, $parts);
                $res = str_replace('$GLOBALS[\'' . $parts[1] . '\']' . $parts[2], Helpers::PHPJiaMi_decoder($parts[4], $hash, $rand), $res);
            }
            $func_decrypt = $parts[3];
            $hangs = 20;
            while (($start = strpos($res, $func_decrypt . '(\'')) && $start !== false && $hangs--) {
                $end = strpos($res,'\'', $start + strlen($func_decrypt) + 2) + 1;
                $data = substr($res, $start + strlen($func_decrypt) + 2, $end - ($start + strlen($func_decrypt) + 2 + 1));
                $res = substr_replace($res, '\'' . Helpers::PHPJiaMi_decoder($data, $hash, $rand) . '\'', $start, ($end - $start) + 1);
            }
        }
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateEvalIReplace($str, $matches)
    {
        $find = $matches[0];
        $res = base64_decode($matches[3]);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateErrorHandler($str)
    {
        preg_match('~(\$\w+)="[^"]+";\s*(\$\w+)=str_ireplace\("[^"]+","",\1\);(\$\w+)\s*=\s*"([^"]+)";\s*function\s*(\w+)\((\$\w+,?)+\){\s*(\$\w+)=\s*create_function\(\'\',\$\w+\);\s*array_map\(\7,array\(\'\'\)+;\s*}\s*set_error_handler\(\'\5\'\);(\$\w+)=\2\(\3\);user_error\(\8,E_USER_ERROR\);\s*if\s*.+?}~msi', $str, $matches);
        $find = $matches[0];
        $res = base64_decode($matches[4]);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateStrtoupper($str, $matches)
    {
        $find = $matches[0];
        $res = $str;
        $alph = $matches[2];
        $var = $matches[1];
        $res = str_replace("{$var}=\"{$alph}\";", '', $res);
        for ($i = 0, $iMax = strlen($alph); $i < $iMax; $i++) {
            $res = str_replace($var . '[' . $i . '].', "'" . $alph[$i] . "'", $res);
            $res = str_replace($var . '[' . $i . ']', "'" . $alph[$i] . "'", $res);
        }
        $res = str_replace("''", '', $res);
        $res = str_replace("' . '", '', $res);
        $res = str_replace("' '", '', $res);
        preg_match('~(\$\w+)\s*=\s*strtoupper\s*\(\s*\'(\w+)\'\s*\)\s*;~msi', $res, $matches);
        $matches[2] = strtoupper($matches[2]);
        $res = str_replace($matches[0], '', $res);
        $res = preg_replace_callback('~\${\s*(\$\w+)\s*}~msi', static function ($m) use ($matches) {
            if ($m[1] !== $matches[1]) {
                return $m[0];
            }
            return '$' . $matches[2];
        }, $res);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateEval2($str)
    {
        preg_match('~(\$\w+)\s*=\s*"((?:[^"]|(?<=\\\\)")*)";(\$\w+)\s*=\s*(\1\[\d+\]\.?)+;(\$\w+)\s*=\s*[^;]+;(\$\w+)\s*=\s*"[^"]+";\$\w+\s*=\s*\5\."([^"]+)"\.\6;\3\((\1\[\d+\]\.?)+,\s*\$\w+\s*,"\d+"\);~smi', $str, $matches);
        $res = $str;
        list($find, $var, $alph) = $matches;
        for ($i = 0, $iMax = strlen($alph); $i < $iMax; $i++) {
            $res = str_replace($var . '[' . $i . '].', "'" . $alph[$i] . "'", $res);
            $res = str_replace($var . '[' . $i . ']', "'" . $alph[$i] . "'", $res);
        }
        $res = gzinflate(base64_decode(substr($matches[7], 1, -1)));
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateEvalEregReplace($str, $matches)
    {
        $find = $matches[0];
        $res = base64_decode($matches[2]);
        preg_match_all('~(\$\w+)\s*=\s*ereg_replace\("([^"]+)","([^"]+)",\1\);~smi', $str, $matches);
        foreach ($matches[2] as &$pat) {
            if ($pat[0] === '[') {
                $pat = substr($pat, 1, -1);
            }
        }
        unset($pat);
        $res = str_replace($matches[2], $matches[3], $res);
        $res = base64_decode($res);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateStrreplace($str, $matches)
    {
        $find = $matches[0];
        $res = $str;

        $str_replace = '';
        $base64_decode = '';
        $layer = '';

        if (!preg_match_all('~(?:(\$\w{1,50})\s?=\s?((?:\'[^\']{1,500}\'|"[^\n]{1,500}?"));[\n\s])~msi', $str, $matches, PREG_SET_ORDER)) {
            preg_match_all('~(\$\w+)\s*=\s*([\'"](?|[^\']+\'|[^"]+"));~msi', $str, $matches, PREG_SET_ORDER);
        }
        foreach ($matches as $i => $match) {
            $vars[$match[1]] = substr($match[2], 1, -1);
        }

        $res = preg_replace_callback('~(\$\w+)\s*=\s*str_replace\([\'"](\w+)[\'"],\s*[\'"]{2},\s*[\'"](\w+)[\'"]\)~msi',
            static function ($matches) use (&$vars, &$str_replace) {
                $vars[$matches[1]] = str_replace($matches[2], "", $matches[3]);
                if ($vars[$matches[1]] === 'str_replace') {
                    $str_replace = $matches[1];
                }
                return $matches[1] . ' = "' . $vars[$matches[1]] . '"';
            }, $res);

        if ($str_replace !== '') {
            $res = preg_replace_callback('~(\$\w+)\s*=\s*(\$\w+)\("(\w+)",\s*"",\s*"(\w+)"\)~msi',
                static function ($matches) use (&$vars, &$base64_decode, $str_replace) {
                    if ($matches[2] !== $str_replace) {
                        return $matches[0];
                    }
                    $vars[$matches[1]] = str_replace($matches[3], "", $matches[4]);
                    if ($vars[$matches[1]] === 'base64_decode') {
                        $base64_decode = $matches[1];
                    }
                    return $matches[1] . ' = "' . $vars[$matches[1]] . '"';
                }, $res);

            $res = preg_replace_callback('~(\$\w+)\((\$\w+)\("(\w+)",\s*"",\s*([\$\w\.]+)\)~msi',
                static function ($matches) use (&$vars, &$layer, $base64_decode, $str_replace) {
                    if ($matches[1] !== $base64_decode && $matches[2] !== $str_replace) {
                        return $matches[0];
                    }
                    $tmp = explode('.', $matches[4]);
                    foreach ($tmp as &$item) {
                        $item = $vars[$item];
                    }
                    unset($item);
                    $tmp = implode('', $tmp);
                    $layer = base64_decode(str_replace($matches[1], "", $tmp));

                    return $matches[0];
                }, $res);
        }

        if ($base64_decode !== '') {
            $regex = '~(\$\w+)\((\$\w+)\("(\w+)",\s*"",\s*([\$\w\.]+)\)~msi';
        } else {
            $regex = '~(str_replace)\(([\'"])([^\'"]+)[\'"],\s*[\'"]{2},\s*([\$\w\. ]+)\);\s?(\$\w+)\s*=\s*\$\w+\([\'"]{2},\s*\$\w+\);\s*\5\(\);~msi';
        }
        preg_replace_callback($regex,
            static function ($matches) use (&$vars, &$layer, $base64_decode, $str_replace) {
                if ($base64_decode !== '' && $matches[1] !== $base64_decode && $matches[2] !== $str_replace) {
                    return $matches[0];
                }
                $tmp = preg_split('~\s*\.\s*~msi', $matches[4]);

                foreach ($tmp as &$item) {
                    $item = $vars[$item];
                }
                unset($item);
                $tmp = implode('', $tmp);
                $layer = str_replace($matches[3], "", $tmp);
                if ($base64_decode !== '') {
                    $layer = base64_decode($layer);
                }
                return $matches[0];
            }, $res);
        $res = str_replace($find, $layer, $str);
        return $res;
    }

    private function deobfuscateSeolyzer($str, $matches)
    {
        $find           = $matches[0];
        $res            = $str;
        $vars           = [];
        $base64_decode  = '';
        $layer          = '';
        $gzuncompress   = '';

        preg_match_all('~(\$\w+)\s*=\s*([^$][^;]+)\s*;~msi', $str, $matches, PREG_SET_ORDER);
        foreach ($matches as $i => $match) {
            $var_name   = $match[1];
            $var_val    = trim($match[2]);
            if (preg_match('~"[^"]{0,20}"\s*\.chr\s*\(~i', $var_val)) {
                $var_val = Helpers::normalize($var_val);
            }
            $var_val = preg_replace('~^["\'](.*)["\']$~i', '\1', $var_val);
            $vars[$var_name] = trim($var_val);
            if ($var_val === 'base64_decode') {
                $base64_decode = $var_name;
            }
        }

        $res = preg_replace_callback('~\s*=\s*(\$\w+)\((\$\w+)\)~msi', static function ($matches) use (&$vars, &$gzuncompress, &$layer, $base64_decode) {
            if ($matches[1] !== $base64_decode) {
                return $matches[0];
            }
            if (!isset($vars[$matches[2]])) {
                return $matches[2];
            }
            $tmp = base64_decode($vars[$matches[2]]);
            if ($tmp === 'gzuncompress') {
                $gzuncompress = $matches[2];
            }
            $vars[$matches[2]] = $tmp;
            return " = '{$tmp}'";
        }, $res);

        if ($gzuncompress !== '') {
            $res = preg_replace_callback('~(\$\w+)\(\s*(\$\w+)\((\$\w+)\)~msi',
                function ($matches) use (&$vars, $gzuncompress, &$layer, $base64_decode) {
                    if ($matches[1] !== $gzuncompress && $matches[2] !== $base64_decode) {
                        return $matches[0];
                    }
                    if (!isset($vars[$matches[3]])) {
                        return $matches[3];
                    }
                    $tmp = gzuncompress(base64_decode($vars[$matches[3]]));
                    $layer = $matches[3];
                    $vars[$matches[3]] = $tmp;
                    return "'{$tmp}'";
                }, $res);
            $res = $vars[$layer];
        } else if (preg_match('~\$\w+\(\s*(\$\w+)\((\$\w+)\)~msi', $res)) {
            $res = preg_replace_callback('~\$\w+\(\s*(\$\w+)\((\$\w+)\)~msi',
                function ($matches) use (&$vars, &$layer, $base64_decode) {
                    if ($matches[1] !== $base64_decode) {
                        return $matches[0];
                    }
                    if (!isset($vars[$matches[2]])) {
                        return $matches[2];
                    }
                    $tmp = base64_decode($vars[$matches[2]]);
                    $layer = $matches[2];
                    $vars[$matches[2]] = $tmp;
                    return "'{$tmp}'";
                }, $res);
            $res = $vars[$layer];
        }
        return str_replace($find, $res, $str);
    }

    private function deobfuscateCreateFunc($str, $matches)
    {
        $result = $str;
        $funcs = str_replace($matches[4], '', $matches[3]);

        if (Helpers::concatStr($matches[1]) === 'create_function'
            && Helpers::concatStr($matches[2]) === 'eval') {
            $funcs = explode('(', $funcs);
            $iMax = count($funcs) - 2;
            $final_code = $matches[5];

            for ($i = $iMax; $i >= 0; $i--) {
                if ($funcs[$i][0] !== '\'' && $funcs[$i][0] !== '"') {
                    $funcs[$i] = '\'' . $funcs[$i];
                }
                $func = Helpers::concatStr($funcs[$i] . '"');
                if (Helpers::convertToSafeFunc($func)) {
                    $final_code = @Helpers::executeWrapper($func, [$final_code]);
                }
            }
            $result = $final_code;
        }
        $result = ' ?>' . $result;

        return $result;
    }

    private function deobfuscateGotoShell($str, $matches)
    {
        $str = Helpers::normalize($str);

        $str = preg_replace('~\${\'GLOBALS\'}\[\'(\w+)\'\]~msi', '$\1', $str);

        $vars = Helpers::collectVars($str, '\'');
        $need_remove_vars = [];
        foreach ($vars as $name => $value) {
            $last_str = $str;
            $str = str_replace('${' . $name . '}', '$' . $value, $str);
            if ($last_str != $str) {
                $need_remove_vars[$name] = $value;
            }
        }

        foreach ($need_remove_vars as $name => $value) {
            if (substr_count($str, $name) != 1) {
                continue;
            }
            $str = str_replace($name.'=\'' . $value . '\';', '', $str);
        }
        return $str;
    }

    private function deobfuscateCreateFuncConcat($str, $matches)
    {
        $find = $matches[0];
        $res = $str;
        $vars = [];
        $res = preg_replace_callback('~(?|(\$\w+)\s*=\s*(([base64_decode\'\.\s]+)|([eval\'\.\s]+)|([create_function\'\.\s]+)|([stripslashes\'\.\s]+)|([gzinflate\'\.\s]+)|([strrev\'\.\s]+)|([str_rot13\'\.\s]+)|([gzuncompress\'\.\s]+)|([urldecode\'\.\s]+)([rawurldecode\'\.\s]+));)~', static function($matches) use (&$vars) {
            $tmp = str_replace('\' . \'', '', $matches[0]);
            $tmp = str_replace('\'.\'', '', $tmp);
            $value = str_replace('\' . \'', '', $matches[2]);
            $value = str_replace('\'.\'', '', $value);
            $vars[$matches[1]] = substr($value, 1, -1);
            return $tmp;
        }, $res);
        foreach($vars as $key => $var) {
            $res = str_replace($key, $var, $res);
            $res = str_replace($var . ' = \'' . $var . '\';', '', $res);
            $res = str_replace($var . ' = "";', '', $res);
        }
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateEvalWrapVar($str, $matches)
    {
        $find = $matches[0];
        $res = $str;
        $vars = [];
        $res = preg_replace_callback('~(?|(\$\w+)\s*=\s*(([base64_decode"\'\.\s]+)|([eval"\'\.\s]+)|([create_function"\'\.\s]+)|([stripslashes"\'\.\s]+)|([gzinflate"\'\.\s]+)|([strrev"\'\.\s]+)|([str_rot13"\'\.\s]+)|([gzuncompress"\'\.\s]+)|([urldecode"\'\.\s]+)([rawurldecode"\'\.\s]+));)~msi', static function($matches) use (&$vars) {
            $tmp = preg_replace('~[\'"]\s*?[\+\.]+\s*?[\'"]~msi', '', $matches[0]);
            $value = preg_replace('~[\'"]\s*?[\+\.]+\s*?[\'"]~msi', '', $matches[2]);
            $vars[$matches[1]] = substr($value, 1, -1);
            return $tmp;
        }, $res);
        $res = preg_replace_callback('~\("([^\)]+)\'\)~msi',  function ($m) {
            return '(\'' . preg_replace('~[\'"]\s*?[\+\.]+\s*?[\'"]~msi', '', $m[1]) . '\'\)';
        }, $res);
        $temp = substr($res, strpos($res, '@eval'));
        $before = substr($res, 0, strpos($res, '@eval'));
        $temp1 = $temp;
        foreach($vars as $key => $var) {
            $temp = str_replace($key, $var, $temp);
        }
        $res = str_replace($temp1, $temp, $res);
        $res = str_replace($find, $res, $str);
        if (isset($matches[14]) && $matches[14] !== '') {
            $res = str_replace($matches[14], '', $res);
        }
        $res = $this->deobfuscateEval($res, []);
        if (isset($matches[14]) && $matches[14] !== '') {
            $res = $matches[14] . $res;
        }
        $res = preg_replace('~/\*[^\*]+\*/~msi', '', $res);
        return $before . $res;
    }

    private function deobfuscateForEach($str, $matches)
    {
        $find = $matches[0];
        $alph = $matches[3];
        $vars = [];
        $res = $str;

        preg_replace('~\s*/\*\w+\*/\s*~msi', '', $res);

        $res = preg_replace_callback('~foreach\(\[([\d,]+)\]\s*as\s*\$\w+\)\s*\{\s*(\$\w+)\s*\.=\s*\$\w+\[\$\w+\];\s*\}~mis', static function($matches) use ($alph, &$vars) {
            $chars = explode(',', $matches[1]);
            $value = '';
            foreach ($chars as $char) {
                $value .= $alph[$char];
            }
            $vars[$matches[2]] = $value;
            return "{$matches[2]} = '{$value}';";
        }, $res);

        foreach($vars as $key => $var) {
            $res = str_replace($key, $var, $res);
            $res = str_replace($var . " = '" . $var . "';", '', $res);
            $res = str_replace($var . ' = "";', '', $res);
        }

        preg_match('~(\$\w+)\s*=\s*strrev\([create_function\.\']+\);~ms', $res, $matches);
        $res = str_replace($matches[0], '', $res);
        $res = str_replace($matches[1], 'create_function', $res);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateSubst2($str)
    {
        preg_match('~(\$\w+)="([^"])+(.{0,70}\1.{0,400})+;\s*}~msi', $str, $matches);
        $find = $matches[0];
        $res = $str;
        preg_match('~(\$\w+)="(.+?)";~msi', $str, $matches);
        $alph = stripcslashes($matches[2]);
        $var = $matches[1];
        for ($i = 0, $iMax = strlen($alph); $i < $iMax; $i++) {
            $res = str_replace($var . '[' . $i . '].', "'" . $alph[$i] . "'", $res);
            $res = str_replace($var . '[' . $i . ']', "'" . $alph[$i] . "'", $res);
        }
        $res = str_replace("''", '', $res);
        preg_match_all('~(\$GLOBALS\[\'\w{1,40}\'\])\s*=\s*\'(([^\'\\\\]++|\\\\.)*)\';~msi', $res, $matches, PREG_SET_ORDER);

        foreach ($matches as $index => $var) {
            $res = str_replace($var[1], $var[2], $res);
            $res = str_replace($var[2] . " = '" . $var[2] . "';", '', $res);
        }

        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateAssert($str, $matches)
    {
        $find = $matches[0];
        $res = base64_decode($matches[3]);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateUrlDecode2($str, $matches)
    {
        $find = $matches[0];
        $res = $str;
        if (isset($matches[10])) {
            $res = base64_decode($matches[10]);
        }
        if (preg_match('~\$\w+=["\']([^\'"]+)[\'"];\s*eval\(\'\?>\'\.[\$\w\(\)\*,\s]+;~msi', $res, $match)) {
            $res = base64_decode(strtr(substr($match[1], 52*2), substr($match[1], 52, 52), substr($match[1], 0, 52)));
        }

        if (preg_match('~function\s*(\w+)\(\$\w+\)[\w{\$=\s*();<+\[\]\-]+\}\s+return[\$\s\w;]+}eval\(\1\("([\w\/+=]+)?"\)\);~', $res, $matchEval)) {
            $res = gzinflate(base64_decode($matchEval[2]));
            for ($i=0, $iMax = strlen($res); $i < $iMax; $i++) {
                $res[$i] = chr(ord($res[$i])-1);
            }
            $res = str_replace($find, $res, $str);
            return $res;
        }

        if (preg_match('~header\(\'[^\']+\'\);(?:\$\w+=\${[^}]+}\[[^\]]+\]\(\'.*?\'?;}?\'\);)+\${[^}]+}\[[^\]]+\]\(\);~msi',
            $matches[6], $match)) {
            $res = stripcslashes($match[0]);
            $dictionaryValue = urldecode($matches[3]);
            $vars = Helpers::getVarsFromDictionary($dictionaryValue, $str);
            $res = Helpers::replaceVarsFromArray($vars, $res);
            $res = Helpers::replaceCreateFunction($res);

            preg_match('~\$([0_O]+)\s*=\s*function\s*\((\$\w+)\)\s*\{\s*\$[O_0]+\s*=\s*substr\s*\(\2,(\d+),(\d+)\);\s*\$[O_0]+\s*=\s*substr\s*\(\2,([\d-]+)\);\s*\$[O_0]+\s*=\s*substr\s*\(\2,(\d+),strlen\s*\(\2\)-(\d+)\);\s*return\s*gzinflate\s*\(base64_decode\s*\(\$[O_0]+\s*\.\s*\$[O_0]+\s*\.\s*\$[O_0]+\)+;~msi', $res, $m);
            $res = preg_replace_callback('~\$\{"GLOBALS"}\["([0_O]+)"\]\s*\(\'([^\']+)\'\)~msi', static function ($calls) use ($m) {
                if ($calls[1] !== $m[1]) {
                    return $calls[0];
                }
                $temp1 = substr($calls[2], $m[3], $m[4]);
                $temp2 = substr($calls[2], $m[5]);
                $temp3 = substr($calls[2], $m[6],strlen($calls[2]) - $m[7]);
                return "'" . gzinflate(base64_decode($temp1 . $temp3 . $temp2)) . "'";
            }, $res);
            return $res;
        }

        if (preg_match('~((?:\$\w{1,50}\s*=\s*[\'"][^\'"]+[\'"];\s*)+)error_reporting\(\d\);\s*(\$\w{1,50})\s*=\s*(\$\w{1,50})\([\'"]([^\'"]+)[\'"]\);\s*\2\s*=\s(\$\w{1,50})\(\2\);\s*\$\w{1,50}\s*=\s*\$\w{1,50}\([\'"]\$\w{1,50}[\'"]\s*,\2\);~msi', $res, $match)) {
            $vars = Helpers::collectVars($match[0]);

            $func1 = $vars[$match[3]] ?? null;
            $func2 = $vars[$match[5]] ?? null;
            if (Helpers::convertToSafeFunc($func1) && Helpers::convertToSafeFunc($func2)) {
                $res = Helpers::executeWrapper($func2, [
                    Helpers::executeWrapper($func1, [$match[4]])
                ]);
            }

            if (substr_count($res, 'goto ') > 100) {
                $res = Helpers::unwrapGoto($res);
            }

            return $res;
        }

        $res = str_replace($find, ' ?>' . $res, $str);

        return $res;
    }

    private function deobfuscatePHPMyLicense($str)
    {
        preg_match('~\$\w+\s*=\s*base64_decode\s*\([\'"][^\'"]+[\'"]\);\s*if\s*\(!function_exists\s*\("rotencode"\)\).{0,1000}eval\s*\(\$\w+\s*\(base64_decode\s*\([\'"]([^"\']+)[\'"]\)+;~msi', $str, $matches);
        $find = $matches[0];
        $res = $str;
        $hang = 10;
        while(preg_match('~eval\s*\(\$\w+\s*\(base64_decode\s*\([\'"]([^"\']+)[\'"]\)+;~msi', $res, $matches) && $hang--) {
            $res = gzinflate(base64_decode($matches[1]));
        }
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateEdoced_46esab($str)
    {
        preg_match('~(\$\w+)=[\'"]([^"\']+)[\'"];(\$\w+)=strrev\(\'edoced_46esab\'\);eval\(\3\([\'"]([^\'"]+)[\'"]\)+;~msi', $str, $matches);
        $find = $matches[0];
        $res = '';
        $decoder = base64_decode($matches[4]);
        preg_match('~(\$\w+)=base64_decode\(\$\w+\);\1=strtr\(\1,[\'"]([^\'"]+)[\'"],[\'"]([^\'"]+)[\'"]\);~msi', $decoder, $matches2);
        $res = base64_decode($matches[2]);
        $res = strtr($res, $matches2[2], $matches2[3]);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateEdoced_46esab_etalfnizg($str, $matches)
    {
        return gzinflate(base64_decode($matches[3]));
    }

    private function deobfuscateEvalVarVar($str)
    {
        preg_match('~\$\{"GLOBALS"\}\[[\'"](\w+)[\'"]\]=["\'](\w+)[\'"];\$\{"GLOBALS"\}\[[\'"](\w+)[\'"]\]=["\']\2[\'"];(\${\$\{"GLOBALS"\}\[[\'"]\3[\'"]\]})=[\'"]([^\'"]+)[\'"];eval.{10,50}?(\$\{\$\{"GLOBALS"\}\[[\'"]\1[\'"]\]\})\)+;~msi', $str, $matches);
        $find = $matches[0];
        $res = str_replace($matches[4], '$' . $matches[2], $str);
        $res = str_replace($matches[6], '$' . $matches[2], $res);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateEscapes($str, $matches)
    {
        $find = $matches[0];
        $res = stripcslashes($str);
        $res = str_replace($find, $res, $str);
        preg_match_all('~(\$\{"GLOBALS"\}\[[\'"](\w+)[\'"]\])=["\'](\w+)[\'"];~msi', $res, $matches, PREG_SET_ORDER);
        foreach ($matches as $match) {
            $res = str_replace([$match[0], '${' . $match[1] . '}'], ['', '$' . $match[3]], $res);
        }

        return $res;
    }

    private function deobfuscateparenthesesString($str)
    {
        $hangs = 5;
        $res = $str;
        $find = '';
        while (preg_match('~for\((\$\w+)=\d+,(\$\w+)=\'([^\$]+)\',(\$\w+)=\'\';@?ord\(\2\[\1\]\);\1\+\+\)\{if\(\1<\d+\)\{(\$\w+)\[\2\[\1\]\]=\1;\}else\{\$\w+\.\=@?chr\(\(\5\[\2\[\1\]\]<<\d+\)\+\(\5\[\2\[\+\+\1\]\]\)\);\}\}\s*.{0,500}eval\(\4\);(if\(isset\(\$_(GET|REQUEST|POST|COOKIE)\[[\'"][^\'"]+[\'"]\]\)\)\{[^}]+;\})?~msi', $res, $matches) && $hangs--) {
            if($hangs == 4) {
                $find = $matches[0];
            }
            $res = '';
            $temp = [];
            $matches[3] = stripcslashes($matches[3]);
            for($i=0, $iMax = strlen($matches[3]); $i < $iMax; $i++)
            {
                if($i < 16) $temp[$matches[3][$i]] = $i;
                else $res .= @chr(($temp[$matches[3][$i]]<<4) + ($temp[$matches[3][++$i]]));
            }
        }
        if(!isset($matches[6])) {
            //$xor_key = 'SjJVkE6rkRYj';
            $xor_key = $res^"\n//adjust sy"; //\n//adjust system variables";
            $res = $res ^ substr(str_repeat($xor_key, (strlen($res) / strlen($xor_key)) + 1), 0, strlen($res));
        }
        if(substr($res,0,12)=="\n//adjust sy") {
            $res = str_replace($find, $res, $str);
            return $res;
        } else return $str;
    }

    private function deobfuscateEvalInject($str, $matches)
    {
        $res = $str;
        $find = $matches[0];
        $alph = $matches[2];

        for ($i = 0, $iMax = strlen($alph); $i < $iMax; $i++) {
            $res = str_replace($matches[1] . '[' . $i . '].', "'" . $alph[$i] . "'", $res);
            $res = str_replace($matches[1] . '[' . $i . ']', "'" . $alph[$i] . "'", $res);
        }

        $res = str_replace("''", '', $res);
        $res = str_replace("' '", '', $res);

        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateWebshellObf($str)
    {
        $res = $str;
        preg_match('~function\s*(\w{1,40})\s*\(\s*(\$\w{1,40})\s*,\s*(\$\w{1,40})\s*\)\s*\{\s*(\$\w{1,40})\s*=\s*str_rot13\s*\(\s*gzinflate\s*\(\s*str_rot13\s*\(\s*base64_decode\s*\(\s*[\'"]([^\'"]*)[\'"]\s*\)\s*\)\s*\)\s*\)\s*;\s*(if\s*\(\s*\$\w+\s*==[\'"][^\'"]*[\'"]\s*\)\s*\{\s*(\$\w{1,40})\s*=(\$\w+[\{\[]\d+[\}\]]\.?)+;return\s*(\$\w+)\(\3\);\s*\}\s*else\s*)+\s*if\s*\(\s*\$\w+\s*==[\'"][^\'"]*[\'"]\s*\)\s*\{\s*return\s*eval\(\3\);\s*\}\s*\};\s*(\$\w{1,40})\s*=\s*[\'"][^\'"]*[\'"];(\s*\10\([\'"][^\'"]*[\'"],)+\s*[\'"]([^\'"]*)[\'"]\s*\)+;~msi',$str, $matches);
        $find = $matches[0];

        $alph = str_rot13(gzinflate(str_rot13(base64_decode($matches[5]))));

        for ($i = 0, $iMax = strlen($alph); $i < $iMax; $i++) {
            $res = str_replace($matches[4] . '{' . $i . '}.', "'" . $alph[$i] . "'", $res);
            $res = str_replace($matches[4] . '{' . $i . '}', "'" . $alph[$i] . "'", $res);
        }
        $res = base64_decode(gzinflate(str_rot13(convert_uudecode(gzinflate(base64_decode(strrev($matches[12])))))));
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateXorFName($str, $matches, $xor_key = null)
    {
        if (!isset($matches)) {
            preg_match('~(?(DEFINE)(?\'c\'(?:/\*\w+\*/)*))(\$\w+)\s*=\s*basename(?&c)\((?&c)trim(?&c)\((?&c)preg_replace(?&c)\((?&c)rawurldecode(?&c)\((?&c)"[%0-9A-F\.]+"(?&c)\)(?&c),\s*\'\',\s*__FILE__(?&c)\)(?&c)\)(?&c)\)(?&c);(\$\w+)\s*=\s*"([%\w\.\-\~]+)";(?:(\$\w+)=[^;]+;\5(?&c)\((?&c)\'\',\s*\'};\'\s*\.\s*(?&c)\()?(?:eval(?&c)\()?(?&c)rawurldecode(?&c)\((?&c)\3(?&c)\)(?&c)\s*\^\s*substr(?&c)\((?&c)str_repeat(?&c)\((?&c)\2,\s*(?&c)\((?&c)strlen(?&c)\((?&c)\3(?&c)\)(?&c)/strlen(?&c)\((?&c)\2(?&c)\)(?&c)\)(?&c)\s*\+\s*1(?&c)\)(?&c),\s*0,(?&c)\s*strlen(?&c)\((?&c)\3(?&c)\)(?&c)\)(?&c)\)(?:(?&c)\s*\.\s*\'{\'(?&c)\))?(?&c);~msi', $str, $matches);
        }
        $encrypted = rawurldecode($matches[4]);
        if (!isset($xor_key)) {
            $plain_text = '@ini_set(\'error_log\', NULL);';
            $plain_text2 = 'if (!defined(';
            $xor_key = substr($encrypted, 0, strlen($plain_text)) ^ $plain_text;
            if (preg_match('~\.?[a-z0-9-_]{8,}\.\w{3}~', $xor_key, $m)) {
                $xor_key = $m[0];
            } else {
                $xor_key = substr($encrypted, 0, strlen($plain_text2)) ^ $plain_text2;
                if (preg_match('~\.?[a-z0-9-_]{8,}\.\w{3}~', $xor_key, $m)) {
                    $xor_key = $m[0];
                }
            }
        }
        $result = $encrypted ^ substr(str_repeat($xor_key, (strlen($encrypted) / strlen($xor_key)) + 1), 0, strlen($encrypted));
        return $result;
    }

    private function deobfuscateSubstCreateFunc($str)
    {
        preg_match('~(\$\w{1,40})=\'(([^\'\\\\]|\\\\.)*)\';\s*((\$\w{1,40})=(\1\[\d+].?)+;\s*)+(\$\w{1,40})=\'\';\s*(\$\w{1,40})\(\7,\$\w{1,40}\.\"([^\"]+)\"\.\$\w{1,40}\.\5\);~msi', $str, $matches);
        $find = $matches[0];
        $php = base64_decode($matches[9]);
        preg_match('~(\$\w{1,40})=(\$\w{1,40})\("([^\']+)"\)~msi', $php, $matches);
        $matches[3] = base64_decode($matches[3]);
        $php = '';
        for ($i = 1, $iMax = strlen($matches[3]); $i < $iMax; $i++) {
            if ($i % 2) {
                $php .= substr($matches[3], $i, 1);
            }
        }
        $php = str_replace($find, $php, $str);
        return $php;
    }

    private function deobfuscateZeura($str, $matches)
    {
        $offset = (int)$matches[8] + (int)$matches[9];
        $obfPHP = explode('__halt_compiler();', $str);
        $obfPHP = end($obfPHP);
        $php = gzinflate(base64_decode(substr(trim($obfPHP), $offset)));
        $php = stripcslashes($php);
        $php = str_replace($matches[0], $php, $str);
        return $php;
    }

    private function deobfuscateZeuraFourArgs($str, $matches)
    {
        $offset = $matches[6] * -1;
        $res    = gzinflate(base64_decode(substr(trim($str), $offset)));

        return $res;
    }

    private function deobfuscateSourceCop($str, $matches)
    {
        $key = $matches[2];
        $obfPHP = $matches[1];
        $res = '';
        $index = 0;
        $len = strlen($key);
        $temp = hexdec('&H' . substr($obfPHP, 0, 2));
        for ($i = 2, $iMax = strlen($obfPHP); $i < $iMax; $i += 2) {
            $bytes = hexdec(trim(substr($obfPHP, $i, 2)));
            $index = (($index < $len) ? $index + 1 : 1);
            $decoded = $bytes ^ ord(substr($key, $index - 1, 1));
            if ($decoded <= $temp) {
                $decoded = 255 + $decoded - $temp;
            } else {
                $decoded -= $temp;
            }
            $res .= chr($decoded);
            $temp = $bytes;
        }
        $res = str_replace($matches[0], $res, $str);
        return $res;
    }

    private function deobfuscateGlobalsArray($str, $matches)
    {
        $res = $str;
        $alph = stripcslashes($matches[3]);
        $res = preg_replace('~\${"[\\\\x0-9a-f]+"}\[\'\w+\'\]\s*=\s*"[\\\\x0-9a-f]+";~msi', '', $res);

        for ($i = 0, $iMax = strlen($alph); $i < $iMax; $i++) {
            $res = str_replace([
                $matches[1] . '[' . $matches[2] . ']' . '[' . $i . '].',
                $matches[1] . '[' . $matches[2] . ']' . '[' . $i . ']'
            ], array("'" . $alph[$i] . "'", "'" . $alph[$i] . "'"), $res);
        }
        $res = str_replace("''", '', $res);

        preg_match_all('~(\$\w+)\[(\'\w+\')]\s*=\s*\'(\w+)\';~msi', $res, $funcs);
        foreach ($funcs[1] as $k => $var) {
            if ($var !== $matches[1]) {
                continue;
            }
            $vars[] = $funcs[2][$k];
            $func[] = $funcs[3][$k];
        }

        foreach ($vars as $index => $var) {
            $res = str_replace($matches[1] . '[' . $var . ']', $func[$index], $res);
        }

        foreach ($func as $remove) {
            $res = str_replace($remove . " = '" . $remove . "';", '', $res);
            $res = str_replace($remove . "='" . $remove . "';", '', $res);
        }
        $res = str_replace($matches[0], $res, $str);
        return $res;
    }

    private function deobfuscateXbrangwolf($str, $match)
    {
        return $match[0];
    }

    private function deobfuscateObfB64($str, $matches)
    {
        $res = base64_decode($matches[3]);
        $res = str_replace($matches[0], $res, $str);
        return $res;
    }

    private function deobfuscateArrayOffsets($str)
    {
        $vars = [];
        preg_match('~(\$\w{1,40})\s*=\s*\'([^\']*)\';\s*(\$\w{1,40})\s*=\s*explode\s*\((chr\s*\(\s*\(\d+\-\d+\)\)),substr\s*\(\1,\s*\((\d+\-\d+)\),\s*\(\s*(\d+\-\d+)\)\)\);.+\1\s*=\s*\$\w+[+\-\*]\d+;~msi', $str, $matches);

        $find = $matches[0];
        $obfPHP = $matches[2];
        $matches[4] = Helpers::calc($matches[4]);
        $matches[5] = (int)Helpers::calc($matches[5]);
        $matches[6] = (int)Helpers::calc($matches[6]);

        $func = explode($matches[4], strtolower(substr($obfPHP, $matches[5], $matches[6])));
        $func[1] = strrev($func[1]);
        $func[2] = strrev($func[2]);

        preg_match('~\$\w{1,40}\s=\sexplode\((chr\(\(\d+\-\d+\)\)),\'([^\']+)\'\);~msi', $str, $matches);
        $matches[1] = Helpers::calc($matches[1]);
        $offsets = explode($matches[1], $matches[2]);

        $res = '';
        for ($i = 0; $i < (sizeof($offsets) / 2); $i++) {
            $res .= substr($obfPHP, $offsets[$i * 2], $offsets[($i * 2) + 1]);
        }

        preg_match('~return\s*\$\w{1,40}\((chr\(\(\d+\-\d+\)\)),(chr\(\(\d+\-\d+\)\)),\$\w{1,40}\);~msi', $str, $matches);
        $matches[1] = Helpers::calc($matches[1]);
        $matches[2] = Helpers::calc($matches[2]);

        $res = Helpers::stripsquoteslashes(str_replace($matches[1], $matches[2], $res));
        $res = "<?php\n" . $res . "?>";

        preg_match('~(\$\w{1,40})\s=\simplode\(array_map\(\"[^\"]+\",str_split\(\"(([^\"\\\\]++|\\\\.)*)\"\)\)\);(\$\w{1,40})\s=\s\$\w{1,40}\(\"\",\s\1\);\s\4\(\);~msi', $res, $matches);

        $matches[2] = stripcslashes($matches[2]);
        for ($i=0, $iMax = strlen($matches[2]); $i < $iMax; $i++) {
            $matches[2][$i] = chr(ord($matches[2][$i])-1);
        }

        $res = str_replace($matches[0], $matches[2], $res);

        preg_match_all('~(\$\w{1,40})\s*=\s*\"(([^\"\\\\]++|\\\\.)*)\";~msi', $res, $matches, PREG_SET_ORDER);
        foreach ($matches as $match) {
            $vars[$match[1]] = stripcslashes($match[2]);
        }

        preg_match_all('~(\$\w{1,40})\s*=\s*\'(([^\'\\\\]++|\\\\.)*)\';~msi', $res, $matches, PREG_SET_ORDER);
        foreach ($matches as $match) {
            $vars[$match[1]] = Helpers::stripsquoteslashes($match[2]);
        }

        preg_match('~(\$\w{1,40})\s*=\s*\"\\\\x73\\\\164\\\\x72\\\\137\\\\x72\\\\145\\\\x70\\\\154\\\\x61\\\\143\\\\x65";\s(\$\w{1,40})\s=\s\'(([^\'\\\\]++|\\\\.)*)\';\seval\(\1\(\"(([^\"\\\\]++|\\\\.)*)\",\s\"(([^\"\\\\]++|\\\\.)*)\",\s\2\)\);~msi', $res, $matches);

        $matches[7] = stripcslashes($matches[7]);
        $matches[3] = Helpers::stripsquoteslashes(str_replace($matches[5], $matches[7], $matches[3]));


        $res = str_replace($matches[0], $matches[3], $res);

        preg_match_all('~(\$\w{1,40})\s*=\s*\"(([^\"\\\\]++|\\\\.)*)\";~msi', $res, $matches, PREG_SET_ORDER);
        foreach ($matches as $match) {
            $vars[$match[1]] = stripcslashes($match[2]);
        }

        preg_match_all('~(\$\w{1,40})\s*=\s*\'(([^\'\\\\]++|\\\\.)*)\';~msi', $res, $matches, PREG_SET_ORDER);
        foreach ($matches as $match) {
            $vars[$match[1]] = Helpers::stripsquoteslashes($match[2]);
        }

        preg_match('~\$\w{1,40}\s=\sarray\(((\'(([^\'\\\\]++|\\\\.)*)\',?(\.(\$\w{1,40})\.)?)+)\);~msi', $res, $matches);

        foreach ($vars as $var => $value) {
            $matches[1] = str_replace("'." . $var . ".'", $value, $matches[1]);
        }

        $array2 = explode("','", substr($matches[1], 1, -1));
        preg_match('~eval\(\$\w{1,40}\(array\((((\"[^\"]\"+),?+)+)\),\s(\$\w{1,40}),\s(\$\w{1,40})\)\);~msi', $res, $matches);

        $array1 = explode('","', substr($matches[1], 1, -1));

        $temp = array_keys($vars);
        $temp = $temp[9];

        $arr = explode('|', $vars[$temp]);
        $off=0;
        $funcs=[];

        for ($i = 0, $iMax = count($arr); $i < $iMax; $i++) {
            if ($i === 0) {
                $off = 0;
            } else {
                $off = $arr[$i - 1] + $off;
            }
            $len = $arr[$i];
            $temp = array_keys($vars);
            $temp = $temp[7];

            $funcs[] = substr($vars[$temp], $off, $len);
        }

        for ($i = 0; $i < 5; $i++) {
            if ($i % 2 === 0) {
                $funcs[$i] = strrev($funcs[$i]);
                $g = substr($funcs[$i], strpos($funcs[$i], "9") + 1);
                $g = stripcslashes($g);
                $v = explode(":", substr($funcs[$i], 0, strpos($funcs[$i], "9")));
                for ($j = 0, $jMax = count($v); $j < $jMax; $j++) {
                    $q = explode("|", $v[$j]);
                    $g = str_replace($q[0], $q[1], $g);
                }
                $funcs[$i] = $g;
            } else {
                $h = explode("|", strrev($funcs[$i]));
                $d = explode("*", $h[0]);
                $b = $h[1];
                for ($j = 0, $jMax = count($d); $j < $jMax; $j++) {
                    $b = str_replace($j, $d[$j], $b);
                }
                $funcs[$i] = $b;
            }
        }
        $temp = array_keys($vars);
        $temp = $temp[8];
        $funcs[] = str_replace('9', ' ', strrev($vars[$temp]));
        $funcs = implode("\n", $funcs);
        preg_match('~\$\w{1,40}\s=\s\'.+?eval\([^;]+;~msi', $res, $matches);
        $res = str_replace($matches[0], $funcs, $res);
        $res = stripcslashes($res);
        $res = str_replace('}//}}', '}}', $res);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateArrayOffsetsEval($str, $matches)
    {
        $arg1 = explode(chr(Helpers::calculateMathStr($matches[4])), $matches[5]);
        $arg2 = $matches[2];
        $code = null;

        for ($enqvlelpmr = 0; $enqvlelpmr < (sizeof($arg1) / 2); $enqvlelpmr++) {
            $code .= substr($arg2, $arg1[($enqvlelpmr * 2)], $arg1[($enqvlelpmr * 2) + 1]);
        }

        $res = str_replace(
            chr(Helpers::calculateMathStr($matches[20])),
            chr(Helpers::calculateMathStr($matches[21])),
            $code
        );

        $arg1 = substr(
            $matches[2],
            Helpers::calculateMathStr($matches[7]),
            Helpers::calculateMathStr($matches[8])
        );

        $func = substr(
            $matches[2],
            Helpers::calculateMathStr($matches[23]),
            Helpers::calculateMathStr($matches[24])
        );

        return $res;
    }

    private function deobfuscateXoredVar($str, $matches)
    {
        $res = $str;
        $find = $matches[0];
        $str = str_replace('\\\'', '@@quote@@', $str);
        preg_match_all('~(\$\w{1,40})\s*=\s*\'([^\']*)\'\s*(?:\^\s*\'([^\']*)\')?;~msi', $str, $matches, PREG_SET_ORDER);
        $vars = [];
        foreach ($matches as $match) {
            $vars[$match[1]] = str_replace('@@quote@@', '\\\'', $match[2]);
            if (isset($match[3])) {
                $vars[$match[1]] ^= str_replace('@@quote@@', '\\\'', $match[3]);
            }
            $res = str_replace($match[0], $match[1] . "='" . $vars[$match[1]] . "';", $res);
        }

        preg_match_all('~(\$\w{1,40})\s*=\s*(\w+);~msi', $str, $matches, PREG_SET_ORDER);
        foreach ($matches as $match) {
            $vars[$match[1]] = $match[2];
        }

        preg_match_all('~(\$\w{1,40})\s*=\s*\'([^\']*)\'\^(\$\w+);~msi', $str, $matches, PREG_SET_ORDER);
        foreach ($matches as $match) {
            if (isset($vars[$match[3]])) {
                $vars[$match[1]] = str_replace('@@quote@@', '\\\'', $match[2]) ^ $vars[$match[3]];
                $res = str_replace($match[0], $match[1] . "='" . $vars[$match[1]] . "';", $res);
            }
        }

        preg_match_all('~(\$\w{1,40})\s*=\s*(\$\w+)\^\'([^\']*)\';~msi', $res, $matches, PREG_SET_ORDER);
        foreach ($matches as $match) {
            if (isset($vars[$match[2]])) {
                $vars[$match[1]] = str_replace('@@quote@@', '\\\'', $match[3]) ^ $vars[$match[2]];
                $res = str_replace($match[0], $match[1] . "='" . $vars[$match[1]] . "';", $res);
            }
        }
        preg_match_all('~(?<!\.)\'([^\']*)\'\^(\$\w+)~msi', $res, $matches, PREG_SET_ORDER);
        foreach ($matches as $match) {
            if (isset($vars[$match[2]])) {
                $res = str_replace($match[0], "'" . addcslashes(str_replace('@@quote@@', '\\\'', $match[1]) ^ $vars[$match[2]], '\\\'') . "'", $res);
            }
        }
        preg_match_all('~(\$\w+)\^\'([^\']*)\'~msi', $res, $matches, PREG_SET_ORDER);
        foreach ($matches as $match) {
            if (isset($vars[$match[1]])) {
                $res = str_replace($match[0], "'" . addcslashes($vars[$match[1]] ^ str_replace('@@quote@@', '\\\'', $match[2]), '\\\'') . "'", $res);
            }
        }

        preg_match_all('~(\$\w+)(\.)?=(\$\w+)?(?:\'([^\']*)\')?\.?(\$\w+)?(?:\'([^\']*)\')?(?:\^(\$\w+))?(?:\.\'([^\']*)\')?;~msi', $res, $matches, PREG_SET_ORDER);
        foreach ($matches as $match) {
            $val = '';

            //var
            if (isset($match[2]) && $match[2] !== '') {
                if (isset($vars[$match[1]])) {
                    $val .= $vars[$match[1]];
                } else {
                    continue;
                }
            }

            //var
            if (isset($match[3]) && $match[3] !== '') {
                if (isset($vars[$match[3]])) {
                    $val .= $vars[$match[3]];
                } else {
                    continue;
                }
            }

            //str
            if (isset($match[4]) && $match[4] !== '') {
                $val .= $match[4];
            }

            //var
            if (isset($match[5]) && $match[5] !== '') {
                if (isset($vars[$match[5]])) {
                    $val .= $vars[$match[5]];
                } else {
                    continue;
                }
            }

            //str
            if (isset($match[6]) && $match[6] !== '') {
                $val .= $match[6];
            }

            //var and str
            if (isset($match[7]) && $match[7] !== '') {
                if (isset($vars[$match[7]])) {
                    $additionalStr = '';
                    if (isset($match[8]) && $match[8] !== '') {
                        $additionalStr = $match[8];
                    }
                    $val ^= $vars[$match[7]] . $additionalStr;
                } else {
                    continue;
                }
            } else {
                if (isset($match[8]) && $match[8] !== '') {
                    $val .= $match[8];
                }
            }

            $vars[$match[1]] = $val;
            $res = str_replace($match[0], '', $res);
        }

        $res = preg_replace_callback('~(\$\w+)([()]|==)~msi', static function ($match) use ($vars) {
            $res = $vars[$match[1]] ?? $match[1];
            if (isset($vars[$match[1]]) && ($match[2] === ')' || $match[2] === '==')) {
                $res = "'$res'";
            }

            return $res . $match[2];
        }, $res);

        foreach ($vars as $var => $value) {
            $res = str_replace($var, $value, $res);
            $res = str_replace($value . "='" . $value . "';", '', $res);
        }
        $res = str_replace($find, $res, $str);

        if (preg_match('~((\$\w+)=\${\'(\w+)\'};)(?:.*?)((\$\w+)=\2(\[\'[^\']+\'\]);)~msi', $res, $matches)) {
            $res = str_replace($matches[1], '', $res);
            $res = str_replace($matches[4], '', $res);
            $cookieVar = sprintf('$%s%s', $matches[3], $matches[6]);
            $res = str_replace($matches[5], $cookieVar, $res);
        }

        return $res;
    }

    private function deobfuscatePhpMess($str, $matches)
    {
        $res = base64_decode(gzuncompress(base64_decode(base64_decode($matches[4]))));
        $res = str_replace($matches[0], $res, $str);
        return $res;
    }

    private function deobfuscatePregReplaceSample05($str)
    {
        $res = '';
        preg_match('~(\$\w{1,40})\s*=\s*\"([^\"]+)\";\s*\$\w+\s*=\s*\$\w+\(\1,\"([^\"]+)\",\"([^\"]+)\"\);\s*\$\w+\(\"[^\"]+\",\"[^\"]+\",\"\.\"\);~msi', $str, $matches);
        $res = strtr($matches[2], $matches[3], $matches[4]);
        $res = base64_decode($res);
        $res = str_replace($matches[0], $res, $str);
        return $res;
    }

    private function deobfuscatePregReplaceB64($str, $matches)
    {
        $find = $matches[0];
        $res = str_replace($find, base64_decode($matches[4]), $str);
        $res = stripcslashes($res);
        preg_match('~eval\(\${\$\{"GLOBALS"\}\[\"\w+\"\]}\(\${\$\{"GLOBALS"\}\[\"\w+\"]}\(\"([^\"]+)\"\)\)\);~msi', $res, $matches);
        $res = gzuncompress(base64_decode($matches[1]));
        preg_match('~eval\(\$\w+\(\$\w+\("([^"]+)"\)\)\);~msi', $res, $matches);
        $res = gzuncompress(base64_decode($matches[1]));
        preg_match('~eval\(\$\w+\(\$\w+\("([^"]+)"\)\)\);~msi', $res, $matches);
        $res = gzuncompress(base64_decode($matches[1]));
        preg_match_all('~\$(\w+)\s*(\.)?=\s*("[^"]*"|\$\w+);~msi', $res, $matches, PREG_SET_ORDER);
        $var = $matches[0][1];
        $vars = [];
        foreach ($matches as $match) {
            if($match[2]!=='.') {
                $vars[$match[1]] = substr($match[3], 1, -1);
            }
            else {
                $vars[$match[1]] .= $vars[substr($match[3], 1)];
            }
        }
        $res = str_replace("srrKePJUwrMZ", "=", $vars[$var]);
        $res = gzuncompress(base64_decode($res));
        preg_match_all('~function\s*(\w+)\(\$\w+,\$\w+\)\{.+?}\s*};\s*eval\(((\1\(\'(\w+)\',)+)\s*"([\w/\+]+)"\)\)\)\)\)\)\)\);~msi', $res, $matches);
        $decode = array_reverse(explode("',", str_replace($matches[1][0] . "('", '', $matches[2][0])));
        array_shift($decode);
        $arg = $matches[5][0];
        foreach ($decode as $val) {
            $arg = Helpers::someDecoder2($val, $arg);
        }
        $res = $arg;
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateDecoder($str, $matches)
    {
        $res = Helpers::someDecoder($matches[2]);
        $res = str_replace($matches[0], $res, $str);
        return $res;
    }

    private function deobfuscateGBE($str)
    {
        preg_match('~(\$\w{1,40})=\'([^\']+)\';\1=gzinflate\(base64_decode\(\1\)\);\1=str_replace\(\"__FILE__\",\"\'\$\w+\'\",\1\);eval\(\1\);~msi', $str, $matches);
        $res = str_replace($matches[0], gzinflate(base64_decode($matches[2])), $str);
        return $res;
    }

    private function deobfuscateGBZ($str, $matches)
    {
        $res = str_replace($matches[0], base64_decode(str_rot13($matches[4])), $str);
        return $res;
    }

    private function deobfuscateBitrix($str, $matches)
    {
        $find       = $matches[0];
        $res        = $str;
        $funclist   = [];
        $strlist    = [];

        $res = preg_replace("|[\"']\s*\.\s*['\"]|smi", '', $res);
        $res = Helpers::replaceMinMaxRound($res, 111);
        $res = Helpers::replaceBase64Decode($res, '"');
        $replace_from = [];
        $replace_to   = [];
        if (preg_match_all('|\$GLOBALS\[[\'"](.+?)[\'"]\]\s*=\s*Array\((.+?)\);|smi', $res, $founds, PREG_SET_ORDER)) {
            foreach ($founds as $found) {
                $varname = $found[1];
                $funclist[$varname] = explode(',', $found[2]);
                $funclist[$varname] = array_map(function ($value) {
                    return trim($value, "'\"");
                }, $funclist[$varname]);

                foreach ($funclist as $var => $funcs) {
                    foreach($funcs as $k => $func) {
                        $replace_from[] = '$GLOBALS["' . $var . '"][' . $k . ']';
                        $replace_from[] = '$GLOBALS[\'' . $var . '\'][' . $k . ']';
                        $replace_to[] = $func;
                        $replace_to[] = $func;
                    }
                }
                $replace_from[] = $found[0];
                $replace_to[] = '';
                $res = str_replace($replace_from, $replace_to, $res);
            }
        }

        $array_temp = [];
        while (preg_match('~function\s*(\w{1,60})\(\$\w+\)\s*{\s*\$\w{1,60}\s*=\s*Array\((.{1,40000}?)\);\s*return\s*base64_decode[^}]+}~msi', $res, $found)) {
            $strlist = explode(',', $found[2]);
            $array_temp[$found[1]] = array_map('base64_decode', $strlist);
            $replace_from = [];
            $replace_to = [];
            foreach($array_temp[$found[1]] as $k => $v) {
                $replace_from[] = $found[1] . '(' . $k . ')';
                $replace_to[] = '\'' . $v . '\'';
            }
            $replace_from[] = $found[0];
            $replace_to[] = '';
            $res = str_replace($replace_from, $replace_to, $res);
        }

        $res = preg_replace('~\'\s*\.\s*\'~', '', $res);
        if (preg_match_all('~\s*function\s*(_+(.{1,60}?))\(\$[_0-9]+\)\s*\{\s*static\s*\$([_0-9]+)\s*=\s*(true|false);.{1,30000}?\$\3\s*=\s*array\((.*?)\);\s*return\s*base64_decode\(\$\3~smi', $res, $founds, PREG_SET_ORDER)) {
            foreach ($founds as $found) {
                $strlist = explode('",', $found[5]);
                $strlist = implode("',", $strlist);
                $strlist = explode("',", $strlist);
                $array_temp[$found[1]] = array_map('base64_decode', $strlist);
                $replace_from = [];
                $replace_to = [];
                foreach($array_temp[$found[1]] as $k => $v) {
                    $replace_from[] = $found[1] . '(' . $k . ')';
                    $replace_to[] = '\'' . $v . '\'';
                }
                $res = str_replace($replace_from, $replace_to, $res);
            }
        }
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateLockIt($str, $matches)
    {
        $phpcode = base64_decode(Helpers::getTextInsideQuotes(Helpers::getEvalCode($str)));
        $result = $str;
        $offset = 0;
        $dictName = $matches[1];
        $dictVal = urldecode($matches[2]);
        $vars = [$dictName => $dictVal];

        $vars = Helpers::getVarsFromDictionaryDynamically($vars, $str);

        if (preg_match('~eval\(~msi', $matches[15])) {
            $phpcode = base64_decode(Helpers::getTextInsideQuotes(Helpers::getEvalCode($matches[15])));
        }

        if ($matches[7] !== '' && preg_match('~eval\(~msi', $matches[7])) {
            $phpcode2 = base64_decode(Helpers::getTextInsideQuotes(Helpers::getEvalCode($matches[7])));
            $vars = Helpers::collectVars($phpcode2, "'", $vars);
        }

        if (preg_match('~\$_F=__FILE__;\$_X=\'([^\']+)\';\s*eval\s*\(\s*\$?\w{1,60}\s*\(\s*[\'"][^\'"]+[\'"]\s*\)\s*\)\s*;~msi', $str, $matches)) {
            $needles = Helpers::getNeedles($phpcode);
            $needle        = $needles[0];
            $before_needle = $needles[1];
            $strToDecode = base64_decode($matches[1]);
            return '<?php ' . strtr($strToDecode, $needle, $before_needle);
        }

        $count = 0;
        preg_match_all('~,(\d+|0x\w+)\)~msi', $phpcode, $offsetMatches, PREG_SET_ORDER);
        if (count($offsetMatches) === 2) {
            foreach ($offsetMatches as $offsetMatch) {
                if (strpos($offsetMatch[1], '0x') !== false && isset($str[$offset + hexdec($offsetMatch[1])])) {
                    $count++;
                    $offset += hexdec($offsetMatch[1]);
                } else if (isset($str[$offset + (int)$offsetMatch[1]])) {
                    $count++;
                    $offset += (int)$offsetMatch[1];
                }
            }
        }

        $finalOffset = 0;
        if (preg_match('~(\$[O0]*)=(\d+|0x\w+);~msi', $str, $match) && $count === 2) {
            if (strpos($match[2], '0x') !== false) {
                $finalOffset = hexdec($match[2]);
            } else {
                $finalOffset = (int)$match[2];
            }
        }

        $result = substr($str, $offset);
        if ($finalOffset > 0) {
            $result = substr($result, 0, $finalOffset);
        }

        if (preg_match('~[\'"]([^\'"]+)[\'"],[\'"]([^\'"]+)[\'"]~msi', $phpcode, $needleMatches)) {
            $result = strtr($result, $needleMatches[1], $needleMatches[2]);
        }

        $result = base64_decode($result);

        $result = Helpers::replaceVarsFromArray($vars, $result, true);

        $found = true;
        $hop = 50;
        while ($found && $hop > 0) {
            $found = false;

            if (preg_match('~eval\s?\(((?:(?:gzinflate|str_rot13|base64_decode)\()+\'[^\']+\'\)+);~msi', $result, $evalMatch)) {
                $result = str_replace($evalMatch[0], $this->unwrapFuncs($evalMatch[1]), $result);
                $found = true;
            }

            if (preg_match('~eval\s?\((?:str_rot13\()+\'((?|\\\\\'|[^\'])+\')\)\);~msi', $result, $evalMatch)) {
                $result = str_replace($evalMatch[0], $this->unwrapFuncs($evalMatch[1]), $result);
                $found = true;
            }

            $hop--;
        }

        $result = preg_replace_callback(
            '~(echo\s*)?base64_decode\(\'([\w=\+\/]+)\'\)~',
            function ($match) {
                if ($match[1] != "") {
                    return 'echo \'' . base64_decode($match[2]) . '\'';
                }
                return '\'' . str_replace('\'', '\\\'', base64_decode($match[2])) . '\'';
            },
            $result
        );

        $result = Helpers::replaceVarsFromArray($vars, $result, true);

        return '<?php ' . $result;
    }

    private function deobfuscateB64inHTML($str, $matches)
    {
        $obfPHP        = $str;
        $phpcode       = base64_decode(Helpers::getTextInsideQuotes(Helpers::getEvalCode($obfPHP)));
        $needles       = Helpers::getNeedles($phpcode);
        $needle        = $needles[count($needles) - 2];
        $before_needle = end($needles);
        $pointer1 = $matches[2];
        $temp = strtr($obfPHP, $needle, $before_needle);
        $end = 8;
        for ($i = strlen($temp) - 1; $i > strlen($temp) - 15; $i--) {
            if ($temp[$i] === '=') {
                $end = strlen($temp) - 1 - $i;
            }
        }

        $phpcode = base64_decode(substr($temp, strlen($temp) - $pointer1 - ($end-1), $pointer1));
        $phpcode = str_replace($matches[0], $phpcode, $str);
        return $phpcode;
    }

    private function deobfuscateStrtrFread($str, $layer2)
    {
        $str = explode('?>', $str);
        $str = end($str);
        $res = substr($str, $layer2[1], strlen($str));
        $res = base64_decode(strtr($res, $layer2[2], $layer2[3]));
        $res = str_replace($layer2[0], $res, $str);
        return $res;
    }

    private function deobfuscateStrtrBase64($str, $matches)
    {
        $str = strtr($matches[2], $matches[3], $matches[4]);
        $res = base64_decode($str);
        $res = str_replace($matches[0], $res, $str);
        return $res;
    }

    private function deobfuscateByteRun($str)
    {
        preg_match('~\$_F=__FILE__;\$_X=\'([^\']+)\';\s*eval\s*\(\s*\$?\w{1,60}\s*\(\s*[\'"][^\'"]+[\'"]\s*\)\s*\)\s*;~msi', $str, $matches);
        $res = base64_decode($matches[1]);
        $res = strtr($res, '123456aouie', 'aouie123456');
        $res = str_replace($matches[0], $res, $str);
        return $res;
    }

    private function deobfuscateExplodeSubst($str, $matches)
    {
        $find = $matches[0];
        $res = $str;
        preg_match('~(\$_\w+\[\w+\])\s*=\s*explode\(\'([^\']+)\',\s*\'([^\']+)\'\);.+?(\1\[[a-fx\d]+\])\(\);~msi', $res, $matches);
        $subst_array = explode($matches[2], $matches[3]);
        $res = preg_replace_callback('~((\$_GET\[[O0]+\])|(\$[O0]+))\[([a-fx\d]+)\](\()?~msi', static function ($matches) use ($subst_array) {
            if (isset($matches[5])) {
                return $subst_array[hexdec($matches[4])] . '(';
            }
            return "'" . $subst_array[hexdec($matches[4])] . "'";
        }, $res);
        $res = str_replace($find, $res, $str);

        return $res;
    }

    private function deobfuscateSubst($str, $matches)
    {
        $find = $matches[0];
        $res = $str;
        $alph = stripcslashes($matches[2]);

        for ($i = 0, $iMax = strlen($alph); $i < $iMax; $i++) {
            $res = str_replace(
                [$matches[1] . '[' . $i . '].', $matches[1] . '[' . $i . ']'],
                ["'" . $alph[$i] . "'", "'" . $alph[$i] . "'"],
                $res
            );
        }
        $res = str_replace("''", '', $res);
        $var = $matches[3];


        preg_match_all('~(\$\w+)\[\]\s*=\s*\'([\w\*\-\#]+)\'~msi', $res, $matches);

        for ($i = 0, $iMax = count($matches[2]); $i <= $iMax; $i++) {
            if ($matches[1][$i] !== $var) {
                continue;
            }
            if (@function_exists($matches[2][$i])) {
                $res = str_replace($var . '[' . $i . ']', $matches[2][$i], $res);
            } else {
                $res = @str_replace($var . '[' . $i . ']', "'" . $matches[2][$i] . "'", $res);
            }
        }
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateUrldecode($str)
    {
        preg_match('~(\$\w+=\'[^\']+\';\s*)+(\$[\w{1,40}]+)=(urldecode|base64_decode)?\(?[\'"]([\w+%=-]+)[\'"]\)?;(\$[\w+]+=(\$(\w+\[\')?[O_0]*(\'\])?([\{\[]\d+[\}\]])?\.?)+;)+[^\?]+(\?\>[\w\~\=\/\+]+|.+\\\\x[^;]+;)~msi', $str, $matches);
        $find = $matches[0];
        $res = $str;
        $res = stripcslashes($res);
        if ($matches[3] === "urldecode") {
            $alph = urldecode($matches[4]);
            $res = str_replace('urldecode(\'' . $matches[4] . '\')', "'" . $alph . "'", $res);
        } elseif ($matches[3] === 'base64_decode') {
            $alph = base64_decode($matches[4]);
            $res = str_replace('base64_decode(\'' . $matches[4] . '\')', "'" . $alph . "'", $res);
        } else {
            $alph = $matches[4];
        }

        for ($i = 0, $iMax = strlen($alph); $i < $iMax; $i++) {
            $res = str_replace([
                    $matches[2] . '[' . $i . '].',
                    $matches[2] . '[' . $i . ']',
                    $matches[2] . '{' . $i . '}.',
                    $matches[2] . '{' . $i . '}'
                ], [
                    "'" . $alph[$i] . "'",
                    "'" . $alph[$i] . "'",
                    "'" . $alph[$i] . "'",
                    "'" . $alph[$i] . "'"],
                $res
            );
        }
        $res = str_replace("''", '', $res);

        preg_match_all('~\$(\w+)\s*=\s*\'([\w\*\-\#]+)\'~msi', $res, $matches, PREG_SET_ORDER);
        for ($i = 0, $iMax = count($matches); $i < $iMax; $i++) {
            $res = str_replace(['$' . $matches[$i][1] . '(' , '${"GLOBALS"}["' . $matches[$i][1] . '"]' . '('],
                $matches[$i][2] . '(', $res, $c);
            $res = str_replace(['$' . $matches[$i][1], '${"GLOBALS"}["' . $matches[$i][1] . '"]'],
                    "'" . $matches[$i][2] . "'", $res, $cc);

            if ($c > 0 || $cc > 0) {
                $res = str_replace([
                    "'" . $matches[$i][2] . "'='" . $matches[$i][2] . "';",
                    $matches[$i][2] . "='" . $matches[$i][2] . "';",
                    $matches[$i][2] . "=" . $matches[$i][2] . ';',
                    $matches[$i][0] . ';'
                ], '', $res);
            }
        }

        $res = Helpers::replaceCreateFunction($res);

        preg_match('~\$([0_O]+)\s*=\s*function\s*\((\$\w+)\)\s*\{\s*\$[O_0]+\s*=\s*substr\s*\(\2,(\d+),(\d+)\);\s*\$[O_0]+\s*=\s*substr\s*\(\2,([\d-]+)\);\s*\$[O_0]+\s*=\s*substr\s*\(\2,(\d+),strlen\s*\(\2\)-(\d+)\);\s*return\s*gzinflate\s*\(base64_decode\s*\(\$[O_0]+\s*\.\s*\$[O_0]+\s*\.\s*\$[O_0]+\)+;~msi', $res, $matches);
        $res = preg_replace_callback('~\$\{"GLOBALS"}\["([0_O]+)"\]\s*\(\'([^\']+)\'\)~msi', static function ($calls) use ($matches) {
            if ($calls[1] !== $matches[1]) {
                return $calls[0];
            }
            $temp1 = substr($calls[2], $matches[3], $matches[4]);
            $temp2 = substr($calls[2], $matches[5]);
            $temp3 = substr($calls[2], $matches[6],strlen($calls[2]) - $matches[7]);
            return "'" . gzinflate(base64_decode($temp1 . $temp3 . $temp2)) . "'";
        }, $res);

        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateUrlDecode3($str, $matches)
    {
        $dictionaryKey = $matches[4];
        $dictionaryVal = urldecode($matches[3]);

        $result = Helpers::replaceVarsFromDictionary($dictionaryKey, $dictionaryVal, $str);

        return $result;
    }

    private function deobfuscateEvalFunc($str)
    {
        $res = $str;
        $res = stripcslashes($res);
        preg_match('~function\s*(\w{1,40})\((\$\w{1,40})\)\s*\{\s*(\$\w{1,40})\s*=\s*\"base64_decode\";\s*(\$\w{1,40})\s*=\s*\"gzinflate\";\s*return\s*\4\(\3\(\2\)\);\s*\}\s*\$\w{1,40}\s*=\s*\"[^\"]*\";\s*\$\w{1,40}\s*=\s*\"[^\"]*\";\s*eval\(\1\(\"([^\"]*)\"\)\);~msi', $res, $matches);
        $res = gzinflate(base64_decode($matches[5]));
        $res = str_replace($str, $res, $str);
        return $res;
    }

    private function deobfuscateEvalConcatFunc($str, $matches)
    {
        $res = $matches[2];

        if (str_replace('"."', '', $matches[6]) === '"create_function"') {
            $brackets = '';
            $res = preg_replace_callback('~[\w."]+\(~', static function ($match) use (&$brackets) {
                $replace = strtolower(str_replace('"."', '', $match[0]));
                if (strpos($replace, 'eval') === false) {
                    $brackets .= ')';
                    return $replace;
                }
                return "";
            }, $res);

            $res .= "'$matches[4]'" . $brackets . ';';
            $res = $this->unwrapFuncs($res);
        }

        return $res;
    }

    private function deobfuscateEvalHex($str)
    {
        preg_match('~eval\s*\("(\\\\x?\d+[^"]+)"\);~msi', $str, $matches);
        $res = stripcslashes($matches[1]);
        $res = str_replace($matches[1], $res, $res);
        $res = str_replace($matches[0], $res, $str);
        return $res;
    }

    private function deobfuscateEvalVarConcat($str, $matches)
    {
        $find = $matches[0];
        $res = $str;
        preg_match_all('~(\$\w+)\s*\.?=\s*"([^"]+)";~msi', $str, $matches, PREG_SET_ORDER);
        $vars = [];
        foreach ($matches as $match) {
            $res = str_replace($match[0], '', $res);
            $res = str_replace($match[1], '"' . $match[2] . '"', $res);
        }
        $res = preg_replace('/[\'"]\s*?\.+\s*?[\'"]/smi', '', $res);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateEvalVarSpecific($str, $matches)
    {
        $res = $str;

        if (preg_match('~\${"[^"]+"}\["[^"]+"\]|\${\${"[^"]+"}\["[^"]+"\]}~msi', $str)) {
            $res = stripcslashes($res);

            preg_match_all('~(\${"[^"]+"}\["[^"]+"\])="([^"]+)";~msi',$res, $match, PREG_SET_ORDER);
            foreach ($match as $m) {
                $res = str_replace('${' . $m[1] . '}', '$' . $m[2], $res);
            }
        }

        $vars = Helpers::collectVars($res);

        if (preg_match('~eval\(htmlspecialchars_decode\(urldecode\(base64_decode\((\$\w+)\)\)\)\);~msi', $res, $m) && isset($vars[$m[1]])) {
            $res = htmlspecialchars_decode(urldecode(base64_decode($vars[$m[1]])));
        }

        $res = Helpers::replaceVarsFromArray($vars, $res, false, true);

        return $res;
    }

    private function deobfuscateEvalVar($str, $matches)
    {
        $find = $matches[0];
        $evalVar = $matches[7];
        if (strpos($evalVar, '${$') === 0) {
            return Helpers::postProcess($str);
        }
        if (!$evalVar) {
            $evalVar = $matches[6];
            $pregVal = '\$\w+';
            $pregStr = '[\'"]?([\/\w\+=]+)[\'"]?';
            $pregFunc = '(?:base64_decode\s*\(|gzinflate\s*\(|strrev\s*\(|str_rot13\s*\(|gzuncompress\s*\(|urldecode\s*\(|rawurldecode\s*\(|htmlspecialchars_decode\s*\()+(?:["\']([\/\w\+=]+)["\'])';
            while (preg_match('~str_replace\(["\']([\/\w]+)["\'],\s?["\']([\/\w\+=]+)["\'],\s?(?|(' . $pregVal . ')|(?:' . $pregStr . ')|(' . $pregFunc . '))\)~msi', $evalVar, $match)) {
                $result = $match[0];
                if (preg_match('~' . $pregVal . '~', $match[3], $arg)) {
                    $result = str_replace($match[1], $match[2], $matches[3]);
                } elseif (preg_match('~' . $pregFunc . '~', $match[3], $arg)) {
                    $unwrappedVar = $this->unwrapFuncs($arg[0]);
                    $result = str_replace($match[1], $match[2], $unwrappedVar);
                } elseif (preg_match('~' . $pregStr . '~', $match[3], $arg)) {
                    $result = str_replace($match[1], $match[2], $match[3]);
                }

                $evalVar = str_replace($match[0], "\"$result\"" . ')', $evalVar);
            }
            return $this->unwrapFuncs($matches[5] . $evalVar);
        }

        $str = str_replace(['\\\'', '\\"'], ['@@slaquote@@', '@@sladquote@@'], $str);
        $val = '';
        $index = 0;
        if (@preg_match_all('~(\$[^\s=\'"\)]+)\s*=\s*\(?(?|("[^"]+")|(\'[^\']+\'))\)?\s*;?~msi', $str, $matches)) {
            $matches[1] = array_reverse($matches[1], true);
            $index = array_search($evalVar, $matches[1], true);
            if ($index !== false) {
                $val = @$matches[2][$index];
            }
        }

        $string = $str;
        if ($val !== '') {
            $string = str_replace($matches[0][$index], '', $string);
            $val = substr($val, 1, -1);
            $var_index = substr_count($string, $evalVar . ' = ');
            $text = "'" . addcslashes(stripcslashes($val), "\\'") . "'";
            preg_match_all('~(\$[^\s=\'"\)]+)(?=[^a-zA-Z0-9])~ms', $string, $matches, PREG_OFFSET_CAPTURE);
            $matches = array_reverse($matches[1]);
            foreach($matches as $match) {
                if ($match[0] === $evalVar) {
                    $string = substr_replace($string, $text, $match[1], strlen($match[0]));
                    break;
                }
            }

            $string = preg_replace_callback('~\(\s*(\$[^\s=\'"\)]+)~msi', static function($m) use ($evalVar, $text) {
                if ($m[1] !== $evalVar) {
                    return $m[0];
                }
                return '(' . $text;
            }, $string);
        }

        $string = str_replace('assert(', 'eval(', $string);
        $string = str_replace('@@slaquote@@', '\\\'', $string);
        $string = str_replace('@@sladquote@@', '\\"', $string);
        $string = str_replace("eval(''.", 'eval(', $string);
        $res = str_replace($find, $string, $str);
        if (strpos($string, 'gzinflate(\'') !== false) {
            $res = $this->deobfuscateEval(stripcslashes($res), []);
        }
        return $res;
    }

    private function deobfuscateEvalGlobalVarFuncWrapped($str, $matches)
    {
        //Sample: evalGlobalVarFuncWrapped_1.php

        if (stripcslashes($matches[1]) !== stripcslashes($matches[3])) {
            return $str;
        }

        $varName = stripcslashes($matches[2]);
        $decodeData = htmlspecialchars_decode(gzinflate(base64_decode(stripcslashes($matches[5]))));

        $code = str_replace('$' . $varName, '"' . stripcslashes($matches[4]) . '"', $decodeData);
        $code = stripcslashes($this->unwrapFuncs($code));

        if (preg_match('~@?eval\(fgets\(fopen\((urldecode\(base64_decode\([\'"][^"\']+[\'"]\)\))[^;]+;~msi',
            $code,
            $match)) {
            $code = str_replace($match[1], '\'' . $this->unwrapFuncs($match[1]) . '\'', $code);
        }

        return $code;
    }

    private function deobfuscateEval($str, $matches)
    {
        if (preg_match('~\)+\..{0,30}base64_decode~msi', $str)) {
            $res = explode(').', $str);
            $res = implode(')); eval(', $res);
            return $res;
        }

        if (preg_match('~@?stream_get_contents\(\$\w+\),\s*true~msi', $str, $matches)) {
            if (preg_match('~<\?php\s/{2}[\w\s]+\$\w{1,50}\s?=\s?@?\$_SERVER.*?(\$\w+)\s*=\s*@?fopen\(__FILE__,\s*\'\w+\'\);\s*@?fseek\(\1,\s*([0-9a-fx]+)~msi', $this->full_source, $m, PREG_OFFSET_CAPTURE)) {
                $initialOffset = $m[0][1];
                $offset = hexdec($m[2][0]);
                $end = substr($this->full_source, $initialOffset + $offset);
                $res = str_replace($matches[0], '\'' . $end . '\'', $str);
                return $res;
            }
        }

        $res = $str;
        $group = '';
        if (preg_match('~(preg_replace\(["\'](?:/\.\*?/[^"\']+|[\\\\x0-9a-f]+)["\']\s*,\s*)[^\),]+(?:[\)\\\\0-5]+;[\'"])?(,\s*["\'][^"\']*["\'])\)+;~msi', $res, $matches)) {
            if (strpos(stripcslashes($matches[1]), '(.*)') !== false || strpos(stripcslashes($matches[1]), '(.+)') !== false) {
                $group = substr(stripcslashes($matches[2]), 2, -1);
            }
            $res = str_replace([$matches[1], $matches[2]], ['eval(', ''], $res);
            if ($group !== '' && strpos(stripcslashes($res), '\1') !== false) {
                $res = stripcslashes($res);
                $res = str_replace('\1', $group, $res);
            }
            return $res;
        }

        if (strpos($res, 'e\x76al') !== false
            || strpos($res, '\x29') !== false
            || strpos($res, 'base64_decode("\\x') !== false
        ) {
            $res = stripcslashes($res);
        }
        if (strpos($res, '"."') !== false) {
            $res = str_replace('"."', '', $res);
        }

        if (preg_match('~((\$\w+)\s*=\s*create_function\(\'\',\s*)[^\'\$]+[\'\$].*?[\'\)]\)+;\s*(\2\(\);)~msi', $res, $matches)) {
            $res = str_replace($matches[1], 'eval(', $res);
            $res = str_replace($matches[3], '', $res);
            return $res;
        }

        if (preg_match('~eval\s*/\*[\w\s\.:,]+\*/\s*\(~msi', $res, $matches)) {
            $res = str_replace($matches[0], 'eval(', $res);
            return $res;
        }
        if (preg_match('~\$_(POST|GET|REQUEST|COOKIE)~ms', $res)) {
            return $res;
        }

        $res = preg_replace('~"\s+\?>\s*"\s*\.~m', '"?>".', $res, 3);

        $string = substr($res, 5, -2);
        $res = $this->unwrapFuncs($string);

        if (preg_match('~\?>\s*([\w/+]+==)~msi', $res, $match)) {
            $code = base64_decode($match[1]);
            if (strpos($code, 'error_reporting(') !== false) {
                $res = '?> ' . $code;
            }
        }

        if (preg_match('~chr\(\d+\^\d+\)~msi', $res)) {
            $res = Helpers::normalize($res);
        }

        if (preg_match('~(?|//[^\n]+\n|\#[^\n]+\n|/\*[^\*]*\*/)\?><\?php~msi', $res)) {
            $res = preg_replace_callback('~'
                . '(\'(?:.*?[^\\\\])??(?:(?:\\\\\\\\)+)?+\')'       //match all '' strings to exclude it from comments
                . '|("(?:.*?[^\\\\])??(?:(?:\\\\\\\\)+)?+")'        //match all "" strings to exclude it from comments
                . '|(//[^\n\r]*[\n\r])'                             //match // comments
                . '|(/\*(?:.*?)\*/)'                                //match /**/ comments
                . '|(#[^\n\r]*[\n\r])'                              //match # comments
                . '~msi', function($m) {

                if (isset($m[1]) && !empty($m[1])) {
                    return $m[1];
                }
                if (isset($m[2]) && !empty($m[2])) {
                    return $m[2];
                }
                if ((isset($m[3]) && !empty($m[3])) || (isset($m[4]) && !empty($m[4])) || (isset($m[5]) && !empty($m[5]))) {
                    return '';
                }
            }, $res);
        }

        if (preg_match('~function\s*(\w+)\((\$\w+)\)\s*\{\s*(\$\w+)\s*=\s*[base64_dco\\\\x1253f"\. ]+;\s*(\$\w+)\s*=\s*\3\s*\(\2\);\s*(\$\w+)\s*=\s*[gzinflate\\\\x6715"\.]+;\s*return\s*\5\(\4\);\s*\}~msi', $res, $matches)) {
            $res = preg_replace_callback('~\b(\w+)\s*\(\s*\'([^\']+)\'\s*\)~msi', function ($m) use ($matches) {
                if ($m[1] !== $matches[1]) {
                    return $m[0];
                }

                return '\'' . gzinflate(base64_decode($m[2])) . '\'';
            }, $res);
        }

        $res = str_replace($str, $res, $str);
        return $res;
    }

    private function deobfuscateEvalCodeFunc($str, $matches)
    {
        $res = substr($str, 5, -2);
        $res = $this->unwrapFuncs($res);
        $res = stripcslashes($res);
        $res = str_replace($str, $res, $str);
        return $res;
    }

    private function deobfuscateEcho($str, $matches)
    {
        $res = $str;
        $string = $matches[0];
        if (preg_match('~\$_(POST|GET|REQUEST|COOKIE)~ms', $res) ||
            strpos($matches[5], 'file_get_contents') !== false)
        {
            return $res;
        }
        $string = substr($string, 5);
        $res = $this->unwrapFuncs($string);
        $res = str_replace($string, '\'' . addcslashes($res, '\'') . '\';', $str);
        return $res;
    }

    private function deobfuscateFOPO($str, $matches)
    {
        $phpcode = Helpers::formatPHP($str);
        $eval = Helpers::getEvalCode($phpcode);
        $b64_count = substr_count($eval, $matches[1]);
        $b64 = Helpers::getTextInsideQuotes($eval);
        for ($i = 0; $i < $b64_count; $i++) {
            $b64 = base64_decode($b64);
        }
        $phpcode = $b64;
        if (preg_match('~eval\s*\(\s*\$[\w|]+\s*\(\s*\$[\w|]+\s*\(~msi', $phpcode)) {
            preg_match_all('~\$\w+\(\$\w+\(\$\w+\("[^"]+"\)+~msi', $phpcode, $matches2);
            $array = end($matches2);
            @$phpcode = gzinflate(base64_decode(str_rot13(Helpers::getTextInsideQuotes(end($array)))));
            $old = '';
            $hangs = 0;
            while (($old != $phpcode) && (strpos($phpcode, 'eval($') !== false)
                   && (strpos($phpcode, '__FILE__') === false) && $hangs < 30) {
                $old = $phpcode;
                $funcs = explode(';', $phpcode);
                if (count($funcs) === 5) {
                    $phpcode = gzinflate(base64_decode(str_rot13(Helpers::getTextInsideQuotes(Helpers::getEvalCode($phpcode)))));
                } elseif (count($funcs) === 4) {
                    $phpcode = gzinflate(base64_decode(Helpers::getTextInsideQuotes(Helpers::getEvalCode($phpcode))));
                }
                $hangs++;
            }
            $res = str_replace($matches[0], substr($phpcode, 2), $str);
        } else {
            $res = str_replace($matches[0], $phpcode, $str);
        }

        return $res;
    }

    private function deobfuscateFakeIonCube($str, $matches)
    {
        $subst_value = 0;
        $matches[1] = Helpers::calc($matches[1]);
        $subst_value = (int)$matches[1] - 21;
        $code = @pack("H*", preg_replace("/[A-Z,\r,\n]/", "", substr($str, $subst_value)));
        $res = str_replace($matches[0], $code, $str);
        return $res;
    }

    private function deobfuscateCobra($str, $matches)
    {
        $find = $matches[0];
        $res = $str;
        $res = preg_replace_callback(
            '~eval\(\"return strrev\(base64_decode\(\'([^\']+)\'\)\);\"\)~msi',
            static function ($matches) {
                return strrev(base64_decode($matches[1]));
            },
            $res
        );

        $res = preg_replace_callback(
            '~eval\(gzinflate\(base64_decode\(\.\"\'([^\']+)\'\)\)\)\;~msi',
            static function ($matches) {
                return gzinflate(base64_decode($matches[1]));
            },
            $res
        );

        preg_match('~(\$\w{1,40})\s*=\s*\"([^\"]+)\"\;\s*\1\s*=\s*explode\(\"([^\"]+)\",\s*\s*\1\);~msi', $res, $matches);
        $var = $matches[1];
        $decrypt = base64_decode(current(explode($matches[3], $matches[2])));
        $decrypt = preg_replace_callback(
            '~eval\(\"return strrev\(base64_decode\(\'([^\']+)\'\)\);\"\)~msi',
            static function ($matches) {
                return strrev(base64_decode($matches[1]));
            },
            $decrypt
        );

        $decrypt = preg_replace_callback(
            '~eval\(gzinflate\(base64_decode\(\.\"\'([^\']+)\'\)\)\)\;~msi',
            static function ($matches) {
                return gzinflate(base64_decode($matches[1]));
            },
            $decrypt
        );

        preg_match('~if\(\!function_exists\(\"(\w+)\"\)\)\s*\{\s*function\s*\1\(\$string\)\s*\{\s*\$string\s*=\s*base64_decode\(\$string\)\;\s*\$key\s*=\s*\"(\w+)\"\;~msi', $decrypt, $matches);

        $decrypt_func = $matches[1];
        $xor_key = $matches[2];

        $res = preg_replace_callback(
            '~\\' . $var . '\s*=\s*.*?eval\(' . $decrypt_func . '\(\"([^\"]+)\"\)\)\;\"\)\;~msi',
            static function ($matches) use ($xor_key) {
                $string = base64_decode($matches[1]);
                $key = $xor_key;
                $xor = "";
                for ($i = 0, $iMax = strlen($string); $i < $iMax;) {
                    for ($j = 0, $jMax = strlen($key); $j < $jMax; $j++,$i++) {
                        if (isset($string[$i])) {
                            $xor .= $string[$i] ^ $key[$j];
                        }
                    }
                }
                return $xor;
            },
            $res
        );
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateFlamux($str, $matches)
    {
        $str = $matches[0];

        $vars = [];
        preg_match_all('~(\$\w+=[\'"]\w+[\'"];)~', $str, $match);
        foreach ($match[0] as $var) {
            $split = explode('=', str_replace(';', '', $var));
            $vars[$split[0]] = $split[1];
        }

        $res = '';
        preg_match_all('~(\$\w+=\$\w+[\'.]+\$\w+;)~', $str, $match);
        for ($i = 0, $iMax = count($match[0]); $i < $iMax; $i++) {

            $split = explode('=', str_replace(';', '', $match[0][$i]));
            $concats = explode('.', $split[1]);
            $str_to_concat = '';
            foreach ($concats as $concat) {
                $str_to_concat .= $vars[$concat] ?? '';
            }

            $vars[$split[0]] = $str_to_concat;

            if ($i === ($iMax - 1)) {
                $res = gzinflate(base64_decode(base64_decode(str_rot13($str_to_concat))));
            }
        }

        return $res;
    }

    private function deobfuscateDarkShell($str, $matches)
    {
        return stripcslashes($matches[0]);
    }

    private function deobfuscateWso($str, $matches)
    {
        $result = $matches[0];
        $contentVar = $matches[11];

        preg_match_all('~(\[([-+\(\d*\/\)]+)\])+~', $result, $mathMatches);
        foreach ($mathMatches[0] as $index => $match) {
            $search = $mathMatches[2][$index];
            $mathResult = Helpers::calculateMathStr($search);

            $result = str_replace("[$search]", "[$mathResult]", $result);
        }

        $dictionary = $matches[5];

        $variables = Helpers::getVarsFromDictionary($dictionary, $result);
        $variables[$matches[9]] = $matches[10];

        preg_match_all('~(\$\w+)\.=(\$\w+)~', $result, $matches);
        foreach ($matches as $index => $match) {
            $var = $matches[1][$index];
            $value = $matches[2][$index];
            if (!isset($variables[$var])) {
                $variables[$var] = (string)$variables[$value] ?? '';
            } else {
                $variables[$var] .= (string)$variables[$value] ?? '';
            }
        }

        if (isset($variables[$contentVar])) {
            $result = $variables[$contentVar];
        }

        if (preg_match('~(\$\w+)\s*=\s*(["\'\w\/+]+);(\$\w+)=base64_decode\(\1\);(\$\w+)=gzinflate\(\3\);eval\(~msi', $result, $match)) {
            $result = gzinflate(base64_decode($match[2]));
        }

        if (preg_match('~function\s*(\w+)\s*\((\$\w+)\)\s*\{\s*return\s*(\w+)\s*\(\2,(\d+)\);\s*\}~msi', $result, $match)) {
            $result = preg_replace_callback('~' . $match[1] . '\s*\(\'([^\']+)\'\)~msi', function ($m) {
                return '\'' . Helpers::decodeUCSDelta($m[1]) . '\'';
            }, $result);
        }

        $result = str_replace('<?php', '', $result);

        return $result;
    }

    private function deobfuscateAnonymousFox($str, $matches)
    {
        $string = $matches[7];
        $string = MathCalc::calcRawString($string);
        $string = preg_replace('~[^0-9a-f]~msi', '', $string);
        $array = strlen(trim($string));
        $debuger = '';
        for ($one = 0; $one < $array; $one += 2) {
            $debuger .= pack("C", hexdec(substr($string, $one, 2)));
        }
        $string = $debuger;

        $result = $string . $matches[8];
        return $result;
    }

    private function deobfuscateWsoEval($str, $matches)
    {
        $result = base64_decode($matches[2]);

        preg_match('~data:image/png;(.*)">~im', $result, $match);
        $result = str_replace( array ('%', '#'), array ('/', '+'), $match[1]);
        $result = gzinflate(base64_decode($result));

        return $result;
    }

    private function deobfuscateAssertStr($str, $matches)
    {
        return 'eval' . $matches[3];
    }

    private function deobfuscateEvalFuncFunc($str, $matches)
    {
        return Helpers::decrypt_T_func(base64_decode($matches[15]));
    }

    private function deobfuscateFuncVar($str, $matches)
    {
        $arg1 = str_replace($matches[5], '', $matches[3]);
        $funcName = str_replace($matches[8], '', $matches[7]);
        $insidefuncName = str_replace($matches[11], '', $matches[10]);

        if ($funcName === 'create_function') {
            $result = sprintf('%s(%s(\'%s\');', $insidefuncName, $arg1, $matches[15]);
        } else {
            $result = sprintf(
                '%s = %s(\'%s\',\'%s(%s(%s));\');%s(\'%s\');',
                $matches[14],
                $funcName,
                $matches[13],
                $insidefuncName,
                $arg1,
                $matches[13],
                $matches[14],
                $matches[15]
            );
        }

        return $result;
    }

    private function deobfuscateEchoEval($str, $matches)
    {
        $content = $matches[4];
        $content = str_replace($matches[1], $matches[2], $content);
        $result = str_replace($matches[3], $content, $matches[5]);

        return $result;
    }

    private function deobfuscateDictionaryVars($str, $matches)
    {
        $dictionary = $matches[2];
        $dictionary = str_replace("\'", "'", $dictionary);
        $dictionary = str_replace('\"', '"', $dictionary);
        $content = $matches[4];
        $vars = Helpers::getVarsFromDictionary($dictionary, $matches[0]);

        if (isset($vars[$matches[6]]) && $vars[$matches[6]] === 'create_function') {
            $content = str_replace($matches[5], 'eval(' . $matches[7] . ');', $content);
        }

        $content = Helpers::replaceVarsFromDictionary($matches[1], $dictionary, $content);

        foreach ($vars as $key => $value) {
            $content = str_replace($key, $value, $content);
        }

        $content = preg_replace_callback('~\${[\'"](\w+)[\'"]}~msi', static function ($m) {
            return '$' . $m[1];
        }, $content);

        $content = str_replace("''}", "\''}", $content);

        return $content;
    }

    private function deobfuscateConcatVarFunc($str, $matches)
    {
        $strVar = "";
        if ($matches['concatVar'] !== "") {
            $strVar = Helpers::concatVariableValues($matches[2], false);
        } else {
            if ($matches['strVal'] !== "") {
                $strVar = $matches['strVal'];
            }
        }

        $result = "";
        $iMax = strlen($strVar) / 2;
        for ($i = 0; $i < $iMax; $i++) {
            $result .= chr(base_convert(substr($strVar, $i * 2, 2), 16, 10));
        }
        return $result;
    }

    private function deobfuscateConcatVarFuncFunc($str, $matches)
    {
        $result = $matches[12];

        $func1 = Helpers::concatVariableValues($matches[2]);
        $func2 = Helpers::concatVariableValues($matches[22]);
        $func3 = Helpers::concatVariableValues($matches[19]);
        $func4 = Helpers::concatVariableValues($matches[7]);

        $result = sprintf('eval(%s(%s(%s(%s("%s")))));', $func1, $func2, $func3, $func4, $result);

        return $result;
    }

    private function deobfuscateEvalVarDoubled($str)
    {
        $result = $str;

        preg_match_all('~(\$\w+)\s?=\s?(\w+)\([\'"]([^\'"]+)[\'"]\);~', $str, $varMatches);

        foreach ($varMatches[0] as $index => $varMatch) {
            $var_name = $varMatches[1][$index];
            $func_name = $varMatches[2][$index];
            $str = $varMatches[3][$index];

            if (Helpers::convertToSafeFunc($func_name)) {
                $str = @Helpers::executeWrapper($func_name, [$str]);
            }
            $result = str_replace($varMatch, '', $result);
            $result = str_replace($var_name, $str, $result);
        }

        return $result;
    }

    private function deobfuscateVarFuncsEcho($str, $matches)
    {
        $result = $str;
        $func = $matches[2];

        if (Helpers::convertToSafeFunc($func)) {
            $result = @Helpers::executeWrapper($func, [$matches[3]]);
            $result = str_replace('<?php', '', $result);
        }

        return $result;
    }

    private function deobfuscateVarFuncsMany($str, $matches)
    {
        $result          = $matches[0];
        $strName         = $matches[1];
        $dictionaryName  = $matches[2];
        $dictionaryValue = Helpers::collectStr("$matches[3]", "'");

        $funcs = [];
        $vars  = [];

        $result = preg_replace_callback('~(\$\w+)=((?:(\$\w{1,50})\[?{?\d+\]?}?\.?)+);~msi',
            function ($m) use (&$vars, $dictionaryValue) {
                $vars = array_merge($vars, Helpers::getVarsFromDictionary($dictionaryValue, $m[0]));
                return '';
            }, $result);

        $result = preg_replace_callback(
            '~(\$\w+)\s?=\s?array\([\'"]([\w+\/]+)[\'"]\s?,\s?[\'"]([\w+\/]+)[\'"](?:\s?,[\'"]([\w+\/]+)[\'"]\s?)?\);\s?((?:(?:\$\w+=\s?\w+\(\$\w+,\s?)|(?:return\s?))(join\([\'"]{2},\s?\1\))\s?\)?\s?;)~msi',
            function ($match) {
                $joinedVars = implode("", [$match[2], $match[3], $match[4]]);
                $replace    = str_replace($match[6], "'$joinedVars'", $match[5]);

                return $replace;
            },
            $result
        );

        $result = preg_replace_callback(
            '~global\s(\$\w+);\s?((\$\w+)\s?=\s?[\'"]([\w\/+]+)[\'"];\s?(\$\w+)\s?=\s?[\'"]([\w\/+]+)[\'"];\s?(\$\w+)\s?=\s?[\'"]([\w\/+]+)[\'"];\s?\1\s?\.=\s?"({\3}{\5}{\7})");~',
            function ($match) {
                $concatedVars = $match[4] . $match[6] . $match[8];
                $replace      = str_replace($match[2], sprintf('%s.="%s"', $match[1], $concatedVars), $match[0]);

                return $replace;
            },
            $result
        );

        $result = preg_replace_callback(
            '~((\$\w+)\s?=\s?[\'"]([\w\/+=]+)[\'"];\s?(\$\w+)\s?=\s?[\'"]([\w\/+=]+)[\'"];\s?return\s?"({\2}{\4})");~msi',
            function ($match) {
                $concatedVars = $match[3] . $match[5];
                $replace      = str_replace($match[1], sprintf('return "%s"', $concatedVars), $match[0]);

                return $replace;
            },
            $result
        );

        $result = preg_replace_callback(
            '~(?:class\s(?<className>\w+)\s?{\s?)?(?:public\s)?function\s(?<methodName>\w+\(\)){\s?(?<codeBlock>.*?;)\s}\s?(?:}\s?)?~msi',
            function ($match) use (&$funcs, $strName, $dictionaryName, $dictionaryValue) {
                $str      = "";
                $isConcat = false;

                if (preg_match(
                    '~return\s[\'"]([\w+\/+=]+)[\'"];~msi',
                    $match[0],
                    $returnCode
                )) {
                    $str = $returnCode[1];
                } else {
                    if (preg_match(
                        '~global\s(\$\w+);\s?\1\s?\.=\s?["\']([\w+\/+]+)["\'];?~msi',
                        $match[0],
                        $concatCode
                    )) {
                        $str      = $concatCode[2];
                        $isConcat = true;
                    } else {
                        if (preg_match(
                            '~global\s(\$' . substr(
                                $dictionaryName,
                                1
                            ) . ');\s*return\s*((?:\s?\1\[?{?\d+\]?}?\s?\.?\s?)+);?~msi',
                            $match[0],
                            $returnCode
                        )) {
                            $str      = Helpers::getVarsFromDictionary(
                                $dictionaryValue,
                                sprintf('%s=%s', $dictionaryName, $returnCode[2])
                            );
                            $str      = $str[$dictionaryName];
                            $isConcat = false;
                        }
                    }
                }
                $funcs[$match['methodName']]['str']    = $str;
                $funcs[$match['methodName']]['concat'] = $isConcat;

                return "";
            },
            $result
        );

        $result = preg_replace_callback(
            '~(\$[^' . substr($strName, 1) . ']\w+)\s?=\s?(\w+\(\));~ms',
            function ($match) use ($funcs, &$vars) {
                if (isset($funcs[$match[2]]) && !$funcs[$match[2]]['concat']) {
                    $vars[$match[1]] = $funcs[$match[2]]['str'];
                }
                return "";
            },
            $result
        );

        foreach ($vars as $name => $var) {
            $result = str_replace($name, $var, $result);
        }

        $result = preg_replace_callback(
            '~([\w_]+)\s?\(\s?([\w_]+)\s?\(\s?((?:\$' . substr($dictionaryName,
                1) . '[{\[]\d+[\]}]\s?\.?)+)\s?,\s?(\d+)\s?\),\s?((?:\d+,?)+)\);~msi',
            function ($match) use ($dictionaryValue, $dictionaryName) {
                $str = Helpers::getVarsFromDictionary(
                    $dictionaryValue,
                    sprintf('%s=%s', $dictionaryName, $match[3])
                );
                $res = "";
                if (Helpers::convertToSafeFunc($match[2])) {
                    $res = @Helpers::executeWrapper($match[2], [$str[$dictionaryName], $match[4]]);
                }

                if (Helpers::convertToSafeFunc($match[1]) && function_exists($match[1])) {
                    $args   = [$res];
                    $digits = explode(',', $match[5]);
                    foreach ($digits as $digit) {
                        $args[] = (int)$digit;
                    }
                    $res = @Helpers::executeWrapper($match[1], $args);
                }
                return "\"$res\";";
            },
            $result
        );

        $strToDecode = "";

        $regexFinal = str_replace('mainVar', $strName,
            '~(?:\mainVar\s?=\s?\w+\(\s?\mainVar\s*,\s?["\'](?<concat>[\w+\/]+)[\'"]\s?\)\s?;)|(?:\mainVar\s?=\s?\w+\(\s?\mainVar\s?,\s?(?<concatFunc>\w+\(\))\)\s?;)|(?:\mainVar\s?\.?=\s?(?:\mainVar\.)?\s?["\'](?<concatStr>[\w+\/=]+)[\'"]\s?;)|(?:\mainVar\s?\.?=\s?(?<concatFuncSingle>\w+\(\))\s?;)|(\$\w+\s?=\s?new\s\w+\(\)\s?;\s?\mainVar\s?\.?=\s?\mainVar\s?\.\s?\$\w+->(?<concatFuncClass>\w+\(\)\s?))|(?:(?<func>[^,\s]\w+\(\)))~msi');

        $result = preg_replace_callback(
            $regexFinal,
            function ($match) use (&$strToDecode, $funcs) {
                if (isset($match['concat']) && $match['concat'] !== "") {
                    $strToDecode .= $match['concat'];
                    return;
                }
                if (isset($match['concatStr']) && $match['concatStr'] !== "") {
                    $strToDecode .= $match['concatStr'];
                    return;
                }
                if (isset($match['concatFunc']) && $match['concatFunc'] !== "") {
                    $strToDecode .= $funcs[$match['concatFunc']]['str'];
                    return;
                }
                if (isset($match['concatFuncSingle']) && $match['concatFuncSingle'] !== "") {
                    $strToDecode .= $funcs[$match['concatFuncSingle']]['str'];
                    return;
                }
                if (isset($match['concatFuncClass']) && $match['concatFuncClass'] !== "") {
                    $strToDecode .= $funcs[$match['concatFuncClass']]['str'];
                    return;
                }
                if (isset($match['func']) && $match['func'] !== "") {
                    $strToDecode .= $funcs[$match['func']]['str'];
                    return;
                }
            },
            $result
        );

        $code   = $result;
        $result = base64_decode($strToDecode);

        if (preg_match('~((\$\w+)="";).*?((\$\w+)=create_function\(\'(\$\w+,\$\w+)\',\s?(base64_decode\(((?:"[\w+=]+"\.?)+)\))\);).*?(\$\w+\s?=\s?create_function\("",\s?\4\(base64_decode\(\2\),\s?(\$_COOKIE\[\'\w+\'\])\)\s?\);)~msi',
            $code, $codeMatch)) {
            $initialCode = base64_decode(Helpers::collectStr($codeMatch[7]));

            $result = sprintf("function %s(%s){%s}%s='%s';%s(%s,%s);",
                substr($codeMatch[4], 1), $codeMatch[5], $initialCode, $codeMatch[2], $result,
                substr($codeMatch[4], 1), $codeMatch[2], $codeMatch[9]);
        }

        return $result;
    }

    private function deobfuscateGlobalArrayEval($str, $matches)
    {
        $result = str_replace($matches[1], "", $str);

        $dictionary = stripcslashes($matches[3]);
        $dictionaryVar = stripcslashes($matches[2]);
        $dictionaryVar = str_replace('{"GLOBALS"}', 'GLOBALS', $dictionaryVar);

        $result = Helpers::replaceVarsFromDictionary($dictionaryVar, $dictionary, $result);

        preg_match_all('~(\$GLOBALS\[[\'\w]+\])\s?=\s?[\'"]?([\w\-\_\$]+)["\']?;\s?~msi', $result, $varMatch);

        foreach ($varMatch[1] as $index => $var) {
            $result = str_replace([$varMatch[0][$index], $varMatch[1][$index]], ["", $varMatch[2][$index]],
                $result);
        }

        return $result;
    }

    private function deobfuscateTinkleShell($str, $matches)
    {
        $result = $str;
        $dictionaryStr = $matches[2];
        $decodeKey = Helpers::getDecryptKeyForTinkleShell(strlen($str));
        $vars = [
            $matches[4] => $matches[5],
        ];

        $result = str_replace(' ', '', $result);
        $matches[3] = str_replace(' ', '', $matches[3]);

        preg_match_all('~(\$\w+)=(?:\$\w+\[\'\w\'\+\d+\+\'\w\'\]\.?)+;~msi', $matches[3], $matchVars);
        foreach ($matchVars[0] as $index => $match) {
            preg_match_all('~\$\w+\[\'\w\'\+(\d+)\+\'\w\'\]\.?~msi', $match, $values);
            foreach ($values[1] as $value) {
                if (!isset($vars[$matchVars[1][$index]])) {
                    $vars[$matchVars[1][$index]] = $dictionaryStr[$value] ?? $value;
                } else {
                    $vars[$matchVars[1][$index]] .= $dictionaryStr[$value] ?? $value;
                }
            }
        }

        $result = str_replace($matches[3], "", $result);

        preg_match_all('~(\$\w+)=(\$\w+)\((\$\w+),(\$\w+)\(""\),"([\w\+]+)"\);~msi', $result, $matchVars);
        foreach ($matchVars[1] as $index => $varName) {
            $func = $vars[$matchVars[2][$index]] ?? $matchVars[2][$index];
            $arg1 = $vars[$matchVars[3][$index]] ?? $matchVars[3][$index];
            $arg2 = $vars[$matchVars[4][$index]] ?? $matchVars[4][$index];
            $argStr = $matchVars[5][$index];

            if (Helpers::convertToSafeFunc($func)) {
                $value = @Helpers::executeWrapper($func, [$arg1, $arg2 === 'trim' ? "" : $arg2, $argStr]);

                $vars[$varName] = $value;
            }
            $result = str_replace($matchVars[0][$index], '', $result);
        }

        $func = $vars[$matches[10]] ?? '';
        if (Helpers::convertToSafeFunc($func)) {
            $result = @Helpers::executeWrapper($func, [$matches[11], $vars[$matches[12]] ?? "", $decodeKey]);
        }
        $func = $vars[$matches[7]] ?? '';
        if (Helpers::convertToSafeFunc($func)) {
            $result = @Helpers::executeWrapper($func, [$vars[$matches[8]] ?? '', "", $result]);
        }
        $func = $vars[$matches[6]] ?? '';
        if (Helpers::convertToSafeFunc($func)) {
            $result = @Helpers::executeWrapper($func, [$result]);
        }

        return $result;
    }

    private function deobfuscateWsoFunc($str, $matches)
    {
        if (isset($matches['str'])) {
            return gzinflate(base64_decode($matches['str']));
        }

        return $matches[0];
    }

    private function deobfuscateEvalWanFunc($str, $matches)
    {
        $result = gzinflate(base64_decode($matches[5]));

        for ($i = 0, $iMax = strlen($result); $i < $iMax; $i++) {
            $result[$i] = chr(ord($result[$i]) - (int)$matches[4]);
        }

        return $result;
    }

    private function deobfuscateFuncFile($str, $matches)
    {
        return base64_decode($matches[2]);
    }

    private function deobfuscateFuncFile2($str, $matches)
    {
        $var_fragment   = $matches[1];
        $decoded_code   = base64_decode($matches[3]);
        $var_name       = $matches[4];
        $new_fragment   = "$var_name = '$decoded_code';";
        return str_replace($var_fragment, $new_fragment, $str);
    }

    private function deobfuscateGulf($str, $matches)
    {
        $result = str_replace('\'.\'', '', str_replace($matches[2], '', $matches[1]));

        $vars = Helpers::collectVars($matches[2], "'");
        $result = Helpers::replaceVarsFromArray($vars, $result);

        $tempCode = gzinflate(base64_decode($matches[4]));

        $result .= PHP_EOL . $tempCode;

        return $result;
    }

    private function deobfuscateEvalConcatAsciiChars($str, $matches)
    {
        $result = '';

        $num = (int)$matches[2];
        $str = (string)$matches[3];
        $len = strlen($str);

        for ($i = 0; $i < $len; $i++) {
            $result .= chr(ord($str[$i]) ^ $num);
        }

        $result = str_replace(['<?php', '?>', '', ''], '', $result);

        return $result;
    }

    private function deobfuscateEvalPost($str, $matches)
    {
        $vars = Helpers::collectVars($str);

        $result = str_replace('.', "", $matches[8]);
        $result = str_replace($matches[7], "", Helpers::replaceVarsFromArray($vars, $result));
        $result = base64_decode(base64_decode($result));

        return $result;
    }

    private function deobfuscateEvalPregStr($str, $matches)
    {
        $result = sprintf("%s'%s'%s", stripcslashes($matches[1]), $matches[2], stripcslashes($matches[3]));

        $result = $this->unwrapFuncs($result);

        return $result;
    }

    private function deobfuscateClassDestructFunc($str, $matches)
    {
        $result = $str;

        $arg1 = $matches[1] ^ stripcslashes($matches[2]);
        $arg2 = $matches[3] ^ stripcslashes($matches[4]);

        if ($arg1 === 'assert' && $arg2 === 'eval') {
            $result = base64_decode($matches[5]);
        }

        return $result;
    }

    private function deobfuscateCreateFuncEval($str, $matches)
    {
        $result = $str;

        $func = stripcslashes($matches[1]);

        if (Helpers::convertToSafeFunc($func)) {
            $result = @Helpers::executeWrapper($func, [$matches[2]]);
        }

        return $result;
    }

    private function deobfuscateEvalCreateFunc($str, $matches)
    {
        $result = $str;

        if (!(isset($matches[4]) && $matches[4] !== ''))
        {
            $arr = [
                0 => $matches[5],
                1 => $matches[6],
                2 => $matches[13],
            ];

            $func_1 = Helpers::decodeEvalCreateFunc_2($arr);
            if (strtoupper($func_1) === 'CREATE_FUNCTION') {
                $arr[2] = $matches[10];
                $result = Helpers::decodeEvalCreateFunc_2($arr);
                return $result;
            }
        }

        $arr = [
            0 => $matches[4],
            1 => $matches[5],
            2 => $matches[6],
            3 => $matches[13],
        ];

        $func_1 = Helpers::decodeEvalCreateFunc_1($arr);
        if (strtoupper($func_1) === 'CREATE_FUNCTION') {
            $arr[3] = $matches[10];

            $result = Helpers::decodeEvalCreateFunc_1($arr);

            $result = preg_replace_callback(Helpers::REGEXP_BASE64_DECODE, function ($match) {
                $extraCode = $this->unwrapFuncs($match[0]);

                if (preg_match('~if\(!function_exists\([\'"](\w+)[\'"]\)\){function\s?\1\((\$\w+)\){(\$\w+)=array\(\'([{\w\]]+)\',\'([\w`]+)\',\2\);for\((\$\w+)=0;\6<3;\6\+\+\){for\((\$\w+)=0;\7<strlen\(\3\[\6\]\);\7\+\+\)\s?\3\[\6\]\[\7\]\s?=\s?chr\(ord\(\3\[\6\]\[\7\]\)-1\);if\(\6==1\)\s?\3\[2\]=\3\[0\]\(\3\[1\]\(\3\[2\]\)\);}\s?return\s?\3\[2\];}(\$\w+)=["\']([\w\+\/=]+)["\'];(\$\w+)=[\'"]\1[\'"];(\$\w+)=\10\([\'"]([\w=]+)[\'"]\);\$\w+=\11\(\'\',\10\(\8\)\);\$\w+\(\);}~msi', $extraCode, $matchCode)) {
                    $arr = [
                        0 => $matchCode[4],
                        1 => $matchCode[5],
                        2 => $matchCode[12],
                    ];

                    $func_1 = Helpers::decodeEvalCreateFunc_2($arr);
                    if (strtoupper($func_1) === 'CREATE_FUNCTION') {
                        $arr[2] = $matchCode[9];

                        $extraCode = str_replace($matchCode[0], Helpers::decodeEvalCreateFunc_2($arr), $extraCode);
                    }
                }
                return $extraCode;
            }, $result);
        }

        return $result;
    }

    private function deobfuscateEvalFuncVars($str, $matches)
    {
        $result = $str;
        $matches[1] = MathCalc::calcRawString($matches[1]);
        $matches[1] = str_replace([' ', "'.", '.\'', '".', '."'], '', $matches[1]);
        $vars = [];
        Helpers::collectFuncVars($matches[1], $vars, false);
        foreach ($vars as &$var) {
            $vars2 = [];
            Helpers::collectFuncVars($var, $vars2, false);
        }
        if ($vars2) {
            $vars = array_merge($vars, $vars2);
        }
        Helpers::collectVars($matches[1], ['"', '\''], $vars);
        foreach ($vars as &$var) {
            $var = '\'' . $var . '\'';
        }
        unset($var);

        $result = Helpers::replaceVarsFromArray($vars, $matches[2]);
        if (strpos($result, 'eval') !== false) {
            $result = $this->unwrapFuncs($result);
        }
        return $result;
    }

    private function deobfuscateDictionaryCreateFuncs($str, $matches)
    {
        $dict = $matches[3];
        if (stripos($dict, 'base64_decode') !== false) {
            $dict = Helpers::replaceBase64Decode($dict);
        }
        if (stripos($dict, 'urldecode') !== false) {
            $dict = urldecode(substr($dict, 11, -2));
        }
        $dict = trim($dict, '\'"');

        $vars = Helpers::getVarsFromDictionary($dict, $matches[4]);
        $result = str_replace($matches[4], '', $str);

        return Helpers::decodeDictionaryCreateFuncs($result, $vars);
    }

    private function deobfuscateNonDictionaryCreateFuncs($str, $matches)
    {
        $result = str_replace($matches[1], '', $str);

        $vars = Helpers::collectVars(stripcslashes($matches[1]));

        return Helpers::decodeDictionaryCreateFuncs($result, $vars);
    }

    private function deobfuscateEvalPostDictionary($str, $matches)
    {
        $finalCode = $matches[19];
        $result = str_replace($finalCode, '', $str);
        $arrayNum = [];
        $arrayStr = [];

        $regex = '~"?([\w\.\/\s]+)"?,?\s?~msi';
        preg_match_all($regex, $matches[6], $arrayStrMatches);
        foreach ($arrayStrMatches[1] as $arrayStrMatch) {
            $arrayStr[] = $arrayStrMatch;
        }

        $result = Helpers::replaceVarsFromDictionary($matches[5], $arrayStr, $result);
        $vars = Helpers::collectVars($result, "'");

        $regexSpecialVars = '~(\$\w+)([()\]])~msi';
        $code1 = preg_replace_callback($regexSpecialVars, static function ($match) use ($vars) {
            $res = $vars[$match[1]] ?? $match[1];
            if ($match[2] === ']' || $match[2] === ')') {
                $res = "'$res'";
            }
            return $res . $match[2];
        }, $matches[20]);

        $code2 = str_replace($matches[18], '$_POST[\'' . ($vars[$matches[18]] ?? $matches[18]) . '\']', $matches[21]);
        $code2 = Helpers::replaceVarsFromArray($vars, $code2);

        $tempStr = Helpers::replaceVarsFromDictionary($matches[5], $arrayStr, $matches[22]);
        $vars = Helpers::collectVars($tempStr, "'");

        $code3 = preg_replace_callback($regexSpecialVars, static function ($match) use ($vars) {
            $res = $vars[$match[1]] ?? $match[1];
            if ($match[2] === ']' || $match[2] === ')') {
                $res = "'$res'";
            }
            return $res . $match[2];
        }, $matches[23]);

        $result = $code1 . $code2 . $code3;

        return $result;
    }

    private function deobfuscateDropInclude($str, $matches)
    {
        if (isset($matches[8]) && $matches[8] !== '') {
            return base64_decode($matches[4]);
        }
        $key = basename($matches[2]);
        $encrypted = base64_decode(base64_decode($matches[4]));
        return $this->deobfuscateXorFName($encrypted, null, $key);
    }

    private function deobfuscateEvalComments($str, $matches)
    {
        return preg_replace('~/\*[^/]*/?\*/~msi', '', $str);
    }

    private function deobfuscateStrrevUrldecodeEval($str, $matches)
    {
        return strrev(urldecode($matches[2]));
    }

    private function deobfuscateEvalPackStrrot($str, $matches)
    {
        return pack("H*", str_rot13($matches[3]));
    }

    private function deobfuscateUrlDecodeTable($str, $matches)
    {
        $matches[3] = str_replace([" ", "\r", "\n", "\t", '\'.\''], '', $matches[3]);
        $matches[5] = str_replace([" ", "'", ">"], '', $matches[5]);
        $temp = explode(',', $matches[5]);
        $array = [];
        foreach ($temp as $value) {
            $temp = explode("=", $value);
            $array[$temp[0]] = $temp[1];
        }
        $res = '';
        for ($i=0, $iMax = strlen($matches[3]); $i < $iMax; $i++) {
            $res .= isset($array[$matches[3][$i]]) ? $array[$matches[3][$i]] : $matches[3][$i];
        }
        $res = substr(rawurldecode($res), 1, -2);
        return $res;
    }

    private function deobfuscateEvalVarChar($str, $matches)
    {
        $vars = Helpers::collectConcatedVars($matches[1]);
        preg_match_all('~(\$\w+)=((?:\$\w+\.?)+);~msi', $matches[2], $varMatches, PREG_SET_ORDER);
        foreach ($varMatches as $varMatch) {
            $finalVars[$varMatch[1]] = Helpers::concatStr(
                Helpers::replaceVarsFromArray($vars, $varMatch[2], false, true)
            );
        }
        $res = Helpers::replaceVarsFromArray($finalVars, $matches[3], true);

        return $res;
    }

    private function deobfuscateEvalVarFunc($str, $matches)
    {
        $var = Helpers::collectFuncVars($matches[1], $var, false, true);
        return $var[$matches[4]];
    }

    private function deobfuscateEvalVarsFuncs($str, $matches)
    {
        $vars = Helpers::collectConcatedVars($matches[1], '"', $vars, true);
        $matches[3] = $matches[3] === '' ? $matches[5] : 'eval(' . $matches[4] . ');';

        $res = Helpers::replaceVarsFromArray($vars, $matches[3], false, true);
        $parts = array_filter(array_map('trim', explode(';', $res)));
        $hangs = 10;
        foreach ($parts as &$part) {
            while (strpos($part, 'eval') === 0 && $hangs--) {
                $part = preg_replace_callback('~\$\w+\b(?!\s*=)~msi',
                    function ($m) use ($vars) {
                        return isset($vars[$m[0]]) ? '\'' . $vars[$m[0]] . '\'' : $m[0];
                    }, $part);
                if (substr_count($part, 'eval(') > 1) {
                    $tmp = array_filter(array_map('trim', explode(';', $part)));
                    foreach ($tmp as &$item) {
                        $item = preg_replace_callback('~\$\w+\b(?!\s*=)~msi',
                            function ($m) use ($vars) {
                                return isset($vars[$m[0]]) ? $vars[$m[0]] : $m[0];
                            }, $item);
                        $item = $this->deobfuscateEval($item, []);
                        Helpers::collectConcatedVars($item, '"', $vars, true);
                    }
                    unset($item);
                    $part = implode($tmp);
                } else {
                    $part = $this->deobfuscateEval($part, []);
                }
            }
        }
        if (count($parts) > 1) {
            $parts[0] = Helpers::replaceVarsFromArray($vars, $parts[0]);
        }
        unset($part);
        $res = implode($parts);
        $res = preg_replace_callback('~hex2bin\s*\("([a-f0-9]+)"\)~msi', function ($m) {
            return '\'' . hex2bin($m[1]) . '\'';
        }, $res);
        return $res;
    }

    private function deobfuscateEvalFileContent($str, $matches)
    {
        $res = $matches[4];
        $vars = Helpers::getVarsFromDictionary($matches[2], $matches[3]);
        $vars[$matches[1]] = $matches[2];
        $res = Helpers::replaceVarsFromArray($vars, $res);
        if (preg_match('~\$[^=]{0,50}=file\(str_replace\(\'\\\\{2}\',\'/\',__FILE__\)\);(\$[^=]{0,50})=array_pop\(\$[^)]{0,50}\);(\$[^=]{0,50})=array_pop\(\$[^)]{0,50}\);\$[^=]{0,50}=implode\(\'\',\$[^)]{0,50}\)\.substr\(\$[^,]{0,50},0,strrpos\(\$[^,]{0,50},\'@ev\'\)\);\$[^=]{0,50}=md5\(\$[^)]{0,50}\);(?:\$[^=]{0,50}=){0,3}NULL;@eval\(base64_decode\(str_replace\(\$[^,]{0,50},\'\',strtr\(\'~msi',
            $res, $match)) {
            $arr = explode(PHP_EOL, $str);
            foreach ($arr as $index => $val) {
                if ($index !== count($arr) - 1) {
                    $arr[$index] .= PHP_EOL;
                }
            }

            $arr1 = array_pop($arr);
            $arr2 = array_pop($arr);

            $vars[$match[1]] = $arr1;
            $vars[$match[2]] = $arr2;

            $res = implode('', $arr) . substr($arr2, 0, strrpos($arr2, '@ev'));
            $md5 = md5($res);
            $res = base64_decode(str_replace($md5, '', strtr($matches[5], $matches[6], $matches[7])));


            if (preg_match('~eval\((?:\$[^(]{0,50}\(){2}\$[^,]{0,50},\s{0,10}\'([^\']{1,500})\',\s{0,10}\'([^\']{1,500})\'\){3};~msi',
                $res, $match)) {
                $res = Helpers::replaceVarsFromArray($vars, $res);
                if (preg_match('~eval\(base64_decode\(strtr\(~msi', $res)) {
                    $res = base64_decode(strtr($arr1, $match[1], $match[2]));
                }
            }
        }

        return $res;
    }

    private function deobfuscateEvalArrayVar($str, $matches)
    {
        $result = $str;

        $array1 = str_split($matches[3]);
        $array2 = [];
        $arrayStr = (isset($matches[2]) && $matches[2] !== '') ? base64_decode($matches[2]) : $matches[1];

        if (preg_match('~(\$\w+)=\[(["\'][\w\[\];\'"|,.{}+=/&][\'"]=>["\'][\w\[\];\'"|,.{}+=/&][\'"],?\s{0,50})+\];~msi',
            $arrayStr, $match)) {
            preg_match_all('~["\']([\w\[\];\'"|,.{}+=/&])[\'"]=>["\']([\w\[\];\'"|,.{}+=/&])[\'"]~msi', $match[0],
                $arrayMatches);

            foreach ($arrayMatches[1] as $index => $arrayMatch) {
                $array2[$arrayMatches[1][$index]] = $arrayMatches[2][$index];
            }

            $newStr = "";
            foreach ($array1 as $xx) {
                foreach ($array2 as $main => $val) {
                    if ($xx == (string)$val) {
                        $newStr .= $main;
                        break;
                    }
                }
            }

            $result = gzinflate(base64_decode($newStr));
        }

        return $result;
    }

    private function deobfuscateEvalConcatedVars($str, $matches)
    {
        $iter = [2 => $matches[2], 4 => $matches[4], 6 => $matches[6], 12 => $matches[12]];
        foreach ($iter as $index => $item) {
            $matches[$index] = preg_replace_callback('~chr\((\d+)\)~msi', static function ($match) use (&$matches) {
                return '\'' . chr($match[1]) . '\'';
            }, $matches[$index]);

            $matches[$index] = Helpers::concatStr($matches[$index]);
            $matches[$index] = base64_decode($matches[$index]);
        }

        $result = str_replace([$matches[1], $matches[8], $matches[10]], [$matches[2], 0, 0], $matches[7]);

        if (Helpers::convertToSafeFunc($matches[4])) {
            $code = @Helpers::executeWrapper($matches[4], [$matches[6]]);
            $code = gzinflate(str_rot13($code));
        } else {
            $code = 'gzinflate(str_rot13(\'' . $matches[4] . '\')));';
        }

        $result .= $matches[12] . $code;

        return $result;
    }

    private function deobfuscateEchoEscapedStr($str, $matches)
    {
        $i = 1;
        $result = $matches[1];
        $result = str_replace('\\\\\\', '\\\\', $result);

        while ($i < 3) {
            if (!preg_match('~(\\\\x[0-9a-f]{2,3})~msi', $result)) {
                break;
            }

            $result = preg_replace_callback('~(\\\\x[0-9a-f]{2,3})~msi', static function ($m) {
                return stripcslashes($m[1]);
            }, $result);

            $i++;
        }

        $result = stripslashes($result);
        $vars = Helpers::collectVars($result);

        $result = preg_replace_callback('~(?<!{)\${[\'"]GLOBALS[\'"]}\[[\'"](\w+)[\'"]\]=[\'"](\w+)[\'"];~msi',
            function ($m) use (&$vars) {
                $vars['$' . $m[1]] = $m[2];

                return '';
            }, $result);

        $result = Helpers::replaceVarsFromArray($vars, $result);

        foreach ($vars as $name => $val) {
            $result = str_replace("$val=\"$val\";", '', $result);
        }

        return $result;
    }

    private function deobfuscateFilePutDecodedContents($str, $matches)
    {
        $res = $str;
        $content = base64_decode($matches[2]);
        $res = str_replace($matches[1], $content, $res);

        $res = preg_replace_callback('~chr\((\d+)\)~msi', static function ($match) use (&$matches) {
            return '\'' . chr($match[1]) . '\'';
        }, $res);

        $res    = Helpers::concatStringsInContent($res);
        $res    = Helpers::replaceBase64Decode($res, '\'');
        $vars   = Helpers::collectVars($res);
        $res    = Helpers::replaceVarsFromArray($vars, $res);
        $res    = Helpers::removeDuplicatedStrVars($res);

        return $res;
    }

    private function deobfuscatePregReplaceStr($str, $matches)
    {
        return stripcslashes($matches[1]);
    }

    private function deobfuscateEvalImplodedArrStr($str, $matches)
    {
        $split = str_split(stripcslashes($matches[2]));
        $map = array_map(static function($str) {
            return chr(ord($str) - 1);
        }, $split);
        return implode($map);
    }

    private function deobfuscatePregReplaceCodeContent($str, $matches)
    {
        $func = stripcslashes($matches[5]);

        $res = $matches[2];

        if (preg_match('~eval\(preg_replace\([\'"]/([^/])/[\'"],\s?[\'"](.*?)[\'"],\s?(\$\w+)\)\);~msi', $func,
            $match)) {
            if ($match[3] === $matches[1]) {
                $res = str_replace($match[1], stripcslashes($match[2]), $res);
            }
        }

        $vars = [];

        $res = preg_replace_callback('~(\$\w+)\s?=\s?([\'"])(.*?)\2;~msi', static function ($m) use (&$vars) {
            $value = $m[3];
            if ($m[2] === '"') {
                $value = stripcslashes($value);
            }

            $vars[$m[1]] = $value;

            return sprintf('%s=\'%s\';', $m[1], $value);
        }, $res);

        $arrayVar = [];
        $arrayVarName = '';

        if (preg_match('~(\$\w+)\s?=\s?array\((?:\'[^\']+\',?)+\);~msi', $res, $m)) {
            $arrayVarName = $m[1];

            preg_match_all('~\'([^\']+)\',?~msi', $m[0], $arrMatch, PREG_PATTERN_ORDER);
            if (isset($arrMatch[1])) {
                foreach ($arrMatch[1] as $arr) {
                    $arrayVar[] = $arr;
                }
            }
        }

        if (preg_match('~(\$\w+)\((\$\w+),\s?(\$\w+)\s?\.\s?\'\(((?:["\']\w+[\'"],?)+)\)[\'"]\s?\.\s?(\$\w+),\s?null\);~msi',
            $res, $match)) {
            $arrayVar2 = [];
            preg_match_all('~[\'"](\w+)[\'"],?~msi', $match[4], $arrMatch2, PREG_PATTERN_ORDER);
            if (isset($arrMatch2[1])) {
                foreach ($arrMatch2[1] as $arr) {
                    $arrayVar2[] = $arr;
                }
            }

            if (isset($vars[$match[5]])
                && (preg_match('~,\s?(\$\w+),\s?(\$\w+)\)\);~msi', $vars[$match[5]], $m)
                    && $m[1] === $arrayVarName
                    && isset($vars[$m[2]])
                )) {
                $res = str_replace($arrayVar2, $arrayVar, $vars[$m[2]]);
            }
        }

        return $res;
    }

    private function deobfuscateSistemitComEnc($str, $matches)
    {
        $matches[4] = base64_decode(base64_decode($matches[4]));
        $res = gzinflate(base64_decode($matches[2]));
        preg_match_all('~\$\w+\s*=\s*\[((\'[^\']+\',?)+)~msi', $matches[4], $replace, PREG_SET_ORDER);
        $find = explode("','", substr($replace[0][1], 1, -1));
        $replace = explode("','", substr($replace[1][1], 1, -1));
        $res = str_replace($find, $replace, $res);
        return $res;
    }

    private function deobfuscateConcatVarsReplaceEval($str, $matches)
    {
        $res = Helpers::concatVariableValues($matches[1]);
        $res = str_replace($matches[5], '', $res);
        $res = base64_decode($res);
        return $res;
    }

    private function deobfuscateEvalVarFunc2($str, $matches)
    {
        return $this->unwrapFuncs($matches[6]);
    }

    private function deobfuscateEvalArrays($str, $matches)
    {
        $res = str_replace('\'\'', '@@empty@@', $str);
        $vars = explode('", "', substr($matches[10], 1, -1));

        $res = preg_replace_callback('~(\$\w+)\[(\d+)\]\s*\.?\s*~msi', static function($m) use ($vars, $matches) {
            if ($m[1] !== $matches[9]) {
                return $m[0];
            }
            return "'" . $vars[(int)$m[2]] . "'";
        }, $res);
        $res = str_replace(['\'\'', '@@empty@@', $matches[8]], ['', '\'\'', ''], $res);
        preg_match_all('~(\$\w+)\s*=\s*\'([^\']+)\';~msi', $res, $m, PREG_SET_ORDER);
        $vars = [];
        foreach ($m as $var) {
            $vars[$var[1]] = '\'' . $var[2] . '\'';
            $res = str_replace($var[0], '', $res);
        }
        $res = Helpers::replaceVarsFromArray($vars, $res);
        return $res;
    }

    private function deobfuscatePregReplaceVar($str, $matches)
    {
        $result = stripcslashes($matches[2]);

        $regex = stripcslashes($matches[1]);
        if ($regex === '.*') {
            return $result;
        }

        $result = preg_replace_callback($regex, static function ($m) {
            return '';
        }, $result);

        return $result;
    }

    private function deobfuscateEvalBinHexVar($str, $matches)
    {
        $func1 = stripcslashes($matches[2]);
        $func2 = stripcslashes($matches[4]);
        $result = '';

        if (Helpers::convertToSafeFunc($func2) && Helpers::convertToSafeFunc($func1)) {
            $result = '?>' . @Helpers::executeWrapper($func1, [@Helpers::executeWrapper($func2, [$matches[6]])]);
        } else {
            $result = sprintf("'?>'.%s(%s('%s');", $func1, $func2, $matches[6]);
        }

        return $result;
    }

    private function deobfuscateEvalFuncTwoArgs($str, $matches)
    {
        $arg1 = base64_decode($matches[5]);
        $arg2 = $matches[6];

        $result = "";
        for ($o = 0, $oMax = strlen($arg1); $o < $oMax;) {
            for ($u = 0, $uMax = strlen($arg2); $u < $uMax; $u++, $o++) {
                $result .= $arg1[$o] ^ $arg2[$u];
            }
        }

        return $result;
    }

    private function deobfuscateEvalVarReplace($str, $matches)
    {
        $res = $matches[3];
        $replaces = explode(';', $matches[4]);
        foreach ($replaces as $replace) {
            if (preg_match('~(\$\w+)=str_replace\(\'([^\']+)\',\s*\'(\w)\',\s*\1\);~msi', $replace, $m)) {
                $res = str_replace($m[2], $m[3], $res);
            }
        }
        $res = base64_decode($res);
        return $res;
    }

    private function deobfuscateEvalPregReplaceFuncs($str, $matches)
    {
        $func1Str = preg_replace('/' . $matches[3] . '/', "", $matches[2]);
        $func2Str = preg_replace('/' . $matches[6] . '/', "", $matches[5]);

        $strToDecode = '';
        preg_match_all('~[\'"]([^\'"]+)[\'"],?~msi', $matches[8], $strMatches, PREG_SET_ORDER);
        foreach ($strMatches as $index => $strMatch) {
            if ($index > 0) {
                $strToDecode .= PHP_EOL;
            }
            $strToDecode .= $strMatch[1];
        }

        $result = '';
        if (Helpers::convertToSafeFunc($func2Str)) {
            $result = @Helpers::executeWrapper($func2Str, [$strToDecode]);
        }

        if (preg_match('~eval\(\$\w+\);~msi', $func1Str) && Helpers::convertToSafeFunc($func2Str)) {
            $result = @Helpers::executeWrapper($func2Str, [$strToDecode]);
            $result = stripcslashes($result);
            $vars = Helpers::collectVars($result);
            if (preg_match('~\$\w+=\$\w+\([\'"]\([\'"],__FILE.*?(?:\$\w+\(){3}[\'"][^\'"]+[\'"]\)\)\)\);~msi', $result,
                $m)) {
                $result = $m[0];
            }
            $result = Helpers::replaceVarsFromArray($vars, $result);
            $result = preg_replace_callback('~gzinflate\(base64_decode\(str_rot13\(["\']([^\'"]+)[\'"]\)\)\)~msi',
                function ($m) {
                    return gzinflate(base64_decode(str_rot13($m[1])));
                }, $result);
        }

        return $result;
    }

    private function deobfuscateEvalVarSlashed($str, $matches)
    {
        $vars = Helpers::collectVars($matches[1]);
        $result = Helpers::replaceVarsFromArray($vars, $matches[2]);
        $result = $this->unwrapFuncs($result);

        return $result;
    }

    private function deobfuscateUrlMd5Passwd($str, $matches)
    {
        while(preg_match('~((?:(\$\w+)=\'[^;]+\';)+)~mis', $str, $matches2)) {
            $vars = Helpers::collectVars($matches2[1], "'");
            $str = Helpers::replaceVarsFromArray($vars, $str, true);
            $str = preg_replace_callback('~str_rot13\(urldecode\(\'([%\da-f]+)\'\)\)~mis', static function($m) {
                return "'" . str_rot13(urldecode($m[1])) . "'";
            }, $str);
            $str = str_replace($matches2[0], '', $str);
        }
        return $str;
    }

    private function deobfuscateBlackScorpShell($str, $matches)
    {
        $vars = Helpers::collectVars($matches[2], "'");
        $vars2 = Helpers::collectVars($matches[3], "'");
        array_walk($vars2, static function(&$var) {
            $var = "'$var'";
        });
        $str = gzinflate(base64_decode($vars2[$matches[5]]));
        $str = Helpers::replaceVarsFromArray($vars, $str, true);
        $str = Helpers::replaceVarsFromArray($vars2, $str);
        $str = str_ireplace('assert', 'eval', $str);
        return $str;
    }

    private function deobfuscateManyDictionaryVars($str, $matches)
    {
        $vars = Helpers::collectVars($matches[1], "'");
        $result = $matches[2];

        foreach ($vars as $dictName => $dictVal) {
            $result = preg_replace_callback(
                '~(\$\w+)[\[{][\'"]?(\d+)[\'"]?[\]}]~msi',
                static function ($m) use ($dictVal, $dictName) {
                    if ($m[1] !== $dictName) {
                        return $m[0];
                    }
                    return "'" . $dictVal[(int)$m[2]] . "'";
                },
                $result
            );
        }
        $result = Helpers::replaceVarsFromArray($vars, $result, true, true);
        $result = preg_replace_callback('~(\.?)\s?[\'"]([\w=\+/()\$,;:"\s?\[\]]+)[\'"]\s?~msi', static function ($m) {
            return $m[2];
        }, $result);

        return $result;
    }

    private function deobfuscateEvalBuffer($str, $matches)
    {
        $result = $matches[4];

        preg_match_all('~"([^"]+)"~msi', $matches[2], $arrMatches, PREG_SET_ORDER);

        $array = [];
        foreach ($arrMatches as $arrMatch) {
            $array[] = stripcslashes($arrMatch[1]);
        }

        $result = str_replace($array, '', $result);

        $result = gzinflate(base64_decode($result));

        return $result;
    }

    private function deobfuscateEvalArrayWalkFunc($str, $matches)
    {
        $result = stripcslashes($matches[1]) . '?>' . PHP_EOL;
        $encodedStr = '';

        preg_match_all('~(?:[\'"]([^\'"]{1,500})[\'"])~msi', $matches[2], $arrayMatches, PREG_SET_ORDER);

        foreach ($arrayMatches as $arrayMatch) {
            $encodedStr .= stripcslashes($arrayMatch[1]);
        }

        $result .= base64_decode(str_rot13($encodedStr));

        return $result;
    }

    private function deobfuscateEvalDictionaryVars($str, $matches)
    {
        $result = $str;
        $vars = Helpers::collectVars($matches[1]);
        $vars[$matches[2]] = $matches[3];

        $vars = Helpers::getVarsFromDictionaryDynamically($vars, $matches[1]);

        $func = $vars[$matches[5]] ?? null;
        if ($func && Helpers::convertToSafeFunc($func)) {
            $result = @Helpers::executeWrapper($func, [$matches[6]]);
        }

        $result = Helpers::replaceVarsFromArray($vars, $result);

        return $result;
    }

    private function deobfuscateEvalSubstrVal($str, $matches)
    {
        $result = strtr(
            substr($matches[2], (int)$matches[3] * (int)$matches[4]),
            substr($matches[2], (int)$matches[5], (int)$matches[6]),
            substr($matches[2], (int)$matches[7], (int)$matches[8])
        );

        return '?> ' . base64_decode($result);
    }

    private function deobfuscateEvalFuncXored($str, $matches)
    {
        $vars = Helpers::collectFuncVars($str);
        $result = Helpers::replaceVarsFromArray($vars, $str);

        if (preg_match('~\$\w+\s?=\s?gzinflate\(base64_decode\(.*?strlen.*?chr\(\(ord.*?\^~msi', $result)) {
            $encodedStr = gzinflate(base64_decode($matches[1]));
            $len = strlen($encodedStr);
            $result = '';
            for ($i = 0; $i < $len; $i++) {
                $result .= chr((ord($encodedStr[$i]) ^ (int)$matches[3]));
            }
        }

        return $result;
    }

    private function deobfuscateEvalFileContentOffset($str, $matches)
    {
        $result = $matches[1];

        $encodedStr = substr($str, (int)$matches[3]);
        $result = str_replace($matches[2], "'$encodedStr'", $result);

        return '<?php ' . $this->unwrapFuncs($result);
    }

    private function deobfuscateEvalFuncExplodedContent($str, $matches)
    {
        $decodedStr = trim(trim($matches[7], ";"), '"');
        $strMD5 = md5($matches[1]);

        $result = base64_decode(
            str_replace($strMD5, '', strtr($decodedStr . $matches[4], $matches[5], $matches[6]))
        );

        return $result;
    }

    private function deobfuscateEvalEncryptedVars($str, $matches)
    {

        $vars_str = preg_replace_callback('~(\d{1,10}\.\d{1,10})\s?\*\s?(\d{1,10})~msi', static function ($m) {
            $res = (double)($m[1]) * (int)$m[2];

            return "'$res'";
        }, $matches[1]);

        $vars_str = str_replace('"', "'", Helpers::normalize($vars_str));

        $vars = Helpers::collectVars($vars_str, "'");
        $vars_str = Helpers::replaceVarsFromArray($vars, $vars_str);
        $vars = Helpers::collectFuncVars($vars_str, $vars);
        $vars_str = Helpers::removeDuplicatedStrVars($vars_str);

        if ($a = preg_match('~(\$\w{1,50})=openssl_decrypt\(base64_decode\([\'"]([^\'"]+)[\'"]\),\'AES-256-CBC\',substr\(hash\(\'SHA256\',[\'"]([^\'"]+)[\'"],true\),0,32\),OPENSSL_RAW_DATA,([^\)]{0,50})\);~msi',
            $vars_str, $varMatch)) {
            $vars[$varMatch[1]] = openssl_decrypt(base64_decode($varMatch[2]), 'AES-256-CBC',
                substr(hash('SHA256', $varMatch[3], true), 0, 32), OPENSSL_RAW_DATA, $varMatch[4]);
        }

        $result = Helpers::replaceVarsFromArray($vars, str_replace(' ', '', $matches[7]));
        $result = str_replace($matches[4], str_replace($matches[5], '', "'$matches[6]'"), $result);

        return $this->unwrapFuncs($result);
    }

    private function deobfuscateEvalLoveHateFuncs($str, $matches)
    {
        $result = $matches[7];
        $result .= gzinflate(base64_decode($matches[4]));

        /* hate function */
        $finalPHPCode = null;
        $problems = explode(".", gzinflate(base64_decode($matches[2])));
        for ($mistake = 0, $mistakeMax = count($problems); $mistake < $mistakeMax; $mistake += strlen($matches[6])) {
            for ($hug = 0, $hugMax = strlen($matches[6]); $hug < $hugMax; $hug++) {
                $past = (int)$problems[$mistake + $hug];
                $present = (int)ord(substr($matches[6], $hug, 1));
                $sweet = $past - $present;
                $finalPHPCode .= chr($sweet);
            }
        }

        $finalPHPCode = gzinflate(base64_decode($finalPHPCode));

        $result .= PHP_EOL . $finalPHPCode;

        return $result;
    }

    private function deobfuscateXoredKey($str, $matches)
    {
        $encrypted = base64_decode($matches[4]);
        $key = $matches[7];
        $res = Helpers::xorWithKey($encrypted, $key);
        $res = base64_decode($res);
        return $res;
    }

    private function deobfuscateEvalGzB64($str, $matches)
    {
        $res = '';
        preg_match_all('~eval\(\$\w+\(\$\w+\(\'([^\']+)\'\)+;~msi', $str, $m, PREG_SET_ORDER);
        foreach ($m as $match) {
            $res .= gzuncompress(base64_decode($match[1])) . "\n";
        }
        return $res;
    }

    private function deobfuscateEvalArrayB64($str, $matches)
    {
        if (preg_match('~function\s*(_\d+)\((\$\w+)\)\s*{(\$\w+)=Array\(\'([^)]+)\'\);return\s*base64_decode\(\3\[\2\]\);~msi', $str, $found)) {
            $strlist = explode("','", $found[4]);
            $res = preg_replace_callback(
                '|(\w+)\((\d+)\)|smi',
                function ($m) use ($strlist, $found) {
                    if ($m[1] !== $found[1]) {
                        return $m[0];
                    }
                    return "'" . addcslashes(base64_decode($strlist[$m[2]]), '\\\'') . "'";
                },
                $str
            );
            $res = str_replace($matches[1], '', $res);
            return $res;
        }
    }

    private function deobfuscateManyBase64DecodeContent($str)
    {
        return Helpers::replaceBase64Decode($str);
    }

    private function deobfuscateEvalEscapedCharsContent($str, $matches)
    {
        $res = $matches[2] . "'" . stripcslashes($matches[1]) . "')";

        return $this->unwrapFuncs($res);
    }

    private function deobfuscateEvalFuncBinary($str, $matches)
    {
        $binaryVals = hex2bin($matches[2]);
        $res = Helpers::decodeEvalFuncBinary($binaryVals);

        return $res;
    }

    private function deobfuscateEvalPackFuncs($str, $matches)
    {
        return stripcslashes($matches[3]) . $matches[4];
    }

    private function deobfuscateParseStrFunc($str, $matches)
    {
        parse_str(Helpers::concatStr($matches[1]), $vars);
        $funcs = ($matches[5] && $matches[5] !== '') ? $matches[5] : $matches[3];
        $res = Helpers::replaceVarsByArrayName($matches[2], $vars, $funcs);
        $res = $this->unwrapFuncs($res . $matches[6] . ')');
        if (strpos($res, '0+0') !== false) {
            $res = MathCalc::calcRawString($res);
        }

        return $res;
    }

    private function deobfuscateEvalGzinflate($str, $match)
    {
        $res = stripcslashes($match[2]);
        $res = str_replace('"."', '', $res);
        return 'eval(' . $res . ');';
    }

    private function deobfuscateFuncVars($str, $matches)
    {
        $key = $matches[3];
        $res = $matches[7];
        $vars = [$matches[4] => preg_replace($matches[5], "", $matches[6])];

        preg_match_all('~(\$\w{1,50})\s?=\s?(?:(\$\w{1,50})\(\)\s?\.\s?)?\w{1,50}\(\\' . $matches[4] .'\(("[^"]+")\)\);~msi',
            $str, $match, PREG_SET_ORDER);
        foreach ($match as $matchVar) {
            $value = Helpers::decodeFuncVars($key,$this->unwrapFuncs($vars[$matches[4]] . '(' . $matchVar[3] . ')'));
            if ($matchVar[2] !== '') {
                $func = $vars[$matchVar[2]] ?? $matchVar[2];
                $value = $func . '() . \'' . $value . '\'';
            }
            $vars[$matchVar[1]] = $value;
        }

        foreach ($vars as $name => $val) {
            $res = str_replace($name, $val, $res);
        }
        return $res;
    }

    private function deobfuscateDictVars($str, $match)
    {
        $res = Helpers::replaceVarsFromDictionary($match[1], $match[2], $match[3]);
        $res = gzinflate(base64_decode(substr($res, 2, -3)));
        return $res;
    }

    private function deobfuscateGotoStrRot13Vars($str, $matches)
    {
        if (isset($matches[2])) {
            $vars = Helpers::collectVars($str);

            preg_match_all('~(\$\w{1,50})\s?=\s?str_rot13\(\1\);~msi', $str, $match, PREG_SET_ORDER);
            foreach ($match as $m) {
                if (isset($vars[$m[1]])) {
                    $vars[$m[1]] = str_rot13($vars[$m[1]]);
                }
            }

            preg_match_all('~(\$\w{1,50})~msi', $matches[2], $match, PREG_SET_ORDER);
            $strToDecode = '';
            foreach ($match as $var) {
                if (isset($vars[$var[1]])) {
                    $strToDecode .= $vars[$var[1]];
                }
            }

            return base64_decode($strToDecode);
        }

        return $str;
    }

    private function deobfuscateDecodedDoubleStrSet($str, $matches)
    {
        $strToDecode1 = '';
        $strToDecode2 = '';

        preg_match_all('~"([^"]+)"~msi', $matches[1], $match, PREG_SET_ORDER);
        foreach ($match as $m) {
            $strToDecode2 .= $m[1];
        }
        preg_match_all('~\'([^\']+)\'~msi', $matches[2], $match, PREG_SET_ORDER);
        foreach ($match as $m) {
            $strToDecode1 .= $m[1];
        }

        return base64_decode($strToDecode1) . PHP_EOL . base64_decode($strToDecode2);
    }

    private function deobfuscateCreateFuncStrrev($str, $matches)
    {
        $res = preg_replace_callback('~strrev\("([^"]+)"\)~msi', static function ($m) {
            return '"' . strrev($m[1]) . '"';
        }, $matches[3]);

        $res = Helpers::concatStringsInContent($res);
        $vars = Helpers::collectVars($res);
        $res = Helpers::replaceVarsFromArray($vars, $res);
        $res = Helpers::removeDuplicatedStrVars($res);

        if (preg_match('~\$\w+=base64_decode\([\'"][^\'"]+[\'"]\);\$\w+=create_function\(\'\$\w+\',\$\w+\);\$\w+\(\$\w+\);~msi',
            $res)) {
            $funcs = base64_decode($matches[5]);
            $res = str_replace($matches[1], '\'' . $matches[2] . '\'', $funcs);
        }

        return $res;
    }

    private function deobfuscateStrrevBase64($str, $matches)
    {
        return strrev($matches[2]);
    }

    private function deobfuscateCustomDecode($str, $matches)
    {
        return str_rot13($matches[2] . $matches[6]);
    }

    private function deobfuscateExpDoorCode($str, $matches)
    {
        $str = str_replace(
                [
                    $matches[1],
                    $matches[3]
                ],
                [
                    str_replace(['"."', '\'.\''], '', $matches[1]),
                    "'" . addcslashes(base64_decode($matches[4]), "'") . "'"
                ],
                $str
        );
        return $str;
    }

    private function deobfuscateAgustus1945($str, $matches)
    {
        return str_replace($matches[1], $matches[4] . '"' . $matches[7] . '"' . $matches[5], $str);
    }

    private function deobfuscateIncludeB64($str, $matches)
    {
        return str_replace($matches[1], "'" . base64_decode($matches[2]) . "'", $str);
    }

    private function deobfuscateDecodeFileContent($str, $matches)
    {
        return gzuncompress(base64_decode($matches[3]));
    }

    private function deobfuscateBase64decodedFuncContents($str, $matches)
    {
        $vars   = Helpers::collectVars($matches[2]);
        $res    = str_replace($matches[2], '', $str);
        $res    = Helpers::replaceVarsFromArray($vars, $res);

        return Helpers::replaceBase64Decode($res, '\'');
    }

    private function deobfuscateEvalVarWithComment($str, $matches)
    {
        $res = str_replace($matches[3], '', $matches[2]);
        $vars = Helpers::collectVars($matches[1]);
        $res = Helpers::replaceVarsFromArray($vars, $res);

        return '?> ' . $this->unwrapFuncs($res);
    }

    private function deobfuscateEvalPackPreg($str, $matches)
    {
        $varsStr = Helpers::replaceVarsFromDictionary($matches[1], $matches[2], $matches[3]);
        $vars = Helpers::collectVars($varsStr, "'");
        if (isset($vars[$matches[6]]) && Helpers::convertToSafeFunc($vars[$matches[6]])) {
            $strToDecode = @Helpers::executeWrapper($vars[$matches[6]], [$matches[2]]);
            $strToDecode = preg_replace('~[' . $matches[5] . ']~i', '', $strToDecode);
            $strToDecode = pack('H*', $strToDecode);

            return $strToDecode;
        }

        return $str;
    }

    private function deobfuscateNib2xeh($str, $matches)
    {
        $matches[3] = str_replace("'", '', $matches[3]);
        $matches[5] = str_replace("'", '', $matches[5]);
        $matches[7] = str_replace("'", '', $matches[7]);
        $replace_from = explode(',', $matches[5]);
        $replace_from[] = ',';
        $replace_to = explode(',', $matches[7]);
        $replace_to[] = '';
        $hex = str_replace($replace_from, $replace_to, $matches[3]);
        return hex2bin($hex);
    }

    private function deobfuscateFun256($str, $matches)
    {
        $need_encode_twice  = !isset($matches[4]);
        $replace            = $need_encode_twice ? $str : $matches[1];
        $code               = $need_encode_twice ? $matches[3] : $matches[4];

        $chr = '';
        for ($i = 0; $i < 120; $i++) {
            $chr .= chr($i);
        }
        $encoded = gzinflate(gzinflate(base64_decode($code)));
        if ($need_encode_twice) {
            $encoded = gzinflate(gzinflate(base64_decode($encoded)));
        }
        $encoded_len = strlen ($encoded);
        $hash = sha1(hash('sha256', md5($chr)));
        $hash_len = strlen($hash);
        $result = '';
        for ($i = 0; $i < $encoded_len; $i += 2) {
            $char = hexdec(base_convert(strrev(substr($encoded, $i, 2)), 36, 16));
            if ($j === $hash_len) {
                $j = 0;
            }
            $delta = ord($hash[$j]);
            $j++;
            $result .= chr ($char - $delta);
        }
        $result = str_replace($replace, $result, $str);
        return $result;
    }

    private function deobfuscateCreateFuncObf($str, $matches)
    {
        $str = Helpers::replaceBase64Decode($matches[7], '\'');
        $str = preg_replace_callback('~str_rot13\(\'([^\']+)\'\)~msi', static function($m) {
            return '\'' . str_rot13($m[1]) . '\'';
        }, $str);
        $str = preg_replace_callback('~chr\(([^\)]+)\)~msi', static function($m) {
            return '\'' . Helpers::calc($m[0]) . '\'';
        }, $str);
        $str = str_replace('\'.\'', '', $str);
        return base64_decode(substr($str,1, -1));
    }

    private function deobfuscateEvalFileContentBySize($str, $matches)
    {
        $res = $str;
        $mainContent = str_replace(["\r", "\n"], '', $str);
        $mainContentLen = strlen($mainContent);
        $main_key = $matches[2] . $mainContentLen;

        $str_to_code = base64_decode($matches[3]);
        $code = Helpers::decodeEvalFileContentBySize($str_to_code, $main_key);

        if (preg_match('~\$\w+=strpos\(\$\w+,((?:chr\(\d+\)\.?)+)\);\$\w+=substr\(\$\w+,0,\$\w+\);eval\(\w+\(\w+\("([^"]+)"\),\$\w+\)\);function\s\w+\(\$\w+\){.*?strpos\(\$\w+,\1\);.*?substr\(\$\w+,\$\w+\+(\d)\)\);~msi',
            $code, $match)) {
            preg_match_all('~chr\((\d+\))~msi', $match[1], $chrMatches, PREG_SET_ORDER);

            $find = '';
            foreach ($chrMatches as $chrMatch) {
                $find .= chr((int)$chrMatch[1]);
            }
            $pos = strpos($mainContent, $find);
            $content = substr($mainContent, 0, $pos);

            $code = Helpers::decodeEvalFileContentBySize(base64_decode($match[2]), $main_key);
            if (preg_match('~\$\w+=md5\(\$\w+\)\.\$\w+;~msi', $code)) {
                $key = md5($content) . $mainContentLen;
                $content = base64_decode(substr($mainContent, $pos + (int)$match[3]));
                $res = Helpers::decodeEvalFileContentBySize($content, $key);
            }
        }

        return '<?php ' . $res;
    }

    private function deobfuscateBase64Array($str, $matches)
    {
        $var_name   = $matches[1];
        $el0        = base64_decode($matches[2]);
        $el1        = Helpers::replaceBase64Decode($matches[3], '\'');
        $code       = $matches[4];

        $code = str_replace($var_name . '[0]', '\'' . $el0 . '\'', $code);
        $code = str_replace($var_name . '[1]', $el1, $code);
        $code = Helpers::replaceBase64Decode($code, '\'');

        return $code;
    }

    private function deobfuscateSimpleVarsAndEval($str, $matches)
    {
        $vars_content = $matches[1];
        $eval_content = $matches[2];

        $vars = Helpers::collectVars($vars_content);
        $code = Helpers::replaceVarsFromArray($vars, $eval_content);

        $code = preg_replace_callback('~\(([\w+/=:\.]{20,})\)~msi', function ($m) {
            return '("' . $m[1] . '")';
        }, $code);

        if (strpos($code, 'base64_decode') === 0) {
            $code = 'eval(' . $code . ')';
        }

        if ($this->getObfuscateType($code) !== '') {
            $code = $this->unwrapFuncs($code);
        }
        return $code;
    }

    private function deobfuscateReplaceFuncWithBase64DecodeArray($str, $matches)
    {
        $nel_function_content   = $matches[3];
        $other_content          = $matches[1] . $matches[4];
        $array_elements         = str_replace('\'.\'', '', $nel_function_content);

        $elements = array_map('base64_decode', explode(',', $array_elements));

        $result = preg_replace_callback('~nel\s*\(\s*(\d+)\s*\)~mis', function($match) use ($elements) {
                $index = $match[1];
                $value = isset($elements[$index]) ? $elements[$index] : null;
                if (!is_null($value)) {
                    if ($value === "\r") {
                        return '"\\r"';
                    }
                    return "'" . addcslashes($value, "'\\") . "'";
                }
                return $match[0];
            }, $other_content
        );

        return Helpers::replaceMinMaxRound($result);
    }

    private function deobfuscateCreateFuncVars($str, $matches)
    {
        $res = Helpers::concatStringsInContent($matches[1]);
        $vars = Helpers::collectVars($res);
        $res = Helpers::replaceVarsFromArray($vars, $matches[2]);

        return $this->unwrapFuncs($res);
    }

    private function deobfuscateJsonDecodedVar($str, $matches)
    {
        $decodedStr = Helpers::replaceBase64Decode($matches[1], 'QUOTE');
        $decodedStr = str_replace("'", "\'", $decodedStr);
        $decodedStr = str_replace("QUOTE", "'", $decodedStr);

        $res = str_replace($matches[1], $decodedStr, $str);

        return $res;
    }

    private function deobfuscateFilePutPureEncodedContents($str, $matches)
    {
        return $this->deobfuscateJsonDecodedVar($str, $matches);
    }

    private function deobfuscateEvalFuncReverse($str, $matches)
    {
        $decodedContent = $matches[5];
        $decodedContent = preg_replace_callback('~eval\((\w+\(\'([^\']+)\'\))\);~msi', function ($m) {
            $strLen = strlen($m[2]);
            $res = '';

            for ($i = 0; $i <= $strLen - 1; $i++) {
                $res .= $m[2][$strLen - $i - 1];
            }

            return str_replace($m[1], $res, $m[0]);
        }, $decodedContent);

        return str_replace($matches[5], $decodedContent, $str);
    }

    private function deobfuscateBase64decodeFuncs($str, $matches)
    {
        $res = $str;
        $res = preg_replace_callback('~\w+\("([^"]+)"\)~msi', function ($m) {
            return "'" . base64_decode($m[1]) . "'";
        }, $res);

        return $res;
    }

    private function deobfuscateEvalCreateFuncWithDictionaryVar($str, $matches)
    {
        $res = Helpers::replaceVarsFromDictionary($matches[1], $matches[2], $str);
        $vars = Helpers::collectVars($res, "'");
        $func = stripcslashes($matches[5]);

        return sprintf('eval(%s(%s(\'%s\'))));', $vars[$matches[3]] ?? $matches[3], $func, $matches[6]);
    }

    private function deobfuscateEvalCreateFuncWithVars($str, $matches)
    {
        $res = Helpers::concatStringsInContent($str);
        $vars = Helpers::collectVars($res, false);
        $res = Helpers::replaceVarsFromArray($vars, $matches[4]);
        $res = Helpers::concatStringsInContent($res);
        $res = preg_replace_callback('~\w+\(((?:[\'"][^\'"]*[\'"],?)+)\)~msi', function ($m) {
            return str_replace(',', '.', $m[1]);
        }, $res);
        $res = Helpers::concatStringsInContent($res);

        return trim($res, "'");
    }

    private function deobfuscateExplodeSubstrGzinflate($str, $matches)
    {
        $obfuscated = explode($matches[3], gzinflate(substr(stripcslashes($matches[4]), hexdec($matches[5]), (int)$matches[6])));
        $str = str_replace($matches[1], '', $str);
        $str = preg_replace_callback('~\$(?:_GET|GLOBALS)[\{\[][^}]+[\}\]][\{\[]([0-9a-fx]+)[\}\]]\]?(\()?~msi', function($m) use ($obfuscated) {
            $index = hexdec($m[1]);
            $func = (isset($m[2]) && $m[2] !== '');
            if ($func) {
                return $obfuscated[$index] . '(';
            } else {
                return '\'' . $obfuscated[$index] . '\'';
            }
        }, $str);
        $str = preg_replace('~define\(\'([^\']+)\',\s*\'[^\']+\'\);\$(?:_GET|GLOBALS)\[\1\]\s*=\s*explode\(\'([^\']+)\',\s*gzinflate\(substr\(\'(.*)\',([0-9a-fx]+),\s*([0-9\-]+)\)\)\);~msi', '', $str);
        $str = Helpers::normalize($str);
        return $str;
    }

    private function deobfuscateBase64Vars($str, $matches)
    {
        $vars = Helpers::collectVars($matches[2], '\'');
        $code = Helpers::replaceVarsFromArray($vars, $matches[5], false, true);
        $code = Helpers::collectStr($code, '\'');
        $code = base64_decode($code);
        $code = str_replace($matches[1], $code, $str);
        return $code;
    }

    private function deobfuscateChr0b($str, $matches)
    {
        $str = preg_replace_callback('~chr\(((0b|0x)?[0-9a-f]+)\)~msi', function($m) {
            if (isset($m[2]) && $m[2] === '0b') {
                return '\'' . chr(bindec($m[1])) . '\'';
            }
            if (isset($m[2]) && $m[2] === '0x') {
                return '\'' . chr(hexdec($m[1])) . '\'';
            }
            return '\'' . chr($m[1]) . '\'';
        }, $str);

        $str = preg_replace_callback('~\(\'(.)\'\^\'(.)\'\)~msi', function($m) {
            return '\'' . ($m[1] ^ $m[2]) . '\'';
        }, $str);

        $str = str_replace('\'.\'', '', $str);
        $str = preg_replace('~\$\{\'([^\']+)\'\}~msi', '\$\1', $str);
        $str = preg_replace_callback('~(\$\w+)\s*=\s*\'str_rot13\';\s*\1\s*=\s*\1\s*\(\'([^\']+)\'\);~msi', function ($m) {
            return $m[1] . ' = ' . '\'' . str_rot13($m[2]) . '\';';
        }, $str);
        return $str;
    }

    private function deobfuscateCreateFuncPlugin($str, $matches)
    {
        return gzinflate(base64_decode($matches[3]));
    }

    private function deobfuscateStrreplaceEval($str, $matches)
    {
        $vars = Helpers::collectFuncVars($matches[1]);
        return Helpers::replaceVarsFromArray($vars, $matches[4]);
    }

    private function deobfuscateHackM19($str, $matches)
    {
        return gzinflate(base64_decode($matches[6]));
    }

    private function deobfuscateEv404($str, $matches)
    {
        return bzdecompress(base64_decode($matches[4]));
    }

    private function deobfuscateSetVars($str, $matches)
    {
        return str_replace($matches[1], gzinflate(base64_decode($matches[5])), $str);
    }

    private function deobfuscateCreateFuncGzB64($str, $matches)
    {
        return gzuncompress(base64_decode($matches[3]));
    }

    private function deobfuscateCreateFuncGzInflateB64($str, $matches)
    {
        return gzinflate(base64_decode($matches[3]));
    }

    private function deobfuscateWsoShellDictVars($str, $matches)
    {
        $vars[$matches[1]] = stripcslashes($matches[2]);
        $res               = Helpers::replaceVarsFromArray($vars, $matches[3]);
        $vars              = Helpers::collectFuncVars($res, $vars, false);
        $res               = Helpers::replaceVarsFromArray($vars, $matches[5]);
        $finalCode         = $this->unwrapFuncs($res);

        $dictVar = Helpers::replaceVarsFromDictionary($matches[4], $vars[$matches[4]] ?? '', $matches[6]);
        $vars    = Helpers::collectVars($dictVar, "'", $vars);
        if (isset($vars[$matches[9]]) && $vars[$matches[9]] === 'rotencode') {
            $vars[$matches[8]] = Helpers::rotencode(base64_decode($matches[10]), -1);
            $dictVar = Helpers::replaceVarsFromDictionary($matches[8], $vars[$matches[8]] ?? '', $matches[11]);
            $dictVar = Helpers::replaceVarsFromDictionary($matches[4], $vars[$matches[4]] ?? '', $dictVar);
            $vars    = Helpers::collectVars($dictVar, "'", $vars);

            $res = $this->unwrapFuncs(Helpers::replaceVarsFromArray($vars, $matches[12]));

            $count = 10;
            while ($count > 0 && preg_match('~@?eval\(\$\w+\(\$\w+\(["\'][^\'"]+[\'"]\)\)\);~msi', $res, $match)) {
                $res = $this->unwrapFuncs(Helpers::replaceVarsFromArray($vars, $res));
                $count--;
            }

            return $res;
        }

        return $str;
    }

    private function deobfuscateFuncDictVars($str, $matches)
    {
        $vars[$matches[1]] = stripcslashes($matches[2]);

        $vars[$matches[3]] = explode($matches[4], $matches[5]);
        foreach ($vars[$matches[3]] as $i => $k) {
            $temp          = preg_split("//", $k, -1, PREG_SPLIT_NO_EMPTY);
            $vars[$matches[3]][$i] = implode("", array_reverse($temp));
        }

        $iterVar = explode($matches[7], $matches[8]);
        foreach ($iterVar as $i => $k) {
            $vars[$k] = $vars[$matches[3]][$i];
        }

        $vars[$matches[1]] = Helpers::decodefuncDictVars($vars[$matches[1]], -2);
        $dictVar = Helpers::replaceVarsFromDictionary($matches[1], $vars[$matches[1]] ?? '', $matches[15]);
        $vars    = Helpers::collectVars($dictVar, "'", $vars);

        $dictVar = Helpers::getVarsFromDictionaryDynamically($vars, $matches[20]);
        $vars    = Helpers::collectVars($dictVar, "'", $vars);

        $res = Helpers::decodefuncDictVars($matches[23], 1);
        if (isset($vars[$matches[22]]) && Helpers::convertToSafeFunc($vars[$matches[22]])) {
            $res = @Helpers::executeWrapper($vars[$matches[22]], [$res]);
            $res = Helpers::replaceVarsFromArray($vars, $res);
        }

        if (preg_match('~\$\w+="([^"]+)";@eval\(\'\?>\'\.gzuncompress\(base64_decode\(strtr\(substr\(\$\w+,(\d+[+\-*/]\d+)\),substr\(\$\w+,(\d+),(\d+)\),\s?substr\(\$\w+,(\d+),(\d+)\)\)\)\)\);~msi',
                       $res, $match)) {
            $res = '?> ' . gzuncompress(base64_decode(
                strtr(
                    substr($match[1], (int)Helpers::calculateMathStr($match[2])),
                    substr($match[1], (int)$match[3], (int)$match[4]),
                    substr($match[1], (int)$match[5], (int)$match[6])))
                );
        }

        return $res;
    }

    private function deobfuscateSec7or($str, $matches)
    {
        $res = $this->unwrapFuncs($matches[3] . $matches[6] . $matches[4] . ';');
        for($i=0, $iMax = strlen($res); $i < $iMax; $i++) {
            $res[$i] = chr(ord($res[$i]) - (int)$matches[5]);
        }
        return $res;
    }

    private function deobfuscateLinesCond($str, $matches)
    {
        $vars_str = $this->unwrapFuncs($matches[1]);
        preg_match_all('~((?:\$\w+=)+)__LINE__==\s*(?:\d+[-+]?)+\s*\?\s*base64_decode\("([^"]+)"\)~msi', $vars_str, $m, PREG_SET_ORDER);
        $vars = [];
        foreach ($m as $var) {
            $func = base64_decode($var[2]);
            $tmp = explode('=', $var[1]);
            array_pop($tmp);
            $vars[] = array_combine(array_values($tmp), array_fill(0, count($tmp), $func));
        }
        $vars = array_merge(...$vars);
        $res = preg_replace_callback('~eval\(\$\w+\(\$\w+\("[^"]+"\)\)\);~msi', function ($m) use ($vars) {
            while (preg_match('~eval\(\$\w+\(\$\w+\("[^"]+"\)\)\);~msi', $m[0])) {
                $m[0] = $this->unwrapFuncs(Helpers::replaceVarsFromArray($vars, $m[0]));
            }
            return $m[0];
        }, $matches[3]);
        $tmp = [];
        $vars = Helpers::collectVars($res, '"', $tmp, true);
        $res = Helpers::replaceVarsFromArray($vars, $res, false, true);
        $vars = Helpers::collectVars($res, '\'', $tmp, true);
        $res = Helpers::replaceVarsFromArray($vars, $res, false, true);
        return $res;
    }

    private function deobfuscateClassWithArrays($str, $matches)
    {
        preg_match_all('~"[^"]+"=>"([^"]+)"~msi', $matches[2], $m);
        $data = implode('', array_reverse($m[1]));
        $data = gzuncompress(base64_decode($data));

        $numberSubstr = 14;
        if (preg_match('~,\((\d+/\d+)\)\);return~msi', $str, $calcMatch)) {
            $numberSubstr = (int)Helpers::calculateMathStr($calcMatch[1]);

        }
        for ($i = 0, $iMax = strlen($data); $i < $iMax; $i++) {
            if(isset($data[$i])) {
                $param3 = ord($data[$i]);
                $data[$i] = chr($param3 - $numberSubstr);
            }
        }
        $res = gzuncompress(base64_decode(strrev(gzinflate($data))));
        return $res;
    }

    private function deobfuscateGotoBase64Decode($str)
    {
        $res = $str;
        $hop = 5;

        while ($hop > 0 && preg_match(Helpers::REGEXP_BASE64_DECODE, $res)) {
            $res = preg_replace_callback(Helpers::REGEXP_BASE64_DECODE, function ($match) {
                $code = base64_decode(stripcslashes($match[1]));
                return '"' . Helpers::unwrapGoto($code) . '"';
            }, $res);

            $hop--;
        }

        return $res;
    }

    private function deobfuscateGotoB64Xor($str, $matches)
    {
        return Helpers::unwrapGoto($str);
    }

    private function deobfuscateAssertStrrev($str, $matches)
    {
        return str_replace($matches[1], strrev($matches[4]), $str);
    }

    private function deobfuscateB64strtr($str, $matches)
    {
        $code = $matches[4];
        $delta = (int)$matches[1];
        $code = str_split($code);
        foreach ($code as &$c) {
            $c = chr(ord($c) + $delta);
        }
        $code = implode('', $code);
        $code = strtr($code, $matches[2], $matches[3]);
        $code = base64_decode($code);
        preg_match('~(\$\w+)="([^"]+)";@eval\(\'\?>\'\.gzuncompress\((?:\$\w+\()+\$\w+,(\$\w+)\*2\),(\$\w+)\(\1,\3,\3\),\s*\4\(\1,0,\3\)+;~mis', $code, $m);
        $code = gzuncompress(base64_decode(strtr(substr($m[2],52*2),substr($m[2],52,52), substr($m[2],0,52))));
        $res = Helpers::unwrapGoto($code);
        return $res;
    }

    private function deobfuscateGzB64strReplaceDataImage($str, $matches)
    {
        $strToDecode = str_replace([$matches[2], $matches[3]], [$matches[4], $matches[5]], $matches[7]);

        $res = gzinflate(base64_decode($strToDecode));

        return $res;
    }

    private function deobfuscateSerializeFileContent($str, $matches)
    {
        return base64_decode(strrev(str_rot13($matches[2])));
    }

    private function deobfuscateGlobalVarsManyReplace($str, $matches)
    {
        $vars = Helpers::collectVars($matches[1]);

        foreach ($vars as &$var) {
            $var = base64_decode(strrev(str_rot13($var)));
        }

        $res = Helpers::replaceVarsFromArray($vars, $matches[2], true, true);

        return $res;
    }

    private function deobfuscateConcatVarsPregReplace($str, $matches)
    {
        $vars = [];

        $vars = Helpers::collectConcatedVars($str, '"', $vars);
        $res = Helpers::replaceVarsFromArray($vars, $matches[3], true, true);
        $res = $this->unwrapFuncs($res);

        return $res;
    }

    private function deobfuscateFilePutContentsB64Decoded($str, $matches)
    {
        $res = $str;
        $vars = [];

        $vars = Helpers::collectConcatedVars($res, '"', $vars, true);

        $res = Helpers::replaceVarsFromArray($vars, $res, true, true);
        $res = Helpers::replaceBase64Decode($res, '"');

        return $res;
    }

    private function deobfuscateFwriteB64DecodedStr($str, $matches)
    {
        $res = $str;
        $vars = [];

        $vars = Helpers::collectFuncVars($res, $vars, false, true);
        $res = Helpers::replaceVarsFromArray($vars, $res, true, true);

        return $res;
    }

    private function deobfuscateFilePutContentsB64Content($str, $matches)
    {
        $res = Helpers::replaceBase64Decode($str, "'");

        return $res;
    }

    private function deobfuscateChrDictCreateFunc($str, $matches)
    {
        $vars = [];

        preg_match_all('~chr\((\d+)\)~msi', $matches[3], $chrs, PREG_SET_ORDER);

        $dictVar = '';
        foreach ($chrs as $chr) {
            $dictVar .= chr((int)$chr[1]);
        }

        $res = Helpers::replaceVarsFromDictionary($matches[2], $dictVar, $matches[6]);
        $res = str_replace('\\\'', "'", $res);
        $res = Helpers::replaceBase64Decode($res, "'");
        $res = substr($res, 1);
        $res = substr($res, 0, -1);

        return $res;
    }

    private function deobfuscateStrReplaceFuncsEvalVar($str, $matches)
    {
        $func = str_replace($matches[3], '', $matches[2]);

        if ($func === 'base64_decode') {
            return base64_decode($matches[4]);
        }

        return $str;
    }

    private function deobfuscateB64SlashedStr($str, $matches)
    {
        return stripcslashes(base64_decode(stripcslashes($matches[1])));
    }

    private function deobfuscateB64ArrayStrEval($str, $matches)
    {
        return base64_decode($matches[4]);
    }

    private function deobfuscateDictVarsPregReplaceB64($str, $matches)
    {
        $res = Helpers::replaceVarsFromDictionary($matches[1], $matches[2], $str);

        if (strpos($res, 'preg_replace') &&
            strpos($res, 'eval') &&
            strpos($res, 'base64_decode')) {
            return base64_decode($matches[3]);
        }

        return $res;
    }

    private function deobfuscateEvalVarB64($str, $matches)
    {
        return gzinflate(base64_decode($matches[3]));
    }

    private function deobfuscateDecodeAChar($str, $matches)
    {
        $res = str_replace($matches[1], '', $str);
        while (strpos($res, 'eval(' . $matches[2] . '(\'') !== false) {
            $res = preg_replace_callback('~eval\(\w+\(\'([^\']+)\'\)\);~msi', function ($m) {
                return Helpers::decodeACharCustom($m[1]);
            }, $res);
        }
        $vars = Helpers::collectVars($res, '\'');
        foreach ($vars as $var => $value) {
            if (strpos($res, $matches[2] . '(' . $var . ')') !== false) {
                $res = str_replace($var . '=\'' . $value . '\';', '', $res);
                $res = str_replace($matches[2] . '(' . $var . ')', '\'' . addcslashes(Helpers::decodeACharCustom($value), '\'') . '\'', $res);
            }
        }
        return $res;
    }

    private function deobfuscateStrReplaceCreateFunc($str, $matches)
    {
        $res = $matches[7];
        $funcs = str_replace($matches[3], 'str_replace', $matches[4]);
        $vars = Helpers::collectFuncVars($funcs, $vars, false);
        $vars[$matches[1]] = '\'' . $matches[2] . '\'';
        foreach ($vars as $var => $value) {
            $res = str_replace($var, $value, $res);
        }
        return 'eval(' . $res . ');';
    }

    private function deobfuscateEvalbin2hex($str, $matches)
    {
        $res = hex2bin($matches[5]) . $matches[6];
        $res = $this->unwrapFuncs($res);
        if (preg_match('~define\(\'([^\']+)\', \'[^\']+\'\);\$GLOBALS\[\1\]\s*=\s*explode\(\'([^\']+)\',\s*gzinflate\(substr\(\'((?:[^\']*\\\\\')+[^\']+)\',([0-9a-fx]+),\s*([\-0-9a-f]+)\)~msi', $res, $m)) {
            $m[3] = stripcslashes($m[3]);
            $strings = explode($m[2], gzinflate(substr($m[3], hexdec($m[4]), (int)$m[5])));
            $res = str_replace($m[0], '', $res);
            $res = preg_replace_callback('~\$GLOBALS[\{\[].{1,3}[\}\]][\[\{]([0-9a-fx]+)[\]\}]~msi', function($m) use ($strings) {
                return '\'' . $strings[hexdec($m[1])] . '\'';
            }, $res);
        }

        if (substr_count($res, 'goto ') > 50) {
            $res = Helpers::unwrapGoto($res);
        }
        if (strpos($res, 'document.write(unescape(\'') > 0) {
            $res = preg_replace_callback('~<script type=\'text/javascript\'>document\.write\(unescape\(\'([^\']+)\'\)\)</script>~msi', function ($m) {
                return urldecode($m[1]);
            }, $res);
        }
        return $res;
    }

    private function deobfuscateManyFuncsWithCode($str, $matches)
    {
        $funcs = [$matches[1] => 'decode'];

        preg_match_all('~function\s(\w{1,50})\((?:\$\w{1,50},?\s?)+\)\s?{\s?return\s\$\w{1,50};\s?}~msi', $res,
                       $funcMatches, PREG_SET_ORDER);

        foreach ($funcMatches as $funcMatch) {
            $funcs[$funcMatch[1]] = 'single_var';
        }

        $res = preg_replace_callback('~(\w{1,50})\s?\(\s?[\'"]([^\'"]+)[\'"]\s?\)~msi', function ($m) use ($funcs) {
            $func = $funcs[$m[1]] ?? false;
            if (!$func) {
                return $m[0];
            }
            if ($func === 'decode') {
                $decoded = "";
                for ($i = 0; $i < strlen($m[2]) - 1; $i += 2) {
                    $decoded .= chr(hexdec($m[2][$i] . $m[2][$i + 1]) ^ 0x66);
                }

                return '"' . $decoded . '"';
            } elseif ($func === 'single_var') {
                return '"' . $m[2] . '"';
            }
        }, $str);

        return $res;
    }

    private function deobfuscateManyGlobals($str, $matches)
    {
        $vars = [];
        foreach ([$matches[1], $matches[2], $matches[3]] as $m) {
            $hangs = 50;
            $part = $m;
            while (strpos($part, 'base64_decode') !== false && $hangs--) {
                $part = Helpers::replaceVarsFromArray($vars, $part);
                $part = Helpers::replaceBase64Decode($part);
            }
            $ops = explode(';', $part);
            foreach ($ops as $v) {
                if ($v === '') {
                    continue;
                }
                $tmp = explode('=', $v, 2);
                $vars[$tmp[0]] = $tmp[1];
            }
        }
        $res = str_replace([$matches[1], $matches[2], $matches[3]], '', $str);
        $hangs = 50;
        while (strpos($res, '$GLOBALS') !== false && $hangs--) {
            $res = str_replace(array_keys($vars), array_values($vars), $res);
        }
        $res = str_replace('base64_decode(\'\')', '\'\'', $res);
        return $res;
    }

    private function deobfuscateB64xoredkey($str, $matches)
    {
        $b64 = Helpers::collectConcatedVars($matches[2]);
        $b64 = $b64[key($b64)];
        $res = Helpers::xorWithKey(base64_decode($b64), $matches[10]);
        return $matches[1] . $res;
    }

    private function deobfuscateGzB64Func($str, $matches)
    {
        $res = Helpers::normalize($matches[5]);
        $res = str_replace($matches[4], '"' . $matches[6] . '"', $res);
        return $res;
    }

    private function deobfuscateDictArrayFuncVars($str, $matches)
    {
        $dictName = $matches[5];

        $res = preg_replace_callback('~chr\((\d+)\)~msi', static function ($match) {
            return '\'' . chr($match[1]) . '\'';
        }, $matches[6]);


        $vars[$matches[2]] = 'base64_decode';
        $vars[$matches[3]] = base64_decode(Helpers::concatStr($matches[4]));

        $res = Helpers::replaceVarsFromArray($vars, $res, true);
        $res = Helpers::concatStringsInContent($res);
        $res = Helpers::replaceVarsFromArray($vars, $res, true, true);

        $res = preg_replace_callback('~str_rot13\([\'"]([^\'"]+)[\'"]\)~msi', static function ($match) {
            return '\'' . str_rot13($match[1]) . '\'';
        }, $res);

        $res = preg_replace_callback('~(?:[\'"][\w=();*/]*[\'"]\.?){2,}~msi', static function ($m) {
            preg_match_all('~(\.?)\s?[\'"]([\w=\+/%&();*]+)[\'"]\s?~msi', $m[0], $concatStrings);
            $strVar = "";
            foreach ($concatStrings[2] as $index => $concatString) {
                if ($concatStrings[1][$index] === '.') {
                    $strVar .= $concatString;
                } else {
                    $strVar = $concatString;
                }
            }

            return '\'' . $strVar . '\'';
        }, $res);

        $arrayVarDict = [];

        preg_match_all('~[\s\'"]*(.*?\]?)[\s\'"]*(,|$)~msi', $res, $arrMatches, PREG_SET_ORDER);

        foreach ($arrMatches as $arrMatch) {
            if ($arrMatch[1] === '') {
                continue;
            }
            $arrayVarDict[] = $arrMatch[1];
        }

        $res = str_replace([$matches[1], $matches[6]], '', $str);
        $res = preg_replace_callback('~(\$\w{1,50})\[(\d+)\]~msi', static function ($match) use ($dictName, $arrayVarDict) {
            if ($dictName === $match[1]) {
                $res = $arrayVarDict[$match[2]] ?? $match[0];
                if (!Helpers::convertToSafeFunc($res) && $res !== 'json_decode' && $res !== 'create_function' && strpos($res, '$') === false) {
                    $res = '"' . $res . '"';
                }
                return $res;
            }
            return $match[0];
        }, $res);

        return $res;
    }

    private function deobfuscateCreateFuncPackStrRot13($str, $matches)
    {
        return pack('H*', str_rot13($matches[2]));
    }

    private function deobfuscateDictVarsCreateFunc($str, $matches)
    {
        $res = $str;
        $dictName = $matches[2];
        $dictVal = stripcslashes($matches[3]);
        $vars = [];

        $res = preg_replace_callback('~(\$\w{1,50})\s?=\s?\w{1,50}\((?:(?:\$\w{1,50}\[\d+\]\s?|[\'"]{2}\s?)[.,]?\s?)+\);~msi',
            function($m) use (&$vars, $dictName, $dictVal) {
            $varName = $m[1];
            $dictResultStr = '';

            preg_match_all('~(\$\w{1,50})\[(\d+)\]~msi', $m[0], $dictVars, PREG_SET_ORDER);
            foreach ($dictVars as $dictVar) {
                if ($dictVar[1] !== $dictName) {
                    continue;
                }

                if ((int)$dictVar[2][0] === 0) {
                    $dictResultStr .= $dictVal[octdec($dictVar[2])] ?? '';
                } else {
                    $dictResultStr .= $dictVal[$dictVar[2]] ?? '';
                }
            }

            $vars[$varName] = $dictResultStr;

            return '';
            }, $str);

        $codeStr = '';
        preg_match_all('~(\$\w{1,50})~msi', $res, $varsMatch, PREG_SET_ORDER);
        foreach ($varsMatch as $var) {
            $codeStr .= $vars[$var[1]] ?? '';
        }

        if (strpos($codeStr, 'eval(base64_decode') !== false) {
            return base64_decode($matches[5]);
        }

        if (strpos($codeStr, 'eval(gzinflate(base64_decode') !== false) {
            return gzinflate(base64_decode($matches[5]));
        }

        return $str;
    }

    private function deobfuscateDecodedFileGetContentsWithFunc($str, $matches)
    {
        $res = str_replace($matches[6], '', $str);

        $resCode = implode(' ', @Helpers::unserialize(base64_decode($matches[5])));

        if (preg_match('~\$\w{1,50}\s?=\s?\'([^\']+)\';\s*\$\w{1,50}\s?=\s?\'([^\']+)\';~msi', $resCode, $configs)) {
            $uid = $configs[1];
            $cfg = $configs[2];

            $resCode = preg_replace_callback('~\$this->\w{1,50}\s?=\s?(@unserialize\(\$this->\w{1,50}\(\w{1,50}::\w{1,50}\(\$this->config\),\s?[\'"]([^\'"]+)[\'"]\)\))~msi',
                static function ($m) use ($uid, $cfg) {
                    $configCodeArray = Helpers::decodeFileGetContentsWithFunc(base64_decode($cfg), $m[2]);
                    $configCodeArray = Helpers::decodeFileGetContentsWithFunc($configCodeArray, $uid);
                    $configCodeArray = @Helpers::unserialize($configCodeArray);
                    $configCodeArray = var_export($configCodeArray, true);

                    return str_replace($m[1], $configCodeArray, $m[0]);
                }, $resCode);
        }

        $res = str_replace($matches[8], $resCode, $res);

        return $res;
    }

    private function deobfuscateCreateFuncVarsCode($str, $matches)
    {
        $vars = Helpers::collectConcatedVars(stripcslashes($matches[1]));

        $tempStr = preg_replace_callback('~(\$\w{1,50})=(.*?);~msi', function ($m) use (&$vars) {
            $var = $this->unwrapFuncs(Helpers::replaceVarsFromArray($vars, $m[2], true, true));

            $vars[$m[1]] = $var;
        }, $matches[2]);

        $func = Helpers::replaceVarsFromArray($vars, $matches[7], true);
        $code = $this->unwrapFuncs("$func'$matches[6]))");

        if (preg_match('~(\$\w{1,50})=array\(((?:\d{1,9},?)+)\);\s*(\$\w{1,50})="";for\((\$\w{1,50})=0;\4<sizeof\(\1\);\4\+=2\){if\(\4%4\){\3\.=substr\(\$\w{1,50},\1\[\4\],\1\[\4\+1\]\);}else{\3\.=\$\w{1,50}\(substr\(\$\w{1,50},\1\[\4\].\1\[\4\+1\]\)\);}};.*?return\s\$\w{1,50};~msi',
                       $code, $codeMatches)) {
            $res      = "";
            $arrayNum = [];

            preg_match_all('~(\d{1,9})~msi', $codeMatches[2], $numbers, PREG_SET_ORDER);
            foreach ($numbers as $number) {
                $arrayNum[] = $number[1];
            }

            for ($i = 0; $i < sizeof($arrayNum); $i += 2) {
                if ($i % 4) {
                    $res .= substr($matches[4], $arrayNum[$i], $arrayNum[$i + 1]);
                } else {
                    $res .= strrev(substr($matches[4], $arrayNum[$i], $arrayNum[$i + 1]));
                }
            };

            $res = $this->unwrapFuncs("$func'$res))");
            if ($res) {
                return $res;
            }
        }

        return $str;
    }

    private function deobfuscatePregConcat($str, $matches)
    {
        return Helpers::normalize($matches[2]);
    }

    private function deobfuscateUndefinedDFunc($str, $matches)
    {
        return 'eval(gzinflate(str_rot13(base64_decode(' . $matches[2] . '))));';
    }

    private function deobfuscateXoredStrings($str, $matches)
    {
        $res = preg_replace_callback('~"([^"]+)"\s*(?:\s*/\*[^\*]+\*/\s*)?\^(?:\s*/\*[^\*]+\*/\s*)?\s*"([^"]+)"~msi', function($m) {
            return '\'' . (stripcslashes($m[1]) ^ stripcslashes($m[2])) . '\'';
        }, $str);

        $res = preg_replace_callback('~\$\{\'(\w+)\'\}~msi', function($m) {
            return '$' . $m[1];
        }, $res);
        Helpers::collectVars($res, '\'', $vars, true);
        $res = Helpers::replaceVarsFromArray($vars, $res, false, false);

        if (preg_match('~(\$\w+)\s*=\s*(\(?\s*gzinflate\s*\(\s*base64_decode\s*)\(\s*\'([^\']+)\'\s*\)\s*\)\s*\)?\s*;\s*\$\w+\s*=\s*@?create_function\(\'([^\']*)\',\s*(?:\1|\'@?eval\(\4\)[^\']+\')\)\s*;\s*@?\$\w+(?:\(\)|\(\1\));~msi', $res, $m)) {
            $res = $this->deobfuscateCreateFuncGzInflateB64($res, $m);
        }
        $res = preg_replace_callback('~/\*[^\*]+\*/~msi', function($m) {
            return '';
        }, $res);
        $res = str_replace('\\\'', '@@slaapos@@', $res);
        preg_match('~\$\{"[^"]+"\^"[^"]+"\}\s*=\s*\'([^\']+)\'\s*;~msi', $res, $m);
        $res = str_replace('@@slaapos@@', '\\\'', $m[1]);
        $res = stripcslashes($res);

        $res = preg_replace_callback('~\(?"([^"]+)"\)?\s*\^\s*\(?"([^"]+)"\)?~msi', function($m) {
            return '\'' . (stripcslashes($m[1]) ^ stripcslashes($m[2])) . '\'';
        }, $res);

        $res = preg_replace_callback('~\$\{\'(\w+)\'\}~msi', function($m) {
            return '$' . $m[1];
        }, $res);

        $replace = function($m) use (&$vars) {
            if (!isset($vars[$m[1]])) {
                return $m[0];
            }
            if (isset($m[2]) && $m[2] !== '') {
                return $vars[$m[1]] . '(';
            }
            return @($vars[$m[1]][0] !== '\'') ? '\'' . $vars[$m[1]] . '\'' : $vars[$m[1]];
        };

        Helpers::collectVars($res, '\'', $vars, true);
        $res = preg_replace_callback('~(\$\w+)\s*(\()?~msi', $replace, $res);
        Helpers::collectFuncVars($res, $vars, true, true);
        $res = preg_replace_callback('~(\$\w+)\s*(\()?~msi', $replace, $res);

        $res = preg_replace('~;+~msi', ';', $res);
        return $res;
    }

    private function deobfuscateCommentWithAlgo($str, $matches)
    {
        return str_replace($matches[1], addcslashes(base64_decode(gzinflate(str_rot13(convert_uudecode(gzinflate(base64_decode($matches[1])))))), '\''), $str);
    }

    private function deobfuscateDefinedB64($str, $matches)
    {
        return str_replace([$matches[1], $matches[6], $matches[8]], ['', '', gzinflate(base64_decode($matches[9]))], $str);
    }

    private function deobfuscateB64Xored($str, $matches)
    {
        return base64_decode(Helpers::xorWithKey(base64_decode($matches[4]), $matches[6]));
    }

    private function deobfuscateB64AssignedVarContent($str, $matches)
    {
        return str_replace($matches[4], "'" . (base64_decode($matches[2])) . "'", $matches[3]);
    }

    private function deobfuscateDictVarsWithMath($str, $matches)
    {
        $dictVal = $matches[2];

        $dictStrs = Helpers::calculateMathStr($matches[3]);
        $vars = Helpers::getVarsFromDictionary($dictVal, $dictStrs);
        $vars = Helpers::collectVars($str, '"', $vars);
        $vars = Helpers::collectConcatedVars($str, '"', $vars);

        return $vars[$matches[4]] ?? $str;
    }

    private function deobfuscateClassDecryptedWithKey($str, $matches)
    {
        $key = 'WebKit#58738Educ';

        $data = hex2bin($matches[2]);
        $res = Helpers::decodeClassDecryptedWithKey($data, 32, $key);

        if (strpos($res, 'error_reporting(') !== false) {
            return $res;
        }

        return $str;
    }

    private function deobfuscatePHPkoru($str, $matches)
    {
        $vars[$matches[2]] = str_rot13(base64_decode($matches[3]));
        $vars[$matches[4]] = str_rot13(base64_decode($matches[5]));
        $vars = Helpers::collectFuncVars($str, $vars, false);
        $vars = Helpers::collectVars($str, '\'', $vars);
        $code = $matches[6];
        while (strpos($code, 'eval') === 0) {
            $code = str_replace(array_keys($vars), array_values($vars), $code);
            $code = $this->unwrapFuncs($code);
        }
        $code = str_replace(array_keys($vars), array_values($vars), $code);
        $decoded = '';
        if (preg_match('~openssl_decrypt\(base64_decode\(trim\(\$\w+\[1\]\)\),\s*(base64_decode\()?[\'"]([^"]+)[\'"]\)?,\s*base64_decode\(str_rot13\([\'"]([^"]+)[\'"]\)\),\s*(\d+),\s*base64_decode\(str_rot13\([\'"]([^"]+)[\'"]\)\)\)\);~msi', $code, $openssl_data)) {
            $data = base64_decode(trim($matches[9]));
            $algo = strpos($openssl_data[1], 'base64_decode') === false
                ? $openssl_data[2]
                : base64_decode($openssl_data[2]);
            $passphrase = base64_decode(str_rot13($openssl_data[3]));
            $iv = base64_decode(str_rot13($openssl_data[5]));
            $flags = $openssl_data[4];
            $decoded = openssl_decrypt($data, $algo, $passphrase, $flags, $iv);
            $decoded = str_rot13(base64_decode(str_rot13($decoded)));
        }
        return ' ?> ' .PHP_EOL . $decoded;
    }

    private function deobfuscateJoomlaInject($str, $matches)
    {
        $vars = Helpers::collectVars($matches[0]);
        preg_match('~function\s*\w+\((\$\w+)\)\s*\{\s*(\$\w+)\s*=\s*array\(((?:\'[^\']+\',?)+)\1\);\s*for\((\$\w+)=0;\s*\4<\d+;\s*\4\+\+\)\s*\{\s*for\((\$\w+)=0;\s*\5<strlen\(\2\[\4\]\);\s*\5\+\+\)\s*\2\[\4\]\[\5\]\s*=\s*chr\(ord\(\2\[\4\]\[\5\]\)\s*([\-\+])\s*(\d+)~msi', $this->full_source, $decode_data);
        preg_match_all('~\$this->\w+\(((?|"[^"]+"|\$\w+))\)~msi', $matches[0], $to_decode);
        foreach ($to_decode[1] as &$item) {
            if ($item[0] === '"' && $item[-1] === '"') {
                $item = substr($item, 1, -1);
            }
            $item = str_replace(array_keys($vars), array_values($vars), $item);
            $item = "'" . Helpers::joomlaInjectDecoder($decode_data[3] . $item, $decode_data[6], $decode_data[7]) . "'";
        }
        $res = str_replace($to_decode[0], $to_decode[1], $str);
        return $res;
    }

    private function deobfuscateFwriteB64Content($str, $matches)
    {
        $res = $str;

        $res = str_replace($matches[1], '', $res);
        $replace = base64_decode($matches[3]);

        $res = str_replace($matches[4], "'" . $replace . "'", $res);

        return $res;
    }

    private function deobfuscateB64concatedVars($str, $matches)
    {
        $res = $matches[6];

        $code = "'" . base64_decode($matches[2]) . base64_decode($matches[5]) . "'";

        $res = str_replace($matches[7], $code, $res);

        return $res;
    }

    private function deobfuscateSlashedCreateFunc($str, $matches)
    {
        $func = stripcslashes($matches[2]);

        if (strpos($func, 'create_function') !== false) {
            $code = stripcslashes($matches[5]);
            $code = str_replace($matches[4], $matches[6], $code);

            return $code;
        }

        return $str;
    }

    private function deobfuscateVarDictCreateFunc($str, $matches)
    {
        $res = Helpers::replaceVarsFromDictionary($matches[1], $matches[2], $matches[3]);

        $vars = [];
        $vars = Helpers::collectVars($res, '"', $vars, true);

        $res = Helpers::replaceVarsFromArray($vars, $res);

        return $res;
    }

    private function deobfuscatecallFuncGzB64($str, $matches)
    {
        return gzinflate(base64_decode($matches[1]));
    }

    private function deobfuscateAssertDictVarEval($str, $matches)
    {
        $dict = $matches[2];
        $arr  = [];
        for ($i = 0; $i < 6; $i++) {
            $arr[] = (int)$matches[4 + $i];
        }

        $assertStr = "";
        for ($i = 0; $i < 6; $i++) {
            $temp      = $arr[$i];
            $assertStr .= $dict[$temp];
        }

        $funcs = Helpers::concatStringsInContent(stripcslashes($matches[13]));
        if ($assertStr === 'assert' && strpos($funcs, 'eval(base64_decode(gzinflate(base64_decode(') !== false) {
            return base64_decode(gzinflate(base64_decode($matches[11])));
        }

        $vars               = [];
        $vars[$matches[10]] = $matches[11];
        $vars[$matches[12]] = $assertStr;

        return Helpers::replaceVarsFromArray($vars, $funcs);
    }

    private function deobfuscateB64FuncEvalGz($str, $matches)
    {
        return base64_decode(gzinflate(base64_decode($matches[4])));
    }

    private function deobfuscateB64Gz($str, $matches)
    {
        $result = gzinflate(base64_decode($matches[2]));
        $break = isset($matches[5]) ? '?>' : '';

        return $break . $result;
    }

    private function deobfuscateSubstrEmpty($str, $matches)
    {
        $str = preg_replace_callback('~substr\("([^"]++)",(\d++),(-?\d++)\)~msi', function ($m) {
            return '"' . substr(stripcslashes($m[1]), (int) $m[2], (int) $m[3]) . '"';
        }, $str);
        $str = str_replace(['"."', '"".'], '', $str);
        return $str;
    }

    private function deobfuscateDeltaOrd($str, $matches)
    {
        $matches[4] = str_replace(' ', '', $matches[4]);
        if (isset($matches[3]) && $matches[3] !== '') {
            $funcs = array_reverse(array_filter(explode('(', $matches[6])));
            $str = $matches[7];
            foreach ($funcs as $func) {
                $str = Helpers::executeWrapper($func, [$str]);
            }
        } else {
            $str = gzinflate(base64_decode(stripcslashes($matches[7])));
        }

        for($i = 0, $iMax = strlen($str); $i < $iMax; $i++) {
            $str[$i] = chr(ord($str[$i]) + (int) $matches[4]);
        }
        return $str;
    }

    private function deobfuscateOutputBuffer($str, $matches)
    {
        $search = explode(',', str_replace(['\',\'', '\',"', '",\'', '","'], ',', substr($matches[5], 1, -1)));
        $replace = explode(',', str_replace(['\',\'', '\',"', '",\'', '","'], ',', substr($matches[6], 1, -1)));
        $replace = array_map('stripcslashes', $replace);
        $buffer = str_replace($search, $replace, $matches[1] . $matches[9]);
        for ($i = 1, $j = ord($buffer[0]), $iMax = strlen($buffer); $i < $iMax; $i++) {
            $buffer[$i] = chr(ord($buffer[$i]) - $j - $i);
        }
        $buffer[0] = ' ';
        return $buffer;
    }

    private function deobfuscateDoorwayInstaller($str, $matches)
    {
        $vars = [];
        Helpers::collectVars($str, '"', $vars, true);
        $str = preg_replace_callback('~(\$\w+)\((?:"([^"]+)"|(\$\w+))\)~msi', function($m) use ($matches, $vars) {
            if ($m[1] !== $matches[1]) {
                return $m[0];
            }
            if (isset($m[2]) && $m[2] !== '') {
                return '\'' . base64_decode($m[2]) . '\'';
            }
            if (isset($m[3]) && isset($vars[$m[3]])) {
                return '\'' . base64_decode($vars[$m[3]]) . '\'';
            }
        }, $str);
        return $str;
    }

    private function deobfuscateStrReplaceAssert($str, $matches)
    {
        return base64_decode(gzinflate(base64_decode($matches[2])));
    }

    private function deobfuscateAnaLTEAMShell($str, $matches)
    {
        preg_match_all('~\$\{\'GLOBALS\'\}\[\'([^\']+)\'\]=[\'"]([^\'"]+)[\'"];~msi', $str, $m);
        $vars = array_combine($m[1], $m[2]);
        $str = str_replace($m[0], '', $str);
        $str = preg_replace_callback('~\$\{\$\{\'GLOBALS\'\}\[\'([^\']+)\'\]\}~msi', function($m) use ($vars) {
            if (!isset($vars[$m[1]])) {
                return $m[0];
            }
            return '$' . $vars[$m[1]];
        }, $str);
        $str = Helpers::replaceBase64Decode($str);
        $str = preg_replace_callback('~((\$\w+)=\'([^\']+)\';)\$\w+=\$_SERVER\[\'DOCUMENT_ROOT\'\]\.\'/\'\.\'[^\']+\';if\(file_exists\(\$\w+\)\)@?unlink\(\$\w+\);(\$\w+)=(base64_decode\(\2\));~msi', function ($m) {
            $res = str_replace($m[1], '', $m[0]);
            $res = str_replace($m[5], '\'' . base64_decode($m[3]) . '\'', $res);
            return $res;
        }, $str);
        $str = stripcslashes(stripcslashes($str));
        return $str;
    }

    private function deobfuscateZeuraB64Gzinflate($str, $matches)
    {
        return gzinflate(base64_decode($matches[10]));
    }

    private function deobfuscateD5($str, $matches)
    {
        $content = explode(hex2bin($matches[4]), $str)[1];
        $tmp = [];
        for ($i = 0; $i < strlen($content); $i++) {
            $tmp[]=ord($content[$i]) xor $i;
        }
        $content = hex2bin(base64_decode(implode(array_map(hex2bin($matches[8]), $tmp))));
        return $content;
    }

    private function deobfuscateStrReplaceFunc($str, $matches)
    {
        $vars = Helpers::collectFuncVars($matches[3], $vars, false, true);
        $cmd = Helpers::replaceVarsFromArray($vars, $matches[5]);
        if (strpos($cmd, 'create_function') === 0) {
            $cmd = 'eval(' . str_replace('create_function(\'\',', '', $cmd);
        }
        $res = str_replace($matches[6], '\'' . $matches[7] . '\'', $cmd);
        return $res;
    }

    private function deobfuscateArrayMapB64($str, $matches)
    {
        $array = explode('\',\'', substr($matches[2], 1, -1));
        return ' ?>' . base64_decode(str_rot13(implode('', $array))) . '<?php ';
    }

    private function deobfuscatePregReplaceStrReplace($str, $matches)
    {
        return str_replace($matches[1], $matches[2], stripcslashes($matches[3]));
    }

    private function deobfuscateEchoB64($str, $matches)
    {
        return str_replace([$matches[2], $matches[5]], ['\'' . base64_decode($matches[3]) . '\'', '\'' . base64_decode($matches[6]) . '\''], $str);
    }

    private function deobfuscateCreateFuncXored($str, $matches)
    {
        $res = preg_replace_callback('~"([^"]+)"\^"([^"]+)"~msi', function($m) {
            return '\'' . (stripcslashes($m[1]) ^ stripcslashes($m[2])) . '\'';
        }, $str);
        $vars = Helpers::collectVars($res, '\'', $vars, true);
        $res = gzinflate(base64_decode($matches[2]));
        $res = preg_replace('~/\*[^\*]+\*/~msi', '', $res);
        $code = $res;
        if (preg_match('~\$\{"[^"]+"\^"[^"]+"\}\s*=\s*\'((?:\\\\.|[^\'])*+)\';~msi', $code, $matches)) {
            $code = stripcslashes($matches[1]);
            $code = preg_replace_callback('~\(?"([^"]+)"\)?\^\(?"([^"]+)"\)?~msi', function($m) {
                return '\'' . (stripcslashes($m[1]) ^ stripcslashes($m[2])) . '\'';
            }, $code);
            $code = MathCalc::calcRawString($code);
            $vars = [];
            $code = preg_replace_callback('~\$(?:\{\')?(\w+)(?:\'\})?\s*=\s*\'([^\']*)\';+~msi', function($m) use (&$vars) {
                $vars['$' . $m[1] . '('] = $m[2] . '(';
                $vars['$' . $m[1]] = '\'' . $m[2] . '\'';
                return '';
            }, $code);
            $vars['&& !$_0 '] = '&&';
            $vars['if($_0 '] = 'if(';
            krsort($vars);
            $code = str_replace(array_keys($vars), array_values($vars), $code);
        }

        if (preg_match('~(\$\w+)=base64_decode\(\'([^\']+)\'\);;~msi', $code, $m)) {
            $code = str_replace($m[0], '', $code);
            $code = str_replace('eval(' . $m[1] . ');', base64_decode($m[2]), $code);
        }
        $code = preg_replace_callback('~\(?"([^"]+)"\)?\^\(?"([^"]+)"\)?~msi', function($m) {
            return '\'' . (stripcslashes($m[1]) ^ stripcslashes($m[2])) . '\'';
        }, $code);
        $vars = [];
        $code = preg_replace_callback('~(?|\$\{\'(\w+)\'\}\s*=\s*\'(\w+)\'|\$(\w+)\s*=\s*\'(\w+)\');+\s*~msi', function($m) use (&$vars) {
            $vars['$' . $m[1] . '('] = $m[2] . '(';
            $vars['${\'' . $m[1] . '\'}' . '('] = $m[2] . '(';
            $vars['$' . $m[1]] = '\'' . $m[2] . '\'';
            $vars['${\'' . $m[1] . '\'}'] = '\'' . $m[2] . '\'';
            return '';
        }, $code);
        $code = Helpers::replaceVarsFromArray($vars, $code);
        return $code;
    }

    private function deobfuscateCodeLockDecoder($str, $matches)
    {
        $codelock_stub = base64_decode($matches[1]);
        if (isset($matches[2]) && $matches[2] !== '') {
            $codelock_stub = gzinflate($codelock_stub);
            $hangs = 20;
            while (strpos($codelock_stub, 'eval') === 0 && $hangs--) {
                $codelock_stub = $this->UnwrapFuncs($codelock_stub);
            }
        }

        preg_match('~\$codelock_active_key="([^"]*)";~msi', $codelock_stub, $m);
        $codelock_active_key = $m[1];
        preg_match('~\$codelock_usezlib="([^"]*)";~msi', $codelock_stub, $m);
        $codelock_usezlib = $m[1];
        $codelock_key_data = $matches[3];
        if ($codelock_usezlib === "^") {
            $codelock_key_data = base64_decode($codelock_key_data);
            $codelock_key_data = gzinflate($codelock_key_data);
        }
        if (substr($codelock_active_key, 0, 15) !== "codelock_active") {
            $codelock_key_data = Helpers::codelock_dec_int($codelock_key_data, $codelock_active_key);
        } else {
            preg_match('~\$codelock_unlock="([^"]*)";~msi', $codelock_stub, $m);
            $codelock_active_key = $m[1];
            $codelock_key_data = Helpers::codelock_run($codelock_key_data, $codelock_active_key);
        }

        return $codelock_key_data;
    }

    private function deobfuscateEvalGzStrRotB64($str, $matches)
    {
        return gzinflate(str_rot13(base64_decode($matches[2])));
    }

    private function deobfuscateEvalDictArrayConcat($str, $matches)
    {
        $dictVal = '';
        preg_match_all('~[\'"]([^\'"])[\'"]~msi', $matches[2], $m, PREG_SET_ORDER);
        foreach ($m as $char) {
            $dictVal .= $char[1];
        }

        $replacedStr = Helpers::replaceVarsFromDictionary($matches[1], $dictVal, $str);
        $vars = Helpers::collectVars($replacedStr);

        $funcs = Helpers::replaceVarsFromArray($vars, $matches[4]);
        $funcs = Helpers::concatStringsInContent($funcs);
        $funcs = strtolower($funcs);

        if (strpos($funcs, 'eval(str_rot13(gzinflate(str_rot13(gzinflate(base64_decode(') !== false) {
            return str_rot13(gzinflate(str_rot13(gzinflate(base64_decode($matches[6])))));
        }

        return $str;
    }

    private function deobfuscatePregReplaceXored($str, $matches)
    {
        $res = preg_replace_callback('~"([^"]+)"\^"([^"]+)"~msi', function($m) {
            return '\'' . (stripcslashes($m[1]) ^ stripcslashes($m[2])) . '\'';
        }, $str);
        $vars = [];
        $vars = Helpers::collectVars($res, '\"', $vars, true);
        $res = Helpers::replaceVarsFromArray($vars, $res, false, true);
        $res = str_replace('\'.\'', '', $res);
        Helpers::collectVars($res, '\'', $vars, true);
        $res = str_replace(['preg_replace("/' . $matches[2] . '/e",\'\'', '\'\',"' . $matches[2] . '");'], '', $res);
        $res = Helpers::replaceVarsFromArray($vars, $res, false, true);
        return $res;
    }

    private function deobfuscateR4C($str, $matches)
    {
        $vars = [];
        $res = $str;
        $hangs = 20;
        do {
            Helpers::collectConcatedVars($res, '"', $vars, true);
            $res = str_replace('"".$', '$', $res);
            Helpers::collectConcatedVars($res, '\'', $vars, true);
            $res = trim($res);
            $res = Helpers::replaceVarsFromArray($vars, $res, false, true);
            $res = $this->unwrapFuncs($res);
        } while (preg_match('~eval\((?:\w+\()*(?:\$\w+\.?)+\)~', $res) && $hangs--);
        return $res;
    }

    private function deobfuscateBase64EncryptedGz($str, $matches)
    {
        $text       = $matches[1];
        $hash       = $matches[3];
        $key        = 'asdf';
        $key_len    = strlen($key);

        $text       = base64_decode(str_replace("\n", '', $text));
        $text_len   = strlen($text);

        $w = [];
        for ($i = 0; $i < $key_len; ++$i)
        {
            $w[] = $text_len - $key_len - ord($key[$i]);
        }

        for ($i = 0; $i < $text_len; ++$i) {
            $j          = abs($w[$i % $key_len] - $i);
            $x          = $text[$j];
            $text[$j]   = $text[$i];
            $text[$i]   = $x;
        }

        if ($key_len < 10) {
            $key_len *= $key_len & 1 ? 3 : 2;
        }

        if (($text = @gzinflate($text)) && (md5(substr($text, 0, $key_len)) === $hash)) {
            return substr($text, $key_len);
        }

        return '';
    }

    private function deobfuscateBloos3rpent($str, $matches)
    {
        $matches[3] = str_replace('\\\'', '\'', $matches[3]);
        $matches[4] = str_replace('\\\'', '\'', $matches[4]);
        $decoder = strtr($matches[5], $matches[3], $matches[4]);
        preg_match('~\$\w+\s*=\s*\[((?:\'[\da-fx]+\',?)+)\];~msi', $decoder, $funcs);
        $funcs = explode('\',\'', substr($funcs[1], 1, -1));
        $funcs = array_map('hex2bin', $funcs);
        preg_match('~function\s*(\w+)\((\$\w+)\)\s*\{\s*global\s*(\$\w+);\s*return\s*\3\[\d+\]\(\'([^\']+)\',function\(\$\w+\)\s*\{\s*if[^}]+\}return\s*\$\w+;\s*\}\s*else\{\s*return\s*chr[^}]+\}\},\$\w+\);\s*\}\s*function\s*(\w+)\(\$\w+\)\s*\{\s*global\s*\3;\s*eval\(\3\[\d+\]\(\$\w+\)\);\s*\}~msi', $decoder, $tmp);
        $strtr_func = $matches[1];
        $decode_code_func = $tmp[1];
        $eval_func = $tmp[5];
        $arr_funcs = $tmp[3];
        $code = Helpers::replaceVarsFromDictionary($arr_funcs, $funcs, $matches[7], false);
        $hangs = 20;
        while (preg_match('~(\w+)\(\'([^\']+)\'\)~msi', $code) && $hangs--) {
            $code = preg_replace_callback('~(\w+)\(\'([^\']+)\'\)~msi', function ($m) use ($strtr_func, $decode_code_func, $eval_func, $matches) {
                if ($m[1] === $strtr_func) {
                    return '\'' . strtr($m[2], $matches[3], $matches[4]) . '\'';
                }
                if ($m[1] === $decode_code_func) {
                    return '\'' . stripcslashes($m[2]) . '\'';
                }
                if (Helpers::convertToSafeFunc($m[1])) {
                    return '\'' . @Helpers::executeWrapper($m[1], [$m[2]]) . '\'';
                }
                return $m[0];
            }, $code);
        }
        $code = stripcslashes(substr($code, 1, -2));
        return $code;
    }

    private function deobfuscateDoublePregReplace($str, $matches)
    {
        $matches[2] = substr($matches[2], 1, -1);
        $decoder = @gzinflate(base64_decode(preg_replace('~' . $matches[2] . '~', $matches[3], $matches[4])));
        $res = str_replace($matches[1], $decoder, $str);
        $res = str_replace([$matches[11], $matches[5], $matches[7]], '', $res);
        $res = str_replace('\')))));', '\'))));', $res);
        return $res;
    }

    private function deobfuscateZeura2($str, $matches)
    {
        return 'eval(base64_decode(gzinflate(base64_decode(\'' . $matches[6] . '\'))));';
    }

    private function deobfuscateOneFuncStrDecodeVars($str, $matches)
    {
        $func_content_to_remove = $matches[1];
        $func_name = $matches[2];
        $dict = $matches[5];

        $dictConvert = function ($array_str) use ($dict) {
            $array = preg_split('~\s*,\s*~ms', $array_str);
            $result = '';
            foreach($array as $item){
                $result .= isset($dict[$item]) ? $dict[$item] : '';
            }
            return $result;
        };

        $vars = [];
        $str = preg_replace_callback('~(\$\w{1,20})\s?=\s?array\(([\d,]{1,200})\);\s*(\$\w{1,20})\s?=\s?(\w{1,20})\(\1\);~mis', function($m) use ($func_name, $dictConvert, &$vars) {
            if ($m[4] != $func_name) {
                return $m[0];
            }
            $vars[$m[3]] = $dictConvert($m[2]);
            return '';
        }, $str);

        $str = preg_replace_callback('~(\$\w{1,20})\s*\(~mis', function($item) use($vars) {
            if (isset($vars[$item[1]])) {
                return $vars[$item[1]] . '(';
            }
            return $item[0];
        }, $str);

        return str_replace($func_content_to_remove, '', $str);
    }

    private function deobfuscateZeura4($str, $matches)
    {
        //Sample: zeura4_1.php, zeura4_2.php, zeura4_3.php, zeura4_4.php, zeura4_5.php

        $encrypted_string1 = $matches[2];
        $encrypted_string2 = $matches[5];

        $string1 = base64_decode($encrypted_string1);
        if (!preg_match('~array\(\d{1,10},(\d{1,10}),(\d{1,10})\)~mis', $string1, $m)) {
            return $str;
        }
        $key1 = $m[1];
        $key2 = $m[2];

        $offset = (int)$key1 + (int)$key2;
        $php = gzinflate(base64_decode(substr(trim($encrypted_string2), $offset)));
        if ($php === false) {
            return $str;
        }
        return stripcslashes($php);
    }

    private function deobfuscateCreateFuncEscaped($str, $matches)
    {
        return base64_decode($matches[6]);
    }

    private function deobfuscateMaskedDeltaOrd($str, $matches)
    {
        $matches[3] = '';
        $matches[7] = base64_decode($matches[2]);
        $matches[4] = '-1';
        return $this->deobfuscateDeltaOrd($str, $matches);
    }

    private function deobfuscatedecodeStrMultiForDict($str, $matches)
    {
        $strToDecode = str_replace(['-m ', ' ', PHP_EOL], '', $matches[3]);
        $strToDecode = base64_decode($strToDecode);

        $decodeArray = [];
        for ($i = 0; $i < 256; ++$i) {
            $decodeArray [$i] = $i;
        }

        $index = 0;
        for ($i = 0; $i < 256; ++$i) {
            $index                = ($index + $decodeArray [$i] + ord($matches[6] [$i % 63])) % 256;
            $tempVar              = $decodeArray [$i];
            $decodeArray [$i]     = $decodeArray [$index];
            $decodeArray [$index] = $tempVar;
        }

        $i     = 0;
        $index = 0;
        for ($j = 0; $j < (int)$matches[10]; ++$j) {
            $i                    = ($i + 1) % 256;
            $index                = ($index + $decodeArray [$i]) % 256;
            $tempVar              = $decodeArray [$i];
            $decodeArray [$i]     = $decodeArray [$index];
            $decodeArray [$index] = $tempVar;
            $strToDecode [$j]     = $strToDecode [$j] ^ chr($decodeArray [($decodeArray [$i] + $decodeArray [$index]) % 256]);
        }

        return $strToDecode;
    }

    private function deobfuscateB64ConcatedStrVars($str, $matches)
    {
        $vars        = Helpers::collectVars($str, "'");
        $code        = base64_decode($matches[2]);
        $strToDecode = Helpers::replaceVarsFromArray($vars, $matches[3]);
        $strToDecode = Helpers::concatStringsInContent($strToDecode);
        if (preg_match('~(\$\w{1,50})\s?=\s?base64_decode\(\1\);\s?return\s?@?eval\(\1\);~msi', $code)) {
            return base64_decode($strToDecode);
        }

        return $str;
    }

    private function deobfuscateChrFuncVars($str, $matches)
    {
        $result = preg_replace_callback('~' . $matches[1] . '\(array\(((?:\d+,?)+)\)\)~msi', function ($m) {
            $data = '';
            preg_match_all('~\d+~msi', $m[0], $nums, PREG_SET_ORDER);
            foreach ($nums as $num) {
                $data .= chr($num[0]);
            }
            return "'" . $data . "'";
        }, $str);

        return $result;
    }

    private function deobfuscateConcatVarsFuncs($str, $matches)
    {
        $concatedStr = Helpers::concatStringsInContent($matches[1]);
        $vars = Helpers::collectVars($concatedStr);
        $data = Helpers::concatStringsInContent($matches[2]);
        $data = Helpers::replaceVarsFromArray($vars, $data);

        $code = $this->unwrapFuncs($data);

        if (preg_match('~eval\(rawurldecode\("([^"]+)"~msi', $code, $m)) {
            return rawurldecode($m[1]);
        }

        return $code;
    }

    private function deobfuscateBlackshadow($str, $matches)
    {
        return ($matches[5] . '\'' . $matches[4] . $matches[2] . '\'' . $matches[7]);
    }

    private function deobfuscateGlobalDictVar($str, $matches)
    {
        $str = str_replace($matches[2], '', $str);
        $dict = stripcslashes($matches[4]);
        $str = preg_replace_callback('~\$\w+\[\'\w+\'\]\[(\d+)\]~msi', function ($m) use ($dict) {
            return '\'' . $dict[(int)$m[1]] . '\'';
        }, $str);
        $str = str_replace('\'.\'', '', $str);
        $vars = [];
        $str = preg_replace_callback('~(\$\w+\[\'(\w+)\'\])=(\'[^\']+\'|\$_POST|\$_GET|\$_COOKIE);(?!global)~msi', function($m) use (&$vars) {
            if ($m[3][0] === '\'') {
                $m[3] = substr($m[3], 1, -1);
            }
            $vars[$m[1]] = $m[3];
            $vars['$' . $m[2]] = $m[3];
            return '';
        }, $str);
        $str = Helpers::replaceVarsFromArray($vars, $str);
        return $str;
    }

    private function deobfuscateGarbageVars($str, $matches)
    {
        $str = preg_replace('~"([\w@/:\?>,=\}\.]*)"~msi', '\'\1\'', $str);
        $str = preg_replace_callback('~(?:\'\s*\.\s*(\w+)|(\w+)\s*\.\s*\')~msi', function ($m) {
            if (isset($m[1]) && $m[1] !== '') {
                return '\' . \'' . $m[1] . '\'';
            }
            if (isset($m[2]) && $m[2] !== '') {
                return '\'' . $m[2] . '\' . \'';
            }
        }, $str);

        $str = preg_replace('~\'\s*\.\s*\'~msi', '', $str);
        $str = preg_replace_callback('~(?|\'([^\']+)\'|(\w+))\s*([\^\|\&])\s*(\~)?(?|\'([^\']+)\'|(\w+))~msi', function ($m) {
            if (isset($m[3]) && $m[3] !== '') {
                $m[4] = ~$m[4];
            }
            switch ($m[2]) {
                case '^':
                    return '\'' . ($m[1] ^ $m[4]) . '\'';
                case '|':
                    return '\'' . ($m[1] | $m[4]) . '\'';
                case '&':
                    return '\'' . ($m[1] & $m[4]) . '\'';
            }
        }, $str);

        $vars = Helpers::collectVars($str, '\'', $vars, true);

        $str = preg_replace_callback('~(?|\(\'([^\']+)\'\)|(\$\w+))([\^\&\|])(?|\(\'([^\']+)\'\)|(\$\w+))~msi', function ($m) use ($vars) {
            if ($m[1][0] === '$' && isset($vars[$m[1]])) {
                $m[1] = $vars[$m[1]];
            }
            if ($m[3][0] === '$' && isset($vars[$m[3]])) {
                $m[3] = $vars[$m[3]];
            }
            switch ($m[2]) {
                case '^':
                    return '\'' . ($m[1] ^ $m[3]) . '\'';
                case '|':
                    return '\'' . ($m[1] | $m[3]) . '\'';
                case '&':
                    return '\'' . ($m[1] & $m[3]) . '\'';
            }
        }, $str);

        Helpers::collectVars($str, '\'', $vars, true);
        foreach ($vars as $var => $val) {
            $str = str_replace($var . '(', $val . '(', $str);
            $str = str_replace($var, '\'' . $val . '\'', $str);
        }
        $str = preg_replace('~\'\s*\.\s*\'~msi', '', $str);
        return $str;
    }

    private function deobfuscateChrMinXor($str, $matches)
    {
        $code = (isset($matches[2]) && $matches[2] !== '') ? convert_uudecode(str_replace($matches[5],'', $matches[2])) : base64_decode(strrev($matches[3]));
        $table = [];
        if (isset($matches[5]) && $matches[5] !== '') {
            for($i = 0; $i < 256; ++$i) {
                $table[$i] = $i;
            }
            $j=0;
            for($i = 0; $i < 256; ++$i) {
                $j = ($j + $table[$i] + ord($matches[6][$i % (strlen($matches[6]) - 1)])) % 256;
                $tmp = $table[$i];
                $table[$i] = $table[$j];
                $table[$j] = $tmp;
            }
            $j=0;
            $k=0;
            for($i = 0, $iMax = strlen($code) - 1; $i < $iMax; ++$i) {
                $j = ($j + 1) % 256;
                $k = ($k + $table[$j]) % 256;
                $tmp = $table[$j];
                $table[$j] = $table[$k];
                $table[$k] = $tmp;
                $code[$i] = $code[$i] ^ chr($table[($table[$j] + $table[$k]) % 256]);
            }
        } else {
            for($i = 0, $iMax = strlen($code) - 1; $i < $iMax; ++$i) {
                $code[$i] = $code[$i] ^ $matches[6][$i % (strlen($matches[6]) - 1)];
            }
        }

        return $code;
    }

    private function deobfuscateFakeChop($str, $matches)
    {
        $offset = 2;
        $tmp = base64_decode($matches[2]);
        preg_match('~if\(\$\w+\)(\$\w+)=\$\w+\(\'([^\']+)\',\s*\(\(\$\w+\!=\d+\)\?\'[^\']+\':\'([^\']+)\'\),\1\);\$\w+\+=__LINE__\*1;~msi', $tmp, $m);
        $matches[3] = str_replace($m[2], $m[3], $matches[3]);
        $tmp = base64_decode(substr($matches[3], $offset));
        preg_match('~\w+=\'([^\']+)\';~msi', $tmp, $m);
        $code = base64_decode(substr($m[1], $offset));
        $dicts = [];
        $code = preg_replace_callback('~\$GLOBALS\[([^\]]+)\]=explode\("([^"]+)",\s*"([^"]+)"\);~msi', function ($m) use (&$dicts) {
           $dicts[$m[1]] = explode($m[2], $m[3]);
           return '';
        }, $code);
        $code = preg_replace_callback('~\$GLOBALS\[([^\]]+)\]=explode\(pack\(\$GLOBALS\[([^\]]+)\]\[(\d+)\],\$GLOBALS\[([^\]]+)\]\[(\d+)\]\),pack\(\$GLOBALS\[([^\]]+)\]\[(\d+)\],\$GLOBALS\[([^\]]+)\]\[(\d+)\]\)\);~msi', function ($m) use (&$dicts) {
            $dicts[$m[1]] = explode(pack($dicts[$m[2]][$m[3]], $dicts[$m[4]][$m[5]]), pack($dicts[$m[6]][$m[7]], $dicts[$m[8]][$m[9]]));
            return '';
        }, $code);
        $code = preg_replace_callback('~\$GLOBALS\[([^\]]+)\]\[([xa-f\d]+)\](\()?~msi', function ($m) use ($dicts) {
            $offset = $m[2][1] === 'x' ? hexdec($m[2]) : ($m[2][0] === '0' ? octdec($m[2]) : $m[2]);
            return (isset($m[3]) && $m[3] !== '') ? $dicts[$m[1]][$offset] . '(' : '\'' . $dicts[$m[1]][$offset] . '\'';
        }, $code);
        $code = preg_replace_callback('~pack\(\'H\*\',\'([\da-f]+)\'\)~msi', function ($m) {
            return '\'' . pack('H*', $m[1]) . '\'';
        }, $code);
        preg_match('~\$[^=]+=array\(array\((\'[^\)]+)\)\);~msi', $code, $m);
        $m[1] = substr($m[1], 1, -1);
        $m[1] = str_replace('\',\'', '', $m[1]);
        $code = base64_decode(str_rot13($m[1]));
        return $code;
    }

    private function deobfuscateAssertUrldecode($str, $matches)
    {
        return $this->deobfuscateEval(stripcslashes($matches[2]), []);
    }

    private function deobfuscateImplodeB64Gz($str, $matches)
    {
        $b64str = str_replace('\',\'', '', $matches[2]);
        $code = gzuncompress(base64_decode($b64str));
        $code = MathCalc::calcRawString($code);
        $code = Helpers::normalize($code);
        $arr = [];
        $func = '';
        $code = preg_replace_callback('~if\(!function_exists\(\'(\w+)\'\)\)\{function\s*\1\((\$\w+)\)\s*\{(\$\w+)=array\(([^)]+)\);return\s*base64_decode\(\3\[\2\]\);\}~msi', function ($m) use (&$arr, &$func) {
            $arr = explode('\',\'', substr($m[4], 1, -1));
            $func = $m[1];
            return '';
        }, $code);
        foreach($arr as $i => $data) {
            $code = str_replace($func . '(' . $i . ')', '\'' . base64_decode($data) . '\'', $code);
        }
        return $code;
    }

    private function deobfuscateEvalStrReplace($str, $matches)
    {
        return base64_decode(str_replace($matches[8], '', $matches[2]));
    }

    private function deobfuscateX12($str, $matches)
    {
        $vars = Helpers::collectVars($matches[1]);
        $matches[2] = Helpers::replaceVarsFromArray($vars, $matches[2], false, true);
        $matches[2] = Helpers::normalize($matches[2]);
        $funcs = Helpers::collectVars($matches[2], '\'');
        $matches[3] = Helpers::replaceVarsFromArray($funcs, $matches[3]);
        return $this->deobfuscateEval($matches[3], []);
    }

    private function deobfuscateWpNightmare($str, $matches)
    {
        return gzinflate(base64_decode($matches[8]));
    }

    private function deobfuscateXorGzUncompress($str, $matches)
    {
        $vars = Helpers::collectVars($matches[1], '\'');
        $code = array_pop($vars);
        $code = base64_decode($code);
        $code = Helpers::xorWithKey($code, $matches[10]);
        return gzuncompress($code);
    }

    private function deobfuscateEvalSubstr($str, $matches)
    {
        return base64_decode(substr(strrev($matches[2]), (int)$matches[3],(int)$matches[4]));
    }

    private function deobfuscateEvalStrrev($str, $matches)
    {
        $code = base64_decode(strrev($matches[2]));
        return $code;
    }

    private function deobfuscateStrRot13ConvertUUDecode($str, $matches)
    {
        $decode = str_rot13($matches[2]);
        $decode = stripcslashes($decode);
        if (preg_match('~eval\(convert_uudecode\(\s*\'~msi', $decode)) {
            $decode = preg_replace(['~eval\(convert_uudecode\(\s*\'~msi', '~\'\)\);~msi'], '', $decode);
            $decode = stripcslashes($decode);
            $decode = convert_uudecode($decode);
        }
        if (preg_match('~eval\(strrev\(\s*\'~msi', $decode)) {
            $decode = preg_replace(['~eval\(strrev\(\s*\'~msi', '~\'\)\);~msi'], '', $decode);
            $decode = stripcslashes($decode);
            $decode = strrev($decode);
        }
        if (preg_match('~eval\(str_rot13\(\s*\'~msi', $decode)) {
            $decode = preg_replace(['~eval\(str_rot13\(\s*\'~msi', '~\'\)\);~msi'], '', $decode);
            $decode = stripcslashes($decode);
            $decode = str_rot13($decode);
        }

        $decode = $this->deobfuscateEval($decode, []);
        if (preg_match('~eval\(strrev\(\s*\';\)\)\s*\\\\\'eval\(convert_uudecode\(\s*\\\\(["\'])((?:[^;]+;)+[^\']+)\\\\\'\\\\\\\\\)\);\\\\\1\s*\(verrts\(lave\'\s*\)\);~msi', $decode, $m)) {
            $decode = preg_replace_callback('~(?:(\\\\\\\\\\\\\\\\\\\\\')|(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\)|(\\\\\\\\))~m', function($g) {
                if (isset($g[1]) && $g[1] !== '') {
                    return '\'';
                }
                if (isset($g[2]) && $g[2] !== '') {
                    return '\\';
                }
                if (isset($g[3]) && $g[3] !== '') {
                    return '';
                }
            }, $m[2]);
            $decode = convert_uudecode($decode);
        }
        if (preg_match('~eval\(str_rot13\(\s*\'riny\(pbaireg_hhqrpbqr\(\s*\\\\(["\'])((?:[^;]+;)+[^\']+)\\\\\'\)\);\1\s*\)\);~msi', $decode, $m)) {
            $decode = preg_replace_callback('~(?:(\\\\\\\\\\\\\')|(\\\\\\\\\\\\\\\\))~msi', function($g) {
                if (isset($g[1]) && $g[1] !== '') {
                    return '\'';
                }
                if (isset($g[2]) && $g[2] !== '') {
                    return '\\';
                }
            }, $m[2]);
            $decode = convert_uudecode(str_rot13($decode));
        }
        if (preg_match('~eval\(strrev\(\s*\';\)\)\s*\\\\\'eval~msi', $decode)) {
            $decode = preg_replace(['~eval\(strrev\(\s*\';\)\)\s*\\\\\'~msi', '~\\\\\'\s*\(verrts\(lave\'\s*\)\);~msi'], '', $decode);
            $decode = preg_replace_callback('~(?:(\\\\\')|(\\\\\\\\))~msi', function($g) {
                if (isset($g[1]) && $g[1] !== '') {
                    return '\'';
                }
                if (isset($g[2]) && $g[2] !== '') {
                    return '';
                }
            }, $decode);
        }
        return $decode;
    }

    private function deobfuscateCreateFuncHex($str, $matches)
    {
        $decode = stripcslashes($matches[5]);
        $decode = str_replace($matches[4], '\'' . $matches[6] . '\'', $decode);
        return $decode;
    }

    private function deobfuscatePregB64Strrev($str, $matches)
    {
        return $this->deobfuscateEvalStrrev($str, $matches);
    }

    private function deobfuscatePregB64FuncImgStr($str, $matches)
    {
        $decodedStr = base64_decode($matches[13]);

        if (preg_match('~<img src="data:image/png;(.*)">~msi', $decodedStr, $foundB64) !== false) {
            $decodedStr = str_replace(
                [base64_decode($matches[4]), base64_decode($matches[5])],
                [base64_decode($matches[6]), base64_decode($matches[7])],
                $foundB64[1]
            );
            $decodedStr = gzinflate(base64_decode($decodedStr));

            return str_replace($matches[11], $decodedStr, $str);
        }

        return $str;
    }

    private function deobfuscateUtfCharVarsFuncEval($str, $matches)
    {
        $vars = [];
        $res = $str;
        $globalVarName = $matches[1];
        $funcName = $matches[2];

        $res = Helpers::utfCharVarsFuncEvalCodeDecoder($res, $vars, $globalVarName, $funcName);

        for ($i = 0; $i < 10; $i++) {
            $found = false;

            if (preg_match('~eval\(?\s*@?\s*(?:base64_decode\s*\(|pack\s*\(\'H\*\',|convert_uudecode\s*\(|htmlspecialchars_decode\s*\(|gzdecode\s*\(|stripslashes\s*\(|gzinflate\s*\(|strrev\s*\(|str_rot13\s*\(|gzuncompress\s*\(|urldecode\s*\(|rawurldecode\s*\(|unserialize\s*\(|eval\s*\(|hex2bin\()+.*?[^\'");]+(\s*[\'"\)]+)+\s*;~msi', $res, $matches)) {
                $unWrapped = $this->unwrapFuncs($matches[0]);
                $res = str_replace($matches[0], $unWrapped, $res);
                $found = true;
            } else if (preg_match('~eval\('. $funcName . '\(base64_decode\(\'([^\']+)\'\)+;~msi', $res, $funcMatch)) {
                $code = base64_decode($funcMatch[1]);
                $code = Helpers::utfCharVarsFuncEvalVarDecoder($code);
                $res = str_replace($funcMatch[0], $code, $res);
                $found = true;
            }
            if ($found) {
                $res = Helpers::utfCharVarsFuncEvalCodeDecoder($res, $vars, $globalVarName, $funcName);
            } else {
                break;
            }
        }
        $res = Helpers::replaceBase64Decode($res);

        return $res;
    }

    private function deobfuscateManyVarFuncCreateFuncWrap($str, $matches)
    {
        $createFuncCode = hex2bin(pack('H*', $matches[8]));
        if (strpos($createFuncCode, 'eval($') !== false) {
            return gzinflate(hex2bin(pack('H*', $matches[9])));
        }

        return $str;
    }

    private function deobfuscateTwoCalcClasses($str, $matches)
    {
        $func1_name     = $matches[1] . '::' . $matches[2];
        $func1_data     = Helpers::prepareArray($matches[3]);
        $array_name     = Helpers::normalize($matches[4]);
        $array          = Helpers::prepareArray($matches[5]);
        $global_list    = Helpers::replaceBase64Decode(Helpers::normalize($matches[6]));
        $func2_name     = $matches[7] . '::' . $matches[8];
        $func2_data     = Helpers::prepareArray(Helpers::normalize($matches[9]));
        $content        = Helpers::normalize($matches[10]);

        $list_of_globals = [];
        foreach (explode(";", $global_list) as $item) {
            if (empty($item)) {
                continue;
            }
            list($key, $value) = explode('=', $item, 2);
            $list_of_globals[$key] = trim($value, '\'');
        }

        $content = str_replace(array_keys($list_of_globals), array_values($list_of_globals), $content);

        $content = preg_replace_callback('~' . preg_quote($func1_name) . '\(([\d]*)\)~mis', function($m) use ($func1_data) {
            $key = octdec($m[1]);
            $result = '';
            if (array_key_exists($key, $func1_data)) {
                $result = $func1_data[$key];
            }
            return $result;
        }, $content);


        $content = preg_replace_callback('~' . preg_quote($func2_name) . '\(["\']([^\'"]+)["\'],\s*["\']([^\'"]+)["\']\)~mis', function($m) use ($func2_data) {
            $param1 = $m[1];
            $param2 = $m[2];

            $slen = strlen($param2);
            $decoded = base64_decode($func2_data[$param1]);
            for ($i = 0, $cslen = strlen($decoded); $i !== $cslen; ++$i) {
                $decoded[$i] = chr(ord($decoded[$i]) ^ ord($param2[$i % $slen]));
            }
            return "'".$decoded."'";
        }, $content);


        $content = preg_replace_callback('~\$GLOBALS\["' . preg_quote($array_name) . '"\]\[([0-9\-]+)\]~i', function ($m) use ($array) {
            $key = octdec($m[1]);
            return $array[$key];
        }, $content);

        return MathCalc::calcRawString($content);
    }

    private function deobfuscateCreateFuncArray($str, $matches)
    {
        $dict = substr(str_replace(['","', "','", '\',"', '",\''], '', $matches[2]),1, -1);
        $func = substr(Helpers::replaceVarsFromDictionary($matches[1], $dict, $matches[5]), 1, -1);
        $codeVar = str_replace(['"."', '\'.\'', '\'."', '".\''], '', $matches[4]);
        $res = str_replace($codeVar, '\'' . $matches[6] . '\'', $func);
        return $res;
    }

    private function deobfuscateCreateFuncReplaceB64($str, $matches)
    {
        $func1 = str_ireplace($matches[4], $matches[5], $matches[6]);
        $func2 = strtr($matches[8], $matches[9], $matches[10]);
        if ($func1 === 'create_function') {
            $func1 = 'eval';
        }
        $code = $func1 . '(' . $func2 . '(\'' . $matches[2] . '\'' . '));';
        return $code;
    }

    private function deobfuscateEvalTrim($str, $matches)
    {
        $vars = Helpers::collectFuncVars($matches[1], $vars, false);
        $func = strtolower(substr(str_replace('\'.\'', '', Helpers::replaceVarsFromArray($vars, $matches[4], false, true)), 1, -1));
        return 'eval(' . $func . '(\'' . $matches[6] . '\'));';
    }

    private function deobfuscateUnserializeB64GzJoinArr($str, $matches)
    {
        $arr = [];
        preg_match_all('~\'([^\']*)\'~msi', $matches[5], $strMatches, PREG_SET_ORDER);
        foreach ($strMatches as $strMatch) {
            $arr[] = $strMatch[1];
        }
        $string = join($matches[4], $arr);
        $res = gzinflate(base64_decode($string));
        Helpers::unserialize($res);

        return $res;
    }

    private function deobfuscateEvalStrrevCode($str, $matches)
    {
        return strrev($matches[1]);
    }

    private function deobfuscateEvalConvertUudecodeWithSlashedQuote($str, $matches)
    {
        return convert_uudecode(stripcslashes($matches[1]));
    }

    private function deobfuscateDictVarsContent($str, $matches)
    {
        $res = Helpers::replaceVarsFromDictionary($matches[1], $matches[2], $matches[3]);
        $vars = Helpers::collectVars($res, "'", $vars, false);

        $res = str_replace($matches[3], $res, $matches[0]);
        $res = stripcslashes($res);
        $res = Helpers::replaceVarsFromArray($vars, $res, true);

        return $res;
    }

    private function deobfuscateGlobalsCreateFuncEvalB64($str, $matches)
    {
        return str_replace(
            $matches[4],
            '?> '. base64_decode($matches[8]) . '<?php ',
            $str
        );
    }

    private function deobfuscateDictForeachVars($str, $matches)
    {
        $dictStr = $matches[2];
        $vars = [];
        $res = $str;

        preg_match_all('~foreach\s?\(\[([^]]+)\]\s?as\s?\$\w{1,50}\)\s?{\s?(\$\w{1,50})\s?\.=\s?\$\w{1,50}\[\$\w{1,50}\];\s?}~msi', $str, $foreachMatches, PREG_SET_ORDER);

        foreach ($foreachMatches as $foreachMatch) {
            preg_match_all('~\d+~msi', $foreachMatch[1], $numMatches, PREG_SET_ORDER);
            $val = '';
            foreach ($numMatches as $numMatch) {
                $val .= $dictStr[$numMatch[0]] ?? '';
            }
            $vars[$foreachMatch[2]] = $val;
            $res = str_replace($foreachMatch[0], '', $res);
        }

        $res = Helpers::replaceVarsFromArray($vars, $res, true);
        $res = Helpers::concatStringsInContent($res);

        return $res;
    }

    private function deobfuscateEchoEvalGzB64Var($str, $matches)
    {
        return stripcslashes(gzinflate(base64_decode(stripcslashes($matches[4]))));
    }

    private function deobfuscateTwoEvalVarsReplace($str, $matches)
    {
        $vars = [];
        $varsStrCode = urldecode(hex2bin($matches[3]));
        $vars = Helpers::collectFuncVars($varsStrCode, $vars, false);
        $res = hex2bin($matches[4]);

        $unwrappedCode = Helpers::replaceVarsFromArray($vars, $matches[5]);
        $unwrappedCode = str_replace($matches[1], $matches[2], $unwrappedCode);
        $unwrappedCode = $this->unwrapFuncs($unwrappedCode . ')');

        $res .= $unwrappedCode;

        return $res;
    }

    private function deobfuscateEvalFuncCode($str, $matches)
    {
        $function = $matches[1];
        $safe = Helpers::convertToSafeFunc($function);
        if ($safe) {
            return @Helpers::executeWrapper($function, [stripcslashes($matches[2])]);
        }

        return $str;
    }

    private function deobfuscateEvalOpenSslDecrypt($str, $matches)
    {
        return openssl_decrypt(
            base64_decode($matches[1]),
            $matches[2],
            base64_decode($matches[3]),
            OPENSSL_RAW_DATA,
            base64_decode($matches[4])
        );
    }

    private function deobfuscateUrldecodedDictVarReplace($str, $matches)
    {
        $dictVal = urldecode($matches[2]);
        $res = Helpers::replaceVarsFromDictionary($matches[1], $dictVal, $matches[0]);
        $res = Helpers::concatStringsInContent($res);

        return $res;
    }

    private function deobfuscateZymdecrypt($str, $matches)
    {
        $funcs = Helpers::replaceBase64Decode($matches[2]);
        $tmp = explode(';', $funcs);
        $funcs = [];
        foreach ($tmp as $func) {
            if (empty($func)) {
                continue;
            }
            $func = explode('=', $func);
            $funcs[str_replace(['$' . $matches[1] . '[\'', '\']'], '', $func[0])] = substr($func[1], 1, -1);
        }
        foreach($funcs as $var => $func) {
            $matches[3] = str_replace('$GLOBALS[\'' . $matches[1] . '\'][\'' . $var . '\']\(', $func . '(', $matches[3]);
            $matches[3] = str_replace('$GLOBALS[\'' . $matches[1] . '\'][\'' . $var . '\']', $func, $matches[3]);
        }

        if (preg_match('~function\s*(\w+)\((\$\w+)\)\{return\s*base64_decode\(\2\);~msi', $matches[3], $m)) {
            $matches[3] = str_replace($m[1] . '(', 'base64_decode(', $matches[3]);
        }
        $limit = 10;
        while (
            strpos($matches[3], 'base64_decode(\'') !== false
            || strpos($matches[3], 'base64_decode("') !== false
            || $limit--
        ) {
            $matches[3] = Helpers::replaceBase64Decode($matches[3]);
        }
        return $matches[3];
    }

    private function deobfuscateFuncRevB64($str, $matches)
    {
        $code = str_replace(['eval(' . $matches[1] . '(', '));'], ['eval(base64_decode(strrev(base64_decode(strrev(', ')))));'], $matches[4]);
        return $code;
    }

    private function deobfuscateCreateFuncGzConvertUudecode($str, $matches)
    {
        return stripcslashes(gzinflate(convert_uudecode(stripcslashes($matches[2]))));
    }

    private function deobfuscateGlobalsArrayFuncs($str, $matches)
    {
        $globalFuncStr = base64_decode(Helpers::concatStr($matches[2]));
        $res = str_replace($matches[1] . '(0)', '\'' . $globalFuncStr . '\'', $str);
        preg_match_all('~(?:[\'"][^"\']*[\'"]\s?\.?)+~msi', $matches[4], $strings, PREG_SET_ORDER);
        $vars = [];
        foreach ($strings as $string) {
            $vars[] = base64_decode(Helpers::concatStr($string[0]));
        }
        $res = preg_replace_callback(
            '~' . $matches[3] . '\((\d+)\)~msi',
            static function ($m) use ($vars) {
                $str = str_replace('\\', '\\\\', $vars[$m[1]]);
                $str = str_replace('\'', '\\\'', $str);
                return '\'' . $str . '\'';
            },
            $res
        );
        $res = MathCalc::calcRawString($res);

        return $res;
    }

    private function deobfuscateVarArrayChrFunc($str, $matches)
    {
        preg_match_all(
            '~[\'"]([^\'"]+)[\'"]\s?=>(?:((?:\s?\w{1,50}\(\d{1,5}\)\.?)+)|\s?(\$\w{1,50})),~msi',
            $str,
            $arrMatches,
            PREG_SET_ORDER
        );
        $vars = [];
        foreach ($arrMatches as $arrMatch) {
            $value = '';
            if (!empty($arrMatch[2])) {
                preg_match_all('~\d{1,5}~msi', $arrMatch[2], $numbers, PREG_SET_ORDER);
                foreach ($numbers as $number) {
                    $value .= $number[0] < 128 ? chr($number[0]) : '';
                }
            } else {
                $value = $arrMatch[3] ?? '';
            }
            $vars[$arrMatch[1]] = $value;
        }
        $str = preg_replace_callback(
            '~\\' . $matches[1] . '\[[\'"]([^\'"]+)[\'"]]([\[\](])~msi',
            static function ($m) use ($vars) {
                $value = $vars[$m[1]] ?? '';
                if ($m[2] === ']') {
                    $value = '\'' . $value . '\'';
                }
                return $value . $m[2];
            },
            $str
        );

        return $str;
    }

    private function deobfuscateFuncDictB64($str, $matches)
    {
        $matches[5] = Helpers::replaceVarsFromDictionary($matches[3], $matches[4], $matches[5]);
        $vars = Helpers::collectVars($matches[5], '\'');
        $code = stripcslashes($matches[8]) . ';';
        $code = Helpers::replaceVarsFromArray($vars, $code, true, false);
        $code = $this->deobfuscateEval($code, []);
        $code = $matches[2] . $code;
        return $code;
    }

    private function deobfuscateGzuncompressStrrev($str, $matches)
    {
        return gzuncompress(strrev($matches[4]));
    }

    private function deobfuscateEvalOpensslDecryptStr($str, $matches)
    {
        $code = openssl_decrypt(
            base64_decode($matches[7]),
            "AES-256-CBC",
            $matches[2],
            0,
            $matches[3]
        );
        $code = str_replace($matches[4], $matches[5], $code);

        return $code;
    }

    private function deobfuscateEvalDictionaryFuncVar($str, $matches)
    {
        $code = Helpers::concatStringsInContent(
            str_replace(
                '\\\'',
                '',
                Helpers::replaceVarsFromDictionary($matches[2], $matches[3], $matches[4])
            )
        );
        return substr($code, 1, -1). stripcslashes($matches[5]);
    }

    private function deobfuscateDictionaryStrReplace($str, $matches)
    {
        $dict = base64_decode(str_replace($matches[4], '', $matches[2]));
        $code = Helpers::replaceVarsFromDictionary($matches[5], $dict, $matches[6]);
        return $code;
    }

    private function deobfuscateManyBase64DecodeChr($str, $matches)
    {
        //sample manyBase64DecodeChr.php
        $code = MathCalc::calcRawString($matches[0]);

        $hangs = 10;
        while (stripos($code, 'base64_decode') !== false && $hangs--) {
            $code = Helpers::normalize($code);
            $code = Helpers::replaceBase64Decode($code);
            $vars = Helpers::collectVars($code, '\'', $vars, true);
            $code = Helpers::replaceVarsFromArray($vars, $code);
        }
        return $code;
    }

    private function deobfuscateManyB64CalcEval($str, $matches)
    {
        $code = MathCalc::calcRawString($str);
        $limit = 50;
        while (
            strpos($code, 'base64_decode(\'') !== false
            || strpos($code, 'base64_decode("') !== false
            || $limit--
        ) {
            $code = Helpers::replaceBase64Decode($code);
        }
        $code = str_replace(['{\'', '\'}'], '', $code);

        if (preg_match(
            '~(\$\w{1,50})\s?=\s?[\'"]([^\'"]+)[\'"];\s?((?:\$\w{1,50}\s?\.?=\s?(?:\$\w{1,50}\[\d{1,5}\]\s?\.?\s?)+;\s?)+)eval\((\$\w{1,50})\s?\([\'"]([^\'"]+)[\'"]\)\);~msi',
            $code,
            $found
        )) {
            $vars[$found[1]] = $found[2];
            $vars = Helpers::getVarsFromDictionaryDynamically($vars, $found[0]);
            $func = $vars[$found[4]];
            if (!Helpers::convertToSafeFunc($func)) {
                return $code;
            }
            $res = $func($found[5]);
            $res = Helpers::replaceVarsFromArray($vars, $res, true);

            if (preg_match(
                '~(\$\w{1,50})=[\'"]([^\'"]+)[\'"];eval\(\'\?>\'\.base64_decode\(strtr\(substr\(\1,(\$\w{1,50})\*2\),substr\(\1,\3,\3\),substr\(\1,0,\3\)\)\)\);~msi',
                $res,
                $m
            )) {
                if (isset($vars[$m[3]])) {
                    $num = (int)$vars[$m[3]];
                    return '?> ' . base64_decode(
                        strtr(
                            substr($m[2], $num * 2),
                            substr($m[2], $num, $num),
                            substr($m[2], 0, $num)
                        )
                    );
                }
            }
        }
        return $code;
    }

    private function deobfuscateDa7Q9RnPjm($str, $matches)
    {
        $dict = str_replace($matches[5], 'base64_decode', $matches[7]);
        $dict = Helpers::replaceBase64Decode($dict);
        $dict = explode('\',\'', substr($dict, 1, -1));
        foreach ($dict as $index => $item) {
            $matches[8] = str_replace($matches[6] . '[' . $index . ']', '\'' . $item . '\'', $matches[8]);
        }
        $matches[8] = Helpers::normalize($matches[8]);
        $tmp = explode(';', $matches[8]);
        $vars = [];
        foreach ($tmp as $var) {
            $parts = explode('=', $var);
            $vars[$parts[0]] = $parts[1];
        }
        $vars = array_filter($vars);
        foreach ($dict as $index => $item) {
            $matches[11] = str_replace($matches[6] . '[' . $index . ']', '\'' . $item . '\'', $matches[11]);
        }
        foreach ($vars as $var => $val) {
            $matches[11] = str_replace($var, $val, $matches[11]);
        }
        $code = substr(Helpers::normalize($matches[11]), 1, -1);
        $code = str_replace($matches[4], '\'' . $matches[2] . '\'', $code);
        return $code;
    }

    private function deobfuscateGarbageComments($str, $matches)
    {
        $res = preg_replace('~/\*[^/]*/?\*/~msi', '', $str);
        $res = str_replace('\'.\'', '', $res);
        return $res;
    }

    private function deobfuscateEvalVarsB64Concated($str, $matches)
    {
        $vars = [];
        $code = Helpers::concatStringsInContent($str);
        $vars = Helpers::collectFuncVars($code, $vars);
        $vars = Helpers::collectVars($code, '"', $vars);

        return Helpers::replaceVarsFromArray($vars, $matches[1]);
    }

    private function deobfuscateStrReplaceVarsCreateFunc($str, $matches)
    {
        $vars = [];
        $vars = Helpers::collectVars($str, '"', $vars);

        preg_match_all(
            '~(\$\w{1,50})\s?=\s?(?:str_replace|\$\w{1,50})\([\'"]([^\'"]+)[\'"],\s*[\'"]{2},\s*[\'"]([^\'"]+)[\'"]\);\s*~msi',
            $str, $replaces, PREG_SET_ORDER
        );

        foreach ($replaces as $replace) {
            $vars[$replace[1]] = str_replace($replace[2], '', $replace[3]);
        }

        $strToDecode = Helpers::concatStringsInContent(
            Helpers::replaceVarsFromArray($vars, $matches[4], false, true)
        );
        $funcs = Helpers::replaceVarsFromArray($vars, $matches[2]);
        if ($funcs === 'base64_decode(str_replace(') {
            return base64_decode(str_replace($matches[3], '', $strToDecode));
        }

        return $str;
    }

    private function deobfuscateLongVarConcatStrRot13B64Gz($str, $matches)
    {
        $vars = [];
        $vars = Helpers::collectVars($str, '"', $vars);

        $strToDecode = '';
        foreach ($vars as $var) {
            $strToDecode .= $var;
        }
        $res = $strToDecode;
        preg_match_all(
            '~str_rot13|base64_decode|gzinflate~msi',
            $str, $funcs, PREG_SET_ORDER
        );
        foreach ($funcs as $func) {
            if (Helpers::convertToSafeFunc($func[0])) {
                $res = @$func[0]($res);
            }
        }

        return $res;
    }

    private function deobfuscatecreateFuncDict($str, $matches)
    {
        $vars = Helpers::collectVars($str, '\'', $vars, true);
        $vars2 = [];
        foreach($vars as $k => $v) {
            if (strlen($v) === 1) {
                $vars2[$k] = $v;
            } else {
                $tmp = str_split($v);
                foreach ($tmp as $i => $char) {
                    $vars2[$k . '[' . $i . ']'] = $char;
                    $vars2[$k . '[\'' . $i . '\']'] = $char;
                }
            }
        }
        $res = Helpers::replaceVarsFromArray($vars2, $str, false, true);
        $res = Helpers::normalize($res);
        return $res;
    }

    private function deobfuscateCreateFuncArrayPop($str, $matches)
    {
        return substr($matches[4], 1, -1);
    }

    private function deobfuscateChrOrdB64FuncVars($str, $matches)
    {
        $vars = Helpers::collectFuncVars($matches[0]);
        $func1 = $vars[$matches[4]] ?? '';
        $func2 = $vars[$matches[5]] ?? '';
        if ($func1 === 'chr' && $func2 === 'ord') {
            $strDecode = base64_decode($matches[2]);
            $res = '';
            $len = strlen($matches[2]);
            for ($i = 0; $i < $len; $i++) {
                $res .= chr(ord($strDecode[$i]) ^ (int)$matches[6]);
            }

            return $res;
        }

        return $str;
    }

    private function deobfuscateSimpleEvalFunctions($str, $matches)
    {
        $func1 = trim(Helpers::normalize($matches[2]), "'\"");
        $func2 = trim(Helpers::normalize($matches[4]), "'\"");
        $data = $matches[6];
        if (Helpers::isSafeFunc($func1) && Helpers::isSafeFunc($func2)) {
            return $func1($func2($data));
        }
        return $str;
    }

    private function deobfuscateClassArrayDictFunc($str, $matches)
    {
        $arrayDict = [];
        preg_match_all(
            '~[\'"]([^\'"]+)[\'"]\s?=>\s?((?:\s?[\'"][^\'"]*[\'"]\s?\.?)+)[,)]~msi',
            $matches[12],
            $dicts,
            PREG_SET_ORDER
        );
        foreach ($dicts as $dict) {
            $arrayDict[$dict[1]] = $dict[2] !== '' ? Helpers::concatStr($dict[2]) : '';
        }

        $res = $matches[13];

        $res = preg_replace_callback(
            '~' . $matches[1] . '::' . $matches[3] . '\(([^,]+),([^)]+)\)~msi',
            static function ($m) use ($arrayDict) {
                $arg1 = Helpers::concatStr($m[1]);
                $arg2 = Helpers::concatStr($m[2]);
                $n = strlen($arg2);

                $decoded  = base64_decode($arrayDict[$arg1]);

                for ($i = 0, $len = strlen($decoded); $i !== $len; ++$i) {
                    $decoded[$i] = chr(ord($decoded[$i]) ^ ord($arg2[$i % $n]));
                }

                return '\'' . $decoded . '\'';
            },
            $res
        );

        return $res;
    }

    private function deobfuscateConcatVarsIterDict($str, $matches)
    {
        $res = '';
        $strEncoded = '';
        $dict1 = stripcslashes($matches[5]);
        $dict2 = stripcslashes($matches[7]);

        preg_match_all('~"([^"]+)"~msi', $matches[3], $strings, PREG_SET_ORDER);
        foreach ($strings as $string) {
            $strEncoded .= stripcslashes($string[1]);
        }
        foreach (str_split($strEncoded) as $c) {
            $res .= (strpos($dict2, $c) === false) ? $c : $dict1[strpos($dict2, $c)];
        }
        $res = "?> $res";

        return $res;
    }

    private function deobfuscateFuncB64TwoArgs($str, $matches)
    {
        $arg1 = base64_decode($matches[7]);
        $arg2 = $matches[8];

        $res = "";
        for ($i = 0; $i < strlen($arg1);) {
            for ($j = 0; $j < strlen($arg2); $j++, $i++) {
                $res .= $arg1[$i] ^ $arg2[$j];
            }
        }

        return $res;
    }

    private function deobfuscateStrReplaceB64($str, $matches)
    {
        $vars = Helpers::collectFuncVars($str, $vars, true, true);
        $code = Helpers::replaceBase64Decode($str);
        Helpers::collectFuncVars($code, $vars, false, true);
        $code = Helpers::replaceVarsFromArray($vars, $code, false, false);
        $code = Helpers::normalize($code);
        return $code;
    }

    private function deobfuscateCreateFuncStrReplace($str, $matches)
    {
       return str_replace($matches[2], '', $matches[3]);
    }

    private function deobfuscateCreateFuncB64StrRotChr($str, $matches)
    {
        $code = MathCalc::calcRawString($str);
        $code = preg_replace_callback('~str_rot13\(\'([^\']+)\'\)~msi', function ($m) {
            return '\'' . str_rot13($m[1]) . '\'';
        }, $code);
        $code = Helpers::replaceBase64Decode($code);
        $code = Helpers::normalize($code);
        $code = Helpers::replaceBase64Decode($code);
        if (preg_match('~(\$\w+)=create_function\(\'(\$\w+)\',\'eval\(\2\);\'\);\1\(\'([^\']+)\'\);~msi', $code, $m)) {
            $code = $m[3];
        }
        return $code;
    }

    private function deobfuscateCreateFuncGzuncompressB64($str, $matches)
    {
         $code = gzuncompress(base64_decode(substr($matches[5], 1, -1)));
         if (strpos($code, '1;}') === 0) {
             $code = substr($code, 3);
         }
         if (substr_count($code, 'goto ') > 100) {
             $code = Helpers::unwrapGoto($code);
         }
         return $code;
    }

    private function deobfuscateGlobalsSlashed($str, $matches)
    {
        return stripcslashes($str);
    }

    private function deobfuscateB64VarsFuncEval($str, $matches)
    {
        $vars = [];
        $vars = Helpers::collectFuncVars($matches[3]);
        $strToDecode = $matches[2];
        $func1 = $vars[$matches[4]] ?? null;
        $func2 = $vars[$matches[5]] ?? null;
        if ($func1 !== null && $func2 !== null
            && Helpers::convertToSafeFunc($func1) && Helpers::convertToSafeFunc($func2)) {
            $strToDecode = Helpers::executeWrapper($func1, [
                Helpers::executeWrapper($func2, [$strToDecode])
            ]);
        }

        $len = strlen($strToDecode);
        $res = '';
        $func1 = $vars[$matches[10]] ?? null;
        $func2 = $vars[$matches[11]] ?? null;
        if ($func1 === 'chr' && $func2 === 'ord') {
            for ($i = 0; $i < $len; $i++) {
                $res .= $func1($func2($strToDecode[$i]) ^ (int)$matches[12]);
            }
        }

        return $res;
    }

    private function deobfuscateB64FuncEval($str, $matches)
    {
        $key    = (strlen($matches[6]) > strlen($matches[8]))
            ? $matches[8]
            : $matches[6];
        $data   = (strlen($matches[6]) > strlen($matches[8]))
            ? $matches[6]
            : (
                $matches[2] ? str_replace($matches[5], $matches[8], $matches[2]) : $matches[8]
            );
        $matches[4] = str_replace(' ', '', $matches[4]);
        if (isset($matches[3]) && $matches[3] !== '') {
            $key = base64_encode($key);
        }

        $res = Helpers::xorWithKey(base64_decode($data), $key);
        if (isset($matches[4]) && $matches[4] === 'base64_decode(') {
            $res = base64_decode($res);
        }

        if (isset($matches[4]) && $matches[4] === 'gzuncompress(base64_decode(') {
            $res = gzuncompress(base64_decode($res));
        }

        return $res;
    }

    private function deobfuscateNullEcho($str, $matches)
    {
        $vars = [];
        Helpers::collectConcatedVars($str, '\'', $vars, true);
        $str = Helpers::replaceVarsFromArray($vars, $str, true);
        return $str;
    }

    private function deobfuscateEvalB64Chunks($str, $matches)
    {
        $str = Helpers::replaceBase64Decode($str);
        if (preg_match('~eval\(\'function\s*(\w+)\((\$\w+),(\$\w+)\)\{(\$\w+)=array\(((?:\d+\,?)+)\);if\(\3==(\d+)\)\s*\{\$\w+=substr\(\2,\4\[\d+\]\+\4\[\d+\],\4\[\d+\]\);\}elseif\(\3==(\d+)\)\s*\{\$\w+=substr\(\2,\4\[\d+\],\4\[\d+\]\);\}elseif\(\3==(\d+)\)\{\$\w+=trim\(substr\(\2,\4\[\d+\]\+\4\[\d+\]\+\4\[\d+\]\)\);}return\s*\$\w+;\}\'\);~msi', $str, $m)) {
            $offsets = explode(',', $m[5]);
            $offsets[0] = 1;
            $value = '';
            $str = preg_replace_callback('~' . $m[1] . '\(\$\w+\[\d+\],(\d+)\)~msi', function ($m2) use ($m, $matches, $offsets) {
                if ($m2[1] === $m[6]) {
                    $value = substr($matches[4], (int)$offsets[0] + (int)$offsets[1], $offsets[2]);
                } else if ($m2[1] === $m[7]) {
                    $value = substr($matches[4], (int)$offsets[0], (int)$offsets[1]);
                } else if ($m2[1] === $m[8]) {
                    $value = trim(substr($matches[4], (int)$offsets[0] + (int)$offsets[1] + (int)$offsets[2]));
                }
                return '\'' . $value . '\'';
            }, $str);
        }
        $str = Helpers::replaceBase64Decode($str);
        $code = '';
        if (preg_match('~eval\(\'if\(\!function_exists\("([^"]+)"\)\)\{function\s*\1\((\$\w+),(\$\w+),(\$\w+)\)\s*\{(\$\w+)=implode\(\4\);\5=preg_replace\("[^"]+","",\5\);if[^{]+{return\(*((?:\w+\()+)\2\)\)\);}else{die\("[^"]+"\);}}}\'\);~msi', $str, $m)) {
            preg_match('~eval\(' . $m[1] . '\(\'([^\']+)\',\'\w{32}\',\$\w+\)\);~msi', $str, $m2);
            $code = 'eval(' . $m[6] . '\'' . $m2[1] . '\'' . str_repeat(')', substr_count($m[6], '(')) . ');';
        }
        $code = $this->deobfuscateEval($code, []);
        return $code;
    }

    private function deobfuscateObStartFlushVar($str, $matches)
    {
        preg_match_all('~\d{1,5}~msi', $matches[4], $tcNums, PREG_SET_ORDER);
        preg_match_all('~\d{1,5}~msi', $matches[6], $trNums, PREG_SET_ORDER);

        $res = '';
        foreach ($trNums as $tval) {
            $res .= chr((int)$tcNums[(int)$tval[0]][0] + 32);
        }

        return '?> ' . $res;
    }

    private function deobfuscateArrayReplacing($str, $matches)
    {
        $dictionaryKey = $matches[1];
        $dictionaryVal = $matches[2];

        $result = Helpers::replaceVarsFromDictionary($dictionaryKey, $dictionaryVal, $str);
        preg_match_all('~\$(\w{1,40})\s?=\s?\'(\w+)\';~', $result, $array, PREG_SET_ORDER);
        foreach($array as &$value) {
            $re = '~\$\{"GLOBALS"}\["'.$value[1].'"\]~';
            $result = preg_replace($re, $value[2], $result);
        }
        return $result;
    }

    private function deobfuscateVarConcatedReplaceEval($str, $matches)
    {
        $tempStr = $matches[1];
        $vars = [];
        $vars = Helpers::collectVars($tempStr, '"', $vars, true);
        $tempStr = Helpers::replaceVarsFromArray($vars, $tempStr, false, true);
        $tempStr = Helpers::concatStringsInContent($tempStr);
        $vars = Helpers::collectVars($tempStr, "'", $vars);
        $result = str_replace($matches[1],'', $str);
        $result = Helpers::replaceVarsFromArray($vars, $result, false, true);

        return $this->unwrapFuncs($result);
    }

    private function deobfuscateVarsConcatedFuncStrReplaceEval($str, $matches)
    {
        $content = $str;
        $vars = [$matches[1] => ''];
        $vars = Helpers::collectVars($content, '"', $vars, true);
        $vars = Helpers::getVarsFromDictionaryDynamically($vars, $content);
        $result = Helpers::replaceVarsFromArray($vars, $matches[7], true, false) .
            '"' .
            str_replace($matches[8], $matches[6], $vars[$matches[1]]) . '"));';

        return $this->unwrapFuncs($result);
    }

    private function deobfuscateB64GlobalVarsReplace($str, $matches)
    {
        $vars = [];
        $varsStr = Helpers::replaceBase64Decode($matches[1], '"');
        $vars = Helpers::collectVars($varsStr, '"',$vars);
        $res = str_replace($matches[1], '', $str);

        return Helpers::replaceVarsFromArray($vars, $res, false, true);
    }

    private function deobfuscateB64putContents($str, $matches)
    {
        return base64_decode($matches[1]);
    }

    private function deobfuscateB64WSO($str, $matches)
    {
        $code = Helpers::replaceBase64Decode($str);
        $vars = [];
        Helpers::collectConcatedVars($code, '\"', $vars, true);
        $code = Helpers::replaceVarsFromArray($vars, $code, true, true);
        return $code;
    }

    private function deobfuscateEvalFuncDict($str, $matches)
    {
        $res = Helpers::replaceVarsFromDictionary($matches[2], $matches[3], $matches[5]);
        $res = preg_replace('~\'\s*\.\s*\'~', '', substr(trim($res), 1, -1));
        $res .= $matches[6] . '\'' . str_repeat(')', substr_count($res, '(')) . ';';
        return $res;
    }

    private function deobfuscateExplodeGzinflateSubstr($str, $matches)
    {
        $matches[4] = stripcslashes($matches[4]);
        $strings = explode($matches[3], gzinflate(substr($matches[4], hexdec($matches[5]), (int)$matches[6])));
        $res = str_replace($matches[1], '', $matches[0]);
        $res = preg_replace_callback('~\$GLOBALS[\{\[].{1,3}[\}\]][\[\{]([0-9a-fx]+)[\]\}]~msi', function($m) use ($strings) {
            return '\'' . $strings[hexdec($m[1])] . '\'';
        }, $res);
        return $res;
    }

    private function deobfuscateUrldecodeEval($str, $matches)
    {
        $dict = strpos($matches[1], 'urldecode') ? urldecode($matches[3]) : stripcslashes($matches[3]);
        $tmp = Helpers::replaceVarsFromDictionary($matches[2], $dict, $matches[4]);
        $data = [];
        Helpers::collectConcatedVars($tmp, '\'', $data);
        foreach($data as $var => $value) {
            $tmp = Helpers::replaceVarsFromDictionary($var, $value, $tmp);
        }
        Helpers::collectConcatedVars($tmp, '\'', $data);
        $res = '';
        foreach ($data as $var => $value) {
            $res .= $var . '=' . '\'' . $value . '\';';
        }
        $res .= str_replace([$matches[1], $matches[4]], '', $str);
        $res = Helpers::replaceVarsFromArray($data, $res, true, false);
        return $res;
    }

    private function deobfuscateStrtrEval($str, $matches)
    {
        $vars = [];
        Helpers::collectVars($str, '\'', $vars);
        $res = Helpers::replaceVarsFromArray($vars, $matches[4], false, false);
        return $res;
    }

    private function deobfuscateEvalStrtr($str, $matches)
    {
        $res = '?> ';
        $offset = (int) $matches[2];
        $res .= base64_decode(strtr(substr($matches[1], $offset*2), substr($matches[1], $offset, $offset), substr($matches[1], 0, $offset)));
        return $res;
    }

    private function deobfuscateCreateFuncHex2Bin($str, $matches)
    {
        if (isset($matches[1]) && $matches[1] !== '') {
            $str = str_replace($matches[1], '', $str);
            $str = str_replace($matches[2] . '(', 'hex2bin(', $str);
        }
        $res = Helpers::replaceHex2Bin($str);
        $vars = [];
        Helpers::collectVars($res, '\'', $vars, true);
        $res = Helpers::replaceVarsFromArray($vars, $res, true);
        return $res;
    }

    private function deobfuscateCreateFuncB64($str, $matches)
    {
        return base64_decode($matches[2]);
    }

    private function deobfuscateChrXor($str, $matches)
    {
        $data = explode($matches[4], $matches[5]);
        $res = '';
        foreach ($data as $chr) {
            if ($chr === '') {
                continue;
            }
            $res .= chr($chr ^ (int) $matches[2]);
        }
        return $res;
    }

    private function deobfuscateManyB64WithVarNorm($str, $matches)
    {
        $res = Helpers::replaceBase64Decode($str, '"');
        if (strpos($res, '${$') !== false) {
            $res = Helpers::postProcess($res);
        }
        return $res;
    }

    private function deobfuscateIncludeFilePutContents($str, $matches)
    {
        return 'eval(' . str_replace($matches[1] . ')', '\'' . $matches[2] . '\')', $matches[3]) . ');';
    }

    private function deobfuscateGzinflateBase64Decode($str, $matches)
    {
        $result = gzinflate(@base64_decode($matches[3]));
        for ($i = 0; $i < strlen($result); $i++) {
            $result[$i] = chr(ord($result[$i]) - 1);
        }
        return $result;
    }

    private function deobfuscateByteCodeData($str, $matches)
    {
        $index = 0;
        $code = '';

        $patterns = [
            'DECRYPT'       => 'function\s*([^\(]+)\((\$[^,]+),&(\$[^,]+),&(\$[^,]+),&(\$[^,]+),(\$[^)]+)\)\{\$[^=]+=\s*\'\'\s*;\4\[\+\+\5\]=\s*\'\'\s*;\$[^=]+=\2\[\3\+\([^\)]+[^]]+\];if\(\![^)]+\)\3\+\+;while\(is_numeric\(\2\[\+\+\3\]\)\)\{\$[^\.]+\.=\2\[\3\];if.*?if\([^\)]+\)\{\$[^=]+=\(int\)\$[^;]+;for\(\$[^;]+;[^)]+\){\4\[\5\]\.=\2\[\+\+\3\]\^\$GLOBALS\[\'[^\']+\'\]\((\([^\)]+\))\);',
            'EVAL_REPLACE'  => 'case\s*\'(.)\'\s*:\$[^=]+=\$GLOBALS\[\'[^\']+\'\]\(\$GLOBALS\[\'[^\']+\']\(\d+\)\.\$GLOBALS\[\'[^\']+\']\(\d+\),[^;]+;\$[^=]+=\$GLOBALS\[\'[^\']+\'\]\(\s*\'return\s*\'\s*,\s*\'return\s*\'\s*\.\s*[^\)]+\);eval\(\$',
            'EVAL'          => 'case\s*\'(.)\'\s*:eval\(\$[^\[]+\[\$[^\]]+\]\);break\s*1;',
            'GOTO'          => 'function\s*([^\(]+)\((\$[^,]+),&(\$[^,]+),&(\$[^,]+),&(\$[^,]+),(\$[^)]+)\)\{\$[^=]+=\s*\'\'\s*;while\(is_numeric\(\2\[\+\+\3\]\)\)\{\$[^=]+\.=\2\[\3\];.*?\3=\-\-\$[^;]+;',
            'VAR'           => 'case\s*\'(.)\'\s*:switch\(\$[^\)]+\)\{case\s*\'_SERVER\'\s*:case',
            'ASSIGN'        => 'function\s*([^\(]+)\((\$[^,]+),&(\$[^,]+),&(\$[^,]+),&(\$[^,]+),(\$[^)]+)\)\{.*?\4\[\5\]=\4\[\5\-\([^;]+;',
            'END_STMT'      => 'function\s*([^\(]+)\((\$[^,]+),&(\$[^,]+),&(\$[^,]+),&(\$[^,]+),(\$[^)]+)\)\{\4=array\(\);\5=\-[^;]+;',
            'ARRAY'         => 'function\s*([^\(]+)\((\$[^,]+),&(\$[^,]+),&(\$[^,]+),&(\$[^,]+),(\$[^)]+)\)\{\4\[\+\+\5\]=array\(\);',
            'CALL_FUNC'     => 'case\s*\'(.)\'\s*:\$[^;]+;\$[^=]+=\$[^;]+;\$[^=]+=array\(\);for\(\$[^}]+}(?:\$[^;]+;){2}\s*if\(is_string\(\$[^\)]+\)&&strcasecmp\(\$[^,]+,\s*\'call_user_func_array\'\s*\)\)',
            'INVERT'        => 'function\s*([^\(]+)\((\$[^,]+),&(\$[^,]+),&(\$[^,]+),&(\$[^,]+),(\$[^)]+)\)\{\4\[\+\+\5\]=\!\4\[\5\-',
            'BOOL'          => 'function\s*([^\(]+)\((\$[^,]+),&(\$[^,]+),&(\$[^,]+),&(\$[^,]+),(\$[^)]+)\)\{\4\[\+\+\5\]=\(bool\)\4\[\5\-',
            'IF_GOTO'       => 'function\s*([^\(]+)\((\$[^,]+),&(\$[^,]+),&(\$[^,]+),&(\$[^,]+),(\$[^)]+)\)\{\$[^=]+=\s*\'\'\s*;while\(is_numeric\(\2\[\+\+\3\]\)\)\{\$[^=]+\.=\2\[\3\];.*?if\(\!\4\[\5\]\)\{\3\+=\(int\)\$[^;]+;',
            'GET_CONST'     => 'function\s*([^\(]+)\((\$[^,]+),&(\$[^,]+),&(\$[^,]+),&(\$[^,]+),(\$[^)]+)\)\{if\(strcasecmp\(\4\[\5\],\s*\'__file__\'\s*\)==\(',
            'APPEND'        => 'function\s*([^\(]+)\((\$[^,]+),&(\$[^,]+),&(\$[^,]+),&(\$[^,]+),(\$[^)]+)\)\{\4\[\5\]=\(array\)\4\[\5\];\4\[\5\]=\&\4\[\5\]\[\];',
            'RET'           => 'function\s*([^\(]+)\((\$[^,]+),&(\$[^,]+),&(\$[^,]+),&(\$[^,]+),(\$[^)]+)\)\{\3=\-[^;]+;if\(\$[^<]+<\(',
            'RETURN'        => 'function\s*([^\(]+)\((\$[^,]+),&(\$[^,]+),&(\$[^,]+),&(\$[^,]+),(\$[^)]+)\)\{\3=\-\((?:[^;]+;){2}\}\}',
            'MATH'          => 'function\s*([^\(]+)\((\$[^,]+),&(\$[^,]+),&(\$[^,]+),&(\$[^,]+),(\$[^)]+)\)\{.*?eval\(\s*\'\4\[\5\]=\4\[\5\-2\]\'\s*\.\s*\4\[\5\]\s*\.\s*\'\4\[\5\-1\];\'\s*\);',
            'FETCH_INDEX'   => 'function\s*([^\(]+)\((\$[^,]+),&(\$[^,]+),&(\$[^,]+),&(\$[^,]+),(\$[^)]+)\)\{.*?gettype\(\4\[\5\]\);if\(',
        ];

        $opcodes = [];
        $xor = 0;
        $data = '';
        $aliases = [];
        $str = preg_replace_callback('~if\s*\(\!defined\("([^"]+)"\)\)\s*define\("\1",\s*"([^"]+)"\);~msi', function($m) use (&$aliases) {
            $aliases[$m[1]] = $m[2];
            return '';
        }, $str);
        $vars = [];
        $str = preg_replace_callback('~\$GLOBALS\[([^]]+)\]=explode\("([^"]+)",\s*"([^"]+)"\);~msi', function($m) use (&$vars, $aliases) {
            $vars[$aliases[$m[1]]] = explode($m[2], $m[3]);
            return '';
        }, $str);
        if (preg_match('~\$[^=]+=\s*pack\(\$GLOBALS\[([^]]+)\]\[([a-fx\d]+)\],\$GLOBALS\[([^]]+)\]\[([a-fx\d]+)\]\)\s*;if\(@\$GLOBALS\[[^]]+\]\[[^]]+\]\[pack\(\$GLOBALS\[[^]]+\]\[[a-fx\d]+\],\$GLOBALS\[[^]]+\]\[[a-fx\d]+\]\)\]==pack\(\$GLOBALS\[[^]]+\]\[[a-fx\d]+\],\$GLOBALS\[[^]]+\]\[[a-fx\d]+\]\)\)\$App_Codes=\$GLOBALS~msi', $str, $m)) {
            $m[2] = Helpers::NormalizeInt($m[2]);
            $m[4] = Helpers::NormalizeInt($m[4]);
            $data = pack($vars[$aliases[$m[1]]][$m[2]], $vars[$aliases[$m[3]]][$m[4]]);
        }

        if (preg_match('~\$[^=]+=(\s*(?:pack\(\$GLOBALS\[([^]]+)\]\[([a-fx\d]+)\],\$GLOBALS\[([^]]+)\]\[([a-fx\d]+)\]\)\s*\.\s*)+pack\(\$GLOBALS\[([^]]+)\]\[([a-fx\d]+)\],\$GLOBALS\[([^]]+)\]\[([a-fx\d]+)\]\)\s*);\$GLOBALS\[pack\(\$GLOBALS\[([^]]+)\]\[([a-fx\d]+)\],\$GLOBALS\[([^]]+)\]\[([a-fx\d]+)\]\)\]\(__FILE__\);~msi', $str, $m)) {
            $m[1] = preg_replace_callback('~pack\(\$GLOBALS\[([^]]+)\]\[([a-fx\d]+)\],\$GLOBALS\[([^]]+)\]\[([a-fx\d]+)\]\)~msi', function($m) use ($vars, $aliases) {
                $m[2] = Helpers::NormalizeInt($m[2]);
                $m[4] = Helpers::NormalizeInt($m[4]);
                return '\'' . pack($vars[$aliases[$m[1]]][$m[2]], $vars[$aliases[$m[3]]][$m[4]]) . '\'';
            }, $m[1]);
            $data = preg_replace('~\'\s*\.\s*\'~msi', '', substr(trim($m[1]), 1, -1));
        }
        $str = preg_replace_callback('~pack\(\$GLOBALS\[([^]]+)\]\[([a-fx\d]+)\],\$GLOBALS\[([^]]+)\]\[([a-fx\d]+)\]\)~msi', function($m) use ($vars, $aliases) {
            $m[2] = Helpers::NormalizeInt($m[2]);
            $m[4] = Helpers::NormalizeInt($m[4]);
            return '\'' . pack($vars[$aliases[$m[1]]][$m[2]], $vars[$aliases[$m[3]]][$m[4]]) . '\'';
        }, $str);
        if (preg_match('~if\(!defined\(\'([^\']+)\'\)\)\s*define\(\'\1\',\s*ord\((\d+)\)\);~msi', $str, $m)) {
            $int[$m[1]] = ord(Helpers::NormalizeInt($m[2]));
        }
        if (!$data) {
            return '';
        }

        foreach ($patterns as $opcode => $pattern) {
            if (preg_match('~' . $pattern . '~msi', $str, $m)) {
                if (strlen($m[1]) > 1) {
                    $m[1] = substr($m[1], -1, 1);
                }
                $opcodes[$opcode] = $m[1];
                if ($opcode === 'DECRYPT') {
                    $m[7] = str_replace(array_keys($int), array_values($int), $m[7]);
                    $m[7] = str_replace(['E_CORE_WARNING', 'E_RECOVERABLE_ERROR'], [E_CORE_WARNING, E_RECOVERABLE_ERROR], $m[7]);
                    $m[7] = MathCalc::calcRawString($m[7]);
                    $xor = (int)substr($m[7], 1, -1);
                }
            }
        }

        $arrays = [];
        $code = Helpers::reverseByteCode($data, $opcodes, $xor);
        $code = preg_replace_callback('~(\$\w+)\s*=\s*explode\(\'([^,]+)\',\s*\'([^\)]+)\'\);\s*\$GLOBALS\[\'([^\']+)\'\]\s*=\s*\1;\s*(?:unset\(\1\);)?~msi', function($m) use (&$arrays) {
            $arrays[$m[4]] = explode($m[2], $m[3]);
            return '';
        }, $code);
        $code = preg_replace_callback('~pack\(\$GLOBALS\[\'([^\']+)\'\]\[\'(\d+)\'\],\s*\$GLOBALS\[\'([^\']+)\'\]\[\'(\d+)\'\]\)~msi', function($m) use (&$arrays) {
            if (isset($arrays[$m[1]]) && isset($arrays[$m[3]])) {
                return '\'' . pack($arrays[$m[1]][(int)$m[2]], $arrays[$m[3]][(int)$m[4]]) . '\'';
            }
            return $m[0];
        }, $code);
        $code = preg_replace_callback('~(\$\w+)\s*=\s*\'([^\']+)\';\s*\$GLOBALS\[\'([^\']+)\'\]\s*=\s*\1;\s*(?:unset\(\1\);)?~msi', function($m) use (&$vars) {
            $vars[$m[3]] = $m[2];
            return '';
        }, $code);
        foreach ($vars as $key => $val) {
            $code = str_replace('$GLOBALS[\'' . $key . '\']', $val, $code);
        }
        $code = preg_replace_callback('~function\s*\w+\([^\)]+\)\s*\{\$__xend_args=array\([^)]+\);(return\s*[^}]+)\}\s*goto\s*(l_\d+)\s*\s*\s*(?:(.*)?\2:)~msi', function($m) {
            $m[0] = str_replace($m[3], '', $m[0]);
            $m[0] = str_replace($m[1], "\n" . $m[3] . "\n", $m[0]);
            return $m[0];
        }, $code);

        $code = preg_replace_callback('~(?:(\$\w+)\s*=\s*(-?\d+|E_CORE_WARNING|E_RECOVERABLE_ERROR|\$\w+)\s*[\+\-\*\/]+\s*(-?\d+|E_CORE_WARNING|E_RECOVERABLE_ERROR|\$\w+);\s*)+~msi', function($m) {
            $vars = [];
            $expressions = explode(';', $m[0]);
            foreach ($expressions as $expr) {
                if ($expr === '') {
                    continue;
                }
                $tmp = explode(' = ', $expr);
                $tmp[1] = str_replace(['E_CORE_WARNING', 'E_RECOVERABLE_ERROR'], [E_CORE_WARNING, E_RECOVERABLE_ERROR], $tmp[1]);
                $tmp[1] = str_replace(array_keys($vars), array_values($vars), $tmp[1]);
                $vars[trim($tmp[0])] = trim(MathCalc::calcRawString(' ' . $tmp[1]));
            }
            return $m[1] . ' = ' . $vars[$m[1]] . ';' . "\n";
        }, $code);

        $code = preg_replace_callback('~((\$\w+)\s*=\s*\'\d+\';)\s*(l_\d+):\s*(\$\w+)\s*=\s*([^;]+;)\s*if\s*\(\!\4\)\s*goto\s*(l_\d+);\s*goto\s*(l_\d+)\s*\6:\s*goto\s*(l_\d+)\s*\7:\s*(.*?)(\2\s*=\s*[^;]+);\s*goto\s*\3\s*goto\s*\8\s*\8:~msi', function($m) {
            return 'for (' . $m[1] . ' ' . $m[5] . ' ' . $m[10] . ') {' . "\n" . $m[9] . '}';
        }, $code);

        $code = preg_replace_callback('~(l_\d+):\s*(?:(\$\w+)\s*=\s*([^;]+);\s*)+\s*if\s*\(\!\2\)\s*goto\s*(l_\d+);\s*goto\s*(l_\d+)\s*\4:\s*goto\s*(l_\d+)\s*\5:\s*((?:[^\n]+;\n)+)\s*goto\s*\1\s*goto\s*\6\s*\6:\s*goto\s*(l_\d+)\s*\8:~msi', function($m) {
            return $m[1] . ': ' . "\n";
        }, $code);
        $code = preg_replace_callback('~(l_\d+):\s*(?:(\$\w+)\s*=\s*([^;]+);\s*)+\s*if\s*\(\!\2\)\s*goto\s*(l_\d+);\s*goto\s*(l_\d+)\s*\4:\s*goto\s*(l_\d+)\s*\5:\s*((?:[^\n]+;\n)+)\s*goto\s*\1\s*goto\s*\6\s*\6:(?:\s*goto\s*(l_\d+)\s*\8:)?~msi', function($m) {
            return '';
        }, $code);
        $code = preg_replace_callback('~(l_\d+):\s*if\s*\(\![^)]+\)+\s*goto\s*(l_\d+);\s*goto\s*(l_\d+)\s*\2:\s*goto\s*(l_\d+)\s*\3:\s*([^\n]+;\n)\s*goto\s*\1\s*goto\s*\4\s*\4:\s*~msi', function($m) {
            return '';
        }, $code);
        $code = preg_replace_callback('~(l_\d+):\s*(?:(\$\w+)\s*=\s*([^;]+);\s*)+\s*if\s*\(\!\2\)\s*goto\s*(l_\d+);\s*goto\s*(l_\d+)\s*\4:\s*goto\s*(l_\d+)\s*\5:\s*goto\s*(l_\d+)\s*goto\s*\6\s*\6:\s*goto\s*(l_\d+)\s*\7:\s*goto\s*(l_\d+)\s*goto\s*\8\s*\8:\s*goto\s*(l_\d+)\s*\9:\s*return;\s*goto\s*\1\s*goto\s*\10\s*\10:~msi', function($m) {
            return '';
        }, $code);
        $code = preg_replace_callback('~(\$\w+)\s*=\s*([^;]+);\s*if\s*\(\!\$\w+\)\s*goto\s*(l_\d+);\s*goto\s*(l_\d+)\s*\3:\s*goto\s*(l_\d+)\s*\4:\s*(.*?)\5:\s*~msi', function($m) {
            $m[6] = preg_replace('~\s*goto\s*l_\d+\s*$~msi', '', $m[6]);
            $m[0] = 'if(' . $m[2] . ') {' . "\n" . $m[6] . "\n" . '}' . "\n";
            return $m[0];
        }, $code);
        $code = preg_replace_callback('~(?:(\$\w+)\s*=\s*([^;]+);\s*)+if\s*\(\!\$\w+\)\s*goto\s*(l_\d+);\s*\3:\s*l_\d+:\s*((?:[^\n]+;\n)+)l_\d+:(\s*((?:[^\n!]+;\n)+)l_\d+:)?~msi', function($m) {
            if (isset($m[5]) && $m[5] !== '') {
                return 'if (' . $m[2] . ') {' . "\n" . $m[4] . '} else {' . "\n" . $m[5] . '}';
            } else {
                return 'if (' . $m[2] . ') {' . "\n" . $m[4] . '}';
            }
        }, $code);
        $code = preg_replace_callback('~(goto\s*l_\d+)\n~msi', function($m) {
            return $m[1] . ';' . "\n";
        }, $code);
        return $code;
    }

    private function deobfuscateOESNS_cms($str, $matches)
    {
        $strings = [];
        $int = [];
        $str = preg_replace_callback('~if\(!defined\("(\w+)"\)\)\s*define\("\1","\w+"\);\$GLOBALS\[\1\]=explode\("([^"]+)",\s*"([^"]+)"\);~msi', function($m) use (&$strings) {
            $strings[$m[1]] = explode($m[2], $m[3]);
            return '';
        }, $str);
        $str = preg_replace_callback('~pack\(\$GLOBALS\[(\w+)\][\[\{]([0-9a-fx]+)[\]\}],\$GLOBALS\[(\w+)\][\[\{]([0-9a-fx]+)[\]\}]\)~msi', function($m) use ($strings) {
            return '\'' . addcslashes(pack($strings[$m[1]][Helpers::NormalizeInt($m[2])], $strings[$m[3]][Helpers::NormalizeInt($m[4])]), '\\\'') . '\'';
        }, $str);
        $str = preg_replace_callback('~if\(!defined\(\'(\w+)\'\)\)\s*define\(\'\1\',\'\w+\'\);\s*\$GLOBALS\[\1\]=explode\(\'([^\']+)\',\'([^\']+)\'\);~msi', function($m) use (&$strings) {
            $strings[$m[1]] = explode($m[2], $m[3]);
            return '';
        }, $str);
        if (preg_match('~if\(!defined\(\'(\w+)\'\)\)\s*define\(\'\1\',\s*ord\((\d+)\)\);~msi', $str, $m)) {
            $int[$m[1]] = ord(Helpers::NormalizeInt($m[2]));
        }

        $matches[4] = stripcslashes($matches[4]);
        $code = base64_decode($matches[5]);
        $code = preg_replace_callback('~\((?:(?:\w+|\d+)[\*+-/])+(?:\w+|\d+)\)~msi', function($m) use ($int) {
            $m[0] = str_replace(array_keys($int), array_values($int), $m[0]);
            return MathCalc::calcRawString($m[0]);
        }, $code);
        $code = preg_replace_callback('~if\(!defined\("(\w+)"\)\)\s*define\("\1","\w+"\);\$GLOBALS\[\1\]=explode\("([^"]+)",\s*"([^"]+)"\);~msi', function($m) use (&$strings) {
            $strings[$m[1]] = explode($m[2], $m[3]);
            return '';
        }, $code);
        $code = preg_replace_callback('~pack\(\$GLOBALS\[(\w+)\][\[\{]([0-9a-fx]+)[\]\}],\$GLOBALS\[(\w+)\][\[\{]([0-9a-fx]+)[\]\}]\)~msi', function($m) use ($strings) {
            return '\'' . addcslashes(stripcslashes(pack($strings[$m[1]][Helpers::NormalizeInt($m[2])], $strings[$m[3]][Helpers::NormalizeInt($m[4])])), '\\\'') . '\'';
        }, $code);
        $code = preg_replace_callback('~\$GLOBALS\[(\w+)\][\[\{]([0-9a-fx]+)[\]\}](\()?~msi', function($m) use ($strings) {
            if (isset($m[3]) && $m[3] !== '' ) {
                return $strings[$m[1]][Helpers::NormalizeInt($m[2])] . '(';
            }
            return '\'' . addcslashes(stripcslashes($strings[$m[1]][Helpers::NormalizeInt($m[2])]), '\\\'') . '\'';
        }, $code);
        return $code;
    }

    private function deobfuscateFilePutContentsB64Var($str, $matches)
    {
        return base64_decode($matches[2]);
    }

    private function deobfuscateStrRot13PackFuncs($str, $matches)
    {
        return pack('H*', str_rot13($matches[3]));
    }

    private function deobfuscateDefinedGlobalsEval($str, $matches)
    {
        $dictionary = explode($matches[2], $matches[3]);
        $result = $str;
        $mainNumberVal = 0;
        $mainNumberName = '';
        $result = preg_replace_callback(
            '~pack\(\$GLOBALS\[' . $matches[1] . '\][{\[](\w+)[}\]],\s?\$GLOBALS\[' . $matches[1] . '\][{\[](\w+)[}\]]\)|ord\((\d+)\)~msi',
            function ($m) use ($dictionary, &$mainNumberVal, &$mainNumberName) {
                if ($m[3] !== null) {
                    $mainNumberVal = ord($m[3]);
                    return $mainNumberVal;
                }
                $arg1 = $dictionary[Helpers::NormalizeInt($m[1])] ?? '';
                $arg2 = $dictionary[Helpers::NormalizeInt($m[2])] ?? '';
                $mainNumberName = pack($arg1, $arg2);
                return '"' . $mainNumberName . '"';
            },
            $result
        );

        preg_match_all('~"([^\'"]+)"~msi', $matches[5], $dictonarySet, PREG_SET_ORDER);
        if (!array_key_exists($matches[7], $dictonarySet)) {
            return $result;
        }
        $func = stripcslashes($dictonarySet[$matches[7]][1]);
        $code = sprintf('%s("%s")', $func, $matches[8]);
        $code = stripslashes($this->unwrapFuncs($code));
        $code = str_replace($mainNumberName, (int)$mainNumberVal, $code);

        $result = str_replace($matches[6], $code, $result);

        preg_match_all(
            '~\$GLOBALS\[(\w{1,100})\]\s?=\s?explode\([\'"]([^\'"]+)[\'"],\s?[\'"](H\*[^\'"]+)[\'"]\);~msi',
            $result,
            $globalMatches,
            PREG_SET_ORDER
        );

        foreach ($globalMatches as $globalMatch) {
            $dictonarySet = explode($globalMatch[2], $globalMatch[3]);
            $result = preg_replace_callback(
                '~pack\(\$GLOBALS\[' . $globalMatch[1] . '\][{[](\w+)[]}]\s*,\s*\$GLOBALS\['
                . $globalMatch[1] . '\][{[](\w+)[]}]\)~msi',
                function ($m) use ($dictonarySet, $globalMatch) {
                    $key = Helpers::NormalizeInt($m[2]);
                    if (!array_key_exists($key, $dictonarySet)) {
                        return $m[0];
                    }
                    return '"' . pack('H*', $dictonarySet[$key]) . '"';
                },
                $result
            );
        }

        $result = MathCalc::calcRawString($result);

        return $result;
    }

    private function deobfuscateEvalB64Strtr($str, $matches)
    {
        $code = '';
        $decoder = base64_decode(strtr($matches[8], $matches[9], $matches[10]));
        if (preg_match('~eval\(\$[^\(]+\(\$[^\(]+\((\$[^,]+),\s*\'([^\']+)\',\s*\'([^\']+)\'\)\)\);\s*\1\s*=\s*NULL;~msi', $decoder, $m)) {
            $code = base64_decode(strtr($matches[11], $m[2], $m[3]));
        }
        return $code;
    }

    private function deobfuscateEvalXorKey($str, $matches)
    {
        return Helpers::xorWithKey(base64_decode($matches[10]), $matches[12]);
    }

    private function deobfuscateEvalB64Gzinflate($str, $matches)
    {
        return gzinflate(base64_decode($matches[3]));
    }

    private function deobfuscateOnelineBackdoor($str, $matches)
    {
        if (strpos($str, ' = ', $str) !== false) {
            $str = preg_replace('~\s*=\s*~', '=', $str);
        }
        return Helpers::postProcess($str);
    }

    private function deobfuscateUrldecodeDict($str, $matches)
    {
        $dict = urldecode($matches[3]);
        $funcs = Helpers::replaceVarsFromDictionary($matches[2], $dict, $matches[4]);
        $vars = Helpers::collectConcatedVars($funcs);
        foreach ($vars as $var => $value) {
            $funcs = Helpers::replaceVarsFromDictionary($var, $value, $funcs);
        }
        $vars = Helpers::collectConcatedVars($funcs);
        $res = $this->unwrapFuncs(Helpers::replaceVarsFromArray($vars, $matches[8]));
        $res = Helpers::replaceVarsFromArray($vars, $res);
        return $res;
    }

    private function deobfuscateWpMlwPluginGegelShell($str, $matches)
    {
        $strings[$matches[8]] = explode('", "', $matches[9]);
        $strings[$matches[2]] = $matches[3];
        $strings[$matches[14]] = $matches[15];
        $strings[$matches[17]] = $matches[18];
        $str = str_replace([$matches[1], $matches[7], $matches[13], $matches[16]], '', $str);
        $str = preg_replace_callback(
            '~\$this\-\>(\w+)\[(\d+)\]~msi',
            function ($m) use ($strings) {
                if (isset($strings[$m[1]])) {
                    return '\'' . $strings[$m[1]][(int)$m[2]] . '\'';
                }
                return $m[0];
            },
            $str
        );
        $str = str_replace('\' . \'', '', $str);
        $str = preg_replace_callback('~function\s*\w+\([^\)]*\)\s*(\{([^{}]*+(?:(?1)[^{}]*)*+)\})~msi', function ($m) use ($strings) {
            $vars = [];
            Helpers::collectVars($m[0], '"', $vars, true);
            $res = Helpers::replaceVarsFromArray($vars, $m[0]);
            $res = preg_replace_callback('~\$this\-\>(\w+)\s*=\s*strtr\(\$this\-\>\1,\s*array\(\s*\'([^\)]+)\'\s*\)\);\s*(\$\w+)\s*=\s*\$this->\w+\(\$this->\1,\s*false\);~msi', function ($m2) use ($strings) {
                $tmp = explode('\', \'', $m2[2]);
                $chars = [];
                foreach ($tmp as $entry) {
                    $entry = explode('\'=>\'', $entry);
                    $chars[$entry[0]] = $entry[1];
                }
                $res = $m2[1] . ' = \'' . Helpers::gegelShellDecode(strtr($strings[$m2[1]], $chars), false) . '\';';
                return $res;
            }, $res);
            return $res;
        }, $str);
        return $str;
    }

    private function deobfuscateDictVarRange($str, $matches)
    {
        return Helpers::replaceVarsFromDictionary(
            $matches[1],
            implode(range(chr($matches[2]), chr($matches[3]))),
            $str
        );
    }

    private function deobfuscateEvalHex2Bin($str, $matches)
    {
        $code = Helpers::collectConcatedVars($matches[1]);
        return hex2bin($code[$matches[2]]);
    }

    private function deobfuscateThinkPHP_cms($str, $matches)
    {
        $strings = [];
        $int = [
            '~\bE_ERROR\b~'               => E_ERROR,
            '~\bE_RECOVERABLE_ERROR\b~'   => E_RECOVERABLE_ERROR,
            '~\bE_WARNING\b~'             => E_WARNING,
            '~\bE_PARSE\b~'               => E_PARSE,
            '~\bE_NOTICE\b~'              => E_NOTICE,
            '~\bE_STRICT\b~'              => E_STRICT,
            '~\bE_DEPRECATED\b~'          => E_DEPRECATED,
            '~\bE_CORE_ERROR\b~'          => E_CORE_ERROR,
            '~\bE_CORE_WARNING\b~'        => E_CORE_WARNING,
            '~\bE_COMPILE_ERROR\b~'       => E_COMPILE_ERROR,
            '~\bE_COMPILE_WARNING\b~'     => E_COMPILE_WARNING,
            '~\bE_USER_ERROR\b~'          => E_USER_ERROR,
            '~\bE_USER_WARNING\b~'        => E_USER_WARNING,
            '~\bE_USER_NOTICE\b~'         => E_USER_NOTICE,
            '~\bE_USER_DEPRECATED\b~'     => E_USER_DEPRECATED,
            '~\bE_ALL\b~'                 => E_ALL,
        ];

        $str = preg_replace(array_keys($int), array_values($int), $str);
        $str = MathCalc::calcRawString($str);

        $str = preg_replace_callback('~call_user_func\([\'"](\w+)[\'"]\s*,\s*(.*?)\)~msi', function($m) {
            return $m[1] . '(' . $m[2] . ')';
        }, $str);

        $hangs = 10;
        while (preg_match('~call_user_func_array\([\'"](\w+)[\'"]\s*,array\((.*?)\)\)~msi', $str) && $hangs--) {
            $str = preg_replace_callback('~call_user_func_array\([\'"](\w+)[\'"]\s*,array\((.*?)\)\)~msi', function($m) {
                return $m[1] . '(' . $m[2] . ')';
            }, $str);
        }

        $str = preg_replace_callback('~(?|if\(!defined\("(\w+)"\)\)|\$\w+=!defined\("([^"]+)"\);if\(\$\w+\)\{)\s*define\("\1","\w+"\);\s*(?|\$GLOBALS\[\1\]=explode\(\'([^\']+)\',\s*\'([^\']+)\'\);|unset\(\$\w+\);\$\w+=explode\(\'([^\']+)\',\'([^\']+)\'\);\$GLOBALS\[\1\]=\$\w+;)~msi', function($m) use (&$strings) {
            $strings[$m[1]] = explode($m[2], $m[3]);
            return '';
        }, $str);
        $str = preg_replace_callback('~pack\(\$GLOBALS\[(\w+)\][\[\{]([0-9a-fx]+)[\]\}]\s*,\s*\$GLOBALS\[(\w+)\][\[\{]([0-9a-fx]+)[\]\}]\)~msi', function($m) use ($strings) {
            return '\'' . addcslashes(pack($strings[$m[1]][Helpers::NormalizeInt($m[2])], $strings[$m[3]][Helpers::NormalizeInt($m[4])]), '\\\'') . '\'';
        }, $str);

        $str = preg_replace_callback('~call_user_func\([\'"](\w+)[\'"]\s*,\s*(.*?)\)~msi', function($m) {
            return $m[1] . '(' . $m[2] . ')';
        }, $str);

        $str = preg_replace_callback('~call_user_func\(function\([^)]*\)\{.*?\},\s*\$GLOBALS\[(\w+)\]\[(\d+)\],\$GLOBALS\[(\w+)\]\[(\d+)\]\)~msi', function($m) use ($strings) {
            return '\'' . pack($strings[$m[1]][Helpers::NormalizeInt($m[2])], $strings[$m[3]][Helpers::NormalizeInt($m[4])]) . '\'';
        }, $str);

        return $str;
    }

    private function deobfuscateEvalHexFunc($str, $matches)
    {
        $vars = Helpers::collectVars($str, '\'');
        $func = stripcslashes($matches[3]);
        $vars[$matches[2]] = Helpers::executeWrapper($func, [stripcslashes($matches[4])]);
        $code = Helpers::executeWrapper(stripcslashes($matches[5]), [$vars[$matches[2]]]);
        return Helpers::replaceVarsFromArray($vars, $code);
    }

    private function deobfuscateCallUserFuncsPackDefinedVar($str, $matches)
    {
        $packDataArray = explode(
            $matches[3],
            gzinflate(substr
                (
                    substr(stripcslashes($matches[4]), 0, -1),
                    hexdec($matches[5]),
                    (int)$matches[6]
                )
            )
        );

        $packDataArray = explode($matches[7], $packDataArray[hexdec($matches[8])]);
        $result = MathCalc::calcRawString($str);

        $result = preg_replace_callback(
            '~(?:call_user_func_array\([^,]+,array\(|pack\()(\$[GET_LOBALS]+{' . $matches[1] . '})[^,]+,\s*\1\[(0x\w+)\]\)\)?~msi',
            function ($match) use ($packDataArray) {
                $index = strpos($match[2], '-') !== false ? -hexdec($match[2]) : hexdec($match[2]);
                if (isset($packDataArray[$index])) {
                    $result = pack('H*', $packDataArray[$index]);
                    if (is_callable($result)) {
                        return $result;
                    }
                    return '\'' . $result . '\'';
                }
                return $match[0];
            },
            $result
        );

        if (preg_match('~if\(\!\s?defined\(\s?\'([^\']+)\'\)\)\s?define\(\s?\'\1\',\s?\'[^\']+\'\)?;\s?call_user_func_array\([\'"\w\s]+,\s?array\(\d\)\);[^\$]+(\$[GET_LOBALS]+\[\s?[\'"]?\1[\'"]?\]\s?=\s?explode\(\s?\'([^\']+)\',\s?gzinflate\(\s?substr\(\s?\'((?:[^\']+\')+),(\dx\w{1,50}),\s?(\-?[\w]{1,50})\)+;\$[GET_LOBALS]+\[\s?[\'"]?\1[\'"]?\]\s?=\s*call_user_func_array\([^,]+,\s?array\(\s?\'([^\']+)\',\s?\$[GET_LOBALS]+\[\s?[\'"]?\1[\'"]?\]\[(0x\d+)\]\)+;)(?:.*?\$[GET_LOBALS]+{\s?[\'"]?\1[\'"]?})+[^;]+;~msi', $result, $match)) {
            $decoded = gzinflate(substr
                (
                    substr(($match[4]), 0, -1),
                    hexdec($match[5]),
                    strpos($match[6], '-') !== false
                        ? -hexdec($match[6])
                        : hexdec($match[6])
                )
            );

            if (!$decoded) {
                return $match[0];
            }

            $packDataArray = explode(
                $match[3],
                $decoded
            );

            $packDataArray = explode($match[7], $packDataArray[hexdec($match[8])]);

            $result = str_replace($match[2], '', $result);
            $result = MathCalc::calcRawString($result);

            $result = preg_replace_callback(
                '~(?:call_user_func_array\([^,]+,array\(|pack\()(\$[GET_LOBALS]+{\s?\'' . $match[1] . '\'})[^,]+,\s*\1\[(0x\w+)\]\)\)?~msi',
                function ($match) use ($packDataArray) {
                    $index = strpos($match[2], '-') !== false ? -hexdec($match[2]) : hexdec($match[2]);
                    if (isset($packDataArray[$index])) {
                        $result = pack('H*', $packDataArray[$index]);
                        if (is_callable($result)) {
                            return $result;
                        }
                        return '\'' . $result . '\'';
                    }
                    return $match[0];
                },
                $result
            );

        }

        $result = str_replace($matches[2], '', $result);

        return $result;
    }

    private function deobfuscateVarFuncsCallEvalV1($str, $matches)
    {
        return gzinflate(base64_decode($matches[7]));
    }

    private function deobfuscateVarFuncsCallEvalV2($str, $matches)
    {
        return gzinflate(base64_decode($matches[2]));
    }

    private function deobfuscateDictStrippedVarsCreateFunc($str, $matches)
    {
        $dictName = $matches[1];
        $dictVal = stripcslashes($matches[2]);

        $result = MathCalc::calcRawString($matches[3]);
        $code = Helpers::replaceVarsFromDictionary($dictName, $dictVal, $result);
        if (preg_match('~base64_decode[^;]+;[^=]+=gzinflate[^;]+;eval~msi', $code)) {
            return gzinflate(base64_decode(stripcslashes($matches[5])));
        }

        return $str;
    }

    private function deobfuscateDictFuncsSubstr($str, $matches)
    {
        $dict = stripcslashes($matches[3]);
        $vars[$matches[4]] = substr($dict, $dict[Helpers::NormalizeInt($matches[5])], $dict[Helpers::NormalizeInt($matches[6])]);
        $vars[$matches[7]] = substr($dict, $dict[Helpers::NormalizeInt($matches[8])] + $dict[Helpers::NormalizeInt($matches[9])], $dict[Helpers::NormalizeInt($matches[10])]);
        $vars[$matches[11]] = substr($dict, $dict[Helpers::NormalizeInt($matches[12])] + $dict[Helpers::NormalizeInt($matches[13])] + $dict[Helpers::NormalizeInt($matches[14])]);
        $str = str_replace($matches[1], '', $str);
        $str = str_replace($matches[15], Helpers::replaceVarsFromArray($vars, $matches[15]), $str);
        $str = preg_replace_callback('~0x[\da-f]+~msi', function($m) {
            return Helpers::NormalizeInt($m[0]);
        }, $str);

        $hangs = 10;
        while (preg_match('~define\(\'([^\']+)\',\'[^\']+\'\);(\$_SERVER|\$GLOBALS)\[\'?\1\'?\]=explode\(\'([^\']+)\',gzinflate\(substr\(base64_decode\(\'([^\']+)\'\),(\d+),\s?\-(\d+)\)\)\);~msi', $str, $m) && $hangs--) {
            $str = str_replace($m[0], '', $str);
            $code = explode($m[3], gzinflate(substr(base64_decode($m[4]), Helpers::NormalizeInt($m[5]), -Helpers::NormalizeInt($m[6]))));
            $tmp = [];
            foreach ($code as $i => $val) {
                $str = str_replace($m[2] . '[' . $m[1] . '][' . $i . '](', $val . '(', $str);
                $str = str_replace($m[2] . '[\'' . $m[1] . '\'][' . $i . '](', $val . '(', $str);
                $str = str_replace($m[2] . '[' . $m[1] . '][' . $i . ']', '\'' . addcslashes($val, '\'\\') . '\'', $str);
                $str = str_replace($m[2] . '[\'' . $m[1] . '\'][' . $i . ']', '\'' . addcslashes($val, '\'\\') . '\'', $str);
                if (preg_match_all('~(\$\w+)=&\$GLOBALS\[\'' . $m[1] . '\'\]~msi', $str, $m2)) {
                    $tmp = $m2[1] ?? [];
                    foreach ($m2[0] as $stmt) {
                        $str = str_replace($stmt . ';', '', $str);
                    }
                }
                foreach ($tmp as $var) {
                    $str = str_replace($var . '[' . $i . '](', $val . '(', $str);
                    $str = str_replace($var . '[' . $i . ']', '\'' . addcslashes($val, '\'\\') . '\'', $str);
                }
            }
        }
        $str = preg_replace_callback('~gzinflate\(base64_decode\(\'([^\']+)\'\)\)~msi', function($m) {
            return '\'' . gzinflate(base64_decode($m[1])) . '\'';
        }, $str);
        return $str;
    }

    private function deobfuscateGulf2($str, $matches)
    {
        $str = str_replace($matches[6], '', $str);
        $str .= gzinflate(base64_decode($matches[11]));
        $str = preg_replace_callback('~eval\(gzinflate\((\w+)\(\'~msi', function ($m) {
            return str_replace($m[1], 'base64_decode', $m[0]);
        }, $str);
        return $str;
    }

    private function deobfuscateDictVarRange2($str, $matches)
    {
        $dict = range(chr((int)$matches[2]), chr((int)$matches[3]));
        $str = Helpers::replaceVarsFromDictionary($matches[1], $dict, $str);
        if (preg_match('~\'(\$\w+)\',\'(eval\("\?>"\.(\w+\()+\1\)+;)\'~msi', $str, $m)) {
            $str = str_replace($m[1], '\'' . $matches[6] . '\'', $m[2]);
            return $str;
        }
        $dict2 = range(chr((int)$matches[8]), chr((int)$matches[9]));
        $str = Helpers::replaceVarsFromDictionary($matches[7], $dict2, $str);
        $dict3 = explode(',', Helpers::replaceVarsFromDictionary($matches[7], $dict2, $matches[11]));
        foreach ($dict3 as &$string) {
            $string = trim($string, ' \'');
        }
        $str = Helpers::replaceVarsFromDictionary($matches[10], $dict3, $str, false);
        return $str;
    }

    private function deobfuscateFileInjector($str, $matches)
    {
        return str_replace($matches[2], base64_decode($matches[2]), $str);
    }

    private function deobfuscateXxteaDecrypt($str, $matches)
    {
        return Helpers::Xxtea_decrypt($matches[6], $matches[7]);
    }

    private function deobfuscateSDCMS($str, $matches)
    {
        $res = Helpers::unwrapGoto($str);
        $res = preg_replace('~\$\w+=chr\(72\)\s*\.\s*chr\(42\);~msi', '', $res);
        $res = preg_replace_callback('~pack\(\$\w+,"([^"]+)"\)~msi', function ($m) {
            return '\'' . hex2bin($m[1]) . '\'';
        }, $res);
       return $res;
    }

    private function deobfuscateGlobalsEvalFuncs($str, $matches)
    {
        $search = ['$ ', '{ ', ' }', ' [', '] ', '} '];
        $replace = ['$', '{', '}', '[', ']', '}'];
        $str = str_replace($search, $replace, $str);
        $res = $str;
        $vars = Helpers::collectVars($res, '"', $vars, true);
        $res = Helpers::replaceVarsFromArray($vars, $res);

        preg_match_all(
            '~(?|\${(\${)?[\'"]GLOBALS[\'"]}\[["\']([^\'"]+)[\'"]\]}?|()\$(\w+))\s?=\s?[\'"]([^"\']+)["\'];~msi',
            $res,
            $globalVars,
            PREG_SET_ORDER
        );

        foreach ($globalVars as $globalVar) {
            if ($globalVar[1] === '${' && isset($vars['$' . $globalVar[2]])) {
                $vars['$' . $vars['$' . $globalVar[2]]] = $globalVar[3];
            } else {
                $vars['$' . $globalVar[2]] = $globalVar[3];
            }

            $res = str_replace($globalVar[0], '', $res);
        }

        preg_match_all(
            '~\${\${[\'"]GLOBALS[\'"]}\[["\']([^\'"]+)[\'"]\]}?\s?=\s?((?:\$\w{1,50}\s?\.?\s?|\${\${[\'"]GLOBALS[\'"]}\[[\'"][^\'"]+[\'"]\]}\s?\.?\s?)+;\s?)~msi',
            $res,
            $varsToReplace,
            PREG_SET_ORDER
        );
        foreach ($varsToReplace as $varToReplace) {
            preg_match_all(
                '~(\$\w{1,50})|\${\${[\'"]GLOBALS[\'"]}\[[\'"]([^\'"]+)[\'"]\]}~msi',
                $varToReplace[2],
                $varData,
                PREG_SET_ORDER
            );

            $value = '';
            foreach ($varData as $var) {
                if ($var[1] !== '' && isset($vars[$var[1]])) {
                    $value .= $vars[$var[1]];
                }
                if ($var[2] !== '' && isset($vars['$' . $var[2]])) {
                    $value .= $vars['$' . $vars['$' . $var[2]]];
                }
            }

            $vars['$' . $vars['$' . $varToReplace[1]]] = $value;
            $res = str_replace($varToReplace[0], '', $res);
        }

        $res = preg_replace_callback(
            '~(?|\${\${[\'"]GLOBALS[\'"]}\[[\'"]([^\'"]+)[\'"]\]}|(?<=\()\$(\w+)(?=\())(\()?~msi',
            function ($m) use ($vars) {
                if ($m[1] !== '' && isset($vars['$' . $m[1]])) {
                    if (isset($m[2]) && $m[2] !== '' ) {
                        $ret = $vars['$' . $vars['$' . $m[1]]] ?? $vars['$' . $m[1]];
                        return $ret . '(';
                    } else {
                        return '"' . $vars['$' . $vars['$' . $m[1]]] . '"';
                    }
                }
                return $m[0];
            },
            $res
        );

        $res = trim(preg_replace('~echo "\s*";~', '', $res));
        return $this->unwrapFuncs($res);
    }

    private function deobfuscateDictVarsEval($str, $matches)
    {
        $dict = str_split($matches[3]);
        $str = str_replace($matches[1], '', $str);
        $str = Helpers::replaceVarsFromDictionary($matches[2], $dict, $str);
        $vars = Helpers::collectVars($str);
        $str = preg_replace('~((\$\w{1,50}\s*=\s*[\'"]\w{1,20}[\'"]\s*;\s*){1,})~msi', '', $str);
        $str = Helpers::replaceVarsFromArray($vars, $str);
        return $str;
    }

    private function deobfuscateEvalIter($str, $matches)
    {
        $varsConcated = Helpers::collectConcatedVars($matches[3]);
        $res = MathCalc::calcRawString($matches[5].$matches[7]);
        $res = Helpers::normalize(Helpers::replaceVarsFromArray($varsConcated, $res));
        $vars = Helpers::collectVars($res, "'");
        $res = Helpers::normalize(Helpers::replaceVarsFromArray($vars, $matches[9]));
        $res = $this->deobfuscateEval($res, []);
        $res = Helpers::replaceVarsFromArray($vars, $res);

        if (preg_match('~(eval\(gzuncompress\(base64_decode\(\'[^\']+\'\)\)\);)(eval\(gzuncompress\(strrev\(base64_decode\(\'[^\']+\'\)\)\)\);)~msi', $res, $m)) {
            $eval1 = $this->deobfuscateEval($m[1], []);
            $res = str_replace($m[1], $eval1, $res);

            $eval2 = $this->deobfuscateEval($m[2], []);
            for ($i=0; $i<101; $i++) {
                $eval2 = Helpers::replaceVarsFromArray($vars, $eval2);
                $eval2 = $this->deobfuscateEval($eval2, []);
            }

            if (preg_match('~((\$\w*)\s*=\s*\w*\s*\(\s*\$\w*,\s*\"(\w*)\"\s*\)\s*;)\s*eval\s*\(\2\)\s*;~msi', $eval2, $m2)) {
                $key = $m2[3];
                $var = $matches[2];

                $key = base64_encode($key);
                $var = base64_decode($var);
                $ATKQTP = "";
                $WWEMZR = "";
                $RHNLHB = 0;
                while ($RHNLHB < strlen($var)) {
                    for ($VGPJVG = 0; $VGPJVG < strlen($key); $VGPJVG++) {
                        $ATKQTP = chr(ord($var[$RHNLHB]) ^ ord($key[$VGPJVG]));
                        $WWEMZR .= $ATKQTP;
                        $RHNLHB++;
                        if ($RHNLHB >= strlen($var)) break;
                    }
                }
                $eval2 = str_replace($m2[1], '', $eval2);
                $eval2 = str_replace($m2[2], gzuncompress(base64_decode($WWEMZR)), $eval2);
                $eval2 = Helpers::normalize($eval2);

                if (preg_match('~eval\(\"[^\"]+\"\.gzuncompress\(base64_decode\(\"[^\"]+\"\)\)\);~msi', $eval2, $m3)) {
                    $subeval = $this->deobfuscateEval($m3[0], []);
                    $eval2 = str_replace($m3[0], $subeval, $eval2);
                }
                $res = str_replace($m[2], $eval2, $res);
            }
        }
        return $res;
    }

    private function deobfuscateArrayDictCharsConcatStr($str, $matches)
    {
        $varsStr = $matches[7];
        $varsStr = preg_replace_callback('~\$[^\s(]+\([\'"]([^\'"]+)[\'"]\)~msi', function($m) {
            return '\'' . base64_decode($m[1]) . '\'';
        }, $varsStr);

        $vars = explode(',', $varsStr);
        array_walk($vars, function (&$val) {
            $val = trim($val, '\'');
        });

        $dictVars = $matches[8];
        $dictVars = preg_replace_callback(
            '~(?:\$[^\s[]+\[\d+\]\.?)+~msi',
            function($m) use ($vars) {
                $res = '';
                preg_match_all('~\[(\d+)\]~ms', $m[0], $match, PREG_SET_ORDER);
                foreach ($match as $index) {
                    $res .= $vars[(int)$index[1]] ?? '';
                }
                return '\'' . $res . '\'';
            }, $dictVars);

        $res = str_replace('.', '', $matches[10]);

        $vars = [];
        $closeBrackets = 0;
        preg_match_all('~(\$[^\s=]+)\s?=\s?[\'"]([^\'"]+)[\'"];~msi', $dictVars, $matchVars, PREG_SET_ORDER);
        foreach ($matchVars as $matchVar) {
            $res = str_replace($matchVar[1], strtolower($matchVar[2]), $res);
            $closeBrackets++;
        }

        return $this->unwrapFuncs($res . '\'' . $matches[2] . '\'' . str_repeat(')', $closeBrackets) . ';');
    }

    private function deobfuscateEvalFile($str, $matches)
    {
        $res = '';
        $file_content = $str;
        $func1_name = $matches[5];
        $func2_name = $matches[10];
        $eval1 = $matches[2];
        $eval2 = $matches[3];
        $eval3 = $matches[7];
        $eval3_arg = $matches[8];

        $eval1_res = $this->deobfuscateEval($eval1, []);
        $res = str_replace($eval1, $eval1_res, $str);

        if (preg_match('~'.$func1_name.'~msi', $eval1_res)) {
            $func1_call1 = Helpers::someDecoder5($file_content, $matches[6], $matches[6], $matches[12], $matches[14]);
            $func1_call2 = Helpers::someDecoder5($file_content, $matches[12], $matches[6], $matches[12], $matches[14]);
            $func1_call3 = Helpers::someDecoder5($file_content, $matches[14], $matches[6], $matches[12], $matches[14]);

            $eval2_res = $this->deobfuscateEval(str_replace($matches[4], '"'.$func1_call1.'"', $eval2), []);
            $res = str_replace($eval2, $eval2_res, $res);

            if (preg_match('~'.$func2_name.'~msi', $eval2_res)) {
                $func2_call = Helpers::someDecoder6($func1_call2, $func1_call3);
                $eval3_arg = str_replace($matches[9], '"'.$func2_call.'"', $eval3_arg);
                $eval3_arg = trim(Helpers::normalize($eval3_arg), '"');
                $res = str_replace($eval3, $eval3_arg, $res);
                $res = str_replace($matches[15], '', $res);
            }
        }

        return $res;
    }

    private function deobfuscateSlashedDictFuncGetVar($str, $matches)
    {
        //Sample: slashedDictFuncGetVar_1.php
        $dictionary = stripcslashes($matches[2]);
        preg_match_all(
            '~(\$\w{1,50})\s?=\s?substr\(\$\w{1,50},\s?((?:\$\w{1,50}\[\d+\]\+?\s?)+),?\s?(\$\w{1,50}\[\d+\])?\);~msi',
            $matches[3],
            $varMatches,
            PREG_SET_ORDER
        );

        $vars = [];
        foreach ($varMatches as $varMatch) {
            $argOneValue = 0;
            preg_match_all('~\d+~msi', $varMatch[2], $indexMatches, PREG_SET_ORDER);
            foreach ($indexMatches as $indexMatch) {
                $argOneValue += $dictionary[(int)$indexMatch[0]] ?? 0;
            }
            if (isset($varMatch[3]) && $varMatch[3] !== '') {
                $argTwoValue = 0;
                preg_match_all('~\d+~msi', $varMatch[3], $indexMatches, PREG_SET_ORDER);
                foreach ($indexMatches as $indexMatch) {
                    $argTwoValue += $dictionary[(int)$indexMatch[0]] ?? 0;
                }

                $vars[$varMatch[1]] = substr($dictionary, $argOneValue, $argTwoValue);
                continue;
            }

            $vars[$varMatch[1]] = substr($dictionary, $argOneValue);
        }

        $result = Helpers::replaceVarsFromArray($vars, $str, true);

        $hop = 10;
        $regex = '~(\$\w+\[[^]]+\])\s?=\s?explode\([\'"]([^\'"]+)[\'"]\s?,gzinflate\(substr\(base64_decode\([\'"]([^\'"]+)[\'"]\)\s?,(\w+),\s?([-\w]+)\)\)\);((?:.*?\1\[\w+\])+[^;}]+[;}]+)~msi';
        while($hop !== 0 && preg_match($regex, $result, $matchPattern)) {
            $substrArg1 = @hexdec($matchPattern[4]) * (strpos($matchPattern[4], '-') !== false ? -1 : 1);
            $substrArg2 = @hexdec($matchPattern[5]) * (strpos($matchPattern[5], '-') !== false ? -1 : 1);
            $finalVariable = $matchPattern[1];
            $finalDictionary = explode(
                $matchPattern[2], gzinflate(substr(base64_decode($matchPattern[3]), $substrArg1, $substrArg2))
            );

            $var = str_replace('[', '\[', $finalVariable);
            $var = str_replace(']', '\]', $var);
            $subRegex = '~\\' . $var . '\[([\dx\w]+)\]~msi';

            $result = $matchPattern[6];

            $subHop = 10;
            while($subHop !== 0 && preg_match($subRegex, $result)) {
                $result = preg_replace_callback($subRegex, function ($m) use ($finalDictionary) {
                    $index = hexdec($m[1]);
                    if (!isset($finalDictionary[$index])) {
                        return $m[0];
                    }
                    if (function_exists($finalDictionary[$index])) {
                        return $finalDictionary[$index];
                    }

                    return '\'' . addslashes($finalDictionary[$index]) . '\'';
                },
                    $result
                );
                $subHop--;
            }

            $hop--;
        }

        $result = preg_replace_callback('~\$\w+\[([\d\w]+)\]~msi', function ($m) use ($finalDictionary) {
            $index = hexdec($m[1]);

            if (!isset($finalDictionary[$index])) {
                return $m[0];
            }

            if (function_exists($finalDictionary[$index])) {
                return $finalDictionary[$index];
            }

            return '\'' . addslashes($finalDictionary[$index]) . '\'';
        }, $result);

        return $result;
    }

    private function deobfuscateConcatVarsInLoopEval($str, $matches)
    {
        //Sample: concatVarsInLoopEval_1.php
        $vars = Helpers::collectVars($matches[1], "'");

        $result = str_replace('.', '', $matches[6]);
        $result = Helpers::replaceVarsFromArray($vars, $result);

        $func = stripcslashes($matches[3] . $matches[4]);

        if (!Helpers::isSafeFunc($func)) {
            return $str;
        }

        for($i = (int)$matches[8]; $i <= (int)$matches[9]; $i++) {
            $result = @$func($result);
        }

        return $result;
    }

    private function deobfuscateTwoFuncStrDecodeVars($str, $matches)
    {
        //Sample: twoFuncStrDecodeVars_1.php
        $dictionary = $matches[4];

        $set = explode(',', $matches[11]);
        $func = "";
        foreach ($set as $val) {
            $func .= $dictionary[$val];
        }

        if (!Helpers::isSafeFunc($func)) {
            return $str;
        }
        $result = @$func($matches[21]);

        $dataFirst = strlen($result);
        $dataSecond = strlen($matches[23]);

        if ($dataFirst <= $dataSecond) {
            return $result ^ $matches[23];
        }
        for ($i = 0; $i < $dataFirst; ++$i) {
            $result[$i] = $result[$i] ^ $matches[23][$i % $dataSecond];
        }

        return $result;
    }

    private function deobfuscateClassArrayFuncReplaces($str, $matches)
    {
        //Sample: classArrayFuncReplaces_1.php
        $result = $str;

        $dictionary = range($matches[2], $matches[3]);
        preg_match_all('~(\d+)~msi', $matches[5], $strings, PREG_SET_ORDER);
        $variableValue = '';
        foreach ($strings as $str) {
            $variableValue .= $dictionary[(int)$str[1]] ?? '';
        }

        $result = str_replace($matches[5], $variableValue, $result);

        $dictionary = Helpers::concatStringsInContent($matches[18]);
        preg_match_all('~(\w+)~msi', $dictionary, $strings, PREG_SET_ORDER);

        $variableValues = [];
        $dictionary = range($matches[11], $matches[12]);
        foreach ($strings as $str) {
            $variableValue = '';
            $arr = explode($matches[13], $str[1]);
            foreach ($arr as $key => $val) {
                $variableValue .= $dictionary[$val - 0];
            }
            $variableValues[] = $variableValue;
        }

        $result = str_replace($matches[16], '', $result);

        $result = preg_replace_callback('~\\'. $matches[19] .'\[(\d+)\]~msi',
            function($m) use ($variableValues) {
            $replace = $variableValues[(int)$m[1]] ?? $m[0];
            return function_exists($replace) ? $replace : ('"' . $replace . '"');
        }, $result);

        return $result;
    }

    private function deobfuscateGlobalsArrayDictFunc($str, $matches)
    {
        //Sample: globalsArrayDictFunc.php

        $globals_name   = $matches[1];
        $globals_array  = explode(',', str_replace(['"', "'"], '', Helpers::replaceBase64Decode(Helpers::normalize($matches[2]), '\'')));
        $function_name  = $matches[3];
        $function_dict  = explode(',', str_replace(['"', "'"], '', $matches[4]));
        $code           = $matches[5];

        $code = preg_replace_callback('~\$GLOBALS\[["\'](\w{1,100})["\']\]\[(\d{1,10})\]~mis', function ($matches) use ($globals_name, $globals_array) {
            if ($matches[1] !== $globals_name || !array_key_exists($matches[2], $globals_array)) {
                return $matches[0];
            }
            return $globals_array[$matches[2]];
        }, $code);

        $code = preg_replace_callback('~(\w{1,20})\((\d{1,3})\)~mis', function ($matches) use ($function_name, $function_dict) {
            if ($matches[1] !== $function_name || !array_key_exists($matches[2], $function_dict)) {
                return $matches[0];
            }
            return '\'' . base64_decode($function_dict[$matches[2]]) . '\'';
        }, $code);

        return $code;
    }

    private function deobfuscateDecryptWithUserAgent($str, $matches)
    {
        $hardcoded_key = '87.38';
        $funcs = explode('(', $matches[4]);
        $funcs = array_reverse($funcs);
        $code = $matches[11];
        foreach ($funcs as $func) {
            if ($func === '') {
                continue;
            }
            if (Helpers::convertToSafeFunc($func)) {
                $code = Helpers::executeWrapper($func, [$code]);
            }
        }
        $key = $hardcoded_key . $matches[10];
        $key = md5($key);
        $res = Helpers::xorWithPrevChar(Helpers::xorWithKey($code, $key));
        if (strpos($res, 'error_reporting') !== false) {
            return $res;
        }
        return '';
    }

    private function deobfuscateEvalChrVarsMany($str, $matches)
    {
        $vars = Helpers::collectVars($str, "'", $vars);
        $vars[$matches[1]] = 'chr';
        $vars = Helpers::collectChrVars($matches[2], $vars);

        $res = str_replace(' ', '', $matches[3]);
        $res = Helpers::replaceVarsFromArray($vars, $res, true);
        $res = $this->unwrapFuncs($res);

        if (!preg_match(
            '~(eval\(\$?\w{1,50}\(\$?\w{1,50}\([\'"][^\'"]+[\'"]\)\)\);)\s?(eval(?:\(\$?\w{1,50})+\([\'"][^\'"]+[\'"]\)+;)~msi',
            $res,
            $unwrapCode)) {
            return $res;
        }

        $decodedContent = $unwrapCode[2];
        $hop = 200;
        while ($hop > 0 && preg_match('~eval(?:\(\$?\w{1,50})+\([\'"][^\'"]+[\'"]\)+;~msi', $decodedContent)) {
            $decodedContent = Helpers::replaceVarsFromArray($vars, $decodedContent, true);
            $decodedContent = $this->unwrapFuncs($decodedContent);
            $hop--;
        }

        $functionContent = Helpers::replaceVarsFromArray($vars, $unwrapCode[1], true);;
        $functionContent = $this->unwrapFuncs($functionContent);
        $res = str_replace($unwrapCode[1], '', $res);

        if (!preg_match(
            '~function\s(\w{1,50})\((\$\w{1,50}),\s?(\$\w{1,50})\)\s{0,50}{\s{0,50}\3\s?=\s?base64_encode\(\3\);\s{0,50}\2\s?=\s?base64_decode\(\2\);\s{0,50}(\$\w{1,50})\s?=\s?[\'"]{2};\s{0,50}(\$\w{1,50})\s?=\s?[\'"]{2};\s{0,50}(\$\w{1,50})\s?=\s?0;\s{0,50}while\s?\(\6\s?<\s?strlen\(\2\)\)\s?{\s{0,50}for\s?\((\$\w{1,50})\s?=\s?0;\s?\7\s?<\s?strlen\(\3\);\s?\7\+\+\)\s?{\s{0,50}\4\s?=\s?chr\(ord\(\2\[\6\]\)\s?\^\s?ord\(\3\[\7\]\)\);\s{0,50}\5\s?\.=\s?\4;\s{0,50}\6\+\+;\s{0,50}if\s?\(\6\s?>=\s?strlen\(\2\)\)\s?break;[\s}]+return\sgzuncompress\(base64_decode\(\5\)\);[\s}]+~msi',
            $functionContent,
            $functionContentMatch
        )) {
            $res = str_replace($unwrapCode[2], $decodedContent, $res);
            return $res;
        }

        if (!preg_match(
            '~(\$\w{1,50})\s?=\s?(\w{1,50})\((\$\w{1,50}),\s?["\']([^\'"]+)[\'"]\);\s{0,50}eval\s?\(\1\);~msi',
            $decodedContent,
            $decodedContentMatch
        )) {
            $res = str_replace($unwrapCode[2], $decodedContent, $res);
            return $res;
        }

        if ($decodedContentMatch[2] === $functionContentMatch[1] && in_array($decodedContentMatch[3], array_keys($vars))) {
            $key = base64_encode($decodedContentMatch[4]);
            $decodedStr = base64_decode($vars[$decodedContentMatch[3]]);
            $chrOrd = "";
            $resultTemp = "";
            $incrementNum = 0;
            while ($incrementNum < strlen($decodedStr)) {
                for ($i = 0; $i < strlen($key); $i++) {
                    $chrOrd = chr(ord($decodedStr[$incrementNum]) ^ ord($key[$i]));
                    $resultTemp .= $chrOrd;
                    $incrementNum++;
                    if ($incrementNum >= strlen($decodedStr)) {
                        break;
                    }
                }
            }
            $res = str_replace($unwrapCode[2], gzuncompress(base64_decode($resultTemp)), $res);
        }

        return $res;
    }

    private function deobfuscateCreateFuncChrVarsMany($str, $matches)
    {
        $vars = [
            $matches[1] => 'chr'
        ];
        $vars = Helpers::collectChrVars($matches[2], $vars);

        $res = str_replace(' ', '', $matches[4]);
        $res = Helpers::replaceVarsFromArray($vars, $res, true);
        $res = $this->unwrapFuncs($res);

        $res = preg_replace('~\s?/\*.*?\*/~msi', '', $res);
        $res = preg_replace_callback(
            '~\s*(\$\w{1,50}\s?=\s?)(?://|##)[^\n]{0,50}\n([chr\'.]+)\s*(?://|##)[^\n]{0,50}\n([chr\'.]+;)~msi',
            function($m) {
                return $m[1] . $m[2] . $m[3];
            },
            $res
        );

        return $res;
    }

    /*************************************************************************************************************/
    /*                                          JS deobfuscators                                                 */
    /*************************************************************************************************************/

    private function deobfuscateJS_fromCharCode($str, $matches)
    {
        $result = '';
        if (isset($matches[3]) && $matches[3] === 'eval(') {
            $chars = explode(',', $matches[4]);
            foreach ($chars as $char) {
                $result .= chr((int)trim($char));
            }
            if (isset($matches[1]) && $matches[1] !== '') {
                $result = $matches[1] . $result;
            }
            if (isset($matches[5]) && $matches[5] !== '') {
                $result = $result . $matches[5];
            }
            return $result;
        }

        $result = preg_replace_callback('~String\.fromCharCode\(([\d,\s]+)\)~msi', function ($m) {
            $chars = explode(',', $m[1]);
            foreach ($chars as $char) {
                $result .= chr((int)trim($char));
            }
            return '\'' . $result . '\'';
        }, $str);

        return $result;
    }

    private function deobfuscateJS_unescapeContentFuncWrapped($str, $matches)
    {
        $result = '';

        $functionCode = urldecode($matches[1]);
        $functionName = urldecode($matches[2]);
        $strDecoded = $matches[3];

        if (preg_match('~function\s?(\w{1,50})\(\w{1,50}\)\s{0,50}{\s{0,50}var\s?\w{1,50}\s?=\s?[\'"]{2};\s{0,50}var\s?\w{1,50}\s?=\s?\w{1,50}\.split\("(\d+)"\);\s{0,50}\w{1,50}\s?=\s?unescape\(\w{1,50}\[0\]\);\s{0,50}\w{1,50}\s?=\s?unescape\(\w{1,50}\[1\]\s?\+\s?"(\d{1,50})"\);\s{0,50}for\(\s?var\s?\w{1,50}\s?=\s?0;\s?\w{1,50}\s?<\s?\w{1,50}\.length;\s?\w{1,50}\+\+\)\s?{\s{0,50}\w{1,50}\s?\+=\s?String\.fromCharCode\(\(parseInt\(\w{1,50}\.charAt\(\w{1,50}%\w{1,50}\.length\)\)\^\w{1,50}\.charCodeAt\(\w{1,50}\)\)\+([-+]?\d{1,5})\);\s{0,50}}\s{0,50}return\s\w{1,50};\s{0,50}}~msi',
                $functionCode, $match) && strpos($functionName, $match[1])) {
            $tmp = explode((string)$match[2], $strDecoded);
            $s = urldecode($tmp[0]);
            $k = urldecode($tmp[1] . (string)$match[3]);
            $kLen = strlen($k);
            $sLen = strlen($s);

            for ($i = 0; $i < $sLen; $i++) {
                $result .= chr(((int)($k[$i % $kLen]) ^ ord($s[$i])) + (int)$match[4]);
            }
        } else {
            $result = $matches[3];
            $result = str_replace([$matches[1], $matches[2]], [$functionCode, $functionCode], $result);
        }

        return $result;
    }

    private function deobfuscateJS_ObfuscatorIO($str, $matches)
    {
        $detectPattern = '~((?![^_a-zA-Z$])[\w$]*)\(-?(\'|")(0x[a-f\d]+|\\x30\\x78[\\xa-f\d]+)\2(\s*,\s*(\'|").+?\5)?\)~msi';
        preg_match_all($detectPattern, $str, $detectMatch);
        $detectMatch = array_unique($detectMatch[1]);
        if (count($detectMatch) !== 1) {
            return $str;
        }

        preg_match('~\b(?:var|const|let)\s+' . $detectMatch[0] . '\s*=\s*function\s*\(.*?\)\s*~msi', $str, $index, PREG_OFFSET_CAPTURE);
        $index = $index[0][1];

        $bo = 0;
        $bc = 0;
        $strSize = strlen($str);
        $mainCode = '';
        while ($index < $strSize) {
            if ($str[$index] === '{') {
                $bo++;
            }
            if ($str[$index] === '}') {
                $bc++;
            }
            if ($bc === $bo && $bo !== 0) {
                $mainCode = substr($str, $index + 2);
                break;
            }
            $index++;
        }
        $array = explode('\',\'', substr($matches[2], 1, -1));

        $shuffle = hexdec($matches[3]);
        while ($shuffle--) {
            $array[] = array_shift($array);
        }
        $mainCode = preg_replace_callback('~((?![^_a-zA-Z$])[\w$]*)\(-?(\'|")(0x[a-f\d]+|\\x30\\x78[\\xa-f\d]+)\2(\s*,\s*(\'|")(.+?)\5)?\)~msi', function ($m) use ($array) {
            return '\'' . Helpers::deobfuscatorIO_string($array[hexdec($m[3])], $m[6]) . '\'';
        }, $mainCode);
        return Helpers::normalize($mainCode);
    }

    private function deobfuscateJS_documentWriteUnescapedStr($str, $matches)
    {
        if ($matches[1] === 'atob') {
            return base64_decode($matches[2]);
        }
        if (strpos($matches[2], '\u00') !== false) {
            $matches[2] = str_replace('\u00', '%', $matches[2]);
        }
        $res = urldecode($matches[2]);
        if (isset($matches[3]) && isset($matches[4]) && $matches[3] !== ''
            && strpos($res, 'function ' . $matches[3]) !== false && $matches[4] !== ''
            && preg_match('~var\s*(\w+)=unescape\((\w+)\.substr\(0,\2\.length-1\)+;\s*var\s*(\w+)=\'\';for\((\w+)=0;\4<\1\.length;\4\+\+\)\3\+=String\.fromCharCode\(\1\.charCodeAt\(\4\)-s\.substr\(\2\.length-1,1\)+;document\.write\(unescape\(\3\)+;~msi', $res)
        ) {
            $tmp = urldecode($matches[4]);
            $res = '';
            for ($i = 0, $iMax = strlen($tmp); $i < $iMax; $i++) {
                $res .= chr(ord($tmp[$i]) - (int)substr($matches[4], -1, 1));
            }
            $res = urldecode($res);
        }
        return $res;
    }

    private function deobfuscateJS_deanPacker($str, $matches)
    {
        $payload = $matches[1];
        // Words
        $symtab = explode('|', $matches[4]);
        // Radix
        $radix = (int)$matches[2];
        // Words Count
        $count = (int)$matches[3];

        if ($count !== count($symtab)) {
            return $str; // Malformed p.a.c.k.e.r symtab !
        }

        $array = [];

        while ($count--) {
            $tmp = Helpers::jsPackerUnbaser($count, $radix);
            $array[$tmp] = (isset($symtab[$count]) && $symtab[$count] !== '') ? $symtab[$count] : $tmp;
        }

        $result = preg_replace_callback('~\b\w+\b~', function($m) use ($array) {
            return $array[$m[0]];
        }, $payload);
        $result = str_replace('\\', '', $result);
        if (preg_match('~function\(\)\{var\s*(\w+)=\{([\$\w]+):\'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\+/=\',\w+:function\(\w+\){var\s*\w+=\'\',\w,\w,\w,\w,\w,\w,\w,\w=0;\w=\1\.[\w\$]+\(\w\);while\(\w<\w\.length\)\{[^{]+\{\w=\w=64\}else[^{]+\{\w=64\};[^}]+};return\s*\w},(\w+):function\(\w\)\{var\s*\w+=\'\',\w,\w,\w,\w,\w,\w,\w,\w=0;\w=\w\.replace\(/\[\^A\-Za\-z0\-9\+/=\]/g,\'\'\);while\(\w<\w\.length\){\w=this\.\2\.indexOf\(\w\.charAt\(\w\+\+\)\);~msi', $result, $m)) {
            $class = $m[1];
            $b64_func = $m[3];
            $result = preg_replace_callback('~(?:var\s(\w+)=\'([^\']+)\';\1=(\w+\.\w+)\(\1\)|(\w+\.\w+)\(\'([^\']+)\'\))~msi', function($m) use ($class, $b64_func) {
                if ((isset($m[4]) && $m[4] !== '' && $m[4] !== $class . '.' . $b64_func)
                 || (isset($m[3]) && $m[3] !== '' && $m[3] !== $class . '.' . $b64_func)
                ) {
                    return $m[0];
                }
                if (isset($m[4]) && $m[4] !== '') {
                    return '\'' . base64_decode($m[5]) . '\'';
                }
                if (isset($m[3]) && $m[3] !== '') {
                    return 'var ' . $m[1] . '=\'' . base64_decode($m[2]) . '\'';
                }
            }, $result);
            $result = preg_replace_callback('~\w+=\[((?:\'[^\']+\',?)+)\]~msi', function($m) {
                $arr = explode('\',\'', substr($m[1], 1, -1));
                $arr = array_map('base64_decode', $arr);
                return str_replace($m[1], '\'' . implode('\',\'', $arr) . '\'', $m[0]);
            }, $result);

        }
        return $result;
    }

    private function deobfuscateJS_objectDecode($str, $matches)
    {
        $ciphered = explode('+', $matches[9]);
        $chars = explode('\',\'', substr($matches[13], 1, -1));
        $count = (int)$matches[8];
        $arr = [];
        for ($i = 0; $i < $count; $i++) {
            $arr[Helpers::jsObjectDecodeIndexToString($i)] = $ciphered[$i][0] !== ';' ? '\'' . Helpers::jsObjectStringDecoder($matches[11], $chars, $ciphered[$i]) . '\'' : (float)substr($ciphered[$i], 1);
        }
        $ret = preg_replace_callback('~\$\.\b(\w+)\b~', function($m) use ($arr) {
            if (!isset($arr[$m[1]])) {
                return $m[0];
            }
            return $arr[$m[1]];
        }, $matches[2]);

        return $ret;
    }

    private function deobfuscateJS_B64Embedded($str, $matches)
    {
        return '<script type="text/javascript">' . PHP_EOL . base64_decode($matches[1]) . PHP_EOL . '</script>';
    }

    private function deobfuscateJS_ParseIntArray($str, $matches)
    {
        if (preg_match('~{_0x\w+\[\'push\'\]\(_0x\w+\[\'shift\'\]\(\)\);}}}\(_0x\w+,(-?0x[^)]+)\)~msi', $str, $expected)) {
            $expected = preg_replace_callback('~0x\w+~msi', function ($m) {
                return Helpers::NormalizeInt($m[0]);
            }, $expected[1]);
            $expected = (int)trim(MathCalc::calcRawString(' ' . $expected));
        }

        if (preg_match('~_0x\w+=function\(_0x\w+,_0x\w+\){_0x\w+=_0x\w+-\(?([^\);]+)\)?;~msi', $str, $delta)) {
            $delta = preg_replace_callback('~0x\w+~msi', function ($m) {
                return Helpers::NormalizeInt($m[0]);
            }, $delta[1]);
            $delta = (int)trim(MathCalc::calcRawString(' ' . $delta));
        }

        if (preg_match('~function\s*_0x\w+\(\)\{var\s?_0x\w+=\[([^\]]+)\];_0x\w+=function\(\)\{return\s?_0x\w+;\};return\s?_0x\w+\(\);\}~msi', $str, $array)) {
            $array = explode('\',\'', substr($array[1], 1, -1));
        }

        if (preg_match('~\(function\((_0x\w+),\s?_0x\w+\)\{var\s?(_0x\w+)=_0x\w+,_0x\w+=_0x\w+\(\);while\(!!\[\]\)\{try\{var\s?_0x\w+=((?>\-?parseInt\(_0x\w+\(0x\w+\)\)/(?:\([^\)]+\)*|0x\w+)\)*[\+\*]?\(?-?)+);if\(_0x\w+===_0x\w+\)break;else\s?_0x\w+\[\'push\'\]\(_0x\w+\[\'shift\'\]\(\)\);\}catch\(_0x\w+\)\{_0x\w+\[\'push\'\]\(_0x\w+\[\'shift\'\]\(\)\);\}+\s*\((_0x\w+),(-?0x\w+[^\)]+)\)~msi', $str, $ints)) {
            $ints = $ints[3];
        }

        if (preg_match('~(?:\(function\(\)\{var[^}]+\}\(\)\)\);|document\[_0x\w+\(0x\w+\)\]\(unescape\((?>\(?_0x\w+\(0x\w+\)+\+?)+;)~msi', $str, $code)) {
            $code = $code[0];
        }

        $i = 0;
        while (true) {
            $i++;
            try {
                $num = preg_replace_callback('~parseInt\(\_0x\w+\((\w+)\)\)~msi', function ($m) use ($array, $delta) {
                    $index = hexdec($m[1]) - $delta;
                    $item = $array[$index];
                    preg_match('~\d+~', $item, $num);
                    $num = isset($num[0]) ? (int)$num[0] : 0;
                    return $num;
                }, $ints);
                $num = preg_replace_callback('~0x\w+~msi', function ($m) {
                    return hexdec($m[0]);
                }, $num);
                $num = (int)trim(MathCalc::calcRawString(' ' . $num));
                if ($num === $expected) {
                    break;
                } else {
                    $item = array_shift($array);
                    $array[] = $item;
                }
            } catch (Exception $e) {
                $item = array_shift($array);
                $array[] = $item;
            }
        }

        $code = preg_replace_callback('~_0x\w+\((0x\w+)\)~', function($m) use ($array, $delta) {
            $index = hexdec($m[1]) - $delta;
            return '\'' . $array[$index] . '\'';
        }, $code);

        $code = str_replace(['\'+\'', '\'+(\'', '\')+(\'', ')\'+\''], '', $code);

        $code = preg_replace_callback('~unescape\(\'([^\']+)\'\)~', function($m) {
            $m[1] = str_replace('%', '', $m[1]);
            return '\'' . hex2bin($m[1]) . '\'';
        }, $code);

        $code = preg_replace_callback('~atob\(\'([^\']+)\'\)~', function($m) {
            return '\'' . base64_decode($m[1]) . '\'';
        }, $code);

        return $code;
    }

    /*************************************************************************************************************/
    /*                                          PYTHON deobfuscators                                             */
    /*************************************************************************************************************/

    private function deobfuscatePY_evalCompileStr($str, $matches)
    {
        return gzuncompress(base64_decode($matches[1]));
    }
}



/**
 * Class SharedMem work with shared-memory
 */
class SharedMem
{

    private $instance = null;

    /**
     * SharedMem constructor.
     * @param int $key
     * @param string $mode
     * @param int $permissions
     * @param int $size
     */
    public function __construct(int $key , string $mode , int $permissions , int $size)
    {
        $this->instance = shmop_open($key, $mode, $permissions, $size);
    }

    /**
     * @param int $offset
     * @param int $size
     * @param bool $trim
     * @param bool $json
     * @return false|mixed|string
     */
    public function read(int $offset, int $size, bool $trim = true, bool $json = true)
    {
        $res = shmop_read($this->instance, $offset, $size);
        if ($trim) {
            $res = rtrim($res, "\0");
        }
        if ($json) {
            $res = json_decode($res, true);
        }
        return $res;
    }

    /**
     * @param string $data
     * @return int
     */
    public function write(array $data): int
    {
        shmop_write($this->instance, str_repeat("\0", shmop_size($this->instance)), 0);
        if (function_exists('json_encode')) {
            $res = shmop_write($this->instance, json_encode($data), 0);
        } else {
            $res = shmop_write($this->instance, serialize($data), 0);
        }
        return $res;
    }

    /**
     * @return int
     */
    public function getSize(): int
    {
        return shmop_size($this->instance);
    }

    /**
     * @return bool
     */
    public function delete(): bool
    {
        return shmop_delete($this->instance);
    }

    /**
     * @param bool $delete
     */
    public function close(bool $delete = false)
    {
        if ($delete) {
            shmop_delete($this->instance);
        }

        if (version_compare(phpversion('shmop'), '8.0.0', '<')) {
            shmop_close($this->instance);
        }

        $this->instance = null;
    }

    /**
     * @return bool
     */
    public function isValid()
    {
        if (version_compare(phpversion('shmop'), '8.0.0', '>=')) {
            return is_object($this->instance);
        }

        return is_resource($this->instance);
    }

    /**
     * @return false|resource|Shmop
     */
    public function getInstance()
    {
        return $this->instance;
    }
}

/**
 * Class Factory.
 */
class Factory
{
    /**
     * @var Factory
     */
    private static $instance;
    /**
     * @var array
     */
    private static $config;

    /**
     * Factory constructor.
     *
     * @throws Exception
     */
    private function __construct()
    {

    }

    /**
     * Instantiate and return a factory.
     *
     * @return Factory
     * @throws Exception
     */
    public static function instance()
    {
        if (self::$instance === null) {
            self::$instance = new self();
        }

        return self::$instance;
    }

    /**
     * Configure a factory.
     *
     * This method can be called only once.
     *
     * @param array $config
     * @throws Exception
     */
    public static function configure($config = [])
    {
        if (self::isConfigured()) {
            throw new Exception('The Factory::configure() method can be called only once.');
        }

        self::$config = $config;
    }

    /**
     * Return whether a factory is configured or not.
     *
     * @return bool
     */
    public static function isConfigured()
    {
        return self::$config !== null;
    }

    /**
     * Creates and returns an instance of a particular class.
     *
     * @param string $class
     *
     * @param array $constructorArgs
     * @return mixed
     * @throws Exception
     */
    public function create($class, $constructorArgs = [])
    {
        if (!isset(self::$config[$class])) {
            throw new Exception("The factory is not contains configuration for '{$class}'.");
        }

        if (is_callable(self::$config[$class])) {
            return call_user_func(self::$config[$class], $constructorArgs);
        } else {
            return new self::$config[$class](...$constructorArgs);
        }
    }
}


class Template
{
    protected $html;
    protected $variables = [];

    /**
     * Template constructor.
     *
     * @param string $html
     */
    public function __construct($html)
    {
        $this->html = $html;
    }

    /**
     * @param $html
     *
     * @return Template
     */
    public static function create($html)
    {
        return new static($html);
    }

    /**
     * @param $key
     * @param $value
     */
    public function set($key, $value)
    {
        $this->variables[$key] = $value;
    }

    /**
     * @return string
     */
    public function render()
    {
        if (!empty($this->variables)) {
            foreach ($this->variables as $key => $value) {
                $this->html = str_replace("@@$key@@", $value, $this->html);
            }
        }

        return $this->html;
    }
}

class Translate
{
    const LANG_EN = 'EN';
    const LANG_RU = 'RU';

    /**
     * @var string
     */
    private static $lang = self::LANG_EN;

    /**
     * @param $lang
     */
    public static function setLang($lang)
    {
        self::$lang = $lang;
    }

    /**
     * @param string      $key
     * @param null|array  $params
     *
     * @param null|string $language
     *
     * @return string
     */
    public static function getStr($key, $params = null, $language = null)
    {
        if ($language && in_array($language, [self::LANG_RU, self::LANG_EN])) {
            $lang = $language;
        } else {
            $lang = self::$lang;
        }

        $result = ($lang === self::LANG_RU) ? TranslateList::RU[$key] : TranslateList::EN[$key];
        if ($params && is_array($params) && !empty($params)) {
            return vsprintf($result, $params);
        }

        return $result;
    }
}


class SendMessageRequest
{

    const API_URL = 'https://api.imunify360.com/api/send-message';
    const DEBUG_API_URL = 'http://127.0.0.1:8888';

    private $timeout = 10;
    private $debug = false;

    /**
     * SendMessageRequest constructor.
     * @param string $tag
     * @param int $timeout
     */
    public function __construct($tag, $timeout = 10, $debug = false)
    {
        $this->timeout = $timeout;
        $this->debug = $debug;
        $this->tag = $tag;
    }

    /**
     * @param $data
     * @return bool|array
     */
    public function request($data)
    {
        $json_data = json_encode($data);

        try {
            $ch = curl_init();
            curl_setopt($ch, CURLOPT_URL, $this->getApiUrl());
            curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
            curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);
            curl_setopt($ch, CURLOPT_TIMEOUT, $this->timeout);
            curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, $this->timeout);
            curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
            curl_setopt($ch, CURLOPT_HTTPHEADER, ['Content-Type: application/json']);
            curl_setopt($ch, CURLOPT_POSTFIELDS, $json_data);
            $result = curl_exec($ch);
            curl_close($ch);
        } catch (Exception $e) {
            fwrite(STDERR, 'Warning: [' . $this->tag . '] Curl: ' . $e->getMessage() . PHP_EOL);
            return false;
        }
        return @json_decode($result, true);
    }

    private function getApiUrl()
    {
        return $this->debug ? self::DEBUG_API_URL : self::API_URL;
    }
}


class ImLicense
{
    const VERIFY_FIELDS = ['id', 'status', 'group', 'limit', 'token_created_utc', 'token_expire_utc'];
    private $is_valid = false;
    private $raw_lic = [];
    private $valid_sign = '';
    private $pub_key = '';
    private $lic_path = '';
    private $pub_key_path = '';

    public function __construct($lic_path, $pub_key)
    {
        $this->lic_path = $lic_path;
        $this->pub_key_path = $pub_key;

        if (file_exists($lic_path) && filesize($lic_path) > 0 && is_readable($lic_path)) {
            $this->raw_lic = json_decode(file_get_contents($lic_path), true);
        }

        if (file_exists($pub_key) && filesize($pub_key) > 0 && is_readable($pub_key)) {
            $this->pub_key = file_get_contents($pub_key);
        }
        if ($this->isAllFieldsPresent()) {
            $this->findValidSignature();
        }
    }

    public function isValid()
    {
        return $this->is_valid;
    }

    public function getLicData()
    {
        if (!$this->is_valid || $this->valid_sign === '') {
            return false;
        }
        if (is_array($this->raw_lic) && $this->isAllFieldsPresent()) {
            return [
                'id'                => $this->raw_lic['id'],
                'status'            => $this->raw_lic['status'],
                'limit'             => $this->raw_lic['limit'],
                'token_created_utc' => $this->raw_lic['token_created_utc'],
                'token_expire_utc'  => $this->raw_lic['token_expire_utc'],
                'sign'              => $this->valid_sign,
            ];
        }
        return false;
    }

    private function isAllFieldsPresent()
    {
        if (!isset($this->raw_lic['signatures'])) {
            return false;
        }
        if ($this->pub_key === '') {
            return false;
        }
        foreach (self::VERIFY_FIELDS as $field) {
            if (!isset($this->raw_lic[$field])) {
                return false;
            }
        }
        return true;
    }

    private function findValidSignature()
    {
        foreach ($this->raw_lic['signatures'] as $sign) {
            $signature = base64_decode($sign);
            $content = '';
            foreach (self::VERIFY_FIELDS as $field) {
                $content .= $this->raw_lic[$field];
            }
            if (openssl_verify($content, $signature, $this->pub_key, OPENSSL_ALGO_SHA512)) {
                $this->valid_sign = $sign;
                $this->is_valid = true;
                return true;
            }
        }
        return false;
    }
}


class ResidentStats
{
    /**
     * counter of files scanned by notify
     * @var int
     */
    protected static $scanned_notify = 0;
    /**
     * counter of files scanned by upload
     * @var int
     */
    protected static $scanned_upload = 0;

    protected static $ai_version = '';
    protected static $sig_version = '';

    protected static $lic = null;
    protected static $request = null;

    protected static $last_send = 0;
    protected static $start_time = 0;

    protected static $upload_job_latency_sum = 0;
    protected static $upload_job_latency_count = 0;
    protected static $upload_job_latency_overflow_count = 0;

    protected static $white_count = 0;
    protected static $white_extended_count = 0;
    protected static $black_count = 0;
    protected static $injection_count = 0;
    protected static $cas_time = 0;

    /**
     * @param int $start_time
     */
    public static function setStartTime(int $start_time)
    {
        self::$start_time = $start_time;
    }

    /**
     * @param SendMessageRequest $request
     */
    public static function setRequest($request)
    {
        self::$request = $request;
    }

    /**
     * @param int $scanned_notify
     */
    public static function addScannedNotify(int $scanned_notify)
    {
        self::$scanned_notify += $scanned_notify;
    }

    /**
     * @param int $scanned_upload
     */
    public static function addScannedUpload(int $scanned_upload)
    {
        self::$scanned_upload += $scanned_upload;
    }

    /**
     * @param string $ai_version
     */
    public static function setAiVersion(string $ai_version)
    {
        self::$ai_version = $ai_version;
    }

    /**
     * @param string $sig_version
     */
    public static function setSigVersion(string $sig_version)
    {
        self::$sig_version = $sig_version;
    }

    /**
     * @param null $lic
     */
    public static function setLic($lic)
    {
        self::$lic = $lic;
    }


    /**
     * @param int $count
     */
    public static function setWhiteCount($count)
    {
        self::$white_count += $count;
    }

    /**
     * @param int $count
     */
    public static function setWhiteExtendedCount($count)
    {
        self::$white_extended_count += $count;
    }

    /**
     * @param int $count
     */
    public static function setBlackCount($count)
    {
        self::$black_count += $count;
    }

    /**
     * @param int $count
     */
    public static function setInjectionCount($count)
    {
        self::$injection_count += $count;
    }

    /**
     * @param float $cas_time
     */
    public static function addCasTime($cas_time)
    {
        self::$cas_time += $cas_time;
    }

    public static function collectUploadJobLatency($upload_job_latency)
    {
        if ($upload_job_latency > 10) {
            self::$upload_job_latency_overflow_count++;
        }
        self::$upload_job_latency_sum += $upload_job_latency;
        self::$upload_job_latency_count++;
    }

    public static function sendStatData()
    {
        if (!self::$lic->isValid()) {
            return;
        }
        $payload = self::collectProcStat();
        $payload['aibolit_version'] = self::$ai_version;
        $payload['signatures_version'] = self::$sig_version;
        $payload['running_time'] = floor(AibolitHelpers::currentTime() - self::$start_time);
        $payload['period'] = floor((self::$last_send === 0) ? $payload['running_time'] : AibolitHelpers::currentTime() - self::$last_send);
        $payload['files_upload'] = self::$scanned_upload;
        $payload['files_notify'] = self::$scanned_notify;
        $payload['upload_job_latency_avg'] = (self::$upload_job_latency_count != 0) ? round(self::$upload_job_latency_sum / self::$upload_job_latency_count, 2) : 0;
        $payload['upload_job_latency_overflow'] = self::$upload_job_latency_overflow_count;
        $payload['white_count'] = self::$white_count;
        $payload['white_extended_count'] = self::$white_extended_count;
        $payload['black_count'] = self::$black_count + self::$injection_count;
        $payload['cas_time'] = self::$cas_time;
        $license = self::$lic->getLicData();
        $data = [
            'method' => 'AIBOLIT_RESIDENT_STATS',
            'license' => $license,
            'payload' => $payload,
            'server_id' => $license['id'],
        ];
        $res = self::$request->request($data);
        self::$last_send = AibolitHelpers::currentTime();
        self::clearStats();
        if ($res['status'] === 'ok') {
            return true;
        } else {
            fwrite(STDERR, 'Warning: [AI-Resident] Invalid response: ' . json_encode($res) . PHP_EOL);
            return false;
        }
    }

    protected static function collectProcStat(): array
    {
        $data = [];
        $procStats = ProcStats::collectAll();
        $stat = $procStats[ProcStats::STAT];
        $status = $procStats[ProcStats::STATUS];
        $io = $procStats[ProcStats::IO];
        $data['utime'] =        (int)$stat[13];
        $data['stime'] =        (int)$stat[14];
        $data['vmrss'] =        (int)$status['VmRSS'];
        $data['vmhwm'] =        (int)$status['VmHWM'];
        $data['syscr'] =        (int)$io['syscr'];
        $data['read_bytes'] =   (int)$io['read_bytes'];
        $data['write_bytes'] =  (int)$io['write_bytes'];
        return $data;
    }

    protected static function clearStats()
    {
        self::$scanned_notify = 0;
        self::$scanned_upload = 0;
        self::$upload_job_latency_sum = 0;
        self::$upload_job_latency_count = 0;
        self::$upload_job_latency_overflow_count = 0;
        self::$white_count = 0;
        self::$white_extended_count = 0;
        self::$black_count = 0;
        self::$injection_count = 0;
        self::$cas_time = 0;
    }
}

